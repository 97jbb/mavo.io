"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(){function e(t,n,r){return n=void 0===n?1:n,r=r||n+1,1>=r-n?function(){if(arguments.length<=n||"string"===i.type(arguments[n]))return t.apply(this,arguments);var e,r=arguments[n];for(var s in r){var o=Array.from(arguments);o.splice(n,1,s,r[s]),e=t.apply(this,o)}return e}:e(e(t,n+1,r),n,r-1)}function t(e,t,n){for(var r in t){if(n){var s=i.type(n);if("own"===n&&!t.hasOwnProperty(r)||"array"===s&&-1===n.indexOf(r)||"regexp"===s&&!n.test(r)||"function"===s&&!n.call(t,r))continue}var o=Object.getOwnPropertyDescriptor(t,r);!o||o.writable&&o.configurable&&o.enumerable&&!o.get&&!o.set?e[r]=t[r]:(delete e[r],Object.defineProperty(e,r,o))}return e}var i=self.Bliss=t(function(e,t){
return"string"===i.type(e)?(t||document).querySelector(e):e||null},self.Bliss);t(i,{extend:t,overload:e,property:i.property||"_",sources:{},noop:function(){},$:function(e,t){return e instanceof Node||e instanceof Window?[e]:Array.from("string"==typeof e?(t||document).querySelectorAll(e):e||[])},type:function(e){if(null===e)return"null";if(void 0===e)return"undefined";var t=(Object.prototype.toString.call(e).match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase();return"number"==t&&isNaN(e)?"nan":t},defined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},create:function(e,t){return e instanceof Node?i.set(e,t):(1===arguments.length&&("string"===i.type(e)?t={}:(t=e,e=t.tag,t=i.extend({},t,function(e){return"tag"!==e}))),i.set(document.createElement(e||"div"),t))},each:function(e,t,i){i=i||{};for(var n in e)i[n]=t.call(e,n,e[n]);return i},ready:function(e){return e=e||document,new Promise(function(t,i){"loading"!==e.readyState?t():e.addEventListener("DOMContentLoaded",function(){
t()})})},Class:function(e){var t=["constructor","extends","abstract","static"].concat(Object.keys(i.classProps)),n=e.hasOwnProperty("constructor")?e.constructor:i.noop,r=function a(){if(e["abstract"]&&this.constructor===a)throw new Error("Abstract classes cannot be directly instantiated.");a["super"]&&a["super"].apply(this,arguments),n.apply(this,arguments)};r["super"]=e["extends"]||null,r.prototype=i.extend(Object.create(r["super"]?r["super"].prototype:Object),{constructor:r});var s=function(e){return this.hasOwnProperty(e)&&-1===t.indexOf(e)};if(e["static"]){i.extend(r,e["static"],s);for(var o in i.classProps)o in e["static"]&&i.classProps[o](r,e["static"][o])}i.extend(r.prototype,e,s);for(var o in i.classProps)o in e&&i.classProps[o](r.prototype,e[o]);return r.prototype["super"]=r["super"]?r["super"].prototype:null,r},classProps:{lazy:e(function(e,t,i){return Object.defineProperty(e,t,{get:function(){var e=i.call(this);return Object.defineProperty(this,t,{value:e,configurable:!0,enumerable:!0,
writable:!0}),e},set:function(e){Object.defineProperty(this,t,{value:e,configurable:!0,enumerable:!0,writable:!0})},configurable:!0,enumerable:!0}),e}),live:e(function(e,t,n){return"function"===i.type(n)&&(n={set:n}),Object.defineProperty(e,t,{get:function(){var e=this["_"+t],i=n.get&&n.get.call(this,e);return void 0!==i?i:e},set:function(e){var i=this["_"+t],r=n.set&&n.set.call(this,e,i);this["_"+t]=void 0!==r?r:e},configurable:n.configurable,enumerable:n.enumerable}),e})},include:function(){var e=arguments[arguments.length-1],t=2===arguments.length?arguments[0]:!1,n=document.createElement("script");return t?Promise.resolve():new Promise(function(t,r){i.set(n,{async:!0,onload:function(){t(),i.remove(n)},onerror:function(){r()},src:e,inside:document.head})})},fetch:function(e,n){if(!e)throw new TypeError("URL parameter is mandatory and cannot be "+e);var r=t({url:new URL(e,location),data:"",method:"GET",headers:{},xhr:new XMLHttpRequest},n);r.method=r.method.toUpperCase(),i.hooks.run("fetch-args",r),
"GET"===r.method&&r.data&&(r.url.search+=r.data),document.body.setAttribute("data-loading",r.url),r.xhr.open(r.method,r.url.href,r.async!==!1,r.user,r.password);for(var s in n)if(s in r.xhr)try{r.xhr[s]=n[s]}catch(o){self.console&&console.error(o)}"GET"===r.method||r.headers["Content-type"]||r.headers["Content-Type"]||r.xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");for(var a in r.headers)r.xhr.setRequestHeader(a,r.headers[a]);return new Promise(function(e,t){r.xhr.onload=function(){document.body.removeAttribute("data-loading"),0===r.xhr.status||r.xhr.status>=200&&r.xhr.status<300||304===r.xhr.status?e(r.xhr):t(i.extend(Error(r.xhr.statusText),{get status(){return this.xhr.status},xhr:r.xhr}))},r.xhr.onerror=function(){document.body.removeAttribute("data-loading"),t(i.extend(Error("Network Error"),{xhr:r.xhr}))},r.xhr.ontimeout=function(){document.body.removeAttribute("data-loading"),t(i.extend(Error("Network Timeout"),{xhr:r.xhr}))},r.xhr.send("GET"===r.method?null:r.data);
})},value:function(e){var t="string"!==i.type(e);return i.$(arguments).slice(+t).reduce(function(e,t){return e&&e[t]},t?e:self)}}),i.Hooks=new i.Class({add:function(e,t,i){this[e]=this[e]||[],this[e][i?"unshift":"push"](t)},run:function(e,t){this[e]=this[e]||[],this[e].forEach(function(e){e.call(t&&t.context?t.context:t,t)})}}),i.hooks=new i.Hooks;var n=i.property;i.Element=function(e){this.subject=e,this.data={},this.bliss={}},i.Element.prototype={set:e(function(e,t){e in i.setProps?i.setProps[e].call(this,t):e in this?this[e]=t:this.setAttribute(e,t)},0),transition:function(e,t){return t=+t||400,new Promise(function(n,r){if("transition"in this.style){var s=i.extend({},this.style,/^transition(Duration|Property)$/);i.style(this,{transitionDuration:(t||400)+"ms",transitionProperty:Object.keys(e).join(", ")}),i.once(this,"transitionend",function(){clearTimeout(o),i.style(this,s),n(this)});var o=setTimeout(n,t+50,this);i.style(this,e)}else i.style(this,e),n(this)}.bind(this))},fire:function(e,t){
var n=document.createEvent("HTMLEvents");return n.initEvent(e,!0,!0),this.dispatchEvent(i.extend(n,t))},unbind:e(function(e,t){(e||"").split(/\s+/).forEach(function(e){if(n in this&&(e.indexOf(".")>-1||!t)){e=(e||"").split(".");var i=e[1];e=e[0];var r=this[n].bliss.listeners=this[n].bliss.listeners||{};for(var s in r)if(!e||s===e)for(var o,a=0;o=r[s][a];a++)i&&i!==o.className||t&&t!==o.callback||(this.removeEventListener.call(this,s,o.callback,o.capture),a--)}else this.removeEventListener(e,t)},this)},0)},i.setProps={style:function(e){i.extend(this.style,e)},attributes:function(e){for(var t in e)this.setAttribute(t,e[t])},properties:function(e){i.extend(this,e)},events:function(e){if(e&&e.addEventListener){var t=this;if(e[n]&&e[n].bliss){var r=e[n].bliss.listeners;for(var s in r)r[s].forEach(function(e){t.addEventListener(s,e.callback,e.capture)})}for(var o in e)0===o.indexOf("on")&&(this[o]=e[o])}else if(arguments.length>1&&"string"===i.type(e)){var a=arguments[1],u=arguments[2];e.split(/\s+/).forEach(function(e){
this.addEventListener(e,a,u)},this)}else for(var c in e)i.events(this,c,e[c])},once:e(function(e,t){e=e.split(/\s+/);var i=this,n=function r(){return e.forEach(function(e){i.removeEventListener(e,r)}),t.apply(i,arguments)};e.forEach(function(e){i.addEventListener(e,n)})},0),delegate:e(function(e,t,i){this.addEventListener(e,function(e){e.target.closest(t)&&i.call(this,e)})},0,2),contents:function(e){(e||0===e)&&(Array.isArray(e)?e:[e]).forEach(function(e){var t=i.type(e);/^(string|number)$/.test(t)?e=document.createTextNode(e+""):"object"===t&&(e=i.create(e)),e instanceof Node&&this.appendChild(e)},this)},inside:function(e){e.appendChild(this)},before:function(e){e.parentNode.insertBefore(this,e)},after:function(e){e.parentNode.insertBefore(this,e.nextSibling)},start:function(e){e.insertBefore(this,e.firstChild)},around:function(e){e.parentNode&&i.before(this,e),(/^template$/i.test(this.nodeName)?this.content||this:this).appendChild(e)}},i.Array=function(e){this.subject=e},i.Array.prototype={
all:function(e){var t=$$(arguments).slice(1);return this[e].apply(this,t)}},i.add=e(function(e,t,n,r){n=i.extend({$:!0,element:!0,array:!0},n),"function"==i.type(t)&&(!n.element||e in i.Element.prototype&&r||(i.Element.prototype[e]=function(){return this.subject&&i.defined(t.apply(this.subject,arguments),this.subject)}),!n.array||e in i.Array.prototype&&r||(i.Array.prototype[e]=function(){var e=arguments;return this.subject.map(function(n){return n&&i.defined(t.apply(n,e),n)})}),n.$&&(i.sources[e]=i[e]=t,(n.array||n.element)&&(i[e]=function(){var t=[].slice.apply(arguments),r=t.shift(),s=n.array&&Array.isArray(r)?"Array":"Element";return i[s].prototype[e].apply({subject:r},t)})))},0),i.add(i.Array.prototype,{element:!1}),i.add(i.Element.prototype),i.add(i.setProps),i.add(i.classProps,{element:!1,array:!1});var r=document.createElement("_");i.add(i.extend({},HTMLElement.prototype,function(e){return"function"===i.type(r[e])}),null,!0)}(),function(e){if(Bliss&&!Bliss.shy){var t=Bliss.property;
if(e.add({clone:function(){var t=this.cloneNode(!0),i=e.$("*",t).concat(t);return e.$("*",this).concat(this).forEach(function(t,n,r){e.events(i[n],t),i[n]._.data=e.extend({},t._.data)}),t}},{array:!1}),Object.defineProperty(Node.prototype,t,{get:function o(){return Object.defineProperty(Node.prototype,t,{get:void 0}),Object.defineProperty(this,t,{value:new e.Element(this)}),Object.defineProperty(Node.prototype,t,{get:o}),this[t]},configurable:!0}),Object.defineProperty(Array.prototype,t,{get:function(){return Object.defineProperty(this,t,{value:new e.Array(this)}),this[t]},configurable:!0}),self.EventTarget&&"addEventListener"in EventTarget.prototype){var i=EventTarget.prototype.addEventListener,n=EventTarget.prototype.removeEventListener,r=function(e,t,i){return i.callback===e&&i.capture==t},s=function(){return!r.apply(this,arguments)};EventTarget.prototype.addEventListener=function(e,n,s){if(this&&this[t]&&this[t].bliss&&n){var o=this[t].bliss.listeners=this[t].bliss.listeners||{};if(e.indexOf(".")>-1){
e=e.split(".");var a=e[1];e=e[0]}o[e]=o[e]||[],0===o[e].filter(r.bind(null,n,s)).length&&o[e].push({callback:n,capture:s,className:a})}return i.call(this,e,n,s)},EventTarget.prototype.removeEventListener=function(e,i,r){if(this&&this[t]&&this[t].bliss&&i){var o=this[t].bliss.listeners=this[t].bliss.listeners||{};o[e]&&(o[e]=o[e].filter(s.bind(null,i,r)))}return n.call(this,e,i,r)}}self.$=self.$||e,self.$$=self.$$||e.$}}(Bliss),function(){function e(e,t){return e instanceof Node||e instanceof Window?[e]:[].slice.call("string"==typeof e?(t||document).querySelectorAll(e):e||[])}if(self.Element&&(Element.prototype.matches||(Element.prototype.matches=Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||null),Element.prototype.matches)){var t=self.Stretchy={selectors:{base:'textarea, select:not([size]), input:not([type]), input[type="'+"text url email tel".split(" ").join('"], input[type="')+'"]',
filter:"*"},script:document.currentScript||e("script").pop(),resize:function(e){if(t.resizes(e)){var i=getComputedStyle(e),n=0;if(!e.value&&e.placeholder){var r=!0;e.value=e.placeholder}var s=e.nodeName.toLowerCase();if("textarea"==s)e.style.height="0","border-box"==i.boxSizing?n=e.offsetHeight:"content-box"==i.boxSizing&&(n=-e.clientHeight),e.style.height=e.scrollHeight+n+"px";else if("input"==s){e.style.width="0","border-box"==i.boxSizing?n=e.offsetWidth:"padding-box"==i.boxSizing&&(n=e.clientWidth),e.scrollLeft=1e10;var o=Math.max(e.scrollLeft+n,e.scrollWidth-e.clientWidth);e.style.width=o+"px"}else if("select"==s){var a=document.createElement("_");a.textContent=e.options[e.selectedIndex].textContent,e.parentNode.insertBefore(a,e.nextSibling);var u;for(var c in i)/^(width|webkitLogicalWidth)$/.test(c)||(a.style[c]=i[c],/appearance$/i.test(c)&&(u=c));a.style.width="",a.offsetWidth>0&&(e.style.width=a.offsetWidth+"px",i[u]&&"none"===i[u]||(e.style.width="calc("+e.style.width+" + 2em)")),
a.parentNode.removeChild(a),a=null}r&&(e.value="")}},resizeAll:function(i){e(i||t.selectors.base).forEach(function(e){t.resize(e)})},active:!0,resizes:function(e){return e&&e.parentNode&&e.matches&&e.matches(t.selectors.base)&&e.matches(t.selectors.filter)},init:function(){t.selectors.filter=t.script.getAttribute("data-filter")||(e("[data-stretchy-filter]").pop()||document.body).getAttribute("data-stretchy-filter")||Stretchy.selectors.filter||"*",t.resizeAll()},$$:e};"loading"!==document.readyState?t.init():document.addEventListener("DOMContentLoaded",t.init);var i=function(e){t.active&&t.resize(e.target)};document.documentElement.addEventListener("input",i),document.documentElement.addEventListener("change",i),self.MutationObserver&&new MutationObserver(function(e){t.active&&e.forEach(function(e){"childList"==e.type&&Stretchy.resizeAll(e.addedNodes)})}).observe(document.documentElement,{childList:!0,subtree:!0})}}(),function(e,t){var i=self.Wysie=e.Class({constructor:function(n){var r=this;
i.all.push(this);var s=n.getAttribute("data-store")||"none";if(this.store="none"===s?null:s,this.id=Wysie.Node.normalizeProperty(n)||"wysie-"+i.all.length,this.autoEdit=i.has("autoedit",n),this.element=i.is("scope",n)?n:e(i.selectors.rootScope,n),this.element||(n.setAttribute("typeof",n.getAttribute("property")||""),n.removeAttribute("property"),this.element=n),this.element.classList.add("wysie-root"),t(i.selectors.property+", "+i.selectors.scope).concat([this.element]).forEach(function(e){i.is("autoMultiple",e)&&!e.hasAttribute("data-multiple")&&e.setAttribute("data-multiple","")}),this.wrapper=n.closest(".wysie-wrapper")||n,t(i.selectors.primitive).forEach(function(t){var i=e(Wysie.selectors.property,t)&&(Wysie.is("multiple",t)||null===Wysie.Primitive.getValueAttribute(t));i&&t.setAttribute("typeof","")}),this.wrapper===this.element&&i.is("multiple",n)){var o=this.element;this.element.matches("li, option")?o=o.parentNode:this.element.matches("td, tr, tbody, thead, tfoot")&&(o=o.closest("table")),
this.wrapper=e.create({around:o})}this.wrapper.classList.add("wysie-wrapper"),n.removeAttribute("data-store"),this.propertyNames=t(i.selectors.property,this.wrapper).map(function(e){return Wysie.Node.normalizeProperty(e)}).sort(function(e,t){return t.length-e.length}),this.needsEdit=!1,Wysie.hooks.run("init-tree-before",this),this.root=Wysie.Node.create(this.element,this),Wysie.hooks.run("init-tree-after",this),this.permissions=new Wysie.Permissions(null,this),this.ui={bar:e(".wysie-bar",this.wrapper)||e.create({className:"wysie-bar wysie-ui",start:this.wrapper,contents:{tag:"span",className:"status"}})},this.permissions.can(["edit","add","delete"],function(){r.ui.edit=e.create("button",{className:"edit",textContent:"Edit",onclick:function(e){return r.editing?r.done():r.edit()}}),r.ui.save=e.create("button",{className:"save",textContent:"Save",events:{click:function(e){return r.save()},"mouseenter focus":function(e){r.wrapper.classList.add("save-hovered"),r.unsavedChanges=r.calculateUnsavedChanges();
},"mouseleave blur":function(e){return r.wrapper.classList.remove("save-hovered")}}}),r.ui.revert=e.create("button",{className:"revert",textContent:"Revert",disabled:!0,events:{click:function(e){return r.revert()},"mouseenter focus":function(e){r.everSaved&&(r.wrapper.classList.add("revert-hovered"),r.unsavedChanges=r.calculateUnsavedChanges())},"mouseleave blur":function(e){return r.wrapper.classList.remove("revert-hovered")}}}),r.ui.editButtons=[r.ui.edit,r.ui.save,r.ui.revert],e.contents(r.ui.bar,r.ui.editButtons),r.autoEdit&&requestAnimationFrame(function(){return r.ui.edit.click()})},function(){e.remove(r.ui.editButtons),r.editing&&r.done()}),this.permissions.can(["delete"],function(){r.ui.clear=e.create("button",{className:"clear",textContent:"Clear",onclick:function(e){return r.clear()}}),r.ui.editButtons.push(r.ui.clear),r.ui.bar.appendChild(r.ui.clear)},function(){e.remove(r.ui.clear)}),this.store?(this.storage=new i.Storage(this),this.permissions.can("read",function(){return r.storage.load();
})):(this.permissions.on(["read","edit"]),this.root["import"](),e.fire(this.wrapper,"wysie:load")),this.needsEdit||this.permissions.off(["edit","add","delete"]),Wysie.hooks.run("init-end",this)},get data(){return this.getData()},getData:function(e){return this.root.getData(e)},toJSON:function(){var e=arguments.length<=0||void 0===arguments[0]?this.data:arguments[0];return i.toJSON(e)},render:function(e){i.hooks.run("render-start",{context:this,data:e}),e?(this.everSaved=!0,this.root.render(e.data||e)):this.root["import"](),this.unsavedChanges=!1},clear:function(){confirm("This will delete all your data. Are you sure?")&&(this.storage&&this.storage.clear(),this.root.clear())},edit:function(){this.editing=!0,this.root.edit(),e.events(this.wrapper,"mouseenter.wysie:edit mouseleave.wysie:edit",function(e){if(e.target.matches(".wysie-item-controls .delete")){var t=e.target.closest(i.selectors.item);t.classList.toggle("delete-hover","mouseenter"==e.type)}if(e.target.matches(i.selectors.item)){
e.target.classList.remove("has-hovered-item");var n=e.target.parentNode.closest(i.selectors.item);n&&n.classList.toggle("has-hovered-item","mouseenter"==e.type)}},!0),this.unsavedChanges=this.calculateUnsavedChanges()},calculateUnsavedChanges:function(){var e=!1;return this.walk(function(t){return t.unsavedChanges?(e=!0,!1):void 0}),e},done:function(){this.root.done(),e.unbind(this.wrapper,".wysie:edit"),this.editing=!1,this.unsavedChanges=!1},save:function(){this.root.save(),this.storage&&this.storage.save(),this.everSaved=!0,this.unsavedChanges=!1},revert:function(){this.root.revert()},walk:function(e){this.root.walk(e)},live:{editing:{set:function(e){this.wrapper.classList.toggle("editing",e),e?this.wrapper.setAttribute("data-editing",""):this.wrapper.removeAttribute("data-editing")}},unsavedChanges:function(e){this.wrapper.classList.toggle("unsaved-changes",e),this.ui&&this.ui.save&&(this.ui.save.disabled=!e,this.ui.revert.disabled=!this.everSaved||!e)},everSaved:function(e){this.ui&&this.ui.revert&&(this.ui.revert.disabled=!e);
}},"static":{all:[],toJSON:function(e){return null===e?"":"string"==typeof e?e:JSON.stringify(e,null,"	")},readable:function(e){return e&&e.replace(/([a-z])([A-Z])(?=[a-z])/g,function(e,t,i){return t+" "+i.toLowerCase()}).replace(/([a-z])[_\/-](?=[a-z])/g,"$1 ").replace(/^[a-z]/,function(e){return e.toUpperCase()})},identifier:function(e){return e+="",e&&e.replace(/\s+/g,"-").replace(/[^\w-]/g,"").toLowerCase()},queryJSON:function(t,i){return i&&t?e.value.apply(e,[t].concat(i.split("/"))):t},observe:function(t,i,n,r){var s="function"==e.type(n)?new MutationObserver(n):n,o=i?{attributes:!0,attributeFilter:[i],attributeOldValue:!!r}:{characterData:!0,childList:!0,subtree:!0,characterDataOldValue:!!r};return s.observe(t,o),s},toArray:function(e){return Array.isArray(e)?e:[e]},flatten:function(e){return Array.isArray(e)?e.reduce(function(e,t){return i.toArray(e).concat(i.flatten(t))},[]):[e]},is:function(e,t){return t.matches&&t.matches(i.selectors[e])},has:function(e,t){return t.matches&&t.matches(i.selectors.option(e));
},hooks:new e.Hooks}});!function(){var t=i.selectors={property:"[property], [itemprop]",specificProperty:function(e){return"[property="+e+"], [itemprop="+e+"]"},scope:"[typeof], [itemscope], [itemtype], .scope",multiple:"[multiple], [data-multiple], .multiple",required:"[required], [data-required], .required",formControl:"input, select, textarea",computed:".computed",item:".wysie-item",ui:".wysie-ui",option:function(e){return"["+e+"], [data-"+e+"], [data-wysie-options~='"+e+"'], ."+e},container:{li:"ul, ol",tr:"table",option:"select",dt:"dl",dd:"dl"}},n=t.arr=function(e){return e.split(/\s*,\s*/g)},r=t.not=function(e){return n(e).map(function(e){return":not("+e+")"}).join("")},s=t.or=function(e,t){return e+", "+t},o=t.and=function(e,t){return i.flatten(n(e).map(function(e){return n(t).map(function(t){return e+t})})).join(", ")},a=t.andNot=function(e,t){return o(e,r(t))};e.extend(i.selectors,{primitive:a(t.property,t.scope),rootScope:a(t.scope,t.property),output:s(t.specificProperty("output"),".output, .value"),
autoMultiple:o("li, tr, option",":only-of-type")})}(),e.proxy=e.classProps.proxy=e.overload(function(e,t,i){return Object.defineProperty(e,t,{get:function(){return this[i][t]},set:function(e){this[i][t]=e},configurable:!0,enumerable:!0}),e}),e.classProps.propagated=function(e,t){Wysie.toArray(t).forEach(function(t){var i=e[t];e[t]=function(){var e=i&&i.apply(this,arguments);this.propagate&&e!==!1&&this.propagate(t)}})},document.addEventListener("focus",function(e){t(".focus-within").forEach(function(e){return e.classList.remove("focus-within")});for(var i=e.target;i=i.parentNode;)i.classList&&i.classList.add("focus-within")},!0),e.ready().then(function(e){t("[data-store]").forEach(function(e){new Wysie(e)})}),Stretchy.selectors.filter=".wysie-editor:not([property])"}(Bliss,Bliss.$),function(e){var t=Wysie.Permissions=e.Class({constructor:function(e,t){this.triggers=[],this.wysie=t,this.set(e)},set:function(e){for(var t in e)this[t]=e[t]},on:function(e){var t=this;return Wysie.toArray(e).forEach(function(e){
return t[e]=!0}),this},off:function(e){var t=this;return e=Array.isArray(e)?e:[e],e.forEach(function(e){return t[e]=!1}),this},can:function(e,t,i){this.observe(e,!0,t),i&&this.observe(e,!1,i)},when:function(e){var t=this;return new Promise(function(i,n){t.can(e,i,n)})},observe:function(e,t,i){e=Array.isArray(e)?e:[e],this.is(e,t)&&i(),this.triggers.push({actions:e,value:t,callback:i,active:!0})},is:function(e,t){var i=this,n=e.map(function(e){return!!i[e]}).reduce(function(e,t){return e||t});return t?n:!n},changed:function(e,t,i){var n=this;i=!!i,t=!!t,t!=i&&(this.wysie&&this.wysie.wrapper.classList.toggle("can-"+e,t),this["_"+e]=t,this.triggers.forEach(function(t){var i=n.is(t.actions,t.value);t.active&&t.actions.indexOf(e)>-1&&i?(t.active=!1,t.callback()):i||(t.active=!0)}))},or:function(e){var i=this;return t.actions.forEach(function(t){i[t]=i[t]||e[t]}),this},"static":{actions:[],register:function(i,n){return Array.isArray(i)?void i.forEach(function(e){return t.register(e,n)}):(e.live(t.prototype,i,function(e,t){
n&&n.call(this,e,t),this.changed(i,e,t)}),void t.actions.push(i))}}});t.register("read"),t.register("login",function(e){e&&this.logout&&(this.logout=!1)}),t.register("logout",function(e){e&&this.login&&(this.login=!1)}),t.register("edit",function(e){e&&(this.add=this["delete"]=!0)}),t.register(["add","delete"],function(e){e||(this.edit=!1)})}(Bliss),function(e){var t=Wysie.Storage=e.Class({constructor:function(i){var n=this;this.wysie=i,this.urls=i.store.split(/\s+/).map(function(e){return"local"===e&&(e="#"+n.wysie.id+"-store"),new URL(e,location)}),this.backends=Wysie.flatten(this.urls.map(function(e){return t.Backend.create(e,n)})),this.backends[0].permissions=this.wysie.permissions.or(this.backends[0].permissions),this.ready=Promise.all(this.backends.map(function(e){return e.ready})),this.loaded=new Promise(function(e,t){n.wysie.wrapper.addEventListener("wysie:load",e)}),this.authControls={},this.permissions.can("login",function(){n.loginHash="#login"+(Wysie.all[0]===n.wysie?"":"-"+n.wysie.id),
n.authControls.login=e.create({tag:"a",href:n.loginHash,textContent:"Login",className:"login button",events:{click:function(e){e.preventDefault(),n.login()}},after:e(".status",n.wysie.bar)});var t;(t=function(){location.hash===n.loginHash&&(history.replaceState(null,document.title,new URL("",location)+""),n.login())})(),window.addEventListener("hashchange.wysie",t)},function(){e.remove(n.authControls.login),n.wysie.wrapper._.unbind("hashchange.wysie")}),this.wysie.wrapper.addEventListener("wysie:login.wysie",function(t){var i=e(".status",n.wysie.bar);i.innerHTML="",i._.contents(["Logged in to "+t.backend.id+" as ",{tag:"strong",innerHTML:t.name},{tag:"button",textContent:"Logout",className:"logout",events:{click:function(e){return t.backend.logout()}}}])}),this.wysie.wrapper.addEventListener("wysie:logout.wysie",function(t){e(".status",n.wysie.bar).textContent=""})},get getBackends(){return this.backends.filter(function(e){return!!e.get})},get putBackends(){return this.backends.filter(function(e){
return!!e.put})},get authBackends(){return this.backends.filter(function(e){return!!e.login})},proxy:{permissions:"wysie"},load:function(){var t=this;this.ready;this.inProgress="Loading";var i=this.getBackends[0];i&&i.ready.then(function(){return i.get()}).then(function(i){t.inProgress=!1,t.wysie.wrapper._.fire("wysie:load"),i&&"string"==e.type(i)&&(i=JSON.parse(i));var n=Wysie.queryJSON(i,t.param("root"));t.wysie.render(n)})["catch"](function(e){t.inProgress=!1,e.xhr&&404==e.xhr.status?t.wysie.render(""):(console.error(e),console.log(e.stack)),t.wysie.wrapper._.fire("wysie:load")})},save:function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?this.wysie.data:arguments[0];this.inProgress="Saving",Promise.all(this.putBackends.map(function(e){return e.login().then(function(){return e.put({name:e.filename,path:e.path,data:t})})})).then(function(){e.wysie.wrapper._.fire("wysie:save"),e.inProgress=!1})["catch"](function(t){e.inProgress=!1,t&&(console.error(t),console.log(t.stack));
})},login:function(){return this.authBackends[0]&&this.authBackends[0].login()},logout:function(){return this.authBackends[0]&&this.authBackends[0].logout()},clear:function(){this.save(null)},param:function(e){if(this.params=this.params||{},!(e in this.params)){var t="data-store-"+e;this.params[e]=this.wysie.wrapper.getAttribute(t)||this.wysie.element.getAttribute(t),this.wysie.wrapper.removeAttribute(t),this.wysie.element.removeAttribute(t)}return this.params[e]},live:{inProgress:function(t){if(t){e.create("div",{textContent:t+"…",className:"progress",inside:this.wysie.wrapper})}else e.remove(e(".progress",this.wysie.wrapper))}},"static":{isHash:function(e){return e.origin===location.origin&&e.pathname===location.pathname&&!!e.hash}}});t.Backend=e.Class({constructor:function(e,t){var i=this;this.url=e,this.storage=t,this.id=this.constructor.id,this.permissions=new Wysie.Permissions,Wysie.Permissions.actions.forEach(function(e){i.permissions.can(e,function(){i.storage.permissions.on(e)},function(){});
})},ready:Promise.resolve(),login:function(){return Promise.resolve()},logout:function(){return Promise.resolve()},proxy:{wysie:"storage"},"static":{create:function(e,i){var n=[];return t.Backend.backends.forEach(function(t){if(t&&t.test(e)){var r=new t(e,i);r.id=t.id,n.push(r)}}),n},backends:[],add:function(e,i,n){t.Backend[e]=i,t.Backend.backends[n?"unshift":"push"](i),i.id=e}}}),t.Backend.add("Element",e.Class({"extends":t.Backend,constructor:function(){this.permissions.on(["read","edit","save"]),this.element=e(this.url.hash)},get:function(){return Promise.resolve(this.element.textContent)},put:function(e){var t=e.data,i=void 0===t?"":t;return this.element.textContent=this.wysie.toJSON(i),Promise.resolve()},"static":{test:function(i){return t.isHash(i)?!!e(i.hash):void 0}}})),t.Backend.add("Remote",e.Class({"extends":t.Backend,constructor:function(){this.permissions.on(["read"])},get:function(){return e.fetch(this.url.href,{responseType:"json"}).then(function(e){return Promise.resolve(e.response);
})},"static":{test:function(e){return!t.isHash(e)}}})),t.Backend.add("Local",e.Class({"extends":t.Backend,constructor:function(){this.permissions.on(["read","edit","save"]),this.key=this.url+""},get:function(){return Promise.resolve(localStorage[this.key])},put:function(e){var t=e.data,i=void 0===t?"":t;return localStorage[this.key]=this.wysie.toJSON(i),Promise.resolve()},"static":{test:function(i){return t.isHash(i)?!e(i.hash):void 0}}}))}(Bliss),function(e,t){Wysie.Node=e.Class({"abstract":!0,constructor:function(e,t){if(!e||!t)throw new Error("Wysie.Node constructor requires an element argument and a wysie object");this.element=e,this.wysie=t,this.property=e.getAttribute("property"),this.type=Wysie.Scope.normalize(e),Wysie.hooks.run("node-init-end",this)},get isRoot(){return!this.property},get name(){return Wysie.readable(this.property||this.type).toLowerCase()},get data(){return this.getData()},getRelativeData:function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?{dirty:!0,
computed:!0,"null":!0}:arguments[0],i=this.getData(t);return self.Proxy&&i&&"object"===("undefined"==typeof i?"undefined":_typeof(i))&&(i=new Proxy(i,{get:function(i,n){if(n in i)return i[n];var r=e.walkUp(function(i){return n in i.properties?(i.expressions.updateAlso.add(e.expressions),i.properties[n].getRelativeData(t)):void 0});return void 0!==r?r:void 0},has:function(i,n){if(n in i)return!0;var r=e.walkUp(function(e){return n in e.properties?!0:void 0});return void 0!==r?r:(r=e.find(n),void 0!==r?(r=Array.isArray(r)?r.map(function(e){return e.getData(t)}).filter(function(e){return null!==e}):r.getData(t),i[n]=r,!0):void 0)},set:function(e,t,i){throw Error("You can’t set data via expressions.")}})),i},walk:function(e){var t=function i(t){var n=e(t);n!==!1&&t.propagate&&t.propagate(i)};t(this)},walkUp:function(e){for(var t=this;t=t.parentScope;){var i=e(t);if(void 0!==i)return i}},call:function(e){for(var t=arguments.length,i=Array(t>1?t-1:0),n=1;t>n;n++)i[n-1]=arguments[n];return i=i||[],
"string"==typeof e?this[e].apply(this,_toConsumableArray(i)):e.apply(this,[this].concat(_toConsumableArray(i)))},edit:function(){this.propagate(function(e){return e[e.preEdit?"preEdit":"edit"]()})},propagated:["save","revert","done","import"],toJSON:Wysie.prototype.toJSON,"static":{create:function(e,t,i){var n;return Wysie.is("multiple",e)&&!i?new Wysie.Collection(e,t):(n=Wysie.Unit).create.apply(n,arguments)},normalizeProperty:function(e){var t=e.getAttribute("property")||e.getAttribute("itemprop");return!t&&e.hasAttribute("property")&&(t=e.name||e.id||e.classList[0]),t&&e.setAttribute("property",t),t}}})}(Bliss,Bliss.$),function(e,t){Wysie.Unit=e.Class({"abstract":!0,"extends":Wysie.Node,constructor:function(e,t,i){this.constructor.all.set(this.element,this),this.collection=i,this.collection&&(this.scope=this.parentScope=this.collection.parentScope),this.computed=Wysie.is("computed",this.element),this.required=Wysie.is("required",this.element),Wysie.hooks.run("unit-init-end",this)},get closestCollection(){
return this.collection?this.collection:this.walkUp(function(e){return e.collection?e.collection:void 0})||null},isDeleted:function(){this.deleted;return this.deleted?!0:!!this.parentScope&&this.parentScope.isDeleted()},getData:function(e){e=e||{};var t=function(t){return!t.everSaved&&!e.dirty||t.deleted&&e.dirty||t.computed&&!e.computed||t.placeholder};return t(this)?null:void this.walkUp(function(e){return t(e)?null:void 0})},live:{deleted:function(i){var n=this;this.element.classList.toggle("deleted",i),i?(this.elementContents=document.createDocumentFragment(),t(this.element.childNodes).forEach(function(e){n.elementContents.appendChild(e)}),e.contents(this.element,["Deleted "+this.name,{tag:"button",textContent:"Undo",events:{click:function(e){return n.deleted=!1}}}]),this.element.classList.remove("delete-hover")):this.deleted&&(this.element.textContent="",this.element.appendChild(this.elementContents),this._deleted=!1,e.fire(this.element,"wysie:datachange",{unit:this.collection,wysie:this.wysie,
action:"undelete",item:this}))},unsavedChanges:function(e){return this.placeholder&&(e=!1),this.element.classList.toggle("unsaved-changes",e),e},placeholder:function(e){this.element.classList.toggle("placeholder",e)}},"static":{get:function(e,t){var i=Wysie.Scope.all.get(e);return t||!i?Wysie.Primitive.all.get(e):i},create:function(e,t,i){if(!e||!t)throw new TypeError("Wysie.Unit.create() requires an element argument and a wysie object");return new(Wysie[Wysie.is("scope",e)?"Scope":"Primitive"])(e,t,i)}}})}(Bliss,Bliss.$),function(e,t){var i=Wysie.Expression=e.Class({constructor:function(e){this.expression=e},eval:function(e){this.oldValue=this.value,Wysie.hooks.run("expression-eval-beforeeval",this);try{this["function"]||(this["function"]=this.createFunction()),this.value=this["function"](e)}catch(t){Wysie.hooks.run("expression-eval-error",{context:this,exception:t}),this.value=i.ERROR}return this.value},toString:function(){return"=("+this.expression+")"},createFunction:function(){var e=this.expression;
return/^if\([\S\s]+\)$/i.test(e)&&(e=e.replace(/^if\(/,"iff(")),e=e.replace(i.simpleOperation,function(e,t,i,n){var r="("+Wysie.Functions.operators[i]+"("+t+", "+n+"))";return r}),i.simpleOperation.lastIndex=0,new Function("data","with(Wysie.Functions._Trap)\n				with(data) {\n					return "+e+";\n				}")},live:{expression:function(e){e=e.trim();this["function"]=null}},"static":{ERROR:"N/A",lazy:{simpleOperation:function(){var e=Object.keys(Wysie.Functions.operators).map(function(e){return e.replace(/[|*+]/g,"\\$&")}).join("|"),t="\\s*(\\b[\\w.]+\\b)\\s*";return RegExp("(?:^|\\()"+t+"("+e+")"+t+"(?:$|\\))","g")}}}});!function(){var t=Wysie.Expression.Text=e.Class({constructor:function(e){this.node=this.element=e.node,3===this.node.nodeType&&(this.element=this.node.parentNode,this.node.previousElementSibling||this.node.nextElementSibling||(this.node=this.element,this.element.normalize())),this.attribute=e.attribute||null,this.all=e.all,this.expression=this.text.trim(),this.template=this.tokenize(this.expression),
Wysie.hooks.run("expressiontext-init-end",this),t.elements.set(this.element,[].concat(_toConsumableArray(t.elements.get(this.element)||[]),[this]))},get text(){return this.attribute?this.node.getAttribute(this.attribute):this.node.textContent},set text(e){this.oldText=this.text,this.primitive&&"marginal_cost"==this.primitive.property,Wysie.Primitive.setValue(this.node,e,this.attribute)},update:function(e){var i=this;this.value=[],this.data=e,this.text=this.template.map(function(n){if(n instanceof Wysie.Expression){var r={context:i,expr:n};return Wysie.hooks.run("expressiontext-update-beforeeval",r),r.value=r.expr.eval(e),Wysie.hooks.run("expressiontext-update-aftereval",r),void 0===r.value||null===r.value?(i.value.push(""),""):(i.value.push(r.value),"number"!=typeof r.value||i.attribute?Array.isArray(r.value)&&(r.value=r.value.join(", ")):r.value=t.formatNumber(r.value),r.value)}return i.value.push(n),n}).join(""),this.primitive&&1===this.template.length&&"number"==typeof this.value[0]&&(this.primitive.datatype="number"),
this.value=this.value.join(""),this.primitive&&(this.attribute||Wysie.Primitive.setValue(this.element,this.value,"content"))},tokenize:function(e){var i,n=this.expressionRegex,r=[],s=0;for(n.lastIndex=0;null!==(i=n.exec(e));){i.index>s&&r.push(e.substring(s,i.index)),s=n.lastIndex=t.findEnd(e.slice(i.index))+i.index+1;var o=e.slice(i.index+1,s-1);r.push(new Wysie.Expression(o))}return s<e.length&&r.push(e.substring(s)),r},lazy:{},proxy:{scope:"all",expressionRegex:"all"},"static":{elements:new WeakMap,findEnd:function(e){for(var t,i,n=[],r="\"'`",s="([{",o=")]}",a=0;e[a];a++){var u=e[a];if(t)u!==t||i||(t="");else if(!i&&r.indexOf(u)>-1)t=u;else if(s.indexOf(u)>-1)n.push(u);else{var c=n[n.length-1];if(u===o[s.indexOf(c)]&&n.pop(),0===n.length)break}i="\\"==u}return a},formatNumber:function(){var e=new Intl.NumberFormat("en-US",{maximumFractionDigits:2});return function(t){return t===1/0||t===-(1/0)?0>t?"-∞":"∞":e.format(t)}}(),lazy:{rootFunctionRegExp:function(){return RegExp("^=\\s*(?:"+Wysie.Expressions.rootFunctions.join("|")+")\\($","i");
}}}})}(),function(){var i=Wysie.Expressions=e.Class({constructor:function(e){this.scope=e,this.scope.expressions=this,this.all=[],Wysie.hooks.run("expressions-init-start",this),this.traverse(),this.updateAlso=new Set},init:function(){var e=this;this.all.length>0&&(this.lastUpdated=0,this.update(),this.scope.element.addEventListener("wysie:datachange",function(t){return e.update()}),this.THROTTLE=0,this.scope.wysie.wrapper.addEventListener("wysie:load",function(t){setTimeout(function(){return e.THROTTLE=25},100)}))},update:function n(){var e=this;if(!this.scope.isDeleted()){if(this.THROTTLE>0){var i=performance.now()-this.lastUpdated;if(clearTimeout(n.timeout),this.lastUpdated&&i<this.THROTTLE)return void(n.timeout=setTimeout(function(){return e.update()},this.THROTTLE-i))}var r={context:this,data:this.scope.getRelativeData()};Wysie.hooks.run("expressions-update-start",r),t(this.all).forEach(function(e){return e.update(r.data)}),this.THROTTLE>0&&(this.lastUpdated=performance.now()),this.updateAlso.forEach(function(e){
return e.update()})}},extract:function(e,t){this.expressionRegex.lastIndex=0,this.expressionRegex.test(t?t.value:e.textContent)&&this.all.push(new Wysie.Expression.Text({node:e,attribute:t&&t.name,all:this}))},traverse:function(e){var n=this;e=e||this.scope.element,e.matches&&e.matches(i.escape)||(3===e.nodeType&&this.extract(e,null),e!=this.scope.element&&Wysie.is("scope",e)||(t(e.attributes).forEach(function(t){return n.extract(e,t)}),t(e.childNodes).forEach(function(e){return n.traverse(e)})))},lazy:{expressionRegex:function(){var e="(?:"+this.scope.wysie.propertyNames.join("|")+")";return RegExp(["\\[[\\S\\s]*?"+e+"[\\S\\s]*?\\]","{\\s*"+e+"\\s*}","\\${[\\S\\s]+?}"].join("|"),"gi")}},"static":{THROTTLE:0,escape:".ignore-expressions",lazy:{rootFunctions:function(){return[].concat(_toConsumableArray(Object.keys(Wysie.Functions)),_toConsumableArray(Object.getOwnPropertyNames(Math)),["if",""])}}}})}(),Wysie.hooks.add("scope-init-start",function(){new Wysie.Expressions(this)}),Wysie.hooks.add("scope-init-end",function(){
this.expressions.init()})}(Bliss,Bliss.$),function(){function e(e,t){return e=Array.isArray(e)?e:t?$$(t):[e],e.filter(function(e){return!isNaN(e)}).map(function(e){return+e})}function t(t,n){var r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];return n.length<2?function(e){return Array.isArray(e)?e.map(n):n(e)}:(r.symbol&&(i.operators[r.symbol]=t),i[t]=function(){for(var t=arguments.length,i=Array(t),s=0;t>s;s++)i[s]=arguments[s];return 1===i.length&&(i=[].concat(_toConsumableArray(i),[r.identity])),i.reduce(function(t,i){return Array.isArray(i)?("number"==typeof r.identity&&(i=e(i)),Array.isArray(t)?[].concat(_toConsumableArray(i.map(function(e,i){return n(void 0===t[i]?r.identity:t[i],e)})),_toConsumableArray(t.slice(i.length))):i.map(function(e){return n(t,e)})):("number"==typeof r.identity&&(i=+i),Array.isArray(t)?t.map(function(e){return n(e,i)}):n(t,i))})})}var i=Wysie.Functions={operators:{},sum:function(t){return e(t,arguments).reduce(function(e,t){return+e+(+t||0)},0);
},average:function(t){return t=e(t,arguments),t.length&&i.sum(t)/t.length},min:function(t){var i;return(i=Math).min.apply(i,_toConsumableArray(e(t,arguments)))},max:function(t){var i;return(i=Math).max.apply(i,_toConsumableArray(e(t,arguments)))},count:function(e){return Wysie.toArray(e).filter(function(e){return null!==e&&e!==!1}).length},round:function(e,t){return e&&t&&isFinite(e)?+e.toLocaleString("en-US",{useGrouping:!1,maximumFractionDigits:t}):Math.round(e)},iff:function(e,t){var i=arguments.length<=2||void 0===arguments[2]?"":arguments[2];return e?t:i}};t("not",function(e){return function(e){return!e}}),t("multiply",function(e,t){return e*t},{identity:1,symbol:"*"}),t("divide",function(e,t){return e/t},{identity:1,symbol:"/"}),t("add",function(e,t){return+e+ +t},{symbol:"+"}),t("subtract",function(e,t){return e-t},{symbol:"-"}),t("lte",function(e,t){return t>=e},{symbol:"<="}),t("lt",function(e,t){return t>e},{symbol:"<"}),t("gte",function(e,t){return e>=t},{symbol:">="}),t("gt",function(e,t){
return e>t},{symbol:">"}),t("eq",function(e,t){return e==t},{symbol:"=="}),t("and",function(e,t){return!!e&&!!t},{identity:!0,symbol:"&&"}),t("or",function(e,t){return!!e||!!t},{identity:!1,symbol:"||"});var n={average:"avg",iff:"iff IF",subtract:"minus",multiply:"mult product",divide:"div",lt:"lessThan smaller",gt:"moreThan greater greaterThan bigger",eq:"equal equality"};for(name in n)n[name].split(/\s+/g).forEach(function(e){return i[e]=i[name]});self.Proxy&&(Wysie.Functions._Trap=new Proxy(i,{get:function(e,t){if(t in e)return e[t];var i=t.toLowerCase&&t.toLowerCase();return i&&e.hasOwnProperty(i)?e[i]:t in Math||i in Math?Math[t]||Math[i]:t in self?self[t]:t},has:function(e,t){return"data"!=t}}))}(),function(e,t){var i=Wysie.Scope=e.Class({"extends":Wysie.Unit,constructor:function(e,n,r){var s=this;if(this.properties={},this.scope=this,Wysie.hooks.run("scope-init-start",this),Wysie.Primitive.getValueAttribute(this.element)){var o=this.properties[this.property]=new Wysie.Primitive(this.element,this.wysie);
o.scope=o.parentScope=this}t(Wysie.selectors.property,this.element).forEach(function(e){var t=e.getAttribute("property");if(s.contains(e)){var n=s.properties[t];if(n){var r=n;n instanceof Wysie.Collection||(r=new Wysie.Collection(n.element,s.wysie),r.parentScope=s,s.properties[t]=n.collection=r,r.add(n)),!r.mutable&&Wysie.is("multiple",e)&&(r.mutable=!0),r.add(e)}else{var o=Wysie.Node.create(e,s.wysie);o.scope=o instanceof i?o:s,o.parentScope=s,s.properties[t]=o}}}),Wysie.hooks.run("scope-init-end",this)},get propertyNames(){return Object.keys(this.properties)},getData:function(t){t=t||{};var i=this["super"].getData.call(this,t);return void 0!==i?i:(i={},this.propagate(function(e){if((!e.computed||t.computed)&&!(e.property in i)){var n=e.getData(t);(null!==n||t["null"])&&(i[e.property]=n)}}),t.dirty||e.extend(i,this.unhandled),i)},find:function(e){if(this.property==e)return this;if(e in this.properties)return this.properties[e].find(e);for(var t in this.properties){var i=this.properties[t].find(e);
if(void 0!==i)return i}},propagate:function(t){var i=arguments;e.each(this.properties,function(e,t){t.call.apply(t,i)})},save:function(){return this.placeholder?!1:(this.everSaved=!0,void(this.unsavedChanges=!1))},done:function(){e.unbind(this.element,".wysie:edit")},"import":function(){this.everSaved=!0},propagated:["save","done","import","clear"],render:function(t){var i=this;return t?(t=t.isArray?t[0]:t,this.unhandled=e.extend({},t,function(e){return!(e in i.properties)}),this.propagate(function(e){e.render(t[e.property])}),void this.save()):void this.clear()},contains:function(e){return e instanceof Wysie.Unit?e.parentScope===this:e.parentNode&&this.element===e.parentNode.closest(Wysie.selectors.scope)},"static":{all:new WeakMap,normalize:function(e){if(Wysie.is("scope",e)){var t=e.getAttribute("typeof")||e.getAttribute("itemtype")||"Item";return e.setAttribute("typeof",t),t}return null}}})}(Bliss,Bliss.$),function(e,t){var i=!1,n=Wysie.Primitive=e.Class({"extends":Wysie.Unit,constructor:function(i,r,s){
var o=this;this.attribute=n.getValueAttribute(this.element),this.attribute||this.element.normalize(),this.datatype=n.getDatatype(this.element,this.attribute);var a=Wysie.Expression.Text.elements.get(this.element),u=a&&a.filter(function(e){return e.attribute==o.attribute})[0];if(u&&(u.primitive=this,this.computed=!0),Wysie.is("formControl",this.element)?(this.editor=this.element,this.edit()):this.editor||(this.editor=t(this.element.children).filter(function(e){return e.matches(Wysie.selectors.formControl)&&!e.matches(Wysie.selectors.property)})[0],e.remove(this.editor)),this.exposed||this.computed||(this.wysie.needsEdit=!0),this.templateValue=this.value,this["default"]=this.element.getAttribute("data-default"),this.observer=Wysie.observe(this.element,this.attribute,function(e){if(o.attribute){var t=o.value;e[e.length-1].oldValue!=t&&o.update(t)}else(!o.wysie.editing||o.computed)&&o.oldValue!=o.value&&o.update(o.value)},!0),this.computed||""===this["default"]?this["default"]=this.templateValue:(null===this["default"]&&(this["default"]=this.editor?this.editorValue:this.emptyValue),
this.value=this["default"]),this.update(this.value),this.collection){var c=function(t){o.unobserve();var i=e.remove(e(Wysie.selectors.ui,o.element)),n=t();return e.inside(i,o.element),o.observe(),n};["textContent","innerHTML"].forEach(function(e){var t=Object.getOwnPropertyDescriptor(Node.prototype,e);Object.defineProperty(o.element,e,{get:function(){var e=this;return c(function(){return t.get.call(e)})},set:function(e){var i=this;c(function(){return t.set.call(i,e)})}})})}this.initialized=!0},get value(){if(this.editing){var e=this.editorValue;return""===e?null:e}return n.getValue(this.element,this.attribute,this.datatype)},set value(e){this.editing&&document.activeElement!=this.editor&&(this.editorValue=e),this.oldValue=this.value,(!this.editing||this.attribute)&&("number"!=this.datatype||this.attribute?n.setValue(this.element,e,this.attribute,this.datatype):(n.setValue(this.element,e,"content",this.datatype),n.setValue(this.element,Wysie.Expression.Text.formatNumber(e),null,this.datatype))),
(Wysie.is("formControl",this.element)||!this.attribute)&&this.update(e),this.unsavedChanges=this.wysie.unsavedChanges=!0},get editorValue(){if(this.editor){if(this.editor.matches(Wysie.selectors.formControl))return n.getValue(this.editor,void 0,this.datatype);var t=e(Wysie.selectors.output+", "+Wysie.selectors.formControl,this.editor);if(t)return n.all.has(t)?n.all.get(t).value:n.getValue(t)}},set editorValue(t){if(this.editor)if(this.editor.matches(Wysie.selectors.formControl))n.setValue(this.editor,t);else{var i=e(Wysie.selectors.output+", "+Wysie.selectors.formControl,this.editor);i&&(n.all.has(i)?n.all.get(i).value=t:n.setValue(i,t))}},get exposed(){return this.editor===this.element},getData:function(e){e=e||{};var t=this["super"].getData.call(this,e);if(void 0!==t)return t;var t=e.dirty||this.exposed?this.value:this.savedValue;return e.dirty||""!==t?t:null},update:function(t){t=t||0===t?t:"",this.empty=""===t,this.humanReadable&&this.attribute&&(this.element.textContent=this.humanReadable(t)),
this.initialized&&(this.oldValue=this.value,e.fire(this.element,"wysie:datachange",{property:this.property,value:t,wysie:this.wysie,node:this,dirty:this.editing,action:"propertychange"}))},save:function(){return this.placeholder?!1:(this.savedValue=this.value,this.everSaved=!0,void(this.unsavedChanges=!1))},done:function(){this.unobserve(),this.popup?this.hidePopup():this.attribute||this.exposed||!this.editing||(e.remove(this.editor),this.element.textContent=this.editorValue),this.exposed||(this.editing=!1),null!==this.element._.data.prevTabindex?this.element.tabIndex=this.element._.data.prevTabindex:this.element.removeAttribute("tabindex"),this.element._.unbind(".wysie:edit .wysie:preedit .wysie:showpopup"),this.observe()},revert:function(){this.unsavedChanges&&void 0!==this.savedValue&&(this.value=this.savedValue,this.unsavedChanges=!1)},preEdit:function(){var e=this;if(!this.computed){if(this.empty&&!this.attribute)return void this.edit();var t;this.element._.events({"click.wysie:preedit":function(t){
return e.edit()},"focus.wysie:preedit":function(t){e.edit(),e.popup||e.editor.focus()},"click.wysie:edit":function(t){e.exposed||t.preventDefault()}}),this.attribute||this.element._.events({"mouseenter.wysie:preedit":function(i){clearTimeout(t),t=setTimeout(function(){return e.edit()},150)},"mouseleave.wysie:preedit":function(e){clearTimeout(t)}}),this.element._.data.prevTabindex=this.element.getAttribute("tabindex"),this.element.tabIndex=0}},initEdit:function(){var i=this;if(this.element.hasAttribute("data-input")){var r=this.element.getAttribute("data-input");r&&(this.editor=e.clone(e(r)),Wysie.is("formControl",this.editor)||(e(Wysie.selectors.output,this.editor)?(this.editor.setAttribute("data-store","none"),new Wysie(this.editor)):this.editor=null))}if(!this.editor){var s=n.getMatch(this.element,n.editors);s.create&&e.extend(this,s,function(e){return"create"!=e});var o=s.create||s;this.editor=e.create("function"===e.type(o)?o.call(this):o),this.editorValue=this.value}if(this.editor._.events({
"input change":function(e){var t=i.wysie.unsavedChanges;i.value=i.editorValue,i.exposed&&!i.wysie.editing&&i.wysie.permissions.save&&i.scope.everSaved&&(i.unsavedChanges=!1,i.wysie.unsavedChanges=t,"change"==e.type&&(i.save(),i.wysie.storage.save(),i.wysie.unsavedChanges=i.wysie.calculateUnsavedChanges()))},focus:function(e){i.editor.select&&i.editor.select()},keyup:function(e){(i.popup&&13==e.keyCode||27==e.keyCode)&&(i.popup.contains(document.activeElement)&&i.element.focus(),e.stopPropagation(),i.hidePopup())},"wysie:datachange":function(t){"output"===t.property&&(t.stopPropagation(),e.fire(i.editor,"input"))}}),"placeholder"in this.editor&&(this.editor.placeholder="("+this.label+")"),!this.exposed){var a=/^data-input-/i;if(t(this.element.attributes).forEach(function(e){a.test(e.name)&&this.editor.setAttribute(e.name.replace(a,""),e.value)},this),this.attribute){this.element.classList.add("using-popup"),this.popup=this.popup||e.create("div",{className:"wysie-popup",hidden:!0,contents:[this.label+":",this.editor]
}),this.editor.matches("select")&&(this.editor.size=Math.min(10,this.editor.children.length));var u=function(e){i.popup.contains(e.target)||i.element.contains(e.target)||i.hidePopup()};this.showPopup=function(){e.unbind([this.element,this.popup],".wysie:showpopup"),this.popup._.after(this.element);var t=this.element.offsetLeft,i=this.element.offsetTop+this.element.offsetHeight;this.popup._.style({top:i+"px",left:t+"px"}),this.popup._.removeAttribute("hidden"),e.events(document,"focus click",u,!0)},this.hidePopup=function(){var t=this;e.unbind(document,"focus click",u,!0),this.popup.setAttribute("hidden",""),setTimeout(function(){e.remove(t.popup)},400),e.events(this.element,"focus.wysie:showpopup click.wysie:showpopup",function(e){t.showPopup()},!0)}}}this.popup||this.editor.classList.add("wysie-editor"),this.initEdit=null},edit:function(){this.computed||this.editing||(this.element._.unbind(".wysie:preedit"),this.initEdit&&this.initEdit(),this.popup&&this.showPopup(),this.attribute||this.editor.parentNode==this.element||this.exposed||(this.editorValue=this.value,
this.element.textContent="",this.exposed||this.element.appendChild(this.editor)),this.editing=!0)},clear:function(){this.value=this.emptyValue},"import":function(){this.computed||(this.value=this.templateValue)},render:function(e){Array.isArray(e)&&(e=e[0]),"object"===("undefined"==typeof e?"undefined":_typeof(e))&&(e=e[this.property]),this.value=void 0===e?this.emptyValue:e,this.save()},find:function(e){return this.property==e?this:void 0},observe:function(){Wysie.observe(this.element,this.attribute,this.observer)},unobserve:function(){this.observer.disconnect()},lazy:{label:function(){return Wysie.readable(this.property)},emptyValue:function(){switch(this.datatype){case"boolean":return!1;case"number":return 0}return""}},live:{empty:function(t){var i=!(""!==t&&null!==t||this.attribute&&e(Wysie.selectors.property,this.element));this.element.classList.toggle("empty",i)},editing:function(e){this.element.classList.toggle("editing",e)},computed:function(e){this.element.classList.toggle("computed",e);
},datatype:function(e){n.getValue.cache&&n.getValue.cache["delete"](this.element)}},"static":{all:new WeakMap,getMatch:function(e,t){var i=null;for(var n in t)e.matches(n)&&(i=t[n]);return i},getValueAttribute:function r(e){var t=(r.cache=r.cache||new WeakMap).get(e);return(void 0===t||i)&&(t=e.getAttribute("data-attribute")||n.getMatch(e,n.attributes),t&&(t.humanReadable&&n.all.has(e)&&(n.all.get(e).humanReadable=t.humanReadable),t=t.value||t),t&&"null"!==t||(t=null),r.cache.set(e,t)),t},getDatatype:function s(e,t){var r=(s.cache=s.cache||new WeakMap).get(e);if(void 0===r||i){if(r=e.getAttribute("datatype"),!r)for(var o in n.datatypes)e.matches(o)&&(r=n.datatypes[o][t]);r=r||"string",s.cache.set(e,r)}return r},getValue:function o(e,t,r){var s=(o.cache=o.cache||new WeakMap).get(e);return(!s||i)&&(t=t||null===t?t:n.getValueAttribute(e),r=r||n.getDatatype(e,t),s=function(){var i;switch(i=t in e&&n.useProperty(e,t)?e[t]:t?e.getAttribute(t):e.getAttribute("content")||e.textContent||null,r){
case"number":return+i;case"boolean":return!!i;default:return i}},o.cache.set(e,s)),s()},setValue:function(e,t,i){if(null!==i&&(i=i||n.getValueAttribute(e)),i in e&&n.useProperty(e,i)&&e[i]!=t)try{e[i]=t}catch(r){}i?e.getAttribute(i)!=t&&e.setAttribute(i,t):e.textContent=t},useProperty:function(e,t){return["href","src"].indexOf(t)>-1?!1:"http://www.w3.org/2000/svg"==e.namespaceURI?!1:!0}}});n.attributes={"img, video, audio":"src","a, link":"href","select, input, textarea, meter, progress":"value","input[type=checkbox]":"checked",time:{value:"datetime",humanReadable:function(e){var t=new Date(e);if(!e||isNaN(t))return"(No "+this.label+")";var i={date:{day:"numeric",month:"short",year:"numeric"},month:{month:"long"},time:{hour:"numeric",minute:"numeric"},"datetime-local":{day:"numeric",month:"short",year:"numeric",hour:"numeric",minute:"numeric"}},n=i[this.editor&&this.editor.type]||i.date;return n.timeZone="UTC",t.toLocaleString("en-GB",n)}},meta:"content"},n.datatypes={"input[type=checkbox]":{
checked:"boolean"},"input[type=range], input[type=number], meter, progress":{value:"number"}},n.editors={"*":{tag:"input"},".number":{tag:"input",type:"number"},".boolean":{tag:"input",type:"checkbox"},"a, img, video, audio, .url":{tag:"input",type:"url",placeholder:"http://"},"p, div, li, dt, dd, h1, h2, h3, h4, h5, h6, article, section, .multiline":{create:function(){var t=getComputedStyle(this.element).display,i=0===t.indexOf("inline")?"input":"textarea",n=e.create(i);if("textarea"==i){var r=this.element.offsetWidth;r&&(n.width=r)}return n},get editorValue(){return this.editor&&this.editor.value},set editorValue(e){this.editor&&(this.editor.value=e?e.replace(/\r?\n/g,""):"")}},"meter, progress":function(){return e.create({tag:"input",type:"range",min:this.element.getAttribute("min")||0,max:this.element.getAttribute("max")||100})},"time, .date":function(){var t={date:/^[Y\d]{4}-[M\d]{2}-[D\d]{2}$/i,month:/^[Y\d]{4}-[M\d]{2}$/i,time:/^[H\d]{2}:[M\d]{2}/i,week:/[Y\d]{4}-W[W\d]{2}$/i,"datetime-local":/^[Y\d]{4}-[M\d]{2}-[D\d]{2} [H\d]{2}:[M\d]{2}/i
},i=this.element.getAttribute("datetime")||"YYYY-MM-DD";for(var n in t)if(t[n].test(i))break;return e.create("input",{type:n})}}}(Bliss,Bliss.$),Wysie.Primitive.editors.img={create:function(){var e=$.create("div",{className:"image-popup",events:{"dragenter dragover drop":function(e){e.stopPropagation(),e.preventDefault()},drop:function(e){$.value(e.dataTransfer,"files",0)}},contents:[{tag:"input",type:"url",className:"value"},{tag:"label",className:"upload",contents:["Upload: ",{tag:"input",type:"file",accept:"image/*",events:{change:function(t){var i=this.files[0];i&&($("img",e).file=i)}}}]},{className:"image-preview",contents:[{tag:"progress",value:"0",max:"100"},{tag:"img"}]},{className:"tip",innerHTML:"<strong>Tip:</strong> You can also drag & drop or paste the image to be uploaded!"}]});return e}},function(e,t){Wysie.Collection=e.Class({"extends":Wysie.Node,constructor:function(e,i){this.template=e,this.items=[],this.properties=t(Wysie.selectors.property,this.template)._.getAttribute("property"),
this.mutable=this.template.matches(Wysie.selectors.multiple),Wysie.hooks.run("collection-init-end",this)},get length(){return this.items.length},get containsTemplate(){return this.items.length&&this.items[0].element===this.element},getData:function(e){e=e||{};var t=[];return this.items.forEach(function(i){if(!i.deleted){var n=i.getData(e);n&&t.push(n)}}),!e.dirty&&this.unhandled&&(t=this.unhandled.before.concat(t,this.unhandled.after)),t},createItem:function(t){var i=this,t=t||this.template.cloneNode(!0),n=Wysie.Unit.create(t,this.wysie,this);return this.mutable&&e.create({tag:"menu",type:"toolbar",className:"wysie-item-controls wysie-ui",contents:[{tag:"button",title:"Delete this "+this.name,className:"delete",events:{click:function(e){return i["delete"](n)}}},{tag:"button",title:"Add new "+this.name.replace(/s$/i,""),className:"add",events:{click:function(e){return i.add(null,i.items.indexOf(n)).edit()}}}],inside:t}),n},add:function(e,t,i){if(e=e instanceof Node?Wysie.Unit.get(e)||this.createItem(e):e||this.createItem(),
t in this.items)e.element._.after(this.items[t].element),this.items.splice(t,0,e);else{if(!e.element.parentNode){if(this.mutable)var n=this.bottomUp&&this.items.length>0?this.items[0].element:this.marker;else var n=this.items[this.length-1].element;e.element._.before(n)}this.items.push(e)}return i||(e.element._.fire("wysie:datachange",{node:this,wysie:this.wysie,action:"add",item:e}),e.unsavedChanges=this.wysie.unsavedChanges=!0),e},propagate:function(){var e=arguments;this.items.forEach(function(t){return t.call.apply(t,e)})},"delete":function(t,i){var n=this;return i?(e.remove(t.element),void this.items.splice(this.items.indexOf(t),1)):e.transition(t.element,{opacity:0}).then(function(){t.deleted=!0,t.element.style.opacity="",t.element._.fire("wysie:datachange",{node:n,wysie:n.wysie,action:"delete",item:t}),t.unsavedChanges=n.wysie.unsavedChanges=!0})},edit:function(){if(0===this.length&&this.required){var t=this.add(null,null,!0);t.placeholder=!0,t.walk(function(e){return e.unsavedChanges=!1;
}),e.once(t.element,"wysie:datachange",function(e){t.unsavedChanges=!0,t.placeholder=!1})}this.propagate(function(e){return e[e.preEdit?"preEdit":"edit"]()})},clear:function(){this.mutable&&(this.propagate(function(e){return e.element.remove()}),this.items=[],this.marker._.fire("wysie:datachange",{node:this,wysie:this.wysie,action:"clear"}))},save:function(){var e=this;this.items.forEach(function(t){t.deleted?e["delete"](t,!0):t.unsavedChanges=!1})},done:function(){var e=this;this.items.forEach(function(t){return t.placeholder?void e["delete"](t,!0):void 0})},propagated:["save","done"],revert:function(){var e=this;this.items.forEach(function(t,i){t.everSaved||t.placeholder?(t.deleted&&(t.deleted=!1),t.revert()):e["delete"](t,!0)})},"import":function(){this.mutable&&this.add(this.element),this.items.forEach(function(e){return e["import"]()})},render:function(e){var t=this;if(this.unhandled={before:[],after:[]},!e)return void((null===e||void 0===e)&&(!this.closestCollection||this.closestCollection.containsTemplate)&&(this.clear(),
this["import"]()));if(e=e&&Wysie.toArray(e),this.mutable){if(e&&e.length>0){var i=document.createDocumentFragment();e.forEach(function(e){var n=t.createItem();n.render(e),t.items.push(n),i.appendChild(n.element)}),this.marker.parentNode.insertBefore(i,this.marker)}}else this.items.forEach(function(t,i){return t.render(e&&e[i])}),e&&(this.unhandled.after=e.slice(this.items.length));this.save()},find:function(e){var t=this.items.filter(function(e){return!e.deleted});if(this.property==e)return t;if(this.properties.indexOf(e)>-1){var i=t.map(function(t){return t.find(e)});return Wysie.flatten(i)}},live:{mutable:function(t){if(t&&t!==this.mutable){if(this.wysie.needsEdit=!0,this.required=this.template.matches(Wysie.selectors.required),this.marker=e.create("div",{hidden:!0,className:"wysie-marker",after:this.template}),this.template.classList.add("wysie-item"),this.template.remove(),!this.addButton.parentNode)if(this.bottomUp)this.addButton._.before(e.value(this.items[0],"element")||this.marker);else{
var i=this.element.tagName.toLowerCase(),n=Wysie.selectors.container[i];if(n)var r=this.marker.closest(n);this.addButton._.after(r&&r.parentNode?r:this.marker)}this.template=this.element.cloneNode(!0)}}},lazy:{bottomUp:function(){return this.mutable?this.template.hasAttribute("data-bottomup")?!0:this.addButton.parentNode?!!(this.addButton.compareDocumentPosition(this.template)&Node.DOCUMENT_POSITION_FOLLOWING):!1:!1},closestCollection:function(){var e=this.marker?this.marker.parentNode:this.template.parentNode;return e.closest(Wysie.selectors.item)},addButton:function(){var i=this,n="button.add-"+this.property,r=this.closestCollection||this.marker.closest(Wysie.selectors.scope);if(r)var s=t(n,r).filter(function(e){return!i.template.contains(e)})[0];return s||(s=e.create("button",{className:"add",textContent:"Add "+this.name})),s.classList.add("wysie-ui","wysie-add"),this.property&&s.classList.add("add-"+this.property),s.addEventListener("click",function(e){e.preventDefault(),i.add().edit();
}),s}}})}(Bliss,Bliss.$);var prettyPrint=function(){var e={txt:function(e){return e+="",document.createTextNode(e)},row:function(t,i,n){n=n||"td";var r,s=e.count(t,null)+1,o=$.create("tr"),a={colSpan:s};return $$(t).forEach(function(t){null!==t&&(r=$.create(n,a),t.nodeType?r.appendChild(t):r.innerHTML=e.shorten(t.toString()),o.appendChild(r))}),o},hRow:function(t,i){return e.row(t,i,"th")},table:function(t,i){t=t||[];var n=$.create("table"),r=$.create("thead"),s=$.create("tbody");return n.classList.add(i),t.length&&(n.appendChild(r),r.appendChild(e.hRow(t,i))),n.appendChild(s),{node:n,tbody:s,thead:r,appendChild:function(e){this.tbody.appendChild(e)},addRow:function(t,n,r){return this.appendChild(e.row(t,n||i,r)),this}}},shorten:function(e){var t=40;return e=e.replace(/^\s\s*|\s\s*$|\n/g,""),e.length>t?e.substring(0,t-1)+"...":e},htmlentities:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},count:function i(e,t){for(var i=0,n=0,r=e.length;r>n;n++)e[n]===t&&i++;
return i},thead:function(e){return e.getElementsByTagName("thead")[0]},within:function(e){return{is:function(t){for(var i in e)if(e[i]===t)return i;return""}}},common:{circRef:function(i,n,r){return e.expander("[POINTS BACK TO <strong>"+n+"</strong>]","Click to show this item anyway",function(){this.parentNode.appendChild(t(i,{maxDepth:1}))})},depthReached:function(i,n){return e.expander("[DEPTH REACHED]","Click to show this item anyway",function(){try{this.parentNode.appendChild(t(i,{maxDepth:1}))}catch(n){this.parentNode.appendChild(e.table(["ERROR OCCURED DURING OBJECT RETRIEVAL"],"error").addRow([n.message]).node)}})}},expander:function(t,i,n){return $.create("a",{innerHTML:e.shorten(t)+' <b style="visibility:hidden;">[+]</b>',title:i,onmouseover:function(){this.getElementsByTagName("b")[0].style.visibility="visible"},onmouseout:function(){this.getElementsByTagName("b")[0].style.visibility="hidden"},onclick:function(){return this.style.display="none",n.call(this),!1},style:{cursor:"pointer"
}})}},t=function n(t,i){i=i||{};var r=$.extend({},n.config,i),s=$.create("div"),o=(n.config,0),a={},u=!1;n.settings=r;var c={string:function(t){return e.txt('"'+e.shorten(t.replace(/"/g,'\\"'))+'"')},object:function(t,i,n){var s=e.within(a).is(t);if(s)return e.common.circRef(t,s,r);if(a[n||"TOP"]=t,i===r.maxDepth)return e.common.depthReached(t,r);var o=e.table(["Group",null],"object"),l=!0;for(var h in t)if(!t.hasOwnProperty||t.hasOwnProperty(h)){var d=t[h],p=$.type(d);l=!1;try{o.addRow([h,c[p](d,i+1,h)],p)}catch(f){window.console&&window.console.log&&console.log(f.message)}}var m=r.expanded||u?o.node:e.expander(JSON.stringify(t),"Click to show more",function(){this.parentNode.appendChild(o.node)});return u=!0,m},array:function(t,i,n,s){var o=e.within(a).is(t);if(o)return e.common.circRef(t,o);if(a[n||"TOP"]=t,i===r.maxDepth)return e.common.depthReached(t);var u=e.table(["List ("+t.length+" items)",null],"list"),l=!0,h=0;return $$(t).forEach(function(e,n){return r.maxArray>=0&&++h>r.maxArray?(u.addRow([n+".."+(t.length-1),c[$.type(e)]("...",i+1,n)]),
!1):(l=!1,void u.addRow([n,c[$.type(e)](e,i+1,n)]))}),r.expanded?u.node:e.expander(JSON.stringify(t),"Click to show more",function(){this.parentNode.appendChild(u.node)})},date:function(t){var i=e.table(["Date",null],"date"),n=t.toString().split(/\s/);return i.addRow(["Time",n[4]]).addRow(["Date",n.slice(0,4).join("-")]),r.expanded?i.node:e.expander("Date (timestamp): "+ +t,"Click to see a little more info about this date",function(){this.parentNode.appendChild(i.node)})}};return c.number=c["boolean"]=c.undefined=c["null"]=c["default"]=function(t){return e.txt(t)},s.appendChild(c[$.type(t)](t,o)),s};return t.config={expanded:!0,maxDepth:10,maxArray:-1},t}();!function(e,t){var i=Wysie.Debug={friendlyError:function(e,t){var i=e.constructor.name.replace(/Error$/,"").toLowerCase(),n=e.message;return n=n.replace(/\s+token\s+/g," "),"Unexpected }"!=n||/[{}]/.test(t)?"Unexpected )"===n?n="Missing a (":"Invalid left-hand side in assignment"===n?n="Invalid assignment. Maybe you typed = instead of == ?":"Unexpected ILLEGAL"==n&&(n="There is an invalid character somewhere."):n="Missing a )",
'<span class="type">Oh noes, a '+i+" error!</span> "+n},elementLabel:function(e,i){var n=e.nodeName.toLowerCase();return e.hasAttribute("property")?n+="[property="+e.getAttribute("property")+"]":e.id?n+="#"+e.id:e.classList.length&&(n+=t(e.classList).map(function(e){return"."+e}).join("")),i&&(n+="@"+i),n},printValue:function(e){return"object"!==("undefined"==typeof e?"undefined":_typeof(e))||null===e?"string"==typeof e?'"'+e+'"':e+"":Array.isArray(e)?e.length>0?"object"===_typeof(e[0])?"List: "+e.length+" group(s)":"List: "+e.map(i.printValue).join(", "):"List: (Empty)":e.constructor===Object?"Group with "+Object.keys(e).length+" properties":e instanceof Wysie.Primitive?i.printValue(e.value):e instanceof Wysie.Collection?e.items.length>0?e.items[0]instanceof Wysie.Scope?"List: "+e.items.length+" group(s)":"List: "+e.items.map(i.printValue).join(", "):i.printValue([]):e instanceof Wysie.Scope?"Group with "+e.propertyNames.length+" properties":void 0},timed:function(e,t){return function(){
console.time(e),t.apply(this,arguments),console.timeEnd(e)}},reservedWords:"as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield".split("|")};Wysie.prototype.render=i.timed("render",Wysie.prototype.render),Wysie.selectors.debug=".debug";var n=", .wysie-debuginfo";Wysie.Expressions.escape+=n,Stretchy.selectors.filter+=n,Wysie.hooks.add("init-tree-after",function(){if(this.root.debug&&this.wrapper.classList.add("debug-saving"),this.store&&this.wrapper.classList.contains("debug-saving")){var t,i=(e.create("details",{className:"wysie-debug-storage",contents:[{tag:"Summary",textContent:"Saved data"},t=e.create("pre",{id:this.id+"-debug-storage"})],after:this.wrapper}),Object.getOwnPropertyDescriptor(Node.prototype,"textContent"));Object.defineProperty(t,"textContent",{
get:function(){return i.get.call(this)},set:function(e){this.innerHTML="",e&&this.appendChild(prettyPrint(JSON.parse(e)))}}),this.store+=" #"+t.id}}),Wysie.hooks.add("render-start",function(t){var i=t.data;if(this.storage&&this.wrapper.classList.contains("debug-saving")){var n=e("#"+this.id+"-debug-storage");n&&(n.textContent=i?this.toJSON(i):"")}}),Wysie.hooks.add("scope-init-start",function(){this.debug=this.debug||this.walkUp(function(e){return e.debug?!0:void 0}),!this.debug&&this.element.closest(Wysie.selectors.debug)&&(this.debug=!0),this.debug&&(this.debug=e.create("tbody",{inside:e.create("table",{className:"wysie-ui wysie-debuginfo",innerHTML:"<thead><tr>\n					<th></th>\n					<th>Expression</th>\n					<th>Value</th>\n					<th>Element</th>\n				</tr></thead>",style:{display:"none"},inside:this.element})}))},!0),Wysie.hooks.add("unit-init-end",function(){this.collection&&(this.debug=this.collection.debug)}),Wysie.hooks.add("expressions-init-start",function(){this.debug=this.scope.debug;
}),Wysie.hooks.add("expression-eval-beforeeval",function(){this.debug&&this.debug.classList.remove("error")}),Wysie.hooks.add("expression-eval-error",function(e){this.debug&&(this.debug.innerHTML=i.friendlyError(e.exception,e.expression),this.debug.classList.add("error"))}),Wysie.Scope.prototype.debugRow=function(t){var n=t.element,r=t.attribute,s=void 0===r?null:r,o=t.tds,a=void 0===o?[]:o;if(this.debug){this.debug.parentNode.style.display="";var u=a[0];if(a[0]=e.create("td",{title:u}),!a[3]){var c=i.elementLabel(n,s);a[3]=e.create("td",{textContent:c,title:c,events:{"mouseenter mouseleave":function(e){n.classList.toggle("wysie-highlight","mouseenter"===e.type)},click:function(e){n.scrollIntoView({behavior:"smooth"})}}})}a=a.map(function(t){return t instanceof Node?t:e.create("td","object"==("undefined"==typeof t?"undefined":_typeof(t))?t:{textContent:t})}),"Warning"==u&&a[1].setAttribute("colspan",2);e.create("tr",{className:"debug-"+u.toLowerCase(),contents:a,inside:this.debug})}},Wysie.hooks.add("expressiontext-init-end",function(){
var t=this;this.scope.debug&&(this.debug={},this.template.forEach(function(i){i instanceof Wysie.Expression&&t.scope.debugRow({element:t.element,attribute:t.attribute,tds:["Expression",{tag:"td",contents:{tag:"textarea",value:i.expression,events:{input:function(e){i.expression=e.target.value,t.update(t.data)}},once:{focus:function(e){return Stretchy.resize(e.target)}}}},i.debug=e.create("td")]})}))}),Wysie.hooks.add("scope-init-end",function(){var e=this;if(this.debug instanceof Node){var n=Wysie.selectors.andNot(Wysie.selectors.multiple,Wysie.selectors.property);t(n,this.element).forEach(function(t){e.debugRow({element:t,tds:["Warning","data-multiple without a property attribute"]})}),this.propagate(function(t){i.printValue(t);e.debugRow({element:t.element,tds:["Property",t.property,t.value]}),i.reservedWords.indexOf(t.property)>-1?e.debugRow({element:t.element,tds:["Warning",'You can’t use "'+t.property+'" as a property name, it’s a reserved word.']}):/^\d|[\W$]/.test(t.property)&&e.debugRow({
element:t.element,tds:["Warning",{textContent:'You can’t use "'+t.property+'" as a property name.',title:"Property names can only contain letters, numbers and underscores and cannot start with a number."}]})}),this.scope.element.addEventListener("wysie:datachange",function(n){t("tr.debug-property",e.debug).forEach(function(t){var n=t.cells[1].textContent,r=i.printValue(e.properties[n]);if(t.cells[2]){var s=t.cells[2];s.textContent=s.title=r}})})}}),Wysie.hooks.add("expressiontext-update-beforeeval",function(e){this.debug&&(e.td=e.expr.debug,e.td&&e.td.classList.remove("error"))}),Wysie.hooks.add("expressiontext-update-aftereval",function(e){if(e.td&&!e.td.classList.contains("error")){var t=i.printValue(e.value);e.td.textContent=e.td.title=t}})}(Bliss,Bliss.$),function(e){if(self.Wysie){var t="//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js";Wysie.Storage.Backend.add("Dropbox",e.Class({"extends":Wysie.Storage.Backend,constructor:function(){var i=this;"dropbox:"!=this.url.protocol&&(this.url.hostname="dl.dropboxusercontent.com",
this.url.search=this.url.search.replace(/\bdl=0|^$/,"raw=1"),this.permissions.on("read")),this.permissions.on("login"),this.ready=e.include(self.Dropbox,t).then(function(){var t=new URL(document.referrer,location);return"www.dropbox.com"===t.hostname&&0===location.hash.indexOf("#access_token=")?(Dropbox.AuthDriver.Popup.oauthReceiver(),e.fire(window,"load"),void close()):(i.filename=(i.storage.param("path")||"")+new URL(i.url).pathname.match(/[^\/]*$/)[0],i.key=i.storage.param("key")||"fle6gsc61w5v79j",void(i.client=new Dropbox.Client({key:i.key})))}).then(function(){i.login(!0)})},put:function(e){var t=this;return e.data=Wysie.toJSON(e.data),new Promise(function(i,n){t.client.writeFile(e.name,e.data,function(e,t){return e?n(Error(e)):(console.log("File saved as revision "+t.versionTag),void i(t))})})},login:function(t){var i=this;return this.ready.then(function(){return i.client.isAuthenticated()?Promise.resolve():new Promise(function(e,n){i.client.authDriver(new Dropbox.AuthDriver.Popup({
receiverUrl:new URL(location)+""})),i.client.authenticate({interactive:!t},function(t,r){t&&n(Error(t)),i.client.isAuthenticated()?(i.permissions.on(["logout","edit"]),e()):(i.permissions.off(["logout","edit","add","delete"]),n())})})}).then(function(){i.client.getAccountInfo(function(t,n){t||i.wysie.wrapper._.fire("wysie:login",e.extend({backend:i},n))})})["catch"](function(){})},logout:function(){var e=this;return this.client.isAuthenticated()?new Promise(function(t,i){e.client.signOut(null,function(){e.permissions.off(["edit","add","delete"]).on("login"),e.wysie.wrapper._.fire("wysie:logout",{backend:e}),t()})}):Promise.resolve()},"static":{test:function(e){return/dropbox.com/.test(e.host)||"dropbox:"===e.protocol}}}),!0)}}(Bliss),function(e){if(self.Wysie){var t;Wysie.Storage.Backend.add("Github",t=e.Class({"extends":Wysie.Storage.Backend,constructor:function(){this.permissions.on("login"),this.key=this.storage.param("key")||"7e08e016048000bc594e",e.extend(this,t.parseURL(this.url)),
this.repo=this.repo||"wysie-data",this.branch=this.branch||"master",this.path=this.path||this.wysie.id+".json",this.filename=this.filename||this.path.match(/[^\/]*$/)[0],this.url=new URL("https://raw.githubusercontent.com/"+this.username+"/"+this.repo+"/"+this.branch+"/"+this.path+"?ts="+Date.now()),this.permissions.on("read"),this.login(!0)},get authenticated(){return!!this.accessToken},req:function(t,i){var n=arguments.length<=2||void 0===arguments[2]?"GET":arguments[2],r=arguments.length<=3||void 0===arguments[3]?{method:n}:arguments[3];return i&&(r.data=JSON.stringify(i)),e.fetch("https://api.github.com/"+t,e.extend(r,{responseType:"json",headers:{Authorization:"token "+this.accessToken}}))["catch"](function(e){return e&&e.xhr?Promise.reject(e.xhr):(console.error(e),void console.log(e.stack))}).then(function(e){return Promise.resolve(e.response)})},get:Wysie.Storage.Backend.Remote.prototype.get,put:function(e){var t=this;e.data=Wysie.toJSON(e.data),e.path=e.path||"";var i="repos/"+this.username+"/"+this.repo+"/contents/"+e.path;
return Promise.resolve(this.repoInfo||this.req("user/repos",{name:this.repo},"POST")).then(function(e){return t.repoInfo=e,t.req(i,{ref:t.branch})}).then(function(n){return t.req(i,{message:"Updated "+(e.name||"file"),content:btoa(e.data),branch:t.branch,sha:n.sha},"PUT")},function(n){return 404==n.status?t.req(i,{message:"Created file",content:btoa(e.data),branch:t.branch},"PUT"):void 0}).then(function(e){console.log("success")})},login:function(e){var t=this;return this.ready.then(function(){return t.authenticated?Promise.resolve():new Promise(function(i,n){e?(t.accessToken=localStorage["wysie:githubtoken"],t.accessToken&&i(t.accessToken)):(t.authPopup=open("https://github.com/login/oauth/authorize?client_id="+t.key+"&scope=repo,gist&state="+location.href,"popup","width=900,height=500"),addEventListener("message",function(e){e.source===t.authPopup&&(t.accessToken=localStorage["wysie:githubtoken"]=e.data,t.accessToken||n(Error("Authentication error")),i(t.accessToken))}))}).then(function(){
return t.getUser()}).then(function(e){return t.permissions.on("logout"),t.req("repos/"+t.username+"/"+t.repo)}).then(function(e){t.repoInfo=e,e.permissions.push&&t.permissions.on("edit")})["catch"](function(e){404==e.status&&t.user.login==t.username&&t.permissions.on("edit")})})},logout:function(){return this.authenticated&&(localStorage.removeItem("wysie:githubtoken"),delete this.accessToken,this.permissions.off(["edit","add","delete"]).on("login"),this.wysie.wrapper._.fire("wysie:logout",{backend:this})),Promise.resolve()},getUser:function(){var e=this;return this.req("user").then(function(t){e.user=t;var i=t.name||t.login;e.wysie.wrapper._.fire("wysie:login",{backend:e,name:'<a href="https://github.com/'+t.login+'" target="_blank">\n							<img class="avatar" src="'+t.avatar_url+'" /> '+i+"\n						</a>"})})},"static":{test:function(e){return/\bgithub.(com|io)|raw.githubusercontent.com/.test(e)},parseURL:function(e){var t={};e=new URL(e,location);var i=e.pathname.slice(1).split("/");return/github.io$/.test(e.host)?(t.username=e.host.match(/([\w-]+)\.github\.io$/)[1],
t.branch="gh-pages"):t.username=i.shift(),t.repo=i.shift(),/raw.githubusercontent.com$/.test(e.host)?t.branch=i.shift():/github.com$/.test(e.host)&&"blob"==i[0]&&(i.shift(),t.branch=i.shift()),t.filename=i[i.length-1],t.path=i.join("/"),t}}}),!0)}}(Bliss);
//# sourceMappingURL=data:application/json;base64,
