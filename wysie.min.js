"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(){function e(t,n,r){return n=void 0===n?1:n,r=r||n+1,1>=r-n?function(){if(arguments.length<=n||"string"===i.type(arguments[n]))return t.apply(this,arguments);var e,r=arguments[n];for(var s in r){var o=Array.from(arguments);o.splice(n,1,s,r[s]),e=t.apply(this,o)}return e}:e(e(t,n+1,r),n,r-1)}function t(e,t,n){for(var r in t){if(n){var s=i.type(n);if("own"===n&&!t.hasOwnProperty(r)||"array"===s&&-1===n.indexOf(r)||"regexp"===s&&!n.test(r)||"function"===s&&!n.call(t,r))continue}var o=Object.getOwnPropertyDescriptor(t,r);!o||o.writable&&o.configurable&&o.enumerable&&!o.get&&!o.set?e[r]=t[r]:(delete e[r],Object.defineProperty(e,r,o))}return e}var i=self.Bliss=t(function(e,t){
return"string"===i.type(e)?(t||document).querySelector(e):e||null},self.Bliss);t(i,{extend:t,overload:e,property:i.property||"_",sources:{},noop:function(){},$:function(e,t){return e instanceof Node||e instanceof Window?[e]:Array.from("string"==typeof e?(t||document).querySelectorAll(e):e||[])},type:function(e){if(null===e)return"null";if(void 0===e)return"undefined";var t=(Object.prototype.toString.call(e).match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase();return"number"==t&&isNaN(e)?"nan":t},defined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},create:function(e,t){return e instanceof Node?i.set(e,t):(1===arguments.length&&("string"===i.type(e)?t={}:(t=e,e=t.tag,t=i.extend({},t,function(e){return"tag"!==e}))),i.set(document.createElement(e||"div"),t))},each:function(e,t,i){i=i||{};for(var n in e)i[n]=t.call(e,n,e[n]);return i},ready:function(e){return e=e||document,new Promise(function(t,i){"loading"!==e.readyState?t():e.addEventListener("DOMContentLoaded",function(){
t()})})},Class:function(e){var t=["constructor","extends","abstract","static"].concat(Object.keys(i.classProps)),n=e.hasOwnProperty("constructor")?e.constructor:i.noop,r=function a(){if(e["abstract"]&&this.constructor===a)throw new Error("Abstract classes cannot be directly instantiated.");a["super"]&&a["super"].apply(this,arguments),n.apply(this,arguments)};r["super"]=e["extends"]||null,r.prototype=i.extend(Object.create(r["super"]?r["super"].prototype:Object),{constructor:r});var s=function(e){return this.hasOwnProperty(e)&&-1===t.indexOf(e)};if(e["static"]){i.extend(r,e["static"],s);for(var o in i.classProps)o in e["static"]&&i.classProps[o](r,e["static"][o])}i.extend(r.prototype,e,s);for(var o in i.classProps)o in e&&i.classProps[o](r.prototype,e[o]);return r.prototype["super"]=r["super"]?r["super"].prototype:null,r},classProps:{lazy:e(function(e,t,i){return Object.defineProperty(e,t,{get:function(){var e=i.call(this);return Object.defineProperty(this,t,{value:e,configurable:!0,enumerable:!0,
writable:!0}),e},set:function(e){Object.defineProperty(this,t,{value:e,configurable:!0,enumerable:!0,writable:!0})},configurable:!0,enumerable:!0}),e}),live:e(function(e,t,n){return"function"===i.type(n)&&(n={set:n}),Object.defineProperty(e,t,{get:function(){var e=this["_"+t],i=n.get&&n.get.call(this,e);return void 0!==i?i:e},set:function(e){var i=this["_"+t],r=n.set&&n.set.call(this,e,i);this["_"+t]=void 0!==r?r:e},configurable:n.configurable,enumerable:n.enumerable}),e})},include:function(){var e=arguments[arguments.length-1],t=2===arguments.length?arguments[0]:!1,n=document.createElement("script");return t?Promise.resolve():new Promise(function(t,r){i.set(n,{async:!0,onload:function(){t(),i.remove(n)},onerror:function(){r()},src:e,inside:document.head})})},fetch:function(e,n){if(!e)throw new TypeError("URL parameter is mandatory and cannot be "+e);var r=t({url:new URL(e,location),data:"",method:"GET",headers:{},xhr:new XMLHttpRequest},n);r.method=r.method.toUpperCase(),i.hooks.run("fetch-args",r),
"GET"===r.method&&r.data&&(r.url.search+=r.data),document.body.setAttribute("data-loading",r.url),r.xhr.open(r.method,r.url.href,r.async!==!1,r.user,r.password);for(var s in n)if(s in r.xhr)try{r.xhr[s]=n[s]}catch(o){self.console&&console.error(o)}"GET"===r.method||r.headers["Content-type"]||r.headers["Content-Type"]||r.xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");for(var a in r.headers)r.xhr.setRequestHeader(a,r.headers[a]);return new Promise(function(e,t){r.xhr.onload=function(){document.body.removeAttribute("data-loading"),0===r.xhr.status||r.xhr.status>=200&&r.xhr.status<300||304===r.xhr.status?e(r.xhr):t(i.extend(Error(r.xhr.statusText),{get status(){return this.xhr.status},xhr:r.xhr}))},r.xhr.onerror=function(){document.body.removeAttribute("data-loading"),t(i.extend(Error("Network Error"),{xhr:r.xhr}))},r.xhr.ontimeout=function(){document.body.removeAttribute("data-loading"),t(i.extend(Error("Network Timeout"),{xhr:r.xhr}))},r.xhr.send("GET"===r.method?null:r.data);
})},value:function(e){var t="string"!==i.type(e);return i.$(arguments).slice(+t).reduce(function(e,t){return e&&e[t]},t?e:self)}}),i.Hooks=new i.Class({add:function(e,t,i){this[e]=this[e]||[],this[e][i?"unshift":"push"](t)},run:function(e,t){this[e]=this[e]||[],this[e].forEach(function(e){e.call(t&&t.context?t.context:t,t)})}}),i.hooks=new i.Hooks;var n=i.property;i.Element=function(e){this.subject=e,this.data={},this.bliss={}},i.Element.prototype={set:e(function(e,t){e in i.setProps?i.setProps[e].call(this,t):e in this?this[e]=t:this.setAttribute(e,t)},0),transition:function(e,t){return t=+t||400,new Promise(function(n,r){if("transition"in this.style){var s=i.extend({},this.style,/^transition(Duration|Property)$/);i.style(this,{transitionDuration:(t||400)+"ms",transitionProperty:Object.keys(e).join(", ")}),i.once(this,"transitionend",function(){clearTimeout(o),i.style(this,s),n(this)});var o=setTimeout(n,t+50,this);i.style(this,e)}else i.style(this,e),n(this)}.bind(this))},fire:function(e,t){
var n=document.createEvent("HTMLEvents");return n.initEvent(e,!0,!0),this.dispatchEvent(i.extend(n,t))},unbind:e(function(e,t){(e||"").split(/\s+/).forEach(function(e){if(n in this&&(e.indexOf(".")>-1||!t)){e=(e||"").split(".");var i=e[1];e=e[0];var r=this[n].bliss.listeners=this[n].bliss.listeners||{};for(var s in r)if(!e||s===e)for(var o,a=0;o=r[s][a];a++)i&&i!==o.className||t&&t!==o.callback||(this.removeEventListener.call(this,s,o.callback,o.capture),a--)}else this.removeEventListener(e,t)},this)},0)},i.setProps={style:function(e){i.extend(this.style,e)},attributes:function(e){for(var t in e)this.setAttribute(t,e[t])},properties:function(e){i.extend(this,e)},events:function(e){if(e&&e.addEventListener){var t=this;if(e[n]&&e[n].bliss){var r=e[n].bliss.listeners;for(var s in r)r[s].forEach(function(e){t.addEventListener(s,e.callback,e.capture)})}for(var o in e)0===o.indexOf("on")&&(this[o]=e[o])}else if(arguments.length>1&&"string"===i.type(e)){var a=arguments[1],u=arguments[2];e.split(/\s+/).forEach(function(e){
this.addEventListener(e,a,u)},this)}else for(var c in e)i.events(this,c,e[c])},once:e(function(e,t){e=e.split(/\s+/);var i=this,n=function r(){return e.forEach(function(e){i.removeEventListener(e,r)}),t.apply(i,arguments)};e.forEach(function(e){i.addEventListener(e,n)})},0),delegate:e(function(e,t,i){this.addEventListener(e,function(e){e.target.closest(t)&&i.call(this,e)})},0,2),contents:function(e){(e||0===e)&&(Array.isArray(e)?e:[e]).forEach(function(e){var t=i.type(e);/^(string|number)$/.test(t)?e=document.createTextNode(e+""):"object"===t&&(e=i.create(e)),e instanceof Node&&this.appendChild(e)},this)},inside:function(e){e.appendChild(this)},before:function(e){e.parentNode.insertBefore(this,e)},after:function(e){e.parentNode.insertBefore(this,e.nextSibling)},start:function(e){e.insertBefore(this,e.firstChild)},around:function(e){e.parentNode&&i.before(this,e),(/^template$/i.test(this.nodeName)?this.content||this:this).appendChild(e)}},i.Array=function(e){this.subject=e},i.Array.prototype={
all:function(e){var t=$$(arguments).slice(1);return this[e].apply(this,t)}},i.add=e(function(e,t,n,r){n=i.extend({$:!0,element:!0,array:!0},n),"function"==i.type(t)&&(!n.element||e in i.Element.prototype&&r||(i.Element.prototype[e]=function(){return this.subject&&i.defined(t.apply(this.subject,arguments),this.subject)}),!n.array||e in i.Array.prototype&&r||(i.Array.prototype[e]=function(){var e=arguments;return this.subject.map(function(n){return n&&i.defined(t.apply(n,e),n)})}),n.$&&(i.sources[e]=i[e]=t,(n.array||n.element)&&(i[e]=function(){var t=[].slice.apply(arguments),r=t.shift(),s=n.array&&Array.isArray(r)?"Array":"Element";return i[s].prototype[e].apply({subject:r},t)})))},0),i.add(i.Array.prototype,{element:!1}),i.add(i.Element.prototype),i.add(i.setProps),i.add(i.classProps,{element:!1,array:!1});var r=document.createElement("_");i.add(i.extend({},HTMLElement.prototype,function(e){return"function"===i.type(r[e])}),null,!0)}(),function(e){if(Bliss&&!Bliss.shy){var t=Bliss.property;
if(e.add({clone:function(){var t=this.cloneNode(!0),i=e.$("*",t).concat(t);return e.$("*",this).concat(this).forEach(function(t,n,r){e.events(i[n],t),i[n]._.data=e.extend({},t._.data)}),t}},{array:!1}),Object.defineProperty(Node.prototype,t,{get:function o(){return Object.defineProperty(Node.prototype,t,{get:void 0}),Object.defineProperty(this,t,{value:new e.Element(this)}),Object.defineProperty(Node.prototype,t,{get:o}),this[t]},configurable:!0}),Object.defineProperty(Array.prototype,t,{get:function(){return Object.defineProperty(this,t,{value:new e.Array(this)}),this[t]},configurable:!0}),self.EventTarget&&"addEventListener"in EventTarget.prototype){var i=EventTarget.prototype.addEventListener,n=EventTarget.prototype.removeEventListener,r=function(e,t,i){return i.callback===e&&i.capture==t},s=function(){return!r.apply(this,arguments)};EventTarget.prototype.addEventListener=function(e,n,s){if(this&&this[t]&&this[t].bliss&&n){var o=this[t].bliss.listeners=this[t].bliss.listeners||{};if(e.indexOf(".")>-1){
e=e.split(".");var a=e[1];e=e[0]}o[e]=o[e]||[],0===o[e].filter(r.bind(null,n,s)).length&&o[e].push({callback:n,capture:s,className:a})}return i.call(this,e,n,s)},EventTarget.prototype.removeEventListener=function(e,i,r){if(this&&this[t]&&this[t].bliss&&i){var o=this[t].bliss.listeners=this[t].bliss.listeners||{};o[e]&&(o[e]=o[e].filter(s.bind(null,i,r)))}return n.call(this,e,i,r)}}self.$=self.$||e,self.$$=self.$$||e.$}}(Bliss),function(){function e(e,t){return e instanceof Node||e instanceof Window?[e]:[].slice.call("string"==typeof e?(t||document).querySelectorAll(e):e||[])}if(self.Element&&(Element.prototype.matches||(Element.prototype.matches=Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||null),Element.prototype.matches)){var t=self.Stretchy={selectors:{base:'textarea, select:not([size]), input:not([type]), input[type="'+"text url email tel".split(" ").join('"], input[type="')+'"]',
filter:"*"},script:document.currentScript||e("script").pop(),resize:function(e){if(t.resizes(e)){var i=getComputedStyle(e),n=0;if(!e.value&&e.placeholder){var r=!0;e.value=e.placeholder}var s=e.nodeName.toLowerCase();if("textarea"==s)e.style.height="0","border-box"==i.boxSizing?n=e.offsetHeight:"content-box"==i.boxSizing&&(n=-e.clientHeight),e.style.height=e.scrollHeight+n+"px";else if("input"==s){e.style.width="0","border-box"==i.boxSizing?n=e.offsetWidth:"padding-box"==i.boxSizing&&(n=e.clientWidth),e.scrollLeft=1e10;var o=Math.max(e.scrollLeft+n,e.scrollWidth-e.clientWidth);e.style.width=o+"px"}else if("select"==s){var a=document.createElement("_");a.textContent=e.options[e.selectedIndex].textContent,e.parentNode.insertBefore(a,e.nextSibling);var u;for(var c in i)/^(width|webkitLogicalWidth)$/.test(c)||(a.style[c]=i[c],/appearance$/i.test(c)&&(u=c));a.style.width="",a.offsetWidth>0&&(e.style.width=a.offsetWidth+"px",i[u]&&"none"===i[u]||(e.style.width="calc("+e.style.width+" + 2em)")),
a.parentNode.removeChild(a),a=null}r&&(e.value="")}},resizeAll:function(i){e(i||t.selectors.base).forEach(function(e){t.resize(e)})},active:!0,resizes:function(e){return e&&e.parentNode&&e.matches&&e.matches(t.selectors.base)&&e.matches(t.selectors.filter)},init:function(){t.selectors.filter=t.script.getAttribute("data-filter")||(e("[data-stretchy-filter]").pop()||document.body).getAttribute("data-stretchy-filter")||Stretchy.selectors.filter||"*",t.resizeAll()},$$:e};"loading"!==document.readyState?t.init():document.addEventListener("DOMContentLoaded",t.init);var i=function(e){t.active&&t.resize(e.target)};document.documentElement.addEventListener("input",i),document.documentElement.addEventListener("change",i),self.MutationObserver&&new MutationObserver(function(e){t.active&&e.forEach(function(e){"childList"==e.type&&Stretchy.resizeAll(e.addedNodes)})}).observe(document.documentElement,{childList:!0,subtree:!0})}}(),function(e,t){var i=self.Wysie=e.Class({constructor:function(n){var r=this;
i.all.push(this);var s=n.getAttribute("data-store")||"none";if(this.store="none"===s?null:s,this.id=Wysie.Node.normalizeProperty(n)||"wysie-"+i.all.length,this.autoEdit=i.has("autoedit",n),this.element=i.is("scope",n)?n:e(i.selectors.rootScope,n),this.element||(n.setAttribute("typeof",n.getAttribute("property")||""),n.removeAttribute("property"),this.element=n),this.element.classList.add("wysie-root"),t(i.selectors.property+", "+i.selectors.scope).concat([this.element]).forEach(function(e){i.is("autoMultiple",e)&&!e.hasAttribute("data-multiple")&&e.setAttribute("data-multiple","")}),this.wrapper=n.closest(".wysie-wrapper")||n,t(i.selectors.primitive).forEach(function(t){var i=e(Wysie.selectors.property,t)&&(Wysie.is("multiple",t)||null===Wysie.Primitive.getValueAttribute(t));i&&t.setAttribute("typeof","")}),this.wrapper===this.element&&i.is("multiple",n)){var o=this.element;this.element.matches("li, option")?o=o.parentNode:this.element.matches("td, tr, tbody, thead, tfoot")&&(o=o.closest("table")),
this.wrapper=e.create({around:o})}this.wrapper.classList.add("wysie-wrapper"),n.removeAttribute("data-store"),this.propertyNames=t(i.selectors.property,this.wrapper).map(function(e){return Wysie.Node.normalizeProperty(e)}).sort(function(e,t){return t.length-e.length}),this.needsEdit=!1,Wysie.hooks.run("init-tree-before",this),this.root=Wysie.Node.create(this.element,this),Wysie.hooks.run("init-tree-after",this),this.permissions=new Wysie.Permissions(null,this),this.ui={bar:e(".wysie-bar",this.wrapper)||e.create({className:"wysie-bar wysie-ui",start:this.wrapper,contents:{tag:"span",className:"status"}})},this.permissions.can(["edit","add","delete"],function(){r.ui.edit=e.create("button",{className:"edit",textContent:"Edit",onclick:function(e){return r.editing?r.done():r.edit()}}),r.ui.save=e.create("button",{className:"save",textContent:"Save",events:{click:function(e){return r.save()},"mouseenter focus":function(e){r.wrapper.classList.add("save-hovered"),r.unsavedChanges=r.calculateUnsavedChanges();
},"mouseleave blur":function(e){return r.wrapper.classList.remove("save-hovered")}}}),r.ui.revert=e.create("button",{className:"revert",textContent:"Revert",disabled:!0,events:{click:function(e){return r.revert()},"mouseenter focus":function(e){r.everSaved&&(r.wrapper.classList.add("revert-hovered"),r.unsavedChanges=r.calculateUnsavedChanges())},"mouseleave blur":function(e){return r.wrapper.classList.remove("revert-hovered")}}}),r.ui.editButtons=[r.ui.edit,r.ui.save,r.ui.revert],e.contents(r.ui.bar,r.ui.editButtons),r.autoEdit&&requestAnimationFrame(function(){return r.ui.edit.click()})},function(){e.remove(r.ui.editButtons),r.editing&&r.done()}),this.permissions.can(["delete"],function(){r.ui.clear=e.create("button",{className:"clear",textContent:"Clear",onclick:function(e){return r.clear()}}),r.ui.editButtons.push(r.ui.clear),r.ui.bar.appendChild(r.ui.clear)},function(){e.remove(r.ui.clear)}),this.store?(this.storage=new i.Storage(this),this.permissions.can("read",function(){return r.storage.load();
})):(this.permissions.on(["read","edit"]),this.root["import"](),e.fire(this.wrapper,"wysie:load")),this.needsEdit||this.permissions.off(["edit","add","delete"]),Wysie.hooks.run("init-end",this)},get data(){return this.getData()},getData:function(e){return this.root.getData(e)},toJSON:function(){var e=arguments.length<=0||void 0===arguments[0]?this.data:arguments[0];return i.toJSON(e)},render:function(e){i.hooks.run("render-start",{context:this,data:e}),e?(this.everSaved=!0,this.root.render(e.data||e)):this.root["import"](),this.unsavedChanges=!1},clear:function(){confirm("This will delete all your data. Are you sure?")&&(this.storage&&this.storage.clear(),this.root.clear())},edit:function(){this.editing=!0,this.root.edit(),e.events(this.wrapper,"mouseenter.wysie:edit mouseleave.wysie:edit",function(e){if(e.target.matches(".wysie-item-controls .delete")){var t=e.target.closest(i.selectors.item);t.classList.toggle("delete-hover","mouseenter"==e.type)}if(e.target.matches(i.selectors.item)){
e.target.classList.remove("has-hovered-item");var n=e.target.parentNode.closest(i.selectors.item);n&&n.classList.toggle("has-hovered-item","mouseenter"==e.type)}},!0),this.unsavedChanges=this.calculateUnsavedChanges()},calculateUnsavedChanges:function(){var e=!1;return this.walk(function(t){return t.unsavedChanges?(e=!0,!1):void 0}),e},done:function(){this.root.done(),e.unbind(this.wrapper,".wysie:edit"),this.editing=!1,this.unsavedChanges=!1},save:function(){this.root.save(),this.storage&&this.storage.save(),this.everSaved=!0,this.unsavedChanges=!1},revert:function(){this.root.revert()},walk:function(e){this.root.walk(e)},live:{editing:{set:function(e){this.wrapper.classList.toggle("editing",e),e?this.wrapper.setAttribute("data-editing",""):this.wrapper.removeAttribute("data-editing")}},unsavedChanges:function(e){this.wrapper.classList.toggle("unsaved-changes",e),this.ui&&this.ui.save&&(this.ui.save.disabled=!e,this.ui.revert.disabled=!this.everSaved||!e)},everSaved:function(e){this.ui&&this.ui.revert&&(this.ui.revert.disabled=!e);
}},"static":{all:[],toJSON:function(e){return null===e?"":"string"==typeof e?e:JSON.stringify(e,null,"	")},readable:function(e){return e&&e.replace(/([a-z])([A-Z])(?=[a-z])/g,function(e,t,i){return t+" "+i.toLowerCase()}).replace(/([a-z])[_\/-](?=[a-z])/g,"$1 ").replace(/^[a-z]/,function(e){return e.toUpperCase()})},identifier:function(e){return e+="",e&&e.replace(/\s+/g,"-").replace(/[^\w-]/g,"").toLowerCase()},queryJSON:function(t,i){return i&&t?e.value.apply(e,[t].concat(i.split("/"))):t},observe:function(t,i,n,r){var s="function"==e.type(n)?new MutationObserver(n):n,o=i?{attributes:!0,attributeFilter:[i],attributeOldValue:!!r}:{characterData:!0,childList:!0,subtree:!0,characterDataOldValue:!!r};return s.observe(t,o),s},toArray:function(e){return Array.isArray(e)?e:[e]},flatten:function(e){return Array.isArray(e)?e.reduce(function(e,t){return i.toArray(e).concat(i.flatten(t))},[]):[e]},is:function(e,t){return t.matches&&t.matches(i.selectors[e])},has:function(e,t){return t.matches&&t.matches(i.selectors.option(e));
},hooks:new e.Hooks}});!function(){var t=i.selectors={property:"[property], [itemprop]",specificProperty:function(e){return"[property="+e+"], [itemprop="+e+"]"},scope:"[typeof], [itemscope], [itemtype], .scope",multiple:"[multiple], [data-multiple], .multiple",required:"[required], [data-required], .required",formControl:"input, select, textarea",computed:".computed",item:".wysie-item",ui:".wysie-ui",option:function(e){return"["+e+"], [data-"+e+"], [data-wysie-options~='"+e+"'], ."+e},container:{li:"ul, ol",tr:"table",option:"select",dt:"dl",dd:"dl"}},n=t.arr=function(e){return e.split(/\s*,\s*/g)},r=t.not=function(e){return n(e).map(function(e){return":not("+e+")"}).join("")},s=t.or=function(e,t){return e+", "+t},o=t.and=function(e,t){return i.flatten(n(e).map(function(e){return n(t).map(function(t){return e+t})})).join(", ")},a=t.andNot=function(e,t){return o(e,r(t))};e.extend(i.selectors,{primitive:a(t.property,t.scope),rootScope:a(t.scope,t.property),output:s(t.specificProperty("output"),".output, .value"),
autoMultiple:o("li, tr, option",":only-of-type")})}(),e.proxy=e.classProps.proxy=e.overload(function(e,t,i){return Object.defineProperty(e,t,{get:function(){return this[i][t]},set:function(e){this[i][t]=e},configurable:!0,enumerable:!0}),e}),e.classProps.propagated=function(e,t){Wysie.toArray(t).forEach(function(t){var i=e[t];e[t]=function(){var e=i&&i.apply(this,arguments);this.propagate&&e!==!1&&this.propagate(t)}})},document.addEventListener("focus",function(e){t(".focus-within").forEach(function(e){return e.classList.remove("focus-within")});for(var i=e.target;i=i.parentNode;)i.classList&&i.classList.add("focus-within")},!0),Promise.all([e.ready(),e.include(Array.from&&window.Intl&&document.body.closest,"https://cdn.polyfill.io/v2/polyfill.min.js?features=blissfuljs,Intl.~locale.en")]).then(function(){t("[data-store]").forEach(function(e){new Wysie(e)})})["catch"](function(e){return console.error(e)}),Stretchy.selectors.filter=".wysie-editor:not([property])"}(Bliss,Bliss.$),function(e){
var t=Wysie.Permissions=e.Class({constructor:function(e,t){this.triggers=[],this.wysie=t,this.set(e)},set:function(e){for(var t in e)this[t]=e[t]},on:function(e){var t=this;return Wysie.toArray(e).forEach(function(e){return t[e]=!0}),this},off:function(e){var t=this;return e=Array.isArray(e)?e:[e],e.forEach(function(e){return t[e]=!1}),this},can:function(e,t,i){this.observe(e,!0,t),i&&this.observe(e,!1,i)},when:function(e){var t=this;return new Promise(function(i,n){t.can(e,i,n)})},observe:function(e,t,i){e=Array.isArray(e)?e:[e],this.is(e,t)&&i(),this.triggers.push({actions:e,value:t,callback:i,active:!0})},is:function(e,t){var i=this,n=e.map(function(e){return!!i[e]}).reduce(function(e,t){return e||t});return t?n:!n},changed:function(e,t,i){var n=this;i=!!i,t=!!t,t!=i&&(this.wysie&&this.wysie.wrapper.classList.toggle("can-"+e,t),this["_"+e]=t,this.triggers.forEach(function(t){var i=n.is(t.actions,t.value);t.active&&t.actions.indexOf(e)>-1&&i?(t.active=!1,t.callback()):i||(t.active=!0);
}))},or:function(e){var i=this;return t.actions.forEach(function(t){i[t]=i[t]||e[t]}),this},"static":{actions:[],register:function(i,n){return Array.isArray(i)?void i.forEach(function(e){return t.register(e,n)}):(e.live(t.prototype,i,function(e,t){n&&n.call(this,e,t),this.changed(i,e,t)}),void t.actions.push(i))}}});t.register("read"),t.register("login",function(e){e&&this.logout&&(this.logout=!1)}),t.register("logout",function(e){e&&this.login&&(this.login=!1)}),t.register("edit",function(e){e&&(this.add=this["delete"]=!0)}),t.register(["add","delete"],function(e){e||(this.edit=!1)})}(Bliss),function(e){var t=Wysie.Storage=e.Class({constructor:function(i){var n=this;this.wysie=i,this.urls=i.store.split(/\s+/).map(function(e){return"local"===e&&(e="#"+n.wysie.id+"-store"),new URL(e,location)}),this.backends=Wysie.flatten(this.urls.map(function(e){return t.Backend.create(e,n)})),this.backends[0].permissions=this.wysie.permissions.or(this.backends[0].permissions),this.ready=Promise.all(this.backends.map(function(e){
return e.ready})),this.loaded=new Promise(function(e,t){n.wysie.wrapper.addEventListener("wysie:load",e)}),this.authControls={},this.permissions.can("login",function(){n.loginHash="#login"+(Wysie.all[0]===n.wysie?"":"-"+n.wysie.id),n.authControls.login=e.create({tag:"a",href:n.loginHash,textContent:"Login",className:"login button",events:{click:function(e){e.preventDefault(),n.login()}},after:e(".status",n.wysie.bar)});var t;(t=function(){location.hash===n.loginHash&&(history.replaceState(null,document.title,new URL("",location)+""),n.login())})(),window.addEventListener("hashchange.wysie",t)},function(){e.remove(n.authControls.login),n.wysie.wrapper._.unbind("hashchange.wysie")}),this.wysie.wrapper.addEventListener("wysie:login.wysie",function(t){var i=e(".status",n.wysie.bar);i.innerHTML="",i._.contents(["Logged in to "+t.backend.id+" as ",{tag:"strong",innerHTML:t.name},{tag:"button",textContent:"Logout",className:"logout",events:{click:function(e){return t.backend.logout()}}}])}),this.wysie.wrapper.addEventListener("wysie:logout.wysie",function(t){
e(".status",n.wysie.bar).textContent=""})},get getBackends(){return this.backends.filter(function(e){return!!e.get})},get putBackends(){return this.backends.filter(function(e){return!!e.put})},get authBackends(){return this.backends.filter(function(e){return!!e.login})},proxy:{permissions:"wysie"},load:function(){var t=this;this.ready;this.inProgress="Loading";var i=this.getBackends[0];i&&i.ready.then(function(){return i.get()}).then(function(i){t.inProgress=!1,t.wysie.wrapper._.fire("wysie:load"),i&&"string"==e.type(i)&&(i=JSON.parse(i));var n=Wysie.queryJSON(i,t.param("root"));t.wysie.render(n)})["catch"](function(e){t.inProgress=!1,e.xhr&&404==e.xhr.status?t.wysie.render(""):(console.error(e),console.log(e.stack)),t.wysie.wrapper._.fire("wysie:load")})},save:function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?this.wysie.data:arguments[0];this.inProgress="Saving",Promise.all(this.putBackends.map(function(e){return e.login().then(function(){return e.put({name:e.filename,
path:e.path,data:t})})})).then(function(){e.wysie.wrapper._.fire("wysie:save"),e.inProgress=!1})["catch"](function(t){e.inProgress=!1,t&&(console.error(t),console.log(t.stack))})},login:function(){return this.authBackends[0]&&this.authBackends[0].login()},logout:function(){return this.authBackends[0]&&this.authBackends[0].logout()},clear:function(){this.save(null)},param:function(e){if(this.params=this.params||{},!(e in this.params)){var t="data-store-"+e;this.params[e]=this.wysie.wrapper.getAttribute(t)||this.wysie.element.getAttribute(t),this.wysie.wrapper.removeAttribute(t),this.wysie.element.removeAttribute(t)}return this.params[e]},live:{inProgress:function(t){if(t){e.create("div",{textContent:t+"…",className:"progress",inside:this.wysie.wrapper})}else e.remove(e(".progress",this.wysie.wrapper))}},"static":{isHash:function(e){return e.origin===location.origin&&e.pathname===location.pathname&&!!e.hash}}});t.Backend=e.Class({constructor:function(e,t){var i=this;this.url=e,this.storage=t,
this.id=this.constructor.id,this.permissions=new Wysie.Permissions,Wysie.Permissions.actions.forEach(function(e){i.permissions.can(e,function(){i.storage.permissions.on(e)},function(){})})},ready:Promise.resolve(),login:function(){return Promise.resolve()},logout:function(){return Promise.resolve()},proxy:{wysie:"storage"},"static":{create:function(e,i){var n=[];return t.Backend.backends.forEach(function(t){if(t&&t.test(e)){var r=new t(e,i);r.id=t.id,n.push(r)}}),n},backends:[],add:function(e,i,n){t.Backend[e]=i,t.Backend.backends[n?"unshift":"push"](i),i.id=e}}}),t.Backend.add("Element",e.Class({"extends":t.Backend,constructor:function(){this.permissions.on(["read","edit","save"]),this.element=e(this.url.hash)},get:function(){return Promise.resolve(this.element.textContent)},put:function(e){var t=e.data,i=void 0===t?"":t;return this.element.textContent=this.wysie.toJSON(i),Promise.resolve()},"static":{test:function(i){return t.isHash(i)?!!e(i.hash):void 0}}})),t.Backend.add("Remote",e.Class({
"extends":t.Backend,constructor:function(){this.permissions.on(["read"])},get:function(){return e.fetch(this.url.href,{responseType:"json"}).then(function(e){return Promise.resolve(e.response)})},"static":{test:function(e){return!t.isHash(e)}}})),t.Backend.add("Local",e.Class({"extends":t.Backend,constructor:function(){this.permissions.on(["read","edit","save"]),this.key=this.url+""},get:function(){return Promise.resolve(localStorage[this.key])},put:function(e){var t=e.data,i=void 0===t?"":t;return localStorage[this.key]=this.wysie.toJSON(i),Promise.resolve()},"static":{test:function(i){return t.isHash(i)?!e(i.hash):void 0}}}))}(Bliss),function(e,t){Wysie.Node=e.Class({"abstract":!0,constructor:function(e,t){if(!e||!t)throw new Error("Wysie.Node constructor requires an element argument and a wysie object");this.element=e,this.wysie=t,this.property=e.getAttribute("property"),this.type=Wysie.Scope.normalize(e),Wysie.hooks.run("node-init-end",this)},get isRoot(){return!this.property},get name(){
return Wysie.readable(this.property||this.type).toLowerCase()},get data(){return this.getData()},getRelativeData:function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?{dirty:!0,computed:!0,"null":!0}:arguments[0],i=this.getData(t);return self.Proxy&&i&&"object"===("undefined"==typeof i?"undefined":_typeof(i))&&(i=new Proxy(i,{get:function(i,n){if(n in i)return i[n];var r=e.walkUp(function(i){return n in i.properties?(i.expressions.updateAlso.add(e.expressions),i.properties[n].getRelativeData(t)):void 0});return void 0!==r?r:void 0},has:function(i,n){if(n in i)return!0;var r=e.walkUp(function(e){return n in e.properties?!0:void 0});return void 0!==r?r:(r=e.find(n),void 0!==r?(r=Array.isArray(r)?r.map(function(e){return e.getData(t)}).filter(function(e){return null!==e}):r.getData(t),i[n]=r,!0):void 0)},set:function(e,t,i){throw Error("You can’t set data via expressions.")}})),i},walk:function(e){var t=function i(t){var n=e(t);n!==!1&&t.propagate&&t.propagate(i)};t(this)},walkUp:function(e){
for(var t=this;t=t.parentScope;){var i=e(t);if(void 0!==i)return i}},call:function(e){for(var t=arguments.length,i=Array(t>1?t-1:0),n=1;t>n;n++)i[n-1]=arguments[n];return i=i||[],"string"==typeof e?this[e].apply(this,_toConsumableArray(i)):e.apply(this,[this].concat(_toConsumableArray(i)))},edit:function(){this.propagate(function(e){return e[e.preEdit?"preEdit":"edit"]()})},propagated:["save","revert","done","import"],toJSON:Wysie.prototype.toJSON,"static":{create:function(e,t,i){var n;return Wysie.is("multiple",e)&&!i?new Wysie.Collection(e,t):(n=Wysie.Unit).create.apply(n,arguments)},normalizeProperty:function(e){var t=e.getAttribute("property")||e.getAttribute("itemprop");return!t&&e.hasAttribute("property")&&(t=e.name||e.id||e.classList[0]),t&&e.setAttribute("property",t),t}}})}(Bliss,Bliss.$),function(e,t){Wysie.Unit=e.Class({"abstract":!0,"extends":Wysie.Node,constructor:function(e,t,i){this.constructor.all.set(this.element,this),this.collection=i,this.collection&&(this.scope=this.parentScope=this.collection.parentScope),
this.computed=Wysie.is("computed",this.element),this.required=Wysie.is("required",this.element),Wysie.hooks.run("unit-init-end",this)},get closestCollection(){return this.collection?this.collection:this.walkUp(function(e){return e.collection?e.collection:void 0})||null},isDeleted:function(){this.deleted;return this.deleted?!0:!!this.parentScope&&this.parentScope.isDeleted()},getData:function(e){e=e||{};var t=function(t){return!t.everSaved&&!e.dirty||t.deleted&&e.dirty||t.computed&&!e.computed||t.placeholder};return t(this)?null:void this.walkUp(function(e){return t(e)?null:void 0})},live:{deleted:function(i){var n=this;this.element.classList.toggle("deleted",i),i?(this.elementContents=document.createDocumentFragment(),t(this.element.childNodes).forEach(function(e){n.elementContents.appendChild(e)}),e.contents(this.element,["Deleted "+this.name,{tag:"button",textContent:"Undo",events:{click:function(e){return n.deleted=!1}}}]),this.element.classList.remove("delete-hover")):this.deleted&&(this.element.textContent="",
this.element.appendChild(this.elementContents),this._deleted=!1,e.fire(this.element,"wysie:datachange",{unit:this.collection,wysie:this.wysie,action:"undelete",item:this}))},unsavedChanges:function(e){return this.placeholder&&(e=!1),this.element.classList.toggle("unsaved-changes",e),e},placeholder:function(e){this.element.classList.toggle("placeholder",e)}},"static":{get:function(e,t){var i=Wysie.Scope.all.get(e);return t||!i?Wysie.Primitive.all.get(e):i},create:function(e,t,i){if(!e||!t)throw new TypeError("Wysie.Unit.create() requires an element argument and a wysie object");return new(Wysie[Wysie.is("scope",e)?"Scope":"Primitive"])(e,t,i)}}})}(Bliss,Bliss.$),function(e,t){var i=Wysie.Expression=e.Class({constructor:function(e){this.expression=e},eval:function(e){this.oldValue=this.value,Wysie.hooks.run("expression-eval-beforeeval",this);try{this["function"]||(this["function"]=this.createFunction()),this.value=this["function"](e)}catch(t){Wysie.hooks.run("expression-eval-error",{context:this,
exception:t}),this.value=i.ERROR}return this.value},toString:function(){return"=("+this.expression+")"},createFunction:function(){var e=this.expression;return/^if\([\S\s]+\)$/i.test(e)&&(e=e.replace(/^if\(/,"iff(")),e=e.replace(i.simpleOperation,function(e,t,i,n){var r="("+Wysie.Functions.operators[i]+"("+t+", "+n+"))";return r}),i.simpleOperation.lastIndex=0,new Function("data","with(Wysie.Functions._Trap)\n				with(data) {\n					return "+e+";\n				}")},live:{expression:function(e){e=e.trim();this["function"]=null}},"static":{ERROR:"N/A",lazy:{simpleOperation:function(){var e=Object.keys(Wysie.Functions.operators).map(function(e){return e.replace(/[|*+]/g,"\\$&")}).join("|"),t="\\s*(\\b[\\w.]+\\b)\\s*";return RegExp("(?:^|\\()"+t+"("+e+")"+t+"(?:$|\\))","g")}}}});!function(){var t=Wysie.Expression.Text=e.Class({constructor:function(e){this.node=this.element=e.node,3===this.node.nodeType&&(this.element=this.node.parentNode,this.node.previousElementSibling||this.node.nextElementSibling||(this.node=this.element,
this.element.normalize())),this.attribute=e.attribute||null,this.all=e.all,this.expression=this.text.trim(),this.template=this.tokenize(this.expression),Wysie.hooks.run("expressiontext-init-end",this),t.elements.set(this.element,[].concat(_toConsumableArray(t.elements.get(this.element)||[]),[this]))},get text(){return this.attribute?this.node.getAttribute(this.attribute):this.node.textContent},set text(e){this.oldText=this.text,this.primitive&&"marginal_cost"==this.primitive.property,Wysie.Primitive.setValue(this.node,e,this.attribute)},update:function(e){var i=this;this.value=[],this.data=e,this.text=this.template.map(function(n){if(n instanceof Wysie.Expression){var r={context:i,expr:n};return Wysie.hooks.run("expressiontext-update-beforeeval",r),r.value=r.expr.eval(e),Wysie.hooks.run("expressiontext-update-aftereval",r),void 0===r.value||null===r.value?(i.value.push(""),""):(i.value.push(r.value),"number"!=typeof r.value||i.attribute?Array.isArray(r.value)&&(r.value=r.value.join(", ")):r.value=t.formatNumber(r.value),
r.value)}return i.value.push(n),n}).join(""),this.primitive&&1===this.template.length&&"number"==typeof this.value[0]&&(this.primitive.datatype="number"),this.value=this.value.join(""),this.primitive&&(this.attribute||Wysie.Primitive.setValue(this.element,this.value,"content"))},tokenize:function(e){var i,n=this.expressionRegex,r=[],s=0;for(n.lastIndex=0;null!==(i=n.exec(e));){i.index>s&&r.push(e.substring(s,i.index)),s=n.lastIndex=t.findEnd(e.slice(i.index))+i.index+1;var o=e.slice(i.index+1,s-1);r.push(new Wysie.Expression(o))}return s<e.length&&r.push(e.substring(s)),r},lazy:{},proxy:{scope:"all",expressionRegex:"all"},"static":{elements:new WeakMap,findEnd:function(e){for(var t,i,n=[],r="\"'`",s="([{",o=")]}",a=0;e[a];a++){var u=e[a];if(t)u!==t||i||(t="");else if(!i&&r.indexOf(u)>-1)t=u;else if(s.indexOf(u)>-1)n.push(u);else{var c=n[n.length-1];if(u===o[s.indexOf(c)]&&n.pop(),0===n.length)break}i="\\"==u}return a},lazy:{formatNumber:function(){var e=new Intl.NumberFormat("en-US",{maximumFractionDigits:2
});return function(t){return t===1/0||t===-(1/0)?0>t?"-∞":"∞":e.format(t)}},rootFunctionRegExp:function(){return RegExp("^=\\s*(?:"+Wysie.Expressions.rootFunctions.join("|")+")\\($","i")}}}})}(),function(){var i=Wysie.Expressions=e.Class({constructor:function(e){this.scope=e,this.scope.expressions=this,this.all=[],Wysie.hooks.run("expressions-init-start",this),this.traverse(),this.updateAlso=new Set},init:function(){var e=this;this.all.length>0&&(this.lastUpdated=0,this.update(),this.scope.element.addEventListener("wysie:datachange",function(t){return e.update()}),this.THROTTLE=0,this.scope.wysie.wrapper.addEventListener("wysie:load",function(t){setTimeout(function(){return e.THROTTLE=25},100)}))},update:function n(){var e=this;if(!this.scope.isDeleted()){if(this.THROTTLE>0){var i=performance.now()-this.lastUpdated;if(clearTimeout(n.timeout),this.lastUpdated&&i<this.THROTTLE)return void(n.timeout=setTimeout(function(){return e.update()},this.THROTTLE-i))}var r={context:this,data:this.scope.getRelativeData()
};Wysie.hooks.run("expressions-update-start",r),t(this.all).forEach(function(e){return e.update(r.data)}),this.THROTTLE>0&&(this.lastUpdated=performance.now()),this.updateAlso.forEach(function(e){return e.update()})}},extract:function(e,t){this.expressionRegex.lastIndex=0,this.expressionRegex.test(t?t.value:e.textContent)&&this.all.push(new Wysie.Expression.Text({node:e,attribute:t&&t.name,all:this}))},traverse:function(e){var n=this;e=e||this.scope.element,e.matches&&e.matches(i.escape)||(3===e.nodeType&&this.extract(e,null),e!=this.scope.element&&Wysie.is("scope",e)||(t(e.attributes).forEach(function(t){return n.extract(e,t)}),t(e.childNodes).forEach(function(e){return n.traverse(e)})))},lazy:{expressionRegex:function(){var e="(?:"+this.scope.wysie.propertyNames.join("|")+")";return RegExp(["\\[[\\S\\s]*?"+e+"[\\S\\s]*?\\]","{\\s*"+e+"\\s*}","\\${[\\S\\s]+?}"].join("|"),"gi")}},"static":{THROTTLE:0,escape:".ignore-expressions",lazy:{rootFunctions:function(){return[].concat(_toConsumableArray(Object.keys(Wysie.Functions)),_toConsumableArray(Object.getOwnPropertyNames(Math)),["if",""]);
}}}})}(),Wysie.hooks.add("scope-init-start",function(){new Wysie.Expressions(this)}),Wysie.hooks.add("scope-init-end",function(){this.expressions.init()})}(Bliss,Bliss.$),function(){function e(e,t){return e=Array.isArray(e)?e:t?$$(t):[e],e.filter(function(e){return!isNaN(e)}).map(function(e){return+e})}function t(t,n){var r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];return n.length<2?function(e){return Array.isArray(e)?e.map(n):n(e)}:(r.symbol&&(i.operators[r.symbol]=t),i[t]=function(){for(var t=arguments.length,i=Array(t),s=0;t>s;s++)i[s]=arguments[s];return 1===i.length&&(i=[].concat(_toConsumableArray(i),[r.identity])),i.reduce(function(t,i){return Array.isArray(i)?("number"==typeof r.identity&&(i=e(i)),Array.isArray(t)?[].concat(_toConsumableArray(i.map(function(e,i){return n(void 0===t[i]?r.identity:t[i],e)})),_toConsumableArray(t.slice(i.length))):i.map(function(e){return n(t,e)})):("number"==typeof r.identity&&(i=+i),Array.isArray(t)?t.map(function(e){return n(e,i);
}):n(t,i))})})}var i=Wysie.Functions={operators:{},sum:function(t){return e(t,arguments).reduce(function(e,t){return+e+(+t||0)},0)},average:function(t){return t=e(t,arguments),t.length&&i.sum(t)/t.length},min:function(t){var i;return(i=Math).min.apply(i,_toConsumableArray(e(t,arguments)))},max:function(t){var i;return(i=Math).max.apply(i,_toConsumableArray(e(t,arguments)))},count:function(e){return Wysie.toArray(e).filter(function(e){return null!==e&&e!==!1}).length},round:function(e,t){return e&&t&&isFinite(e)?+e.toLocaleString("en-US",{useGrouping:!1,maximumFractionDigits:t}):Math.round(e)},iff:function(e,t){var i=arguments.length<=2||void 0===arguments[2]?"":arguments[2];return e?t:i}};t("not",function(e){return function(e){return!e}}),t("multiply",function(e,t){return e*t},{identity:1,symbol:"*"}),t("divide",function(e,t){return e/t},{identity:1,symbol:"/"}),t("add",function(e,t){return+e+ +t},{symbol:"+"}),t("subtract",function(e,t){return e-t},{symbol:"-"}),t("lte",function(e,t){return t>=e;
},{symbol:"<="}),t("lt",function(e,t){return t>e},{symbol:"<"}),t("gte",function(e,t){return e>=t},{symbol:">="}),t("gt",function(e,t){return e>t},{symbol:">"}),t("eq",function(e,t){return e==t},{symbol:"=="}),t("and",function(e,t){return!!e&&!!t},{identity:!0,symbol:"&&"}),t("or",function(e,t){return!!e||!!t},{identity:!1,symbol:"||"});var n={average:"avg",iff:"iff IF",subtract:"minus",multiply:"mult product",divide:"div",lt:"lessThan smaller",gt:"moreThan greater greaterThan bigger",eq:"equal equality"};for(name in n)n[name].split(/\s+/g).forEach(function(e){return i[e]=i[name]});Wysie.Functions._Trap=self.Proxy?new Proxy(i,{get:function(e,t){if(t in e)return e[t];var i=t.toLowerCase&&t.toLowerCase();return i&&e.hasOwnProperty(i)?e[i]:t in Math||i in Math?Math[t]||Math[i]:t in self?self[t]:t},has:function(e,t){return"data"!=t}}):Wysie.Functions}(),function(e,t){var i=Wysie.Scope=e.Class({"extends":Wysie.Unit,constructor:function(e,n,r){var s=this;if(this.properties={},this.scope=this,
Wysie.hooks.run("scope-init-start",this),Wysie.Primitive.getValueAttribute(this.element)){var o=this.properties[this.property]=new Wysie.Primitive(this.element,this.wysie);o.scope=o.parentScope=this}t(Wysie.selectors.property,this.element).forEach(function(e){var t=e.getAttribute("property");if(s.contains(e)){var n=s.properties[t];if(n){var r=n;n instanceof Wysie.Collection||(r=new Wysie.Collection(n.element,s.wysie),r.parentScope=s,s.properties[t]=n.collection=r,r.add(n)),!r.mutable&&Wysie.is("multiple",e)&&(r.mutable=!0),r.add(e)}else{var o=Wysie.Node.create(e,s.wysie);o.scope=o instanceof i?o:s,o.parentScope=s,s.properties[t]=o}}}),Wysie.hooks.run("scope-init-end",this)},get propertyNames(){return Object.keys(this.properties)},getData:function(t){t=t||{};var i=this["super"].getData.call(this,t);return void 0!==i?i:(i={},this.propagate(function(e){if((!e.computed||t.computed)&&!(e.property in i)){var n=e.getData(t);(null!==n||t["null"])&&(i[e.property]=n)}}),t.dirty||e.extend(i,this.unhandled),
i)},find:function(e){if(this.property==e)return this;if(e in this.properties)return this.properties[e].find(e);for(var t in this.properties){var i=this.properties[t].find(e);if(void 0!==i)return i}},propagate:function(t){var i=arguments;e.each(this.properties,function(e,t){t.call.apply(t,i)})},save:function(){return this.placeholder?!1:(this.everSaved=!0,void(this.unsavedChanges=!1))},done:function(){e.unbind(this.element,".wysie:edit")},"import":function(){this.everSaved=!0},propagated:["save","done","import","clear"],render:function(t){var i=this;return t?(t=t.isArray?t[0]:t,this.unhandled=e.extend({},t,function(e){return!(e in i.properties)}),this.propagate(function(e){e.render(t[e.property])}),void this.save()):void this.clear()},contains:function(e){return e instanceof Wysie.Unit?e.parentScope===this:e.parentNode&&this.element===e.parentNode.closest(Wysie.selectors.scope)},"static":{all:new WeakMap,normalize:function(e){if(Wysie.is("scope",e)){var t=e.getAttribute("typeof")||e.getAttribute("itemtype")||"Item";
return e.setAttribute("typeof",t),t}return null}}})}(Bliss,Bliss.$),function(e,t){var i=!1,n=Wysie.Primitive=e.Class({"extends":Wysie.Unit,constructor:function(i,r,s){var o=this;this.attribute=n.getValueAttribute(this.element),this.attribute||this.element.normalize(),this.datatype=n.getDatatype(this.element,this.attribute);var a=Wysie.Expression.Text.elements.get(this.element),u=a&&a.filter(function(e){return e.attribute==o.attribute})[0];if(u&&(u.primitive=this,this.computed=!0),Wysie.is("formControl",this.element)?(this.editor=this.element,this.edit()):this.editor||(this.editor=t(this.element.children).filter(function(e){return e.matches(Wysie.selectors.formControl)&&!e.matches(Wysie.selectors.property)})[0],e.remove(this.editor)),this.exposed||this.computed||(this.wysie.needsEdit=!0),this.templateValue=this.value,this["default"]=this.element.getAttribute("data-default"),this.observer=Wysie.observe(this.element,this.attribute,function(e){if(o.attribute){var t=o.value;e[e.length-1].oldValue!=t&&o.update(t);
}else(!o.wysie.editing||o.computed)&&o.oldValue!=o.value&&o.update(o.value)},!0),this.computed||""===this["default"]?this["default"]=this.templateValue:(null===this["default"]&&(this["default"]=this.editor?this.editorValue:this.emptyValue),this.value=this["default"]),this.update(this.value),this.collection){var c=function(t){o.unobserve();var i=e.remove(e(Wysie.selectors.ui,o.element)),n=t();return e.inside(i,o.element),o.observe(),n};["textContent","innerHTML"].forEach(function(e){var t=Object.getOwnPropertyDescriptor(Node.prototype,e);Object.defineProperty(o.element,e,{get:function(){var e=this;return c(function(){return t.get.call(e)})},set:function(e){var i=this;c(function(){return t.set.call(i,e)})}})})}this.initialized=!0},get value(){if(this.editing){var e=this.editorValue;return""===e?null:e}return n.getValue(this.element,this.attribute,this.datatype)},set value(e){this.editing&&document.activeElement!=this.editor&&(this.editorValue=e),this.oldValue=this.value,(!this.editing||this.attribute)&&("number"!=this.datatype||this.attribute?n.setValue(this.element,e,this.attribute,this.datatype):(n.setValue(this.element,e,"content",this.datatype),
n.setValue(this.element,Wysie.Expression.Text.formatNumber(e),null,this.datatype))),(Wysie.is("formControl",this.element)||!this.attribute)&&this.update(e),this.unsavedChanges=this.wysie.unsavedChanges=!0},get editorValue(){if(this.editor){if(this.editor.matches(Wysie.selectors.formControl))return n.getValue(this.editor,void 0,this.datatype);var t=e(Wysie.selectors.output+", "+Wysie.selectors.formControl,this.editor);if(t)return n.all.has(t)?n.all.get(t).value:n.getValue(t)}},set editorValue(t){if(this.editor)if(this.editor.matches(Wysie.selectors.formControl))n.setValue(this.editor,t);else{var i=e(Wysie.selectors.output+", "+Wysie.selectors.formControl,this.editor);i&&(n.all.has(i)?n.all.get(i).value=t:n.setValue(i,t))}},get exposed(){return this.editor===this.element},getData:function(e){e=e||{};var t=this["super"].getData.call(this,e);if(void 0!==t)return t;var t=e.dirty||this.exposed?this.value:this.savedValue;return e.dirty||""!==t?t:null},update:function(t){t=t||0===t?t:"",this.empty=""===t,
this.humanReadable&&this.attribute&&(this.element.textContent=this.humanReadable(t)),this.initialized&&(this.oldValue=this.value,e.fire(this.element,"wysie:datachange",{property:this.property,value:t,wysie:this.wysie,node:this,dirty:this.editing,action:"propertychange"}))},save:function(){return this.placeholder?!1:(this.savedValue=this.value,this.everSaved=!0,void(this.unsavedChanges=!1))},done:function(){this.unobserve(),this.popup?this.hidePopup():this.attribute||this.exposed||!this.editing||(e.remove(this.editor),this.element.textContent=this.editorValue),this.exposed||(this.editing=!1),null!==this.element._.data.prevTabindex?this.element.tabIndex=this.element._.data.prevTabindex:this.element.removeAttribute("tabindex"),this.element._.unbind(".wysie:edit .wysie:preedit .wysie:showpopup"),this.observe()},revert:function(){this.unsavedChanges&&void 0!==this.savedValue&&(this.value=this.savedValue,this.unsavedChanges=!1)},preEdit:function(){var e=this;if(!this.computed){if(this.empty&&!this.attribute)return void this.edit();
var t;this.element._.events({"click.wysie:preedit":function(t){return e.edit()},"focus.wysie:preedit":function(t){e.edit(),e.popup||e.editor.focus()},"click.wysie:edit":function(t){e.exposed||t.preventDefault()}}),this.attribute||this.element._.events({"mouseenter.wysie:preedit":function(i){clearTimeout(t),t=setTimeout(function(){return e.edit()},150)},"mouseleave.wysie:preedit":function(e){clearTimeout(t)}}),this.element._.data.prevTabindex=this.element.getAttribute("tabindex"),this.element.tabIndex=0}},initEdit:function(){var i=this;if(this.element.hasAttribute("data-input")){var r=this.element.getAttribute("data-input");r&&(this.editor=e.clone(e(r)),Wysie.is("formControl",this.editor)||(e(Wysie.selectors.output,this.editor)?(this.editor.setAttribute("data-store","none"),new Wysie(this.editor)):this.editor=null))}if(!this.editor){var s=n.getMatch(this.element,n.editors);s.create&&e.extend(this,s,function(e){return"create"!=e});var o=s.create||s;this.editor=e.create("function"===e.type(o)?o.call(this):o),
this.editorValue=this.value}if(this.editor._.events({"input change":function(e){var t=i.wysie.unsavedChanges;i.value=i.editorValue,i.exposed&&!i.wysie.editing&&i.wysie.permissions.save&&i.scope.everSaved&&(i.unsavedChanges=!1,i.wysie.unsavedChanges=t,"change"==e.type&&(i.save(),i.wysie.storage.save(),i.wysie.unsavedChanges=i.wysie.calculateUnsavedChanges()))},focus:function(e){i.editor.select&&i.editor.select()},keyup:function(e){(i.popup&&13==e.keyCode||27==e.keyCode)&&(i.popup.contains(document.activeElement)&&i.element.focus(),e.stopPropagation(),i.hidePopup())},"wysie:datachange":function(t){"output"===t.property&&(t.stopPropagation(),e.fire(i.editor,"input"))}}),"placeholder"in this.editor&&(this.editor.placeholder="("+this.label+")"),!this.exposed){var a=/^data-input-/i;if(t(this.element.attributes).forEach(function(e){a.test(e.name)&&this.editor.setAttribute(e.name.replace(a,""),e.value)},this),this.attribute){this.element.classList.add("using-popup"),this.popup=this.popup||e.create("div",{
className:"wysie-popup",hidden:!0,contents:[this.label+":",this.editor]}),this.editor.matches("select")&&(this.editor.size=Math.min(10,this.editor.children.length));var u=function(e){i.popup.contains(e.target)||i.element.contains(e.target)||i.hidePopup()};this.showPopup=function(){e.unbind([this.element,this.popup],".wysie:showpopup"),this.popup._.after(this.element);var t=this.element.offsetLeft,i=this.element.offsetTop+this.element.offsetHeight;this.popup._.style({top:i+"px",left:t+"px"}),this.popup._.removeAttribute("hidden"),e.events(document,"focus click",u,!0)},this.hidePopup=function(){var t=this;e.unbind(document,"focus click",u,!0),this.popup.setAttribute("hidden",""),setTimeout(function(){e.remove(t.popup)},400),e.events(this.element,"focus.wysie:showpopup click.wysie:showpopup",function(e){t.showPopup()},!0)}}}this.popup||this.editor.classList.add("wysie-editor"),this.initEdit=null},edit:function(){this.computed||this.editing||(this.element._.unbind(".wysie:preedit"),this.initEdit&&this.initEdit(),
this.popup&&this.showPopup(),this.attribute||this.editor.parentNode==this.element||this.exposed||(this.editorValue=this.value,this.element.textContent="",this.exposed||this.element.appendChild(this.editor)),this.editing=!0)},clear:function(){this.value=this.emptyValue},"import":function(){this.computed||(this.value=this.templateValue)},render:function(e){Array.isArray(e)&&(e=e[0]),"object"===("undefined"==typeof e?"undefined":_typeof(e))&&(e=e[this.property]),this.value=void 0===e?this.emptyValue:e,this.save()},find:function(e){return this.property==e?this:void 0},observe:function(){Wysie.observe(this.element,this.attribute,this.observer)},unobserve:function(){this.observer.disconnect()},lazy:{label:function(){return Wysie.readable(this.property)},emptyValue:function(){switch(this.datatype){case"boolean":return!1;case"number":return 0}return""}},live:{empty:function(t){var i=!(""!==t&&null!==t||this.attribute&&e(Wysie.selectors.property,this.element));this.element.classList.toggle("empty",i);
},editing:function(e){this.element.classList.toggle("editing",e)},computed:function(e){this.element.classList.toggle("computed",e)},datatype:function(e){n.getValue.cache&&n.getValue.cache["delete"](this.element)}},"static":{all:new WeakMap,getMatch:function(e,t){var i=null;for(var n in t)e.matches(n)&&(i=t[n]);return i},getValueAttribute:function r(e){var t=(r.cache=r.cache||new WeakMap).get(e);return(void 0===t||i)&&(t=e.getAttribute("data-attribute")||n.getMatch(e,n.attributes),t&&(t.humanReadable&&n.all.has(e)&&(n.all.get(e).humanReadable=t.humanReadable),t=t.value||t),t&&"null"!==t||(t=null),r.cache.set(e,t)),t},getDatatype:function s(e,t){var r=(s.cache=s.cache||new WeakMap).get(e);if(void 0===r||i){if(r=e.getAttribute("datatype"),!r)for(var o in n.datatypes)e.matches(o)&&(r=n.datatypes[o][t]);r=r||"string",s.cache.set(e,r)}return r},getValue:function o(e,t,r){var s=(o.cache=o.cache||new WeakMap).get(e);return(!s||i)&&(t=t||null===t?t:n.getValueAttribute(e),r=r||n.getDatatype(e,t),
s=function(){var i;switch(i=t in e&&n.useProperty(e,t)?e[t]:t?e.getAttribute(t):e.getAttribute("content")||e.textContent||null,r){case"number":return+i;case"boolean":return!!i;default:return i}},o.cache.set(e,s)),s()},setValue:function(e,t,i){if(null!==i&&(i=i||n.getValueAttribute(e)),i in e&&n.useProperty(e,i)&&e[i]!=t)try{e[i]=t}catch(r){}i?e.getAttribute(i)!=t&&e.setAttribute(i,t):e.textContent=t},useProperty:function(e,t){return["href","src"].indexOf(t)>-1?!1:"http://www.w3.org/2000/svg"==e.namespaceURI?!1:!0}}});n.attributes={"img, video, audio":"src","a, link":"href","select, input, textarea, meter, progress":"value","input[type=checkbox]":"checked",time:{value:"datetime",humanReadable:function(e){var t=new Date(e);if(!e||isNaN(t))return"(No "+this.label+")";var i={date:{day:"numeric",month:"short",year:"numeric"},month:{month:"long"},time:{hour:"numeric",minute:"numeric"},"datetime-local":{day:"numeric",month:"short",year:"numeric",hour:"numeric",minute:"numeric"}},n=i[this.editor&&this.editor.type]||i.date;
return n.timeZone="UTC",t.toLocaleString("en-GB",n)}},meta:"content"},n.datatypes={"input[type=checkbox]":{checked:"boolean"},"input[type=range], input[type=number], meter, progress":{value:"number"}},n.editors={"*":{tag:"input"},".number":{tag:"input",type:"number"},".boolean":{tag:"input",type:"checkbox"},"a, img, video, audio, .url":{tag:"input",type:"url",placeholder:"http://"},"p, div, li, dt, dd, h1, h2, h3, h4, h5, h6, article, section, .multiline":{create:function(){var t=getComputedStyle(this.element).display,i=0===t.indexOf("inline")?"input":"textarea",n=e.create(i);if("textarea"==i){var r=this.element.offsetWidth;r&&(n.width=r)}return n},get editorValue(){return this.editor&&this.editor.value},set editorValue(e){this.editor&&(this.editor.value=e?e.replace(/\r?\n/g,""):"")}},"meter, progress":function(){return e.create({tag:"input",type:"range",min:this.element.getAttribute("min")||0,max:this.element.getAttribute("max")||100})},"time, .date":function(){var t={date:/^[Y\d]{4}-[M\d]{2}-[D\d]{2}$/i,
month:/^[Y\d]{4}-[M\d]{2}$/i,time:/^[H\d]{2}:[M\d]{2}/i,week:/[Y\d]{4}-W[W\d]{2}$/i,"datetime-local":/^[Y\d]{4}-[M\d]{2}-[D\d]{2} [H\d]{2}:[M\d]{2}/i},i=this.element.getAttribute("datetime")||"YYYY-MM-DD";for(var n in t)if(t[n].test(i))break;return e.create("input",{type:n})}}}(Bliss,Bliss.$),Wysie.Primitive.editors.img={create:function(){var e=$.create("div",{className:"image-popup",events:{"dragenter dragover drop":function(e){e.stopPropagation(),e.preventDefault()},drop:function(e){$.value(e.dataTransfer,"files",0)}},contents:[{tag:"input",type:"url",className:"value"},{tag:"label",className:"upload",contents:["Upload: ",{tag:"input",type:"file",accept:"image/*",events:{change:function(t){var i=this.files[0];i&&($("img",e).file=i)}}}]},{className:"image-preview",contents:[{tag:"progress",value:"0",max:"100"},{tag:"img"}]},{className:"tip",innerHTML:"<strong>Tip:</strong> You can also drag & drop or paste the image to be uploaded!"}]});return e}},function(e,t){Wysie.Collection=e.Class({
"extends":Wysie.Node,constructor:function(e,i){this.template=e,this.items=[],this.properties=t(Wysie.selectors.property,this.template)._.getAttribute("property"),this.mutable=this.template.matches(Wysie.selectors.multiple),Wysie.hooks.run("collection-init-end",this)},get length(){return this.items.length},get containsTemplate(){return this.items.length&&this.items[0].element===this.element},getData:function(e){e=e||{};var t=[];return this.items.forEach(function(i){if(!i.deleted){var n=i.getData(e);n&&t.push(n)}}),!e.dirty&&this.unhandled&&(t=this.unhandled.before.concat(t,this.unhandled.after)),t},createItem:function(t){var i=this,t=t||this.template.cloneNode(!0),n=Wysie.Unit.create(t,this.wysie,this);return this.mutable&&e.create({tag:"menu",type:"toolbar",className:"wysie-item-controls wysie-ui",contents:[{tag:"button",title:"Delete this "+this.name,className:"delete",events:{click:function(e){return i["delete"](n)}}},{tag:"button",title:"Add new "+this.name.replace(/s$/i,""),className:"add",
events:{click:function(e){return i.add(null,i.items.indexOf(n)).edit()}}}],inside:t}),n},add:function(e,t,i){if(e=e instanceof Node?Wysie.Unit.get(e)||this.createItem(e):e||this.createItem(),t in this.items)e.element._.after(this.items[t].element),this.items.splice(t,0,e);else{if(!e.element.parentNode){if(this.mutable)var n=this.bottomUp&&this.items.length>0?this.items[0].element:this.marker;else var n=this.items[this.length-1].element;e.element._.before(n)}this.items.push(e)}return i||(e.element._.fire("wysie:datachange",{node:this,wysie:this.wysie,action:"add",item:e}),e.unsavedChanges=this.wysie.unsavedChanges=!0),e},propagate:function(){var e=arguments;this.items.forEach(function(t){return t.call.apply(t,e)})},"delete":function(t,i){var n=this;return i?(e.remove(t.element),void this.items.splice(this.items.indexOf(t),1)):e.transition(t.element,{opacity:0}).then(function(){t.deleted=!0,t.element.style.opacity="",t.element._.fire("wysie:datachange",{node:n,wysie:n.wysie,action:"delete",
item:t}),t.unsavedChanges=n.wysie.unsavedChanges=!0})},edit:function(){if(0===this.length&&this.required){var t=this.add(null,null,!0);t.placeholder=!0,t.walk(function(e){return e.unsavedChanges=!1}),e.once(t.element,"wysie:datachange",function(e){t.unsavedChanges=!0,t.placeholder=!1})}this.propagate(function(e){return e[e.preEdit?"preEdit":"edit"]()})},clear:function(){this.mutable&&(this.propagate(function(e){return e.element.remove()}),this.items=[],this.marker._.fire("wysie:datachange",{node:this,wysie:this.wysie,action:"clear"}))},save:function(){var e=this;this.items.forEach(function(t){t.deleted?e["delete"](t,!0):t.unsavedChanges=!1})},done:function(){var e=this;this.items.forEach(function(t){return t.placeholder?void e["delete"](t,!0):void 0})},propagated:["save","done"],revert:function(){var e=this;this.items.forEach(function(t,i){t.everSaved||t.placeholder?(t.deleted&&(t.deleted=!1),t.revert()):e["delete"](t,!0)})},"import":function(){this.mutable&&this.add(this.element),this.items.forEach(function(e){
return e["import"]()})},render:function(e){var t=this;if(this.unhandled={before:[],after:[]},!e)return void((null===e||void 0===e)&&(!this.closestCollection||this.closestCollection.containsTemplate)&&(this.clear(),this["import"]()));if(e=e&&Wysie.toArray(e),this.mutable){if(e&&e.length>0){var i=document.createDocumentFragment();e.forEach(function(e){var n=t.createItem();n.render(e),t.items.push(n),i.appendChild(n.element)}),this.marker.parentNode.insertBefore(i,this.marker)}}else this.items.forEach(function(t,i){return t.render(e&&e[i])}),e&&(this.unhandled.after=e.slice(this.items.length));this.save()},find:function(e){var t=this.items.filter(function(e){return!e.deleted});if(this.property==e)return t;if(this.properties.indexOf(e)>-1){var i=t.map(function(t){return t.find(e)});return Wysie.flatten(i)}},live:{mutable:function(t){if(t&&t!==this.mutable){if(this.wysie.needsEdit=!0,this.required=this.template.matches(Wysie.selectors.required),this.marker=e.create("div",{hidden:!0,className:"wysie-marker",
after:this.template}),this.template.classList.add("wysie-item"),this.template.remove(),!this.addButton.parentNode)if(this.bottomUp)this.addButton._.before(e.value(this.items[0],"element")||this.marker);else{var i=this.element.tagName.toLowerCase(),n=Wysie.selectors.container[i];if(n)var r=this.marker.closest(n);this.addButton._.after(r&&r.parentNode?r:this.marker)}this.template=this.element.cloneNode(!0)}}},lazy:{bottomUp:function(){return this.mutable?this.template.hasAttribute("data-bottomup")?!0:this.addButton.parentNode?!!(this.addButton.compareDocumentPosition(this.template)&Node.DOCUMENT_POSITION_FOLLOWING):!1:!1},closestCollection:function(){var e=this.marker?this.marker.parentNode:this.template.parentNode;return e.closest(Wysie.selectors.item)},addButton:function(){var i=this,n="button.add-"+this.property,r=this.closestCollection||this.marker.closest(Wysie.selectors.scope);if(r)var s=t(n,r).filter(function(e){return!i.template.contains(e)})[0];return s||(s=e.create("button",{className:"add",
textContent:"Add "+this.name})),s.classList.add("wysie-ui","wysie-add"),this.property&&s.classList.add("add-"+this.property),s.addEventListener("click",function(e){e.preventDefault(),i.add().edit()}),s}}})}(Bliss,Bliss.$);var prettyPrint=function(){var e={txt:function(e){return e+="",document.createTextNode(e)},row:function(t,i,n){n=n||"td";var r,s=e.count(t,null)+1,o=$.create("tr"),a={colSpan:s};return $$(t).forEach(function(t){null!==t&&(r=$.create(n,a),t.nodeType?r.appendChild(t):r.innerHTML=e.shorten(t.toString()),o.appendChild(r))}),o},hRow:function(t,i){return e.row(t,i,"th")},table:function(t,i){t=t||[];var n=$.create("table"),r=$.create("thead"),s=$.create("tbody");return n.classList.add(i),t.length&&(n.appendChild(r),r.appendChild(e.hRow(t,i))),n.appendChild(s),{node:n,tbody:s,thead:r,appendChild:function(e){this.tbody.appendChild(e)},addRow:function(t,n,r){return this.appendChild(e.row(t,n||i,r)),this}}},shorten:function(e){var t=40;return e=e.replace(/^\s\s*|\s\s*$|\n/g,""),e.length>t?e.substring(0,t-1)+"...":e;
},htmlentities:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},count:function i(e,t){for(var i=0,n=0,r=e.length;r>n;n++)e[n]===t&&i++;return i},thead:function(e){return e.getElementsByTagName("thead")[0]},within:function(e){return{is:function(t){for(var i in e)if(e[i]===t)return i;return""}}},common:{circRef:function(i,n,r){return e.expander("[POINTS BACK TO <strong>"+n+"</strong>]","Click to show this item anyway",function(){this.parentNode.appendChild(t(i,{maxDepth:1}))})},depthReached:function(i,n){return e.expander("[DEPTH REACHED]","Click to show this item anyway",function(){try{this.parentNode.appendChild(t(i,{maxDepth:1}))}catch(n){this.parentNode.appendChild(e.table(["ERROR OCCURED DURING OBJECT RETRIEVAL"],"error").addRow([n.message]).node)}})}},expander:function(t,i,n){return $.create("a",{innerHTML:e.shorten(t)+' <b style="visibility:hidden;">[+]</b>',title:i,onmouseover:function(){this.getElementsByTagName("b")[0].style.visibility="visible";
},onmouseout:function(){this.getElementsByTagName("b")[0].style.visibility="hidden"},onclick:function(){return this.style.display="none",n.call(this),!1},style:{cursor:"pointer"}})}},t=function n(t,i){i=i||{};var r=$.extend({},n.config,i),s=$.create("div"),o=(n.config,0),a={},u=!1;n.settings=r;var c={string:function(t){return e.txt('"'+e.shorten(t.replace(/"/g,'\\"'))+'"')},object:function(t,i,n){var s=e.within(a).is(t);if(s)return e.common.circRef(t,s,r);if(a[n||"TOP"]=t,i===r.maxDepth)return e.common.depthReached(t,r);var o=e.table(["Group",null],"object"),l=!0;for(var h in t)if(!t.hasOwnProperty||t.hasOwnProperty(h)){var d=t[h],p=$.type(d);l=!1;try{o.addRow([h,c[p](d,i+1,h)],p)}catch(f){window.console&&window.console.log&&console.log(f.message)}}var m=r.expanded||u?o.node:e.expander(JSON.stringify(t),"Click to show more",function(){this.parentNode.appendChild(o.node)});return u=!0,m},array:function(t,i,n,s){var o=e.within(a).is(t);if(o)return e.common.circRef(t,o);if(a[n||"TOP"]=t,i===r.maxDepth)return e.common.depthReached(t);
var u=e.table(["List ("+t.length+" items)",null],"list"),l=!0,h=0;return $$(t).forEach(function(e,n){return r.maxArray>=0&&++h>r.maxArray?(u.addRow([n+".."+(t.length-1),c[$.type(e)]("...",i+1,n)]),!1):(l=!1,void u.addRow([n,c[$.type(e)](e,i+1,n)]))}),r.expanded?u.node:e.expander(JSON.stringify(t),"Click to show more",function(){this.parentNode.appendChild(u.node)})},date:function(t){var i=e.table(["Date",null],"date"),n=t.toString().split(/\s/);return i.addRow(["Time",n[4]]).addRow(["Date",n.slice(0,4).join("-")]),r.expanded?i.node:e.expander("Date (timestamp): "+ +t,"Click to see a little more info about this date",function(){this.parentNode.appendChild(i.node)})}};return c.number=c["boolean"]=c.undefined=c["null"]=c["default"]=function(t){return e.txt(t)},s.appendChild(c[$.type(t)](t,o)),s};return t.config={expanded:!0,maxDepth:10,maxArray:-1},t}();!function(e,t){var i=Wysie.Debug={friendlyError:function(e,t){var i=e.constructor.name.replace(/Error$/,"").toLowerCase(),n=e.message;return n=n.replace(/\s+token\s+/g," "),
"Unexpected }"!=n||/[{}]/.test(t)?"Unexpected )"===n?n="Missing a (":"Invalid left-hand side in assignment"===n?n="Invalid assignment. Maybe you typed = instead of == ?":"Unexpected ILLEGAL"==n&&(n="There is an invalid character somewhere."):n="Missing a )",'<span class="type">Oh noes, a '+i+" error!</span> "+n},elementLabel:function(e,i){var n=e.nodeName.toLowerCase();return e.hasAttribute("property")?n+="[property="+e.getAttribute("property")+"]":e.id?n+="#"+e.id:e.classList.length&&(n+=t(e.classList).map(function(e){return"."+e}).join("")),i&&(n+="@"+i),n},printValue:function(e){return"object"!==("undefined"==typeof e?"undefined":_typeof(e))||null===e?"string"==typeof e?'"'+e+'"':e+"":Array.isArray(e)?e.length>0?"object"===_typeof(e[0])?"List: "+e.length+" group(s)":"List: "+e.map(i.printValue).join(", "):"List: (Empty)":e.constructor===Object?"Group with "+Object.keys(e).length+" properties":e instanceof Wysie.Primitive?i.printValue(e.value):e instanceof Wysie.Collection?e.items.length>0?e.items[0]instanceof Wysie.Scope?"List: "+e.items.length+" group(s)":"List: "+e.items.map(i.printValue).join(", "):i.printValue([]):e instanceof Wysie.Scope?"Group with "+e.propertyNames.length+" properties":void 0;
},timed:function(e,t){return function(){console.time(e),t.apply(this,arguments),console.timeEnd(e)}},reservedWords:"as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield".split("|")};Wysie.prototype.render=i.timed("render",Wysie.prototype.render),Wysie.selectors.debug=".debug";var n=", .wysie-debuginfo";Wysie.Expressions.escape+=n,Stretchy.selectors.filter+=n,Wysie.hooks.add("init-tree-after",function(){if(this.root.debug&&this.wrapper.classList.add("debug-saving"),this.store&&this.wrapper.classList.contains("debug-saving")){var t,i=(e.create("details",{className:"wysie-debug-storage",contents:[{tag:"Summary",textContent:"Saved data"},t=e.create("pre",{id:this.id+"-debug-storage"})],after:this.wrapper}),Object.getOwnPropertyDescriptor(Node.prototype,"textContent"));
Object.defineProperty(t,"textContent",{get:function(){return i.get.call(this)},set:function(e){this.innerHTML="",e&&this.appendChild(prettyPrint(JSON.parse(e)))}}),this.store+=" #"+t.id}}),Wysie.hooks.add("render-start",function(t){var i=t.data;if(this.storage&&this.wrapper.classList.contains("debug-saving")){var n=e("#"+this.id+"-debug-storage");n&&(n.textContent=i?this.toJSON(i):"")}}),Wysie.hooks.add("scope-init-start",function(){this.debug=this.debug||this.walkUp(function(e){return e.debug?!0:void 0}),!this.debug&&this.element.closest(Wysie.selectors.debug)&&(this.debug=!0),this.debug&&(this.debug=e.create("tbody",{inside:e.create("table",{className:"wysie-ui wysie-debuginfo",innerHTML:"<thead><tr>\n					<th></th>\n					<th>Expression</th>\n					<th>Value</th>\n					<th>Element</th>\n				</tr></thead>",style:{display:"none"},inside:this.element})}))},!0),Wysie.hooks.add("unit-init-end",function(){this.collection&&(this.debug=this.collection.debug)}),Wysie.hooks.add("expressions-init-start",function(){
this.debug=this.scope.debug}),Wysie.hooks.add("expression-eval-beforeeval",function(){this.debug&&this.debug.classList.remove("error")}),Wysie.hooks.add("expression-eval-error",function(e){this.debug&&(this.debug.innerHTML=i.friendlyError(e.exception,e.expression),this.debug.classList.add("error"))}),Wysie.Scope.prototype.debugRow=function(t){var n=t.element,r=t.attribute,s=void 0===r?null:r,o=t.tds,a=void 0===o?[]:o;if(this.debug){this.debug.parentNode.style.display="";var u=a[0];if(a[0]=e.create("td",{title:u}),!a[3]){var c=i.elementLabel(n,s);a[3]=e.create("td",{textContent:c,title:c,events:{"mouseenter mouseleave":function(e){n.classList.toggle("wysie-highlight","mouseenter"===e.type)},click:function(e){n.scrollIntoView({behavior:"smooth"})}}})}a=a.map(function(t){return t instanceof Node?t:e.create("td","object"==("undefined"==typeof t?"undefined":_typeof(t))?t:{textContent:t})}),"Warning"==u&&a[1].setAttribute("colspan",2);e.create("tr",{className:"debug-"+u.toLowerCase(),contents:a,
inside:this.debug})}},Wysie.hooks.add("expressiontext-init-end",function(){var t=this;this.scope.debug&&(this.debug={},this.template.forEach(function(i){i instanceof Wysie.Expression&&t.scope.debugRow({element:t.element,attribute:t.attribute,tds:["Expression",{tag:"td",contents:{tag:"textarea",value:i.expression,events:{input:function(e){i.expression=e.target.value,t.update(t.data)}},once:{focus:function(e){return Stretchy.resize(e.target)}}}},i.debug=e.create("td")]})}))}),Wysie.hooks.add("scope-init-end",function(){var e=this;if(this.debug instanceof Node){var n=Wysie.selectors.andNot(Wysie.selectors.multiple,Wysie.selectors.property);t(n,this.element).forEach(function(t){e.debugRow({element:t,tds:["Warning","data-multiple without a property attribute"]})}),this.propagate(function(t){i.printValue(t);e.debugRow({element:t.element,tds:["Property",t.property,t.value]}),i.reservedWords.indexOf(t.property)>-1?e.debugRow({element:t.element,tds:["Warning",'You can’t use "'+t.property+'" as a property name, it’s a reserved word.']
}):/^\d|[\W$]/.test(t.property)&&e.debugRow({element:t.element,tds:["Warning",{textContent:'You can’t use "'+t.property+'" as a property name.',title:"Property names can only contain letters, numbers and underscores and cannot start with a number."}]})}),this.scope.element.addEventListener("wysie:datachange",function(n){t("tr.debug-property",e.debug).forEach(function(t){var n=t.cells[1].textContent,r=i.printValue(e.properties[n]);if(t.cells[2]){var s=t.cells[2];s.textContent=s.title=r}})})}}),Wysie.hooks.add("expressiontext-update-beforeeval",function(e){this.debug&&(e.td=e.expr.debug,e.td&&e.td.classList.remove("error"))}),Wysie.hooks.add("expressiontext-update-aftereval",function(e){if(e.td&&!e.td.classList.contains("error")){var t=i.printValue(e.value);e.td.textContent=e.td.title=t}})}(Bliss,Bliss.$),function(e){if(self.Wysie){var t="//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js";Wysie.Storage.Backend.add("Dropbox",e.Class({"extends":Wysie.Storage.Backend,constructor:function(){
var i=this;"dropbox:"!=this.url.protocol&&(this.url.hostname="dl.dropboxusercontent.com",this.url.search=this.url.search.replace(/\bdl=0|^$/,"raw=1"),this.permissions.on("read")),this.permissions.on("login"),this.ready=e.include(self.Dropbox,t).then(function(){var t=new URL(document.referrer,location);return"www.dropbox.com"===t.hostname&&0===location.hash.indexOf("#access_token=")?(Dropbox.AuthDriver.Popup.oauthReceiver(),e.fire(window,"load"),void close()):(i.filename=(i.storage.param("path")||"")+new URL(i.url).pathname.match(/[^\/]*$/)[0],i.key=i.storage.param("key")||"fle6gsc61w5v79j",void(i.client=new Dropbox.Client({key:i.key})))}).then(function(){i.login(!0)})},put:function(e){var t=this;return e.data=Wysie.toJSON(e.data),new Promise(function(i,n){t.client.writeFile(e.name,e.data,function(e,t){return e?n(Error(e)):(console.log("File saved as revision "+t.versionTag),void i(t))})})},login:function(t){var i=this;return this.ready.then(function(){return i.client.isAuthenticated()?Promise.resolve():new Promise(function(e,n){
i.client.authDriver(new Dropbox.AuthDriver.Popup({receiverUrl:new URL(location)+""})),i.client.authenticate({interactive:!t},function(t,r){t&&n(Error(t)),i.client.isAuthenticated()?(i.permissions.on(["logout","edit"]),e()):(i.permissions.off(["logout","edit","add","delete"]),n())})})}).then(function(){i.client.getAccountInfo(function(t,n){t||i.wysie.wrapper._.fire("wysie:login",e.extend({backend:i},n))})})["catch"](function(){})},logout:function(){var e=this;return this.client.isAuthenticated()?new Promise(function(t,i){e.client.signOut(null,function(){e.permissions.off(["edit","add","delete"]).on("login"),e.wysie.wrapper._.fire("wysie:logout",{backend:e}),t()})}):Promise.resolve()},"static":{test:function(e){return/dropbox.com/.test(e.host)||"dropbox:"===e.protocol}}}),!0)}}(Bliss),function(e){if(self.Wysie){var t;Wysie.Storage.Backend.add("Github",t=e.Class({"extends":Wysie.Storage.Backend,constructor:function(){this.permissions.on("login"),this.key=this.storage.param("key")||"7e08e016048000bc594e",
e.extend(this,t.parseURL(this.url)),this.repo=this.repo||"wysie-data",this.branch=this.branch||"master",this.path=this.path||this.wysie.id+".json",this.filename=this.filename||this.path.match(/[^\/]*$/)[0],this.url=new URL("https://raw.githubusercontent.com/"+this.username+"/"+this.repo+"/"+this.branch+"/"+this.path+"?ts="+Date.now()),this.permissions.on("read"),this.login(!0)},get authenticated(){return!!this.accessToken},req:function(t,i){var n=arguments.length<=2||void 0===arguments[2]?"GET":arguments[2],r=arguments.length<=3||void 0===arguments[3]?{method:n}:arguments[3];return i&&(r.data=JSON.stringify(i)),e.fetch("https://api.github.com/"+t,e.extend(r,{responseType:"json",headers:{Authorization:"token "+this.accessToken}}))["catch"](function(e){return e&&e.xhr?Promise.reject(e.xhr):(console.error(e),void console.log(e.stack))}).then(function(e){return Promise.resolve(e.response)})},get:Wysie.Storage.Backend.Remote.prototype.get,put:function(e){var t=this;e.data=Wysie.toJSON(e.data),
e.path=e.path||"";var i="repos/"+this.username+"/"+this.repo+"/contents/"+e.path;return Promise.resolve(this.repoInfo||this.req("user/repos",{name:this.repo},"POST")).then(function(e){return t.repoInfo=e,t.req(i,{ref:t.branch})}).then(function(n){return t.req(i,{message:"Updated "+(e.name||"file"),content:btoa(e.data),branch:t.branch,sha:n.sha},"PUT")},function(n){return 404==n.status?t.req(i,{message:"Created file",content:btoa(e.data),branch:t.branch},"PUT"):void 0}).then(function(e){console.log("success")})},login:function(e){var t=this;return this.ready.then(function(){return t.authenticated?Promise.resolve():new Promise(function(i,n){e?(t.accessToken=localStorage["wysie:githubtoken"],t.accessToken&&i(t.accessToken)):(t.authPopup=open("https://github.com/login/oauth/authorize?client_id="+t.key+"&scope=repo,gist&state="+location.href,"popup","width=900,height=500"),addEventListener("message",function(e){e.source===t.authPopup&&(t.accessToken=localStorage["wysie:githubtoken"]=e.data,t.accessToken||n(Error("Authentication error")),
i(t.accessToken))}))}).then(function(){return t.getUser()}).then(function(e){return t.permissions.on("logout"),t.req("repos/"+t.username+"/"+t.repo)}).then(function(e){t.repoInfo=e,e.permissions.push&&t.permissions.on("edit")})["catch"](function(e){404==e.status&&t.user.login==t.username&&t.permissions.on("edit")})})},logout:function(){return this.authenticated&&(localStorage.removeItem("wysie:githubtoken"),delete this.accessToken,this.permissions.off(["edit","add","delete"]).on("login"),this.wysie.wrapper._.fire("wysie:logout",{backend:this})),Promise.resolve()},getUser:function(){var e=this;return this.req("user").then(function(t){e.user=t;var i=t.name||t.login;e.wysie.wrapper._.fire("wysie:login",{backend:e,name:'<a href="https://github.com/'+t.login+'" target="_blank">\n							<img class="avatar" src="'+t.avatar_url+'" /> '+i+"\n						</a>"})})},"static":{test:function(e){return/\bgithub.(com|io)|raw.githubusercontent.com/.test(e)},parseURL:function(e){var t={};e=new URL(e,location);
var i=e.pathname.slice(1).split("/");return/github.io$/.test(e.host)?(t.username=e.host.match(/([\w-]+)\.github\.io$/)[1],t.branch="gh-pages"):t.username=i.shift(),t.repo=i.shift(),/raw.githubusercontent.com$/.test(e.host)?t.branch=i.shift():/github.com$/.test(e.host)&&"blob"==i[0]&&(i.shift(),t.branch=i.shift()),t.filename=i[i.length-1],t.path=i.join("/"),t}}}),!0)}}(Bliss);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInd5c2llLmVzNS5qcyJdLCJuYW1lcyI6WyJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwiYXJyMiIsImxlbmd0aCIsImZyb20iLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsInQiLCJlIiwiciIsImFyZ3VtZW50cyIsIm4iLCJ0eXBlIiwiYXBwbHkiLCJ0aGlzIiwicyIsIm8iLCJzcGxpY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImluZGV4T2YiLCJ0ZXN0IiwiY2FsbCIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsImRlZmluZVByb3BlcnR5Iiwic2VsZiIsIkJsaXNzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZXh0ZW5kIiwib3ZlcmxvYWQiLCJwcm9wZXJ0eSIsInNvdXJjZXMiLCJub29wIiwiJCIsIk5vZGUiLCJXaW5kb3ciLCJxdWVyeVNlbGVjdG9yQWxsIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiaXNOYU4iLCJkZWZpbmVkIiwiY3JlYXRlIiwidGFnIiwiY3JlYXRlRWxlbWVudCIsImVhY2giLCJyZWFkeSIsIlByb21pc2UiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkNsYXNzIiwiY29uY2F0Iiwia2V5cyIsImNsYXNzUHJvcHMiLCJFcnJvciIsImxhenkiLCJ2YWx1ZSIsImxpdmUiLCJpbmNsdWRlIiwicmVzb2x2ZSIsImFzeW5jIiwib25sb2FkIiwicmVtb3ZlIiwib25lcnJvciIsInNyYyIsImluc2lkZSIsImhlYWQiLCJmZXRjaCIsIlR5cGVFcnJvciIsInVybCIsIlVSTCIsImxvY2F0aW9uIiwiZGF0YSIsIm1ldGhvZCIsImhlYWRlcnMiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInRvVXBwZXJDYXNlIiwiaG9va3MiLCJydW4iLCJzZWFyY2giLCJib2R5Iiwic2V0QXR0cmlidXRlIiwib3BlbiIsImhyZWYiLCJ1c2VyIiwicGFzc3dvcmQiLCJjb25zb2xlIiwiZXJyb3IiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYSIsInJlbW92ZUF0dHJpYnV0ZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJvbnRpbWVvdXQiLCJzZW5kIiwic2xpY2UiLCJyZWR1Y2UiLCJIb29rcyIsImFkZCIsImZvckVhY2giLCJjb250ZXh0IiwiRWxlbWVudCIsInN1YmplY3QiLCJibGlzcyIsInNldFByb3BzIiwidHJhbnNpdGlvbiIsInN0eWxlIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblByb3BlcnR5Iiwiam9pbiIsIm9uY2UiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYmluZCIsImZpcmUiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJ1bmJpbmQiLCJzcGxpdCIsImxpc3RlbmVycyIsImNsYXNzTmFtZSIsImNhbGxiYWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJhdHRyaWJ1dGVzIiwicHJvcGVydGllcyIsImV2ZW50cyIsInUiLCJjIiwiZGVsZWdhdGUiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiY29udGVudHMiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiYmVmb3JlIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImFmdGVyIiwibmV4dFNpYmxpbmciLCJzdGFydCIsImZpcnN0Q2hpbGQiLCJhcm91bmQiLCJub2RlTmFtZSIsImNvbnRlbnQiLCJhbGwiLCIkJCIsImVsZW1lbnQiLCJhcnJheSIsIm1hcCIsInNoaWZ0IiwiSFRNTEVsZW1lbnQiLCJzaHkiLCJjbG9uZSIsImNsb25lTm9kZSIsIl8iLCJFdmVudFRhcmdldCIsImZpbHRlciIsInB1c2giLCJleHByIiwiY29uIiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIlN0cmV0Y2h5Iiwic2VsZWN0b3JzIiwiYmFzZSIsInNjcmlwdCIsImN1cnJlbnRTY3JpcHQiLCJwb3AiLCJyZXNpemUiLCJyZXNpemVzIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwib2Zmc2V0IiwicGxhY2Vob2xkZXIiLCJlbXB0eSIsImhlaWdodCIsImJveFNpemluZyIsIm9mZnNldEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInNjcm9sbExlZnQiLCJNYXRoIiwibWF4Iiwic2Nyb2xsV2lkdGgiLCJvcHRpb24iLCJ0ZXh0Q29udGVudCIsIm9wdGlvbnMiLCJzZWxlY3RlZEluZGV4IiwiYXBwZWFyYW5jZSIsInJlbW92ZUNoaWxkIiwicmVzaXplQWxsIiwiZWxlbWVudHMiLCJhY3RpdmUiLCJpbml0IiwiZ2V0QXR0cmlidXRlIiwibGlzdGVuZXIiLCJldnQiLCJkb2N1bWVudEVsZW1lbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwibXV0YXRpb24iLCJhZGRlZE5vZGVzIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJXeXNpZSIsIl90aGlzIiwiZGF0YVN0b3JlIiwic3RvcmUiLCJpZCIsIm5vcm1hbGl6ZVByb3BlcnR5IiwiYXV0b0VkaXQiLCJoYXMiLCJpcyIsInJvb3RTY29wZSIsImNsYXNzTGlzdCIsInNjb3BlIiwiaGFzQXR0cmlidXRlIiwid3JhcHBlciIsInByaW1pdGl2ZSIsImlzU2NvcGUiLCJQcmltaXRpdmUiLCJnZXRWYWx1ZUF0dHJpYnV0ZSIsInByb3BlcnR5TmFtZXMiLCJzb3J0IiwiYiIsIm5lZWRzRWRpdCIsInJvb3QiLCJwZXJtaXNzaW9ucyIsIlBlcm1pc3Npb25zIiwidWkiLCJiYXIiLCJjYW4iLCJlZGl0Iiwib25jbGljayIsImVkaXRpbmciLCJkb25lIiwic2F2ZSIsImNsaWNrIiwibW91c2VlbnRlciBmb2N1cyIsInVuc2F2ZWRDaGFuZ2VzIiwiY2FsY3VsYXRlVW5zYXZlZENoYW5nZXMiLCJtb3VzZWxlYXZlIGJsdXIiLCJyZXZlcnQiLCJkaXNhYmxlZCIsImV2ZXJTYXZlZCIsImVkaXRCdXR0b25zIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXIiLCJzdG9yYWdlIiwiU3RvcmFnZSIsImxvYWQiLCJvbiIsIm9mZiIsImdldERhdGEiLCJ0b0pTT04iLCJ1bmRlZmluZWQiLCJyZW5kZXIiLCJjb25maXJtIiwiaXRlbSIsInRvZ2dsZSIsInBhcmVudCIsIndhbGsiLCJzdGF0aWMiLCJKU09OIiwic3RyaW5naWZ5IiwicmVhZGFibGUiLCJpZGVudGlmaWVyIiwicmVwbGFjZSIsIiQwIiwiJDEiLCIkMiIsInF1ZXJ5SlNPTiIsInBhdGgiLCJhdHRyaWJ1dGUiLCJvbGRWYWx1ZSIsIm9ic2VydmVyIiwiYXR0cmlidXRlRmlsdGVyIiwiYXR0cmlidXRlT2xkVmFsdWUiLCJjaGFyYWN0ZXJEYXRhIiwiY2hhcmFjdGVyRGF0YU9sZFZhbHVlIiwidG9BcnJheSIsImZsYXR0ZW4iLCJwcmV2IiwidGhpbmciLCJzcGVjaWZpY1Byb3BlcnR5IiwibmFtZSIsIm11bHRpcGxlIiwicmVxdWlyZWQiLCJmb3JtQ29udHJvbCIsImNvbXB1dGVkIiwiY29udGFpbmVyIiwibGkiLCJ0ciIsImR0IiwiZGQiLCJzZWxlY3RvciIsIm5vdCIsIm9yIiwic2VsZWN0b3IxIiwic2VsZWN0b3IyIiwiYW5kIiwiczEiLCJzMiIsImFuZE5vdCIsIm91dHB1dCIsImF1dG9NdWx0aXBsZSIsInByb3h5IiwicHJvcGFnYXRlZCIsInByb3RvIiwibmFtZXMiLCJleGlzdGluZyIsInJldCIsInByb3BhZ2F0ZSIsImVsIiwid2luZG93IiwiSW50bCIsInRoZW4iLCJlcnIiLCJ3eXNpZSIsInRyaWdnZXJzIiwiYWN0aW9uIiwiYWN0aW9ucyIsIl90aGlzMiIsIl90aGlzMyIsImNhbm5vdCIsIndoZW4iLCJfdGhpczQiLCJyZWplY3QiLCJhYmxlIiwiX3RoaXM1IiwiY3VycmVudCIsImNoYW5nZWQiLCJfdGhpczYiLCJ0cmlnZ2VyIiwiX3RoaXM3IiwicmVnaXN0ZXIiLCJzZXR0ZXIiLCJwcmV2aW91cyIsImxvZ291dCIsImxvZ2luIiwiX3RoaXM4IiwidXJscyIsImJhY2tlbmRzIiwiQmFja2VuZCIsImJhY2tlbmQiLCJsb2FkZWQiLCJhdXRoQ29udHJvbHMiLCJsb2dpbkhhc2giLCJwcmV2ZW50RGVmYXVsdCIsImhhc2giLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwidGl0bGUiLCJpbm5lckhUTUwiLCJnZXRCYWNrZW5kcyIsInB1dEJhY2tlbmRzIiwicHV0IiwiYXV0aEJhY2tlbmRzIiwiX3RoaXM5IiwiaW5Qcm9ncmVzcyIsImdldEJhY2tlbmQiLCJyZXNwb25zZSIsInBhcnNlIiwicGFyYW0iLCJsb2ciLCJzdGFjayIsIl90aGlzMTAiLCJmaWxlbmFtZSIsInBhcmFtcyIsImlzSGFzaCIsIm9yaWdpbiIsInBhdGhuYW1lIiwiX3RoaXMxMSIsImZpcnN0IiwiZXh0ZW5kcyIsIl9yZWYiLCJfcmVmJGRhdGEiLCJyZXNwb25zZVR5cGUiLCJrZXkiLCJsb2NhbFN0b3JhZ2UiLCJfcmVmMiIsIl9yZWYyJGRhdGEiLCJhYnN0cmFjdCIsIlNjb3BlIiwibm9ybWFsaXplIiwiaXNSb290IiwiZ2V0UmVsYXRpdmVEYXRhIiwiX3RoaXMxMiIsImRpcnR5IiwibnVsbCIsIlByb3h5Iiwid2Fsa1VwIiwiZXhwcmVzc2lvbnMiLCJ1cGRhdGVBbHNvIiwiZmluZCIsIndhbGtlciIsInBhcmVudFNjb3BlIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwicHJlRWRpdCIsImNvbGxlY3Rpb24iLCJfV3lzaWUkVW5pdCIsIkNvbGxlY3Rpb24iLCJVbml0IiwiY2xvc2VzdENvbGxlY3Rpb24iLCJpc0RlbGV0ZWQiLCJkZWxldGVkIiwiaXNOdWxsIiwidW5pdCIsIl90aGlzMTMiLCJlbGVtZW50Q29udGVudHMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hpbGROb2RlcyIsIm5vZGUiLCJfZGVsZXRlZCIsInByaW9yaXRpemVQcmltaXRpdmUiLCJFeHByZXNzaW9uIiwiZXhwcmVzc2lvbiIsImV2YWwiLCJjcmVhdGVGdW5jdGlvbiIsImV4Y2VwdGlvbiIsIkVSUk9SIiwiY29kZSIsInNpbXBsZU9wZXJhdGlvbiIsIm9wZXJhbmQxIiwib3BlcmF0b3IiLCJvcGVyYW5kMiIsIkZ1bmN0aW9ucyIsIm9wZXJhdG9ycyIsImxhc3RJbmRleCIsIkZ1bmN0aW9uIiwidHJpbSIsIm9wZXJhbmQiLCJSZWdFeHAiLCJUZXh0Iiwibm9kZVR5cGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidGV4dCIsInRlbXBsYXRlIiwidG9rZW5pemUiLCJvbGRUZXh0Iiwic2V0VmFsdWUiLCJ1cGRhdGUiLCJfdGhpczE0IiwiZW52IiwiZm9ybWF0TnVtYmVyIiwiZGF0YXR5cGUiLCJyZWdleCIsImV4cHJlc3Npb25SZWdleCIsImV4ZWMiLCJpbmRleCIsInN1YnN0cmluZyIsImZpbmRFbmQiLCJXZWFrTWFwIiwiaXNFc2NhcGUiLCJpbnNpZGVzIiwiY2xvc2UiLCJjaGFyIiwicGVlayIsIm51bWJlckZvcm1hdCIsIk51bWJlckZvcm1hdCIsIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsIkluZmluaXR5IiwiZm9ybWF0Iiwicm9vdEZ1bmN0aW9uUmVnRXhwIiwiRXhwcmVzc2lvbnMiLCJyb290RnVuY3Rpb25zIiwidHJhdmVyc2UiLCJTZXQiLCJfdGhpczE1IiwibGFzdFVwZGF0ZWQiLCJUSFJPVFRMRSIsImNhbGxlZSIsIl90aGlzMTYiLCJlbGFwc2VkVGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwidGltZW91dCIsInJlZiIsImV4cCIsImV4dHJhY3QiLCJfdGhpczE3IiwiZXNjYXBlIiwiY2hpbGQiLCJwcm9wZXJ0eVJlZ2V4IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm51bWJlcnMiLCJudW1iZXIiLCJvcCIsInN5bWJvbCIsIl9sZW4yIiwib3BlcmFuZHMiLCJfa2V5MiIsImlkZW50aXR5Iiwic3VtIiwiYXZlcmFnZSIsIm1pbiIsIl9NYXRoIiwiX01hdGgyIiwiY291bnQiLCJyb3VuZCIsIm51bSIsImRlY2ltYWxzIiwiaXNGaW5pdGUiLCJ0b0xvY2FsZVN0cmluZyIsInVzZUdyb3VwaW5nIiwiaWZmIiwiY29uZGl0aW9uIiwiaWZ0cnVlIiwiaWZmYWxzZSIsImFsaWFzZXMiLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwiZGl2aWRlIiwibHQiLCJndCIsImVxIiwiYWxpYXMiLCJfVHJhcCIsImZ1bmN0aW9ucyIsInByb3BlcnR5TCIsIl90aGlzMTgiLCJjb250YWlucyIsIm11dGFibGUiLCJ1bmhhbmRsZWQiLCJwcm9wIiwiX2FyZ3VtZW50cyIsImltcG9ydCIsIl90aGlzMTkiLCJESVNBQkxFX0NBQ0hFIiwiX3RoaXMyMCIsImdldERhdGF0eXBlIiwiZXhwcmVzc2lvblRleHQiLCJlZGl0b3IiLCJjaGlsZHJlbiIsImV4cG9zZWQiLCJ0ZW1wbGF0ZVZhbHVlIiwicmVjb3JkIiwiZWRpdG9yVmFsdWUiLCJlbXB0eVZhbHVlIiwic3dhcFVJIiwidW5vYnNlcnZlIiwiZGVzY3JpcHRvciIsIl90aGlzMjEiLCJfdGhpczIyIiwiaW5pdGlhbGl6ZWQiLCJnZXRWYWx1ZSIsImFjdGl2ZUVsZW1lbnQiLCJzYXZlZFZhbHVlIiwiaHVtYW5SZWFkYWJsZSIsInBvcHVwIiwiaGlkZVBvcHVwIiwicHJldlRhYmluZGV4IiwidGFiSW5kZXgiLCJfdGhpczIzIiwidGltZXIiLCJjbGljay53eXNpZTpwcmVlZGl0IiwiZm9jdXMud3lzaWU6cHJlZWRpdCIsImZvY3VzIiwiY2xpY2sud3lzaWU6ZWRpdCIsIm1vdXNlZW50ZXIud3lzaWU6cHJlZWRpdCIsIm1vdXNlbGVhdmUud3lzaWU6cHJlZWRpdCIsImluaXRFZGl0IiwiX3RoaXMyNCIsImdldE1hdGNoIiwiZWRpdG9ycyIsImlucHV0IGNoYW5nZSIsInNlbGVjdCIsImtleXVwIiwia2V5Q29kZSIsInN0b3BQcm9wYWdhdGlvbiIsInd5c2llOmRhdGFjaGFuZ2UiLCJsYWJlbCIsImRhdGFJbnB1dCIsImhpZGRlbiIsInNpemUiLCJoaWRlQ2FsbGJhY2siLCJzaG93UG9wdXAiLCJ4Iiwib2Zmc2V0TGVmdCIsInkiLCJvZmZzZXRUb3AiLCJ0b3AiLCJsZWZ0IiwiX3RoaXMyNSIsImRpc2Nvbm5lY3QiLCJoaWRlIiwiY2FjaGUiLCJkYXRhdHlwZXMiLCJnZXR0ZXIiLCJ1c2VQcm9wZXJ0eSIsIm5hbWVzcGFjZVVSSSIsImltZywgdmlkZW8sIGF1ZGlvIiwiYSwgbGluayIsInNlbGVjdCwgaW5wdXQsIHRleHRhcmVhLCBtZXRlciwgcHJvZ3Jlc3MiLCJpbnB1dFt0eXBlPWNoZWNrYm94XSIsInRpbWUiLCJkYXRlIiwiRGF0ZSIsImRheSIsIm1vbnRoIiwieWVhciIsImhvdXIiLCJtaW51dGUiLCJkYXRldGltZS1sb2NhbCIsInRpbWVab25lIiwibWV0YSIsImNoZWNrZWQiLCJpbnB1dFt0eXBlPXJhbmdlXSwgaW5wdXRbdHlwZT1udW1iZXJdLCBtZXRlciwgcHJvZ3Jlc3MiLCIqIiwiLm51bWJlciIsIi5ib29sZWFuIiwiYSwgaW1nLCB2aWRlbywgYXVkaW8sIC51cmwiLCJwLCBkaXYsIGxpLCBkdCwgZGQsIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIGFydGljbGUsIHNlY3Rpb24sIC5tdWx0aWxpbmUiLCJkaXNwbGF5IiwibWV0ZXIsIHByb2dyZXNzIiwidGltZSwgLmRhdGUiLCJ0eXBlcyIsIndlZWsiLCJkYXRldGltZSIsImltZyIsImRyYWdlbnRlciBkcmFnb3ZlciBkcm9wIiwiZHJvcCIsImRhdGFUcmFuc2ZlciIsImFjY2VwdCIsImNoYW5nZSIsImZpbGUiLCJmaWxlcyIsIml0ZW1zIiwiY29udGFpbnNUZW1wbGF0ZSIsIml0ZW1EYXRhIiwiY3JlYXRlSXRlbSIsIl90aGlzMjYiLCJzaWxlbnQiLCJwcmVjZWRpbmciLCJib3R0b21VcCIsIm1hcmtlciIsIl9hcmd1bWVudHMyIiwiZGVsZXRlIiwiaGFyZCIsIl90aGlzMjciLCJvcGFjaXR5IiwiX3RoaXMyOCIsIl90aGlzMjkiLCJfdGhpczMwIiwiX3RoaXMzMSIsImZyYWdtZW50IiwiZGF0dW0iLCJhZGRCdXR0b24iLCJ0YWdOYW1lIiwiY29udGFpbmVyU2VsZWN0b3IiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsIl90aGlzMzIiLCJidXR0b24iLCJwcmV0dHlQcmludCIsInV0aWwiLCJ0eHQiLCJyb3ciLCJjZWxscyIsImNlbGxUeXBlIiwidGQiLCJjb2xTcGFuIiwiYXR0cnMiLCJjZWxsIiwic2hvcnRlbiIsImhSb3ciLCJ0YWJsZSIsImhlYWRpbmdzIiwidGJsIiwidGhlYWQiLCJ0Ym9keSIsImFkZFJvdyIsIl90eXBlIiwic3RyIiwiaHRtbGVudGl0aWVzIiwibCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwid2l0aGluIiwiY29tbW9uIiwiY2lyY1JlZiIsInNldHRpbmdzIiwiZXhwYW5kZXIiLCJwcmV0dHlQcmludFRoaXMiLCJtYXhEZXB0aCIsImRlcHRoUmVhY2hlZCIsIm1lc3NhZ2UiLCJjbGlja0ZuIiwib25tb3VzZW92ZXIiLCJ2aXNpYmlsaXR5Iiwib25tb3VzZW91dCIsImN1cnNvciIsImNvbmZpZyIsImN1cnJlbnREZXB0aCIsImhhc1J1bk9uY2UiLCJ0eXBlRGVhbGVyIiwic3RyaW5nIiwib2JqZWN0IiwiZGVwdGgiLCJzdGFja0tleSIsImlzRW1wdHkiLCJleHBhbmRlZCIsImpxdWVyeSIsIm1heEFycmF5IiwiX2RhdGUiLCJtaW5pVGFibGUiLCJzRGF0ZSIsIkRlYnVnIiwiZnJpZW5kbHlFcnJvciIsImVsZW1lbnRMYWJlbCIsInByaW50VmFsdWUiLCJ0aW1lZCIsInRpbWVFbmQiLCJyZXNlcnZlZFdvcmRzIiwiZGVidWciLCJfcmVmMyIsImRlYnVnUm93IiwiX3JlZjQiLCJfcmVmNCRhdHRyaWJ1dGUiLCJfcmVmNCR0ZHMiLCJ0ZHMiLCJtb3VzZWVudGVyIG1vdXNlbGVhdmUiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiX3RoaXMzMyIsImlucHV0IiwiX3RoaXMzNCIsImRyb3Bib3hVUkwiLCJfdGhpczM1IiwicHJvdG9jb2wiLCJob3N0bmFtZSIsIkRyb3Bib3giLCJyZWZlcnJlciIsIkF1dGhEcml2ZXIiLCJQb3B1cCIsIm9hdXRoUmVjZWl2ZXIiLCJjbGllbnQiLCJDbGllbnQiLCJfdGhpczM2Iiwid3JpdGVGaWxlIiwic3RhdCIsInZlcnNpb25UYWciLCJwYXNzaXZlIiwiX3RoaXMzNyIsImlzQXV0aGVudGljYXRlZCIsImF1dGhEcml2ZXIiLCJyZWNlaXZlclVybCIsImF1dGhlbnRpY2F0ZSIsImludGVyYWN0aXZlIiwiZ2V0QWNjb3VudEluZm8iLCJhY2NvdW50SW5mbyIsIl90aGlzMzgiLCJzaWduT3V0IiwiaG9zdCIsInBhcnNlVVJMIiwicmVwbyIsImJyYW5jaCIsInVzZXJuYW1lIiwiYXV0aGVudGljYXRlZCIsImFjY2Vzc1Rva2VuIiwicmVxIiwiQXV0aG9yaXphdGlvbiIsIlJlbW90ZSIsIl90aGlzMzkiLCJmaWxlQ2FsbCIsInJlcG9JbmZvIiwiZmlsZUluZm8iLCJidG9hIiwic2hhIiwiX3RoaXM0MCIsImF1dGhQb3B1cCIsInNvdXJjZSIsImdldFVzZXIiLCJyZW1vdmVJdGVtIiwiX3RoaXM0MSIsImF2YXRhcl91cmwiXSwibWFwcGluZ3MiOiJBQUFBLFlBSUEsU0FBU0Esb0JBQW1CQyxHQUFPLEdBQUlDLE1BQU1DLFFBQVFGLEdBQU0sQ0FBRSxJQUFLLEdBQUlHLEdBQUksRUFBR0MsRUFBT0gsTUFBTUQsRUFBSUssUUFBU0YsRUFBSUgsRUFBSUssT0FBUUYsSUFBT0MsRUFBS0QsR0FBS0gsRUFBSUcsRUFBTSxPQUFPQyxHQUFlLE1BQU9ILE9BQU1LLEtBQUtOLEdBRjFMLEdBQUlPLFNBQTRCLGtCQUFYQyxTQUFvRCxnQkFBcEJBLFFBQU9DLFNBQXdCLFNB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SUFzQnZDLE9BcEJJLGFBQWEzRyxLQUFLd0QsRUFBSXdyQixPQUN6QjViLEVBQUlnYyxTQUFXNXJCLEVBQUl3ckIsS0FBS3Z0QixNQUFNLHlCQUF5QixHQUN2RDJSLEVBQUkrYixPQUFTLFlBRWIvYixFQUFJZ2MsU0FBV3ZlLEVBQUtsSSxRQUdyQnlLLEVBQUk4YixLQUFPcmUsRUFBS2xJLFFBRVosNkJBQTZCM0ksS0FBS3dELEVBQUl3ckIsTUFDekM1YixFQUFJK2IsT0FBU3RlLEVBQUtsSSxRQUNSLGNBQWMzSSxLQUFLd0QsRUFBSXdyQixPQUFvQixRQUFYbmUsRUFBSyxLQUMvQ0EsRUFBS2xJLFFBQ0x5SyxFQUFJK2IsT0FBU3RlLEVBQUtsSSxTQUduQnlLLEVBQUl3RCxTQUFXL0YsRUFBS0EsRUFBS2pTLE9BQVMsR0FFbEN3VSxFQUFJdkMsS0FBT0EsRUFBSzVLLEtBQUssS0FFZG1OLE9BR04sS0FDRnpTIiwiZmlsZSI6Ind5c2llLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbiFmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXHRmdW5jdGlvbiB0KGUsIHIsIGkpIHtcblx0XHRyZXR1cm4gciA9IHZvaWQgMCA9PT0gciA/IDEgOiByLCBpID0gaSB8fCByICsgMSwgMSA+PSBpIC0gciA/IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IHIgfHwgXCJzdHJpbmdcIiA9PT0gbi50eXBlKGFyZ3VtZW50c1tyXSkpIHJldHVybiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7dmFyIHQsXG5cdFx0XHQgICAgaSA9IGFyZ3VtZW50c1tyXTtmb3IgKHZhciBzIGluIGkpIHtcblx0XHRcdFx0dmFyIG8gPSBBcnJheS5mcm9tKGFyZ3VtZW50cyk7by5zcGxpY2UociwgMSwgcywgaVtzXSksIHQgPSBlLmFwcGx5KHRoaXMsIG8pO1xuXHRcdFx0fXJldHVybiB0O1xuXHRcdH0gOiB0KHQoZSwgciArIDEsIGkpLCByLCBpIC0gMSk7XG5cdH1mdW5jdGlvbiBlKHQsIGUsIHIpIHtcblx0XHRmb3IgKHZhciBpIGluIGUpIHtcblx0XHRcdGlmIChyKSB7XG5cdFx0XHRcdHZhciBzID0gbi50eXBlKHIpO2lmIChcIm93blwiID09PSByICYmICFlLmhhc093blByb3BlcnR5KGkpIHx8IFwiYXJyYXlcIiA9PT0gcyAmJiAtMSA9PT0gci5pbmRleE9mKGkpIHx8IFwicmVnZXhwXCIgPT09IHMgJiYgIXIudGVzdChpKSB8fCBcImZ1bmN0aW9uXCIgPT09IHMgJiYgIXIuY2FsbChlLCBpKSkgY29udGludWU7XG5cdFx0XHR9dmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIGkpOyFvIHx8IG8ud3JpdGFibGUgJiYgby5jb25maWd1cmFibGUgJiYgby5lbnVtZXJhYmxlICYmICFvLmdldCAmJiAhby5zZXQgPyB0W2ldID0gZVtpXSA6IChkZWxldGUgdFtpXSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGksIG8pKTtcblx0XHR9cmV0dXJuIHQ7XG5cdH12YXIgbiA9IHNlbGYuQmxpc3MgPSBlKGZ1bmN0aW9uICh0LCBlKSB7XG5cdFx0cmV0dXJuIFwic3RyaW5nXCIgPT09IG4udHlwZSh0KSA/IChlIHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yKHQpIDogdCB8fCBudWxsO1xuXHR9LCBzZWxmLkJsaXNzKTtlKG4sIHsgZXh0ZW5kOiBlLCBvdmVybG9hZDogdCwgcHJvcGVydHk6IG4ucHJvcGVydHkgfHwgXCJfXCIsIHNvdXJjZXM6IHt9LCBub29wOiBmdW5jdGlvbiBub29wKCkge30sICQ6IGZ1bmN0aW9uICQodCwgZSkge1xuXHRcdFx0cmV0dXJuIHQgaW5zdGFuY2VvZiBOb2RlIHx8IHQgaW5zdGFuY2VvZiBXaW5kb3cgPyBbdF0gOiBBcnJheS5mcm9tKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyAoZSB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbCh0KSA6IHQgfHwgW10pO1xuXHRcdH0sIHR5cGU6IGZ1bmN0aW9uIHR5cGUodCkge1xuXHRcdFx0aWYgKG51bGwgPT09IHQpIHJldHVybiBcIm51bGxcIjtpZiAodm9pZCAwID09PSB0KSByZXR1cm4gXCJ1bmRlZmluZWRcIjt2YXIgZSA9IChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkubWF0Y2goL15cXFtvYmplY3RcXHMrKC4qPylcXF0kLylbMV0gfHwgXCJcIikudG9Mb3dlckNhc2UoKTtyZXR1cm4gXCJudW1iZXJcIiA9PSBlICYmIGlzTmFOKHQpID8gXCJuYW5cIiA6IGU7XG5cdFx0fSwgZGVmaW5lZDogZnVuY3Rpb24gZGVmaW5lZCgpIHtcblx0XHRcdGZvciAodmFyIHQgPSAwOyB0IDwgYXJndW1lbnRzLmxlbmd0aDsgdCsrKSB7XG5cdFx0XHRcdGlmICh2b2lkIDAgIT09IGFyZ3VtZW50c1t0XSkgcmV0dXJuIGFyZ3VtZW50c1t0XTtcblx0XHRcdH1cblx0XHR9LCBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0LCBlKSB7XG5cdFx0XHRyZXR1cm4gdCBpbnN0YW5jZW9mIE5vZGUgPyBuLnNldCh0LCBlKSA6ICgxID09PSBhcmd1bWVudHMubGVuZ3RoICYmIChcInN0cmluZ1wiID09PSBuLnR5cGUodCkgPyBlID0ge30gOiAoZSA9IHQsIHQgPSBlLnRhZywgZSA9IG4uZXh0ZW5kKHt9LCBlLCBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gXCJ0YWdcIiAhPT0gdDtcblx0XHRcdH0pKSksIG4uc2V0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCB8fCBcImRpdlwiKSwgZSkpO1xuXHRcdH0sIGVhY2g6IGZ1bmN0aW9uIGVhY2godCwgZSwgbikge1xuXHRcdFx0biA9IG4gfHwge307Zm9yICh2YXIgciBpbiB0KSB7XG5cdFx0XHRcdG5bcl0gPSBlLmNhbGwodCwgciwgdFtyXSk7XG5cdFx0XHR9cmV0dXJuIG47XG5cdFx0fSwgcmVhZHk6IGZ1bmN0aW9uIHJlYWR5KHQpIHtcblx0XHRcdHJldHVybiB0ID0gdCB8fCBkb2N1bWVudCwgbmV3IFByb21pc2UoZnVuY3Rpb24gKGUsIG4pIHtcblx0XHRcdFx0XCJsb2FkaW5nXCIgIT09IHQucmVhZHlTdGF0ZSA/IGUoKSA6IHQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGUoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9LCBDbGFzczogZnVuY3Rpb24gQ2xhc3ModCkge1xuXHRcdFx0dmFyIGUgPSBbXCJjb25zdHJ1Y3RvclwiLCBcImV4dGVuZHNcIiwgXCJhYnN0cmFjdFwiLCBcInN0YXRpY1wiXS5jb25jYXQoT2JqZWN0LmtleXMobi5jbGFzc1Byb3BzKSksXG5cdFx0XHQgICAgciA9IHQuaGFzT3duUHJvcGVydHkoXCJjb25zdHJ1Y3RvclwiKSA/IHQuY29uc3RydWN0b3IgOiBuLm5vb3AsXG5cdFx0XHQgICAgaSA9IGZ1bmN0aW9uIGkoKSB7XG5cdFx0XHRcdGlmICh0W1wiYWJzdHJhY3RcIl0gJiYgdGhpcy5jb25zdHJ1Y3RvciA9PT0gaSkgdGhyb3cgbmV3IEVycm9yKFwiQWJzdHJhY3QgY2xhc3NlcyBjYW5ub3QgYmUgZGlyZWN0bHkgaW5zdGFudGlhdGVkLlwiKTtpW1wic3VwZXJcIl0gJiYgaVtcInN1cGVyXCJdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH07aVtcInN1cGVyXCJdID0gdFtcImV4dGVuZHNcIl0gfHwgbnVsbCwgaS5wcm90b3R5cGUgPSBuLmV4dGVuZChPYmplY3QuY3JlYXRlKGlbXCJzdXBlclwiXSA/IGlbXCJzdXBlclwiXS5wcm90b3R5cGUgOiBPYmplY3QpLCB7IGNvbnN0cnVjdG9yOiBpIH0pO3ZhciBzID0gZnVuY3Rpb24gcyh0KSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmhhc093blByb3BlcnR5KHQpICYmIC0xID09PSBlLmluZGV4T2YodCk7XG5cdFx0XHR9O2lmICh0W1wic3RhdGljXCJdKSB7XG5cdFx0XHRcdG4uZXh0ZW5kKGksIHRbXCJzdGF0aWNcIl0sIHMpO2ZvciAodmFyIG8gaW4gbi5jbGFzc1Byb3BzKSB7XG5cdFx0XHRcdFx0byBpbiB0W1wic3RhdGljXCJdICYmIG4uY2xhc3NQcm9wc1tvXShpLCB0W1wic3RhdGljXCJdW29dKTtcblx0XHRcdFx0fVxuXHRcdFx0fW4uZXh0ZW5kKGkucHJvdG90eXBlLCB0LCBzKTtmb3IgKHZhciBvIGluIG4uY2xhc3NQcm9wcykge1xuXHRcdFx0XHRvIGluIHQgJiYgbi5jbGFzc1Byb3BzW29dKGkucHJvdG90eXBlLCB0W29dKTtcblx0XHRcdH1yZXR1cm4gaS5wcm90b3R5cGVbXCJzdXBlclwiXSA9IGlbXCJzdXBlclwiXSA/IGlbXCJzdXBlclwiXS5wcm90b3R5cGUgOiBudWxsLCBpO1xuXHRcdH0sIGNsYXNzUHJvcHM6IHsgbGF6eTogdChmdW5jdGlvbiAodCwgZSwgbikge1xuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIHsgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdFx0XHR2YXIgdCA9IG4uY2FsbCh0aGlzKTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGUsIHsgdmFsdWU6IHQsIGNvbmZpZ3VyYWJsZTogITAsIGVudW1lcmFibGU6ICEwLCB3cml0YWJsZTogITAgfSksIHQ7XG5cdFx0XHRcdFx0fSwgc2V0OiBmdW5jdGlvbiBzZXQodCkge1xuXHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGUsIHsgdmFsdWU6IHQsIGNvbmZpZ3VyYWJsZTogITAsIGVudW1lcmFibGU6ICEwLCB3cml0YWJsZTogITAgfSk7XG5cdFx0XHRcdFx0fSwgY29uZmlndXJhYmxlOiAhMCwgZW51bWVyYWJsZTogITAgfSksIHQ7XG5cdFx0XHR9KSwgbGl2ZTogdChmdW5jdGlvbiAodCwgZSwgcikge1xuXHRcdFx0XHRyZXR1cm4gXCJmdW5jdGlvblwiID09PSBuLnR5cGUocikgJiYgKHIgPSB7IHNldDogciB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIHsgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdFx0XHR2YXIgdCA9IHRoaXNbXCJfXCIgKyBlXSxcblx0XHRcdFx0XHRcdCAgICBuID0gci5nZXQgJiYgci5nZXQuY2FsbCh0aGlzLCB0KTtyZXR1cm4gdm9pZCAwICE9PSBuID8gbiA6IHQ7XG5cdFx0XHRcdFx0fSwgc2V0OiBmdW5jdGlvbiBzZXQodCkge1xuXHRcdFx0XHRcdFx0dmFyIG4gPSB0aGlzW1wiX1wiICsgZV0sXG5cdFx0XHRcdFx0XHQgICAgaSA9IHIuc2V0ICYmIHIuc2V0LmNhbGwodGhpcywgdCwgbik7dGhpc1tcIl9cIiArIGVdID0gdm9pZCAwICE9PSBpID8gaSA6IHQ7XG5cdFx0XHRcdFx0fSwgY29uZmlndXJhYmxlOiByLmNvbmZpZ3VyYWJsZSwgZW51bWVyYWJsZTogci5lbnVtZXJhYmxlIH0pLCB0O1xuXHRcdFx0fSkgfSwgaW5jbHVkZTogZnVuY3Rpb24gaW5jbHVkZSgpIHtcblx0XHRcdHZhciB0ID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSxcblx0XHRcdCAgICBlID0gMiA9PT0gYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6ICExLFxuXHRcdFx0ICAgIHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO3JldHVybiBlID8gUHJvbWlzZS5yZXNvbHZlKCkgOiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoZSwgaSkge1xuXHRcdFx0XHRuLnNldChyLCB7IGFzeW5jOiAhMCwgb25sb2FkOiBmdW5jdGlvbiBvbmxvYWQoKSB7XG5cdFx0XHRcdFx0XHRlKCksIG4ucmVtb3ZlKHIpO1xuXHRcdFx0XHRcdH0sIG9uZXJyb3I6IGZ1bmN0aW9uIG9uZXJyb3IoKSB7XG5cdFx0XHRcdFx0XHRpKCk7XG5cdFx0XHRcdFx0fSwgc3JjOiB0LCBpbnNpZGU6IGRvY3VtZW50LmhlYWQgfSk7XG5cdFx0XHR9KTtcblx0XHR9LCBmZXRjaDogZnVuY3Rpb24gZmV0Y2godCwgcikge1xuXHRcdFx0aWYgKCF0KSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVVJMIHBhcmFtZXRlciBpcyBtYW5kYXRvcnkgYW5kIGNhbm5vdCBiZSBcIiArIHQpO3ZhciBpID0gZSh7IHVybDogbmV3IFVSTCh0LCBsb2NhdGlvbiksIGRhdGE6IFwiXCIsIG1ldGhvZDogXCJHRVRcIiwgaGVhZGVyczoge30sIHhocjogbmV3IFhNTEh0dHBSZXF1ZXN0KCkgfSwgcik7aS5tZXRob2QgPSBpLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBuLmhvb2tzLnJ1bihcImZldGNoLWFyZ3NcIiwgaSksIFwiR0VUXCIgPT09IGkubWV0aG9kICYmIGkuZGF0YSAmJiAoaS51cmwuc2VhcmNoICs9IGkuZGF0YSksIGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKFwiZGF0YS1sb2FkaW5nXCIsIGkudXJsKSwgaS54aHIub3BlbihpLm1ldGhvZCwgaS51cmwuaHJlZiwgaS5hc3luYyAhPT0gITEsIGkudXNlciwgaS5wYXNzd29yZCk7Zm9yICh2YXIgcyBpbiByKSB7XG5cdFx0XHRcdGlmIChzIGluIGkueGhyKSB0cnkge1xuXHRcdFx0XHRcdGkueGhyW3NdID0gcltzXTtcblx0XHRcdFx0fSBjYXRjaCAobykge1xuXHRcdFx0XHRcdHNlbGYuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKG8pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XCJHRVRcIiA9PT0gaS5tZXRob2QgfHwgaS5oZWFkZXJzW1wiQ29udGVudC10eXBlXCJdIHx8IGkuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSB8fCBpLnhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpO2ZvciAodmFyIGEgaW4gaS5oZWFkZXJzKSB7XG5cdFx0XHRcdGkueGhyLnNldFJlcXVlc3RIZWFkZXIoYSwgaS5oZWFkZXJzW2FdKTtcblx0XHRcdH1yZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHQsIGUpIHtcblx0XHRcdFx0aS54aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1sb2FkaW5nXCIpLCAwID09PSBpLnhoci5zdGF0dXMgfHwgaS54aHIuc3RhdHVzID49IDIwMCAmJiBpLnhoci5zdGF0dXMgPCAzMDAgfHwgMzA0ID09PSBpLnhoci5zdGF0dXMgPyB0KGkueGhyKSA6IGUobi5leHRlbmQoRXJyb3IoaS54aHIuc3RhdHVzVGV4dCksIHsgZ2V0IHN0YXR1cygpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMueGhyLnN0YXR1cztcblx0XHRcdFx0XHRcdH0sIHhocjogaS54aHIgfSkpO1xuXHRcdFx0XHR9LCBpLnhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1sb2FkaW5nXCIpLCBlKG4uZXh0ZW5kKEVycm9yKFwiTmV0d29yayBFcnJvclwiKSwgeyB4aHI6IGkueGhyIH0pKTtcblx0XHRcdFx0fSwgaS54aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1sb2FkaW5nXCIpLCBlKG4uZXh0ZW5kKEVycm9yKFwiTmV0d29yayBUaW1lb3V0XCIpLCB7IHhocjogaS54aHIgfSkpO1xuXHRcdFx0XHR9LCBpLnhoci5zZW5kKFwiR0VUXCIgPT09IGkubWV0aG9kID8gbnVsbCA6IGkuZGF0YSk7XG5cdFx0XHR9KTtcblx0XHR9LCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCkge1xuXHRcdFx0dmFyIGUgPSBcInN0cmluZ1wiICE9PSBuLnR5cGUodCk7cmV0dXJuIG4uJChhcmd1bWVudHMpLnNsaWNlKCtlKS5yZWR1Y2UoZnVuY3Rpb24gKHQsIGUpIHtcblx0XHRcdFx0cmV0dXJuIHQgJiYgdFtlXTtcblx0XHRcdH0sIGUgPyB0IDogc2VsZik7XG5cdFx0fSB9KSwgbi5Ib29rcyA9IG5ldyBuLkNsYXNzKHsgYWRkOiBmdW5jdGlvbiBhZGQodCwgZSwgbikge1xuXHRcdFx0dGhpc1t0XSA9IHRoaXNbdF0gfHwgW10sIHRoaXNbdF1bbiA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGUpO1xuXHRcdH0sIHJ1bjogZnVuY3Rpb24gcnVuKHQsIGUpIHtcblx0XHRcdHRoaXNbdF0gPSB0aGlzW3RdIHx8IFtdLCB0aGlzW3RdLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0dC5jYWxsKGUgJiYgZS5jb250ZXh0ID8gZS5jb250ZXh0IDogZSwgZSk7XG5cdFx0XHR9KTtcblx0XHR9IH0pLCBuLmhvb2tzID0gbmV3IG4uSG9va3MoKTt2YXIgciA9IG4ucHJvcGVydHk7bi5FbGVtZW50ID0gZnVuY3Rpb24gKHQpIHtcblx0XHR0aGlzLnN1YmplY3QgPSB0LCB0aGlzLmRhdGEgPSB7fSwgdGhpcy5ibGlzcyA9IHt9O1xuXHR9LCBuLkVsZW1lbnQucHJvdG90eXBlID0geyBzZXQ6IHQoZnVuY3Rpb24gKHQsIGUpIHtcblx0XHRcdHQgaW4gbi5zZXRQcm9wcyA/IG4uc2V0UHJvcHNbdF0uY2FsbCh0aGlzLCBlKSA6IHQgaW4gdGhpcyA/IHRoaXNbdF0gPSBlIDogdGhpcy5zZXRBdHRyaWJ1dGUodCwgZSk7XG5cdFx0fSwgMCksIHRyYW5zaXRpb246IGZ1bmN0aW9uIHRyYW5zaXRpb24odCwgZSkge1xuXHRcdFx0cmV0dXJuIGUgPSArZSB8fCA0MDAsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyLCBpKSB7XG5cdFx0XHRcdGlmIChcInRyYW5zaXRpb25cIiBpbiB0aGlzLnN0eWxlKSB7XG5cdFx0XHRcdFx0dmFyIHMgPSBuLmV4dGVuZCh7fSwgdGhpcy5zdHlsZSwgL150cmFuc2l0aW9uKER1cmF0aW9ufFByb3BlcnR5KSQvKTtuLnN0eWxlKHRoaXMsIHsgdHJhbnNpdGlvbkR1cmF0aW9uOiAoZSB8fCA0MDApICsgXCJtc1wiLCB0cmFuc2l0aW9uUHJvcGVydHk6IE9iamVjdC5rZXlzKHQpLmpvaW4oXCIsIFwiKSB9KSwgbi5vbmNlKHRoaXMsIFwidHJhbnNpdGlvbmVuZFwiLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQobyksIG4uc3R5bGUodGhpcywgcyksIHIodGhpcyk7XG5cdFx0XHRcdFx0fSk7dmFyIG8gPSBzZXRUaW1lb3V0KHIsIGUgKyA1MCwgdGhpcyk7bi5zdHlsZSh0aGlzLCB0KTtcblx0XHRcdFx0fSBlbHNlIG4uc3R5bGUodGhpcywgdCksIHIodGhpcyk7XG5cdFx0XHR9LmJpbmQodGhpcykpO1xuXHRcdH0sIGZpcmU6IGZ1bmN0aW9uIGZpcmUodCwgZSkge1xuXHRcdFx0dmFyIHIgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkhUTUxFdmVudHNcIik7cmV0dXJuIHIuaW5pdEV2ZW50KHQsICEwLCAhMCksIHRoaXMuZGlzcGF0Y2hFdmVudChuLmV4dGVuZChyLCBlKSk7XG5cdFx0fSwgdW5iaW5kOiB0KGZ1bmN0aW9uICh0LCBlKSB7XG5cdFx0XHQodCB8fCBcIlwiKS5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKHIgaW4gdGhpcyAmJiAodC5pbmRleE9mKFwiLlwiKSA+IC0xIHx8ICFlKSkge1xuXHRcdFx0XHRcdHQgPSAodCB8fCBcIlwiKS5zcGxpdChcIi5cIik7dmFyIG4gPSB0WzFdO3QgPSB0WzBdO3ZhciBpID0gdGhpc1tyXS5ibGlzcy5saXN0ZW5lcnMgPSB0aGlzW3JdLmJsaXNzLmxpc3RlbmVycyB8fCB7fTtmb3IgKHZhciBzIGluIGkpIHtcblx0XHRcdFx0XHRcdGlmICghdCB8fCBzID09PSB0KSBmb3IgKHZhciBvLCBhID0gMDsgbyA9IGlbc11bYV07IGErKykge1xuXHRcdFx0XHRcdFx0XHRuICYmIG4gIT09IG8uY2xhc3NOYW1lIHx8IGUgJiYgZSAhPT0gby5jYWxsYmFjayB8fCAodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgcywgby5jYWxsYmFjaywgby5jYXB0dXJlKSwgYS0tKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodCwgZSk7XG5cdFx0XHR9LCB0aGlzKTtcblx0XHR9LCAwKSB9LCBuLnNldFByb3BzID0geyBzdHlsZTogZnVuY3Rpb24gc3R5bGUodCkge1xuXHRcdFx0bi5leHRlbmQodGhpcy5zdHlsZSwgdCk7XG5cdFx0fSwgYXR0cmlidXRlczogZnVuY3Rpb24gYXR0cmlidXRlcyh0KSB7XG5cdFx0XHRmb3IgKHZhciBlIGluIHQpIHtcblx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoZSwgdFtlXSk7XG5cdFx0XHR9XG5cdFx0fSwgcHJvcGVydGllczogZnVuY3Rpb24gcHJvcGVydGllcyh0KSB7XG5cdFx0XHRuLmV4dGVuZCh0aGlzLCB0KTtcblx0XHR9LCBldmVudHM6IGZ1bmN0aW9uIGV2ZW50cyh0KSB7XG5cdFx0XHRpZiAodCAmJiB0LmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdFx0dmFyIGUgPSB0aGlzO2lmICh0W3JdICYmIHRbcl0uYmxpc3MpIHtcblx0XHRcdFx0XHR2YXIgaSA9IHRbcl0uYmxpc3MubGlzdGVuZXJzO2ZvciAodmFyIHMgaW4gaSkge1xuXHRcdFx0XHRcdFx0aVtzXS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdFx0XHRcdGUuYWRkRXZlbnRMaXN0ZW5lcihzLCB0LmNhbGxiYWNrLCB0LmNhcHR1cmUpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9Zm9yICh2YXIgbyBpbiB0KSB7XG5cdFx0XHRcdFx0MCA9PT0gby5pbmRleE9mKFwib25cIikgJiYgKHRoaXNbb10gPSB0W29dKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBcInN0cmluZ1wiID09PSBuLnR5cGUodCkpIHtcblx0XHRcdFx0dmFyIGEgPSBhcmd1bWVudHNbMV0sXG5cdFx0XHRcdCAgICB1ID0gYXJndW1lbnRzWzJdO3Quc3BsaXQoL1xccysvKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKHQsIGEsIHUpO1xuXHRcdFx0XHR9LCB0aGlzKTtcblx0XHRcdH0gZWxzZSBmb3IgKHZhciBjIGluIHQpIHtcblx0XHRcdFx0bi5ldmVudHModGhpcywgYywgdFtjXSk7XG5cdFx0XHR9XG5cdFx0fSwgb25jZTogdChmdW5jdGlvbiAodCwgZSkge1xuXHRcdFx0dCA9IHQuc3BsaXQoL1xccysvKTt2YXIgbiA9IHRoaXMsXG5cdFx0XHQgICAgciA9IGZ1bmN0aW9uIHIoKSB7XG5cdFx0XHRcdHJldHVybiB0LmZvckVhY2goZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0XHRuLnJlbW92ZUV2ZW50TGlzdGVuZXIodCwgcik7XG5cdFx0XHRcdH0pLCBlLmFwcGx5KG4sIGFyZ3VtZW50cyk7XG5cdFx0XHR9O3QuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRuLmFkZEV2ZW50TGlzdGVuZXIodCwgcik7XG5cdFx0XHR9KTtcblx0XHR9LCAwKSwgZGVsZWdhdGU6IHQoZnVuY3Rpb24gKHQsIGUsIG4pIHtcblx0XHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0LCBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHR0LnRhcmdldC5jbG9zZXN0KGUpICYmIG4uY2FsbCh0aGlzLCB0KTtcblx0XHRcdH0pO1xuXHRcdH0sIDAsIDIpLCBjb250ZW50czogZnVuY3Rpb24gY29udGVudHModCkge1xuXHRcdFx0KHQgfHwgMCA9PT0gdCkgJiYgKEFycmF5LmlzQXJyYXkodCkgPyB0IDogW3RdKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHZhciBlID0gbi50eXBlKHQpOy9eKHN0cmluZ3xudW1iZXIpJC8udGVzdChlKSA/IHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ICsgXCJcIikgOiBcIm9iamVjdFwiID09PSBlICYmICh0ID0gbi5jcmVhdGUodCkpLCB0IGluc3RhbmNlb2YgTm9kZSAmJiB0aGlzLmFwcGVuZENoaWxkKHQpO1xuXHRcdFx0fSwgdGhpcyk7XG5cdFx0fSwgaW5zaWRlOiBmdW5jdGlvbiBpbnNpZGUodCkge1xuXHRcdFx0dC5hcHBlbmRDaGlsZCh0aGlzKTtcblx0XHR9LCBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSh0KSB7XG5cdFx0XHR0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHQpO1xuXHRcdH0sIGFmdGVyOiBmdW5jdGlvbiBhZnRlcih0KSB7XG5cdFx0XHR0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHQubmV4dFNpYmxpbmcpO1xuXHRcdH0sIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCh0KSB7XG5cdFx0XHR0Lmluc2VydEJlZm9yZSh0aGlzLCB0LmZpcnN0Q2hpbGQpO1xuXHRcdH0sIGFyb3VuZDogZnVuY3Rpb24gYXJvdW5kKHQpIHtcblx0XHRcdHQucGFyZW50Tm9kZSAmJiBuLmJlZm9yZSh0aGlzLCB0KSwgKC9edGVtcGxhdGUkL2kudGVzdCh0aGlzLm5vZGVOYW1lKSA/IHRoaXMuY29udGVudCB8fCB0aGlzIDogdGhpcykuYXBwZW5kQ2hpbGQodCk7XG5cdFx0fSB9LCBuLkFycmF5ID0gZnVuY3Rpb24gKHQpIHtcblx0XHR0aGlzLnN1YmplY3QgPSB0O1xuXHR9LCBuLkFycmF5LnByb3RvdHlwZSA9IHsgYWxsOiBmdW5jdGlvbiBhbGwodCkge1xuXHRcdFx0dmFyIGUgPSAkJChhcmd1bWVudHMpLnNsaWNlKDEpO3JldHVybiB0aGlzW3RdLmFwcGx5KHRoaXMsIGUpO1xuXHRcdH0gfSwgbi5hZGQgPSB0KGZ1bmN0aW9uICh0LCBlLCByLCBpKSB7XG5cdFx0ciA9IG4uZXh0ZW5kKHsgJDogITAsIGVsZW1lbnQ6ICEwLCBhcnJheTogITAgfSwgciksIFwiZnVuY3Rpb25cIiA9PSBuLnR5cGUoZSkgJiYgKCFyLmVsZW1lbnQgfHwgdCBpbiBuLkVsZW1lbnQucHJvdG90eXBlICYmIGkgfHwgKG4uRWxlbWVudC5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJqZWN0ICYmIG4uZGVmaW5lZChlLmFwcGx5KHRoaXMuc3ViamVjdCwgYXJndW1lbnRzKSwgdGhpcy5zdWJqZWN0KTtcblx0XHR9KSwgIXIuYXJyYXkgfHwgdCBpbiBuLkFycmF5LnByb3RvdHlwZSAmJiBpIHx8IChuLkFycmF5LnByb3RvdHlwZVt0XSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciB0ID0gYXJndW1lbnRzO3JldHVybiB0aGlzLnN1YmplY3QubWFwKGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRcdHJldHVybiByICYmIG4uZGVmaW5lZChlLmFwcGx5KHIsIHQpLCByKTtcblx0XHRcdH0pO1xuXHRcdH0pLCByLiQgJiYgKG4uc291cmNlc1t0XSA9IG5bdF0gPSBlLCAoci5hcnJheSB8fCByLmVsZW1lbnQpICYmIChuW3RdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGUgPSBbXS5zbGljZS5hcHBseShhcmd1bWVudHMpLFxuXHRcdFx0ICAgIGkgPSBlLnNoaWZ0KCksXG5cdFx0XHQgICAgcyA9IHIuYXJyYXkgJiYgQXJyYXkuaXNBcnJheShpKSA/IFwiQXJyYXlcIiA6IFwiRWxlbWVudFwiO3JldHVybiBuW3NdLnByb3RvdHlwZVt0XS5hcHBseSh7IHN1YmplY3Q6IGkgfSwgZSk7XG5cdFx0fSkpKTtcblx0fSwgMCksIG4uYWRkKG4uQXJyYXkucHJvdG90eXBlLCB7IGVsZW1lbnQ6ICExIH0pLCBuLmFkZChuLkVsZW1lbnQucHJvdG90eXBlKSwgbi5hZGQobi5zZXRQcm9wcyksIG4uYWRkKG4uY2xhc3NQcm9wcywgeyBlbGVtZW50OiAhMSwgYXJyYXk6ICExIH0pO3ZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIik7bi5hZGQobi5leHRlbmQoe30sIEhUTUxFbGVtZW50LnByb3RvdHlwZSwgZnVuY3Rpb24gKHQpIHtcblx0XHRyZXR1cm4gXCJmdW5jdGlvblwiID09PSBuLnR5cGUoaVt0XSk7XG5cdH0pLCBudWxsLCAhMCk7XG59KCksIGZ1bmN0aW9uICh0KSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXHRpZiAoQmxpc3MgJiYgIUJsaXNzLnNoeSkge1xuXHRcdHZhciBlID0gQmxpc3MucHJvcGVydHk7aWYgKHQuYWRkKHsgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuXHRcdFx0XHR2YXIgZSA9IHRoaXMuY2xvbmVOb2RlKCEwKSxcblx0XHRcdFx0ICAgIG4gPSB0LiQoXCIqXCIsIGUpLmNvbmNhdChlKTtyZXR1cm4gdC4kKFwiKlwiLCB0aGlzKS5jb25jYXQodGhpcykuZm9yRWFjaChmdW5jdGlvbiAoZSwgciwgaSkge1xuXHRcdFx0XHRcdHQuZXZlbnRzKG5bcl0sIGUpLCBuW3JdLl8uZGF0YSA9IHQuZXh0ZW5kKHt9LCBlLl8uZGF0YSk7XG5cdFx0XHRcdH0pLCBlO1xuXHRcdFx0fSB9LCB7IGFycmF5OiAhMSB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBlLCB7IGdldDogZnVuY3Rpb24gbygpIHtcblx0XHRcdFx0cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgZSwgeyBnZXQ6IHZvaWQgMCB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGUsIHsgdmFsdWU6IG5ldyB0LkVsZW1lbnQodGhpcykgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgZSwgeyBnZXQ6IG8gfSksIHRoaXNbZV07XG5cdFx0XHR9LCBjb25maWd1cmFibGU6ICEwIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBlLCB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGUsIHsgdmFsdWU6IG5ldyB0LkFycmF5KHRoaXMpIH0pLCB0aGlzW2VdO1xuXHRcdFx0fSwgY29uZmlndXJhYmxlOiAhMCB9KSwgc2VsZi5FdmVudFRhcmdldCAmJiBcImFkZEV2ZW50TGlzdGVuZXJcIiBpbiBFdmVudFRhcmdldC5wcm90b3R5cGUpIHtcblx0XHRcdHZhciBuID0gRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIsXG5cdFx0XHQgICAgciA9IEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyLFxuXHRcdFx0ICAgIGkgPSBmdW5jdGlvbiBpKHQsIGUsIG4pIHtcblx0XHRcdFx0cmV0dXJuIG4uY2FsbGJhY2sgPT09IHQgJiYgbi5jYXB0dXJlID09IGU7XG5cdFx0XHR9LFxuXHRcdFx0ICAgIHMgPSBmdW5jdGlvbiBzKCkge1xuXHRcdFx0XHRyZXR1cm4gIWkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH07RXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodCwgciwgcykge1xuXHRcdFx0XHRpZiAodGhpcyAmJiB0aGlzW2VdICYmIHRoaXNbZV0uYmxpc3MgJiYgcikge1xuXHRcdFx0XHRcdHZhciBvID0gdGhpc1tlXS5ibGlzcy5saXN0ZW5lcnMgPSB0aGlzW2VdLmJsaXNzLmxpc3RlbmVycyB8fCB7fTtpZiAodC5pbmRleE9mKFwiLlwiKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHR0ID0gdC5zcGxpdChcIi5cIik7dmFyIGEgPSB0WzFdO3QgPSB0WzBdO1xuXHRcdFx0XHRcdH1vW3RdID0gb1t0XSB8fCBbXSwgMCA9PT0gb1t0XS5maWx0ZXIoaS5iaW5kKG51bGwsIHIsIHMpKS5sZW5ndGggJiYgb1t0XS5wdXNoKHsgY2FsbGJhY2s6IHIsIGNhcHR1cmU6IHMsIGNsYXNzTmFtZTogYSB9KTtcblx0XHRcdFx0fXJldHVybiBuLmNhbGwodGhpcywgdCwgciwgcyk7XG5cdFx0XHR9LCBFdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0LCBuLCBpKSB7XG5cdFx0XHRcdGlmICh0aGlzICYmIHRoaXNbZV0gJiYgdGhpc1tlXS5ibGlzcyAmJiBuKSB7XG5cdFx0XHRcdFx0dmFyIG8gPSB0aGlzW2VdLmJsaXNzLmxpc3RlbmVycyA9IHRoaXNbZV0uYmxpc3MubGlzdGVuZXJzIHx8IHt9O29bdF0gJiYgKG9bdF0gPSBvW3RdLmZpbHRlcihzLmJpbmQobnVsbCwgbiwgaSkpKTtcblx0XHRcdFx0fXJldHVybiByLmNhbGwodGhpcywgdCwgbiwgaSk7XG5cdFx0XHR9O1xuXHRcdH1zZWxmLiQgPSBzZWxmLiQgfHwgdCwgc2VsZi4kJCA9IHNlbGYuJCQgfHwgdC4kO1xuXHR9XG59KEJsaXNzKTtcbi8qXG4gKiBTdHJldGNoeTogRm9ybSBlbGVtZW50IGF1dG9zaXppbmcsIHRoZSB3YXkgaXQgc2hvdWxkIGJlLlxuICogYnkgTGVhIFZlcm91IGh0dHA6Ly9sZWEudmVyb3UubWVcbiAqIE1JVCBsaWNlbnNlXG4gKi9cbihmdW5jdGlvbiAoKSB7XG5cblx0aWYgKCFzZWxmLkVsZW1lbnQpIHtcblx0XHRyZXR1cm47IC8vIHN1cGVyIG9sZCBicm93c2VyXG5cdH1cblxuXHRpZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcblx0XHRFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID0gRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5vTWF0Y2hlc1NlbGVjdG9yIHx8IG51bGw7XG5cdH1cblxuXHRpZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRmdW5jdGlvbiAkJChleHByLCBjb24pIHtcblx0XHRyZXR1cm4gZXhwciBpbnN0YW5jZW9mIE5vZGUgfHwgZXhwciBpbnN0YW5jZW9mIFdpbmRvdyA/IFtleHByXSA6IFtdLnNsaWNlLmNhbGwodHlwZW9mIGV4cHIgPT0gXCJzdHJpbmdcIiA/IChjb24gfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoZXhwcikgOiBleHByIHx8IFtdKTtcblx0fVxuXG5cdHZhciBfID0gc2VsZi5TdHJldGNoeSA9IHtcblx0XHRzZWxlY3RvcnM6IHtcblx0XHRcdGJhc2U6ICd0ZXh0YXJlYSwgc2VsZWN0Om5vdChbc2l6ZV0pLCBpbnB1dDpub3QoW3R5cGVdKSwgaW5wdXRbdHlwZT1cIicgKyBcInRleHQgdXJsIGVtYWlsIHRlbFwiLnNwbGl0KFwiIFwiKS5qb2luKCdcIl0sIGlucHV0W3R5cGU9XCInKSArICdcIl0nLFxuXHRcdFx0ZmlsdGVyOiBcIipcIlxuXHRcdH0sXG5cblx0XHQvLyBTY3JpcHQgZWxlbWVudCB0aGlzIHdhcyBpbmNsdWRlZCB3aXRoLCBpZiBhbnlcblx0XHRzY3JpcHQ6IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgfHwgJCQoXCJzY3JpcHRcIikucG9wKCksXG5cblx0XHQvLyBBdXRvc2l6ZSBvbmUgZWxlbWVudC4gVGhlIGNvcmUgb2YgU3RyZXRjaHkuXG5cdFx0cmVzaXplOiBmdW5jdGlvbiByZXNpemUoZWxlbWVudCkge1xuXHRcdFx0aWYgKCFfLnJlc2l6ZXMoZWxlbWVudCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXHRcdFx0dmFyIG9mZnNldCA9IDA7XG5cblx0XHRcdGlmICghZWxlbWVudC52YWx1ZSAmJiBlbGVtZW50LnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdHZhciBlbXB0eSA9IHRydWU7XG5cdFx0XHRcdGVsZW1lbnQudmFsdWUgPSBlbGVtZW50LnBsYWNlaG9sZGVyO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdHlwZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKHR5cGUgPT0gXCJ0ZXh0YXJlYVwiKSB7XG5cdFx0XHRcdGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG5cblx0XHRcdFx0aWYgKGNzLmJveFNpemluZyA9PSBcImJvcmRlci1ib3hcIikge1xuXHRcdFx0XHRcdG9mZnNldCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHRcdFx0XHR9IGVsc2UgaWYgKGNzLmJveFNpemluZyA9PSBcImNvbnRlbnQtYm94XCIpIHtcblx0XHRcdFx0XHRvZmZzZXQgPSAtZWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtZW50LnN0eWxlLmhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ICsgb2Zmc2V0ICsgXCJweFwiO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlID09IFwiaW5wdXRcIikge1xuXHRcdFx0XHRlbGVtZW50LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cblx0XHRcdFx0aWYgKGNzLmJveFNpemluZyA9PSBcImJvcmRlci1ib3hcIikge1xuXHRcdFx0XHRcdG9mZnNldCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cdFx0XHRcdH0gZWxzZSBpZiAoY3MuYm94U2l6aW5nID09IFwicGFkZGluZy1ib3hcIikge1xuXHRcdFx0XHRcdG9mZnNldCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTYWZhcmkgbWlzcmVwb3J0cyBzY3JvbGxXaWR0aCwgc28gd2Ugd2lsbCBpbnN0ZWFkIHNldCBzY3JvbGxMZWZ0IHRvIGFcblx0XHRcdFx0Ly8gaHVnZSBudW1iZXIsIGFuZCByZWFkIHRoYXQgYmFjayB0byBzZWUgd2hhdCBpdCB3YXMgY2xpcHBlZCB0b1xuXHRcdFx0XHRlbGVtZW50LnNjcm9sbExlZnQgPSAxZSsxMDtcblxuXHRcdFx0XHR2YXIgd2lkdGggPSBNYXRoLm1heChlbGVtZW50LnNjcm9sbExlZnQgKyBvZmZzZXQsIGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoKTtcblxuXHRcdFx0XHRlbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT0gXCJzZWxlY3RcIikge1xuXHRcdFx0XHQvLyBOZWVkIHRvIHVzZSBkdW1teSBlbGVtZW50IHRvIG1lYXN1cmUgOihcblx0XHRcdFx0dmFyIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpO1xuXHRcdFx0XHRvcHRpb24udGV4dENvbnRlbnQgPSBlbGVtZW50Lm9wdGlvbnNbZWxlbWVudC5zZWxlY3RlZEluZGV4XS50ZXh0Q29udGVudDtcblx0XHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvcHRpb24sIGVsZW1lbnQubmV4dFNpYmxpbmcpO1xuXG5cdFx0XHRcdC8vIFRoZSBuYW1lIG9mIHRoZSBhcHBlYXJhbmNlIHByb3BlcnR5LCBhcyBpdCBtaWdodCBiZSBwcmVmaXhlZFxuXHRcdFx0XHR2YXIgYXBwZWFyYW5jZTtcblxuXHRcdFx0XHRmb3IgKHZhciBwcm9wZXJ0eSBpbiBjcykge1xuXHRcdFx0XHRcdGlmICghL14od2lkdGh8d2Via2l0TG9naWNhbFdpZHRoKSQvLnRlc3QocHJvcGVydHkpKSB7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKHByb3BlcnR5LCBvcHRpb24ub2Zmc2V0V2lkdGgsIGNzW3Byb3BlcnR5XSk7XG5cdFx0XHRcdFx0XHRvcHRpb24uc3R5bGVbcHJvcGVydHldID0gY3NbcHJvcGVydHldO1xuXG5cdFx0XHRcdFx0XHRpZiAoL2FwcGVhcmFuY2UkL2kudGVzdChwcm9wZXJ0eSkpIHtcblx0XHRcdFx0XHRcdFx0YXBwZWFyYW5jZSA9IHByb3BlcnR5O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9wdGlvbi5zdHlsZS53aWR0aCA9IFwiXCI7XG5cblx0XHRcdFx0aWYgKG9wdGlvbi5vZmZzZXRXaWR0aCA+IDApIHtcblx0XHRcdFx0XHRlbGVtZW50LnN0eWxlLndpZHRoID0gb3B0aW9uLm9mZnNldFdpZHRoICsgXCJweFwiO1xuXG5cdFx0XHRcdFx0aWYgKCFjc1thcHBlYXJhbmNlXSB8fCBjc1thcHBlYXJhbmNlXSAhPT0gXCJub25lXCIpIHtcblx0XHRcdFx0XHRcdC8vIEFjY291bnQgZm9yIGFycm93XG5cdFx0XHRcdFx0XHRlbGVtZW50LnN0eWxlLndpZHRoID0gXCJjYWxjKFwiICsgZWxlbWVudC5zdHlsZS53aWR0aCArIFwiICsgMmVtKVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9wdGlvbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9wdGlvbik7XG5cdFx0XHRcdG9wdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChlbXB0eSkge1xuXHRcdFx0XHRlbGVtZW50LnZhbHVlID0gXCJcIjtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQXV0b3NpemUgbXVsdGlwbGUgZWxlbWVudHNcblx0XHRyZXNpemVBbGw6IGZ1bmN0aW9uIHJlc2l6ZUFsbChlbGVtZW50cykge1xuXHRcdFx0JCQoZWxlbWVudHMgfHwgXy5zZWxlY3RvcnMuYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdFx0XHRfLnJlc2l6ZShlbGVtZW50KTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRhY3RpdmU6IHRydWUsXG5cblx0XHQvLyBXaWxsIHN0cmV0Y2h5IGRvIGFueXRoaW5nIGZvciB0aGlzIGVsZW1lbnQ/XG5cdFx0cmVzaXplczogZnVuY3Rpb24gcmVzaXplcyhlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUgJiYgZWxlbWVudC5tYXRjaGVzICYmIGVsZW1lbnQubWF0Y2hlcyhfLnNlbGVjdG9ycy5iYXNlKSAmJiBlbGVtZW50Lm1hdGNoZXMoXy5zZWxlY3RvcnMuZmlsdGVyKTtcblx0XHR9LFxuXG5cdFx0aW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcblx0XHRcdF8uc2VsZWN0b3JzLmZpbHRlciA9IF8uc2NyaXB0LmdldEF0dHJpYnV0ZShcImRhdGEtZmlsdGVyXCIpIHx8ICgkJChcIltkYXRhLXN0cmV0Y2h5LWZpbHRlcl1cIikucG9wKCkgfHwgZG9jdW1lbnQuYm9keSkuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdHJldGNoeS1maWx0ZXJcIikgfHwgU3RyZXRjaHkuc2VsZWN0b3JzLmZpbHRlciB8fCBcIipcIjtcblxuXHRcdFx0Xy5yZXNpemVBbGwoKTtcblx0XHR9LFxuXG5cdFx0JCQ6ICQkXG5cdH07XG5cblx0Ly8gQXV0b3NpemUgYWxsIGVsZW1lbnRzIG9uY2UgdGhlIERPTSBpcyBsb2FkZWRcblxuXHQvLyBET00gYWxyZWFkeSBsb2FkZWQ/XG5cdGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuXHRcdF8uaW5pdCgpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFdhaXQgZm9yIGl0XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgXy5pbml0KTtcblx0fVxuXG5cdC8vIExpc3RlbiBmb3IgY2hhbmdlc1xuXHR2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcihldnQpIHtcblx0XHRpZiAoXy5hY3RpdmUpIHtcblx0XHRcdF8ucmVzaXplKGV2dC50YXJnZXQpO1xuXHRcdH1cblx0fTtcblxuXHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGxpc3RlbmVyKTtcblxuXHQvLyBGaXJlZm94IGZpcmVzIGEgY2hhbmdlIGV2ZW50IGluc3RlYWQgb2YgYW4gaW5wdXQgZXZlbnRcblx0ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgbGlzdGVuZXIpO1xuXG5cdC8vIExpc3RlbiBmb3IgbmV3IGVsZW1lbnRzXG5cdGlmIChzZWxmLk11dGF0aW9uT2JzZXJ2ZXIpIHtcblx0XHRuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG5cdFx0XHRpZiAoXy5hY3RpdmUpIHtcblx0XHRcdFx0bXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XG5cdFx0XHRcdFx0aWYgKG11dGF0aW9uLnR5cGUgPT0gXCJjaGlsZExpc3RcIikge1xuXHRcdFx0XHRcdFx0U3RyZXRjaHkucmVzaXplQWxsKG11dGF0aW9uLmFkZGVkTm9kZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSkub2JzZXJ2ZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcblx0XHRcdGNoaWxkTGlzdDogdHJ1ZSxcblx0XHRcdHN1YnRyZWU6IHRydWVcblx0XHR9KTtcblx0fVxufSkoKTtcblxuKGZ1bmN0aW9uICgkLCAkJCkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBfID0gc2VsZi5XeXNpZSA9ICQuQ2xhc3Moe1xuXHRcdGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdFx0XHRfLmFsbC5wdXNoKHRoaXMpO1xuXG5cdFx0XHQvLyBUT0RPIGVzY2FwaW5nIG9mICMgYW5kIFxcXG5cdFx0XHR2YXIgZGF0YVN0b3JlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0b3JlXCIpIHx8IFwibm9uZVwiO1xuXHRcdFx0dGhpcy5zdG9yZSA9IGRhdGFTdG9yZSA9PT0gXCJub25lXCIgPyBudWxsIDogZGF0YVN0b3JlO1xuXG5cdFx0XHQvLyBBc3NpZ24gYSB1bmlxdWUgKGZvciB0aGUgcGFnZSkgaWQgdG8gdGhpcyB3eXNpZSBpbnN0YW5jZVxuXHRcdFx0dGhpcy5pZCA9IFd5c2llLk5vZGUubm9ybWFsaXplUHJvcGVydHkoZWxlbWVudCkgfHwgXCJ3eXNpZS1cIiArIF8uYWxsLmxlbmd0aDtcblxuXHRcdFx0dGhpcy5hdXRvRWRpdCA9IF8uaGFzKFwiYXV0b2VkaXRcIiwgZWxlbWVudCk7XG5cblx0XHRcdHRoaXMuZWxlbWVudCA9IF8uaXMoXCJzY29wZVwiLCBlbGVtZW50KSA/IGVsZW1lbnQgOiAkKF8uc2VsZWN0b3JzLnJvb3RTY29wZSwgZWxlbWVudCk7XG5cblx0XHRcdGlmICghdGhpcy5lbGVtZW50KSB7XG5cdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZW9mXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgfHwgXCJcIik7XG5cdFx0XHRcdGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwicHJvcGVydHlcIik7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwid3lzaWUtcm9vdFwiKTtcblxuXHRcdFx0Ly8gQXBwbHkgaGV1cmlzdGljIGZvciBjb2xsZWN0aW9uc1xuXHRcdFx0JCQoXy5zZWxlY3RvcnMucHJvcGVydHkgKyBcIiwgXCIgKyBfLnNlbGVjdG9ycy5zY29wZSkuY29uY2F0KFt0aGlzLmVsZW1lbnRdKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0XHRcdGlmIChfLmlzKFwiYXV0b011bHRpcGxlXCIsIGVsZW1lbnQpICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZShcImRhdGEtbXVsdGlwbGVcIikpIHtcblx0XHRcdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtbXVsdGlwbGVcIiwgXCJcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLndyYXBwZXIgPSBlbGVtZW50LmNsb3Nlc3QoXCIud3lzaWUtd3JhcHBlclwiKSB8fCBlbGVtZW50O1xuXG5cdFx0XHQvLyBBcHBseSBoZXVyaXN0aWMgZm9yIHNjb3Blc1xuXHRcdFx0JCQoXy5zZWxlY3RvcnMucHJpbWl0aXZlKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0XHRcdHZhciBpc1Njb3BlID0gJChXeXNpZS5zZWxlY3RvcnMucHJvcGVydHksIGVsZW1lbnQpICYmICggLy8gQ29udGFpbnMgb3RoZXIgcHJvcGVydGllcyBhbmQuLi5cblx0XHRcdFx0V3lzaWUuaXMoXCJtdWx0aXBsZVwiLCBlbGVtZW50KSB8fCAvLyBpcyBhIGNvbGxlY3Rpb24uLi5cblx0XHRcdFx0V3lzaWUuUHJpbWl0aXZlLmdldFZhbHVlQXR0cmlidXRlKGVsZW1lbnQpID09PSBudWxsKTsgLy8gLi4ub3IgaXRzIGNvbnRlbnQgaXMgbm90IGluIGFuIGF0dHJpYnV0ZVxuXG5cdFx0XHRcdGlmIChpc1Njb3BlKSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlb2ZcIiwgXCJcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAodGhpcy53cmFwcGVyID09PSB0aGlzLmVsZW1lbnQgJiYgXy5pcyhcIm11bHRpcGxlXCIsIGVsZW1lbnQpKSB7XG5cdFx0XHRcdC8vIE5lZWQgdG8gY3JlYXRlIGEgd3JhcHBlclxuXHRcdFx0XHR2YXIgYXJvdW5kID0gdGhpcy5lbGVtZW50O1xuXG5cdFx0XHRcdC8vIEF2b2lkIHByb2R1Y2luZyBpbnZhbGlkIEhUTUxcblx0XHRcdFx0aWYgKHRoaXMuZWxlbWVudC5tYXRjaGVzKFwibGksIG9wdGlvblwiKSkge1xuXHRcdFx0XHRcdGFyb3VuZCA9IGFyb3VuZC5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuZWxlbWVudC5tYXRjaGVzKFwidGQsIHRyLCB0Ym9keSwgdGhlYWQsIHRmb290XCIpKSB7XG5cdFx0XHRcdFx0YXJvdW5kID0gYXJvdW5kLmNsb3Nlc3QoXCJ0YWJsZVwiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMud3JhcHBlciA9ICQuY3JlYXRlKHsgYXJvdW5kOiBhcm91bmQgfSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKFwid3lzaWUtd3JhcHBlclwiKTtcblxuXHRcdFx0ZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXN0b3JlXCIpO1xuXG5cdFx0XHQvLyBOb3JtYWxpemUgcHJvcGVydHkgbmFtZXNcblx0XHRcdHRoaXMucHJvcGVydHlOYW1lcyA9ICQkKF8uc2VsZWN0b3JzLnByb3BlcnR5LCB0aGlzLndyYXBwZXIpLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdFx0XHRyZXR1cm4gV3lzaWUuTm9kZS5ub3JtYWxpemVQcm9wZXJ0eShlbGVtZW50KTtcblx0XHRcdH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0cmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSXMgdGhlcmUgYW55IGNvbnRyb2wgdGhhdCByZXF1aXJlcyBhbiBlZGl0IGJ1dHRvbj9cblx0XHRcdHRoaXMubmVlZHNFZGl0ID0gZmFsc2U7XG5cblx0XHRcdC8vIEJ1aWxkIHd5c2llIG9iamVjdHNcblx0XHRcdFd5c2llLmhvb2tzLnJ1bihcImluaXQtdHJlZS1iZWZvcmVcIiwgdGhpcyk7XG5cdFx0XHR0aGlzLnJvb3QgPSBXeXNpZS5Ob2RlLmNyZWF0ZSh0aGlzLmVsZW1lbnQsIHRoaXMpO1xuXHRcdFx0V3lzaWUuaG9va3MucnVuKFwiaW5pdC10cmVlLWFmdGVyXCIsIHRoaXMpO1xuXG5cdFx0XHR0aGlzLnBlcm1pc3Npb25zID0gbmV3IFd5c2llLlBlcm1pc3Npb25zKG51bGwsIHRoaXMpO1xuXG5cdFx0XHR0aGlzLnVpID0ge1xuXHRcdFx0XHRiYXI6ICQoXCIud3lzaWUtYmFyXCIsIHRoaXMud3JhcHBlcikgfHwgJC5jcmVhdGUoe1xuXHRcdFx0XHRcdGNsYXNzTmFtZTogXCJ3eXNpZS1iYXIgd3lzaWUtdWlcIixcblx0XHRcdFx0XHRzdGFydDogdGhpcy53cmFwcGVyLFxuXHRcdFx0XHRcdGNvbnRlbnRzOiB7XG5cdFx0XHRcdFx0XHR0YWc6IFwic3BhblwiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lOiBcInN0YXR1c1wiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5wZXJtaXNzaW9ucy5jYW4oW1wiZWRpdFwiLCBcImFkZFwiLCBcImRlbGV0ZVwiXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRfdGhpcy51aS5lZGl0ID0gJC5jcmVhdGUoXCJidXR0b25cIiwge1xuXHRcdFx0XHRcdGNsYXNzTmFtZTogXCJlZGl0XCIsXG5cdFx0XHRcdFx0dGV4dENvbnRlbnQ6IFwiRWRpdFwiLFxuXHRcdFx0XHRcdG9uY2xpY2s6IGZ1bmN0aW9uIG9uY2xpY2soZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzLmVkaXRpbmcgPyBfdGhpcy5kb25lKCkgOiBfdGhpcy5lZGl0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRfdGhpcy51aS5zYXZlID0gJC5jcmVhdGUoXCJidXR0b25cIiwge1xuXHRcdFx0XHRcdGNsYXNzTmFtZTogXCJzYXZlXCIsXG5cdFx0XHRcdFx0dGV4dENvbnRlbnQ6IFwiU2F2ZVwiLFxuXHRcdFx0XHRcdGV2ZW50czoge1xuXHRcdFx0XHRcdFx0Y2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzLnNhdmUoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcIm1vdXNlZW50ZXIgZm9jdXNcIjogZnVuY3Rpb24gbW91c2VlbnRlckZvY3VzKGUpIHtcblx0XHRcdFx0XHRcdFx0X3RoaXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKFwic2F2ZS1ob3ZlcmVkXCIpO1xuXHRcdFx0XHRcdFx0XHRfdGhpcy51bnNhdmVkQ2hhbmdlcyA9IF90aGlzLmNhbGN1bGF0ZVVuc2F2ZWRDaGFuZ2VzKCk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XCJtb3VzZWxlYXZlIGJsdXJcIjogZnVuY3Rpb24gbW91c2VsZWF2ZUJsdXIoZSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFwic2F2ZS1ob3ZlcmVkXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0X3RoaXMudWkucmV2ZXJ0ID0gJC5jcmVhdGUoXCJidXR0b25cIiwge1xuXHRcdFx0XHRcdGNsYXNzTmFtZTogXCJyZXZlcnRcIixcblx0XHRcdFx0XHR0ZXh0Q29udGVudDogXCJSZXZlcnRcIixcblx0XHRcdFx0XHRkaXNhYmxlZDogdHJ1ZSxcblx0XHRcdFx0XHRldmVudHM6IHtcblx0XHRcdFx0XHRcdGNsaWNrOiBmdW5jdGlvbiBjbGljayhlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBfdGhpcy5yZXZlcnQoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcIm1vdXNlZW50ZXIgZm9jdXNcIjogZnVuY3Rpb24gbW91c2VlbnRlckZvY3VzKGUpIHtcblx0XHRcdFx0XHRcdFx0aWYgKF90aGlzLmV2ZXJTYXZlZCkge1xuXHRcdFx0XHRcdFx0XHRcdF90aGlzLndyYXBwZXIuY2xhc3NMaXN0LmFkZChcInJldmVydC1ob3ZlcmVkXCIpO1xuXHRcdFx0XHRcdFx0XHRcdF90aGlzLnVuc2F2ZWRDaGFuZ2VzID0gX3RoaXMuY2FsY3VsYXRlVW5zYXZlZENoYW5nZXMoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFwibW91c2VsZWF2ZSBibHVyXCI6IGZ1bmN0aW9uIG1vdXNlbGVhdmVCbHVyKGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzLndyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShcInJldmVydC1ob3ZlcmVkXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0X3RoaXMudWkuZWRpdEJ1dHRvbnMgPSBbX3RoaXMudWkuZWRpdCwgX3RoaXMudWkuc2F2ZSwgX3RoaXMudWkucmV2ZXJ0XTtcblxuXHRcdFx0XHQkLmNvbnRlbnRzKF90aGlzLnVpLmJhciwgX3RoaXMudWkuZWRpdEJ1dHRvbnMpO1xuXG5cdFx0XHRcdGlmIChfdGhpcy5hdXRvRWRpdCkge1xuXHRcdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXMudWkuZWRpdC5jbGljaygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdC8vIGNhbm5vdFxuXHRcdFx0XHQkLnJlbW92ZShfdGhpcy51aS5lZGl0QnV0dG9ucyk7XG5cblx0XHRcdFx0aWYgKF90aGlzLmVkaXRpbmcpIHtcblx0XHRcdFx0XHRfdGhpcy5kb25lKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnBlcm1pc3Npb25zLmNhbihbXCJkZWxldGVcIl0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0X3RoaXMudWkuY2xlYXIgPSAkLmNyZWF0ZShcImJ1dHRvblwiLCB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiBcImNsZWFyXCIsXG5cdFx0XHRcdFx0dGV4dENvbnRlbnQ6IFwiQ2xlYXJcIixcblx0XHRcdFx0XHRvbmNsaWNrOiBmdW5jdGlvbiBvbmNsaWNrKGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiBfdGhpcy5jbGVhcigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0X3RoaXMudWkuZWRpdEJ1dHRvbnMucHVzaChfdGhpcy51aS5jbGVhcik7XG5cblx0XHRcdFx0X3RoaXMudWkuYmFyLmFwcGVuZENoaWxkKF90aGlzLnVpLmNsZWFyKTtcblx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0Ly8gY2Fubm90XG5cdFx0XHRcdCQucmVtb3ZlKF90aGlzLnVpLmNsZWFyKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBGZXRjaCBleGlzdGluZyBkYXRhXG5cblx0XHRcdGlmICh0aGlzLnN0b3JlKSB7XG5cdFx0XHRcdHRoaXMuc3RvcmFnZSA9IG5ldyBfLlN0b3JhZ2UodGhpcyk7XG5cblx0XHRcdFx0dGhpcy5wZXJtaXNzaW9ucy5jYW4oXCJyZWFkXCIsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3RoaXMuc3RvcmFnZS5sb2FkKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gTm8gc3RvcmFnZVxuXHRcdFx0XHR0aGlzLnBlcm1pc3Npb25zLm9uKFtcInJlYWRcIiwgXCJlZGl0XCJdKTtcblxuXHRcdFx0XHR0aGlzLnJvb3QuaW1wb3J0KCk7XG5cblx0XHRcdFx0JC5maXJlKHRoaXMud3JhcHBlciwgXCJ3eXNpZTpsb2FkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMubmVlZHNFZGl0KSB7XG5cdFx0XHRcdHRoaXMucGVybWlzc2lvbnMub2ZmKFtcImVkaXRcIiwgXCJhZGRcIiwgXCJkZWxldGVcIl0pO1xuXHRcdFx0fVxuXG5cdFx0XHRXeXNpZS5ob29rcy5ydW4oXCJpbml0LWVuZFwiLCB0aGlzKTtcblx0XHR9LFxuXG5cdFx0Z2V0IGRhdGEoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXREYXRhKCk7XG5cdFx0fSxcblxuXHRcdGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEobykge1xuXHRcdFx0cmV0dXJuIHRoaXMucm9vdC5nZXREYXRhKG8pO1xuXHRcdH0sXG5cblx0XHR0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcblx0XHRcdHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdGhpcy5kYXRhIDogYXJndW1lbnRzWzBdO1xuXG5cdFx0XHRyZXR1cm4gXy50b0pTT04oZGF0YSk7XG5cdFx0fSxcblxuXHRcdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGRhdGEpIHtcblx0XHRcdF8uaG9va3MucnVuKFwicmVuZGVyLXN0YXJ0XCIsIHsgY29udGV4dDogdGhpcywgZGF0YTogZGF0YSB9KTtcblxuXHRcdFx0aWYgKCFkYXRhKSB7XG5cdFx0XHRcdHRoaXMucm9vdC5pbXBvcnQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZXZlclNhdmVkID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5yb290LnJlbmRlcihkYXRhLmRhdGEgfHwgZGF0YSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudW5zYXZlZENoYW5nZXMgPSBmYWxzZTtcblx0XHR9LFxuXG5cdFx0Y2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuXHRcdFx0aWYgKGNvbmZpcm0oXCJUaGlzIHdpbGwgZGVsZXRlIGFsbCB5b3VyIGRhdGEuIEFyZSB5b3Ugc3VyZT9cIikpIHtcblx0XHRcdFx0dGhpcy5zdG9yYWdlICYmIHRoaXMuc3RvcmFnZS5jbGVhcigpO1xuXHRcdFx0XHR0aGlzLnJvb3QuY2xlYXIoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZWRpdDogZnVuY3Rpb24gZWRpdCgpIHtcblx0XHRcdHRoaXMuZWRpdGluZyA9IHRydWU7XG5cblx0XHRcdHRoaXMucm9vdC5lZGl0KCk7XG5cblx0XHRcdCQuZXZlbnRzKHRoaXMud3JhcHBlciwgXCJtb3VzZWVudGVyLnd5c2llOmVkaXQgbW91c2VsZWF2ZS53eXNpZTplZGl0XCIsIGZ1bmN0aW9uIChldnQpIHtcblx0XHRcdFx0aWYgKGV2dC50YXJnZXQubWF0Y2hlcyhcIi53eXNpZS1pdGVtLWNvbnRyb2xzIC5kZWxldGVcIikpIHtcblx0XHRcdFx0XHR2YXIgaXRlbSA9IGV2dC50YXJnZXQuY2xvc2VzdChfLnNlbGVjdG9ycy5pdGVtKTtcblx0XHRcdFx0XHRpdGVtLmNsYXNzTGlzdC50b2dnbGUoXCJkZWxldGUtaG92ZXJcIiwgZXZ0LnR5cGUgPT0gXCJtb3VzZWVudGVyXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGV2dC50YXJnZXQubWF0Y2hlcyhfLnNlbGVjdG9ycy5pdGVtKSkge1xuXHRcdFx0XHRcdGV2dC50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcImhhcy1ob3ZlcmVkLWl0ZW1cIik7XG5cblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZXZ0LnRhcmdldC5wYXJlbnROb2RlLmNsb3Nlc3QoXy5zZWxlY3RvcnMuaXRlbSk7XG5cblx0XHRcdFx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRcdFx0XHRwYXJlbnQuY2xhc3NMaXN0LnRvZ2dsZShcImhhcy1ob3ZlcmVkLWl0ZW1cIiwgZXZ0LnR5cGUgPT0gXCJtb3VzZWVudGVyXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSwgdHJ1ZSk7XG5cblx0XHRcdHRoaXMudW5zYXZlZENoYW5nZXMgPSB0aGlzLmNhbGN1bGF0ZVVuc2F2ZWRDaGFuZ2VzKCk7XG5cdFx0fSxcblxuXHRcdGNhbGN1bGF0ZVVuc2F2ZWRDaGFuZ2VzOiBmdW5jdGlvbiBjYWxjdWxhdGVVbnNhdmVkQ2hhbmdlcygpIHtcblx0XHRcdHZhciB1bnNhdmVkQ2hhbmdlcyA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLndhbGsoZnVuY3Rpb24gKG9iaikge1xuXHRcdFx0XHRpZiAob2JqLnVuc2F2ZWRDaGFuZ2VzKSB7XG5cdFx0XHRcdFx0dW5zYXZlZENoYW5nZXMgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiB1bnNhdmVkQ2hhbmdlcztcblx0XHR9LFxuXG5cdFx0Ly8gQ29uY2x1ZGUgZWRpdGluZ1xuXHRcdGRvbmU6IGZ1bmN0aW9uIGRvbmUoKSB7XG5cdFx0XHR0aGlzLnJvb3QuZG9uZSgpO1xuXHRcdFx0JC51bmJpbmQodGhpcy53cmFwcGVyLCBcIi53eXNpZTplZGl0XCIpO1xuXHRcdFx0dGhpcy5lZGl0aW5nID0gZmFsc2U7XG5cdFx0XHR0aGlzLnVuc2F2ZWRDaGFuZ2VzID0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdHNhdmU6IGZ1bmN0aW9uIHNhdmUoKSB7XG5cdFx0XHR0aGlzLnJvb3Quc2F2ZSgpO1xuXG5cdFx0XHRpZiAodGhpcy5zdG9yYWdlKSB7XG5cdFx0XHRcdHRoaXMuc3RvcmFnZS5zYXZlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZXZlclNhdmVkID0gdHJ1ZTtcblx0XHRcdHRoaXMudW5zYXZlZENoYW5nZXMgPSBmYWxzZTtcblx0XHR9LFxuXG5cdFx0cmV2ZXJ0OiBmdW5jdGlvbiByZXZlcnQoKSB7XG5cdFx0XHR0aGlzLnJvb3QucmV2ZXJ0KCk7XG5cdFx0fSxcblxuXHRcdHdhbGs6IGZ1bmN0aW9uIHdhbGsoY2FsbGJhY2spIHtcblx0XHRcdHRoaXMucm9vdC53YWxrKGNhbGxiYWNrKTtcblx0XHR9LFxuXG5cdFx0bGl2ZToge1xuXHRcdFx0ZWRpdGluZzoge1xuXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHRcdFx0XHRcdHRoaXMud3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKFwiZWRpdGluZ1wiLCB2YWx1ZSk7XG5cblx0XHRcdFx0XHRpZiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdHRoaXMud3JhcHBlci5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVkaXRpbmdcIiwgXCJcIik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMud3JhcHBlci5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWVkaXRpbmdcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHR1bnNhdmVkQ2hhbmdlczogZnVuY3Rpb24gdW5zYXZlZENoYW5nZXModmFsdWUpIHtcblx0XHRcdFx0dGhpcy53cmFwcGVyLmNsYXNzTGlzdC50b2dnbGUoXCJ1bnNhdmVkLWNoYW5nZXNcIiwgdmFsdWUpO1xuXG5cdFx0XHRcdGlmICh0aGlzLnVpICYmIHRoaXMudWkuc2F2ZSkge1xuXHRcdFx0XHRcdHRoaXMudWkuc2F2ZS5kaXNhYmxlZCA9ICF2YWx1ZTtcblx0XHRcdFx0XHR0aGlzLnVpLnJldmVydC5kaXNhYmxlZCA9ICF0aGlzLmV2ZXJTYXZlZCB8fCAhdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGV2ZXJTYXZlZDogZnVuY3Rpb24gZXZlclNhdmVkKHZhbHVlKSB7XG5cdFx0XHRcdGlmICh0aGlzLnVpICYmIHRoaXMudWkucmV2ZXJ0KSB7XG5cdFx0XHRcdFx0dGhpcy51aS5yZXZlcnQuZGlzYWJsZWQgPSAhdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c3RhdGljOiB7XG5cdFx0XHRhbGw6IFtdLFxuXG5cdFx0XHR0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihkYXRhKSB7XG5cdFx0XHRcdGlmIChkYXRhID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHQvLyBEbyBub3Qgc3RyaW5naWZ5IHR3aWNlIVxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIFwiXFx0XCIpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ29udmVydCBhbiBpZGVudGlmaWVyIHRvIHJlYWRhYmxlIHRleHQgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIGxhYmVsXG5cdFx0XHRyZWFkYWJsZTogZnVuY3Rpb24gcmVhZGFibGUoaWRlbnRpZmllcikge1xuXHRcdFx0XHQvLyBJcyBpdCBjYW1lbENhc2U/XG5cdFx0XHRcdHJldHVybiBpZGVudGlmaWVyICYmIGlkZW50aWZpZXIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkoPz1bYS16XSkvZywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcblx0XHRcdFx0XHRyZXR1cm4gJDEgKyBcIiBcIiArICQyLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdH0pIC8vIGNhbWVsQ2FzZT9cblx0XHRcdFx0LnJlcGxhY2UoLyhbYS16XSlbX1xcLy1dKD89W2Etel0pL2csIFwiJDEgXCIpIC8vIEh5cGhlbi1zZXBhcmF0ZWQgLyBVbmRlcnNjb3JlX3NlcGFyYXRlZD9cblx0XHRcdFx0LnJlcGxhY2UoL15bYS16XS8sIGZ1bmN0aW9uICgkMCkge1xuXHRcdFx0XHRcdHJldHVybiAkMC50b1VwcGVyQ2FzZSgpO1xuXHRcdFx0XHR9KTsgLy8gQ2FwaXRhbGl6ZVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gSW52ZXJzZSBvZiBfLnJlYWRhYmxlKCk6IFRha2UgYSByZWFkYWJsZSBzdHJpbmcgYW5kIHR1cm4gaXQgaW50byBhbiBpZGVudGlmaWVyXG5cdFx0XHRpZGVudGlmaWVyOiBmdW5jdGlvbiBpZGVudGlmaWVyKHJlYWRhYmxlKSB7XG5cdFx0XHRcdHJlYWRhYmxlID0gcmVhZGFibGUgKyBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gcmVhZGFibGUgJiYgcmVhZGFibGUucmVwbGFjZSgvXFxzKy9nLCBcIi1cIikgLy8gQ29udmVydCB3aGl0ZXNwYWNlIHRvIGh5cGhlbnNcblx0XHRcdFx0LnJlcGxhY2UoL1teXFx3LV0vZywgXCJcIikgLy8gUmVtb3ZlIHdlaXJkIGNoYXJhY3RlcnNcblx0XHRcdFx0LnRvTG93ZXJDYXNlKCk7XG5cdFx0XHR9LFxuXG5cdFx0XHRxdWVyeUpTT046IGZ1bmN0aW9uIHF1ZXJ5SlNPTihkYXRhLCBwYXRoKSB7XG5cdFx0XHRcdGlmICghcGF0aCB8fCAhZGF0YSkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuICQudmFsdWUuYXBwbHkoJCwgW2RhdGFdLmNvbmNhdChwYXRoLnNwbGl0KFwiL1wiKSkpO1xuXHRcdFx0fSxcblxuXHRcdFx0b2JzZXJ2ZTogZnVuY3Rpb24gb2JzZXJ2ZShlbGVtZW50LCBhdHRyaWJ1dGUsIGNhbGxiYWNrLCBvbGRWYWx1ZSkge1xuXHRcdFx0XHR2YXIgb2JzZXJ2ZXIgPSAkLnR5cGUoY2FsbGJhY2spID09IFwiZnVuY3Rpb25cIiA/IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKSA6IGNhbGxiYWNrO1xuXG5cdFx0XHRcdHZhciBvcHRpb25zID0gYXR0cmlidXRlID8ge1xuXHRcdFx0XHRcdGF0dHJpYnV0ZXM6IHRydWUsXG5cdFx0XHRcdFx0YXR0cmlidXRlRmlsdGVyOiBbYXR0cmlidXRlXSxcblx0XHRcdFx0XHRhdHRyaWJ1dGVPbGRWYWx1ZTogISFvbGRWYWx1ZVxuXHRcdFx0XHR9IDoge1xuXHRcdFx0XHRcdGNoYXJhY3RlckRhdGE6IHRydWUsXG5cdFx0XHRcdFx0Y2hpbGRMaXN0OiB0cnVlLFxuXHRcdFx0XHRcdHN1YnRyZWU6IHRydWUsXG5cdFx0XHRcdFx0Y2hhcmFjdGVyRGF0YU9sZFZhbHVlOiAhIW9sZFZhbHVlXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0b2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCBvcHRpb25zKTtcblxuXHRcdFx0XHRyZXR1cm4gb2JzZXJ2ZXI7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBJZiB0aGUgcGFzc2VkIHZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY29udmVydCB0byBhbiBhcnJheVxuXHRcdFx0dG9BcnJheTogZnVuY3Rpb24gdG9BcnJheShhcnIpIHtcblx0XHRcdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKSA/IGFyciA6IFthcnJdO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5XG5cdFx0XHRmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKGFycikge1xuXHRcdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkge1xuXHRcdFx0XHRcdHJldHVybiBbYXJyXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF8udG9BcnJheShwcmV2KS5jb25jYXQoXy5mbGF0dGVuKGMpKTtcblx0XHRcdFx0fSwgW10pO1xuXHRcdFx0fSxcblxuXHRcdFx0aXM6IGZ1bmN0aW9uIGlzKHRoaW5nLCBlbGVtZW50KSB7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50Lm1hdGNoZXMgJiYgZWxlbWVudC5tYXRjaGVzKF8uc2VsZWN0b3JzW3RoaW5nXSk7XG5cdFx0XHR9LFxuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uIGhhcyhvcHRpb24sIGVsZW1lbnQpIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQubWF0Y2hlcyAmJiBlbGVtZW50Lm1hdGNoZXMoXy5zZWxlY3RvcnMub3B0aW9uKG9wdGlvbikpO1xuXHRcdFx0fSxcblxuXHRcdFx0aG9va3M6IG5ldyAkLkhvb2tzKClcblx0XHR9XG5cdH0pO1xuXG5cdHtcblx0XHQoZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR2YXIgcyA9IF8uc2VsZWN0b3JzID0ge1xuXHRcdFx0XHRwcm9wZXJ0eTogXCJbcHJvcGVydHldLCBbaXRlbXByb3BdXCIsXG5cdFx0XHRcdHNwZWNpZmljUHJvcGVydHk6IGZ1bmN0aW9uIHNwZWNpZmljUHJvcGVydHkobmFtZSkge1xuXHRcdFx0XHRcdHJldHVybiBcIltwcm9wZXJ0eT1cIiArIG5hbWUgKyBcIl0sIFtpdGVtcHJvcD1cIiArIG5hbWUgKyBcIl1cIjtcblx0XHRcdFx0fSxcblx0XHRcdFx0c2NvcGU6IFwiW3R5cGVvZl0sIFtpdGVtc2NvcGVdLCBbaXRlbXR5cGVdLCAuc2NvcGVcIixcblx0XHRcdFx0bXVsdGlwbGU6IFwiW211bHRpcGxlXSwgW2RhdGEtbXVsdGlwbGVdLCAubXVsdGlwbGVcIixcblx0XHRcdFx0cmVxdWlyZWQ6IFwiW3JlcXVpcmVkXSwgW2RhdGEtcmVxdWlyZWRdLCAucmVxdWlyZWRcIixcblx0XHRcdFx0Zm9ybUNvbnRyb2w6IFwiaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWFcIixcblx0XHRcdFx0Y29tcHV0ZWQ6IFwiLmNvbXB1dGVkXCIsIC8vIFByb3BlcnRpZXMgb3Igc2NvcGVzIHdpdGggY29tcHV0ZWQgcHJvcGVydGllcywgd2lsbCBub3QgYmUgc2F2ZWRcblx0XHRcdFx0aXRlbTogXCIud3lzaWUtaXRlbVwiLFxuXHRcdFx0XHR1aTogXCIud3lzaWUtdWlcIixcblx0XHRcdFx0b3B0aW9uOiBmdW5jdGlvbiBvcHRpb24obmFtZSkge1xuXHRcdFx0XHRcdHJldHVybiBcIltcIiArIG5hbWUgKyBcIl0sIFtkYXRhLVwiICsgbmFtZSArIFwiXSwgW2RhdGEtd3lzaWUtb3B0aW9uc349J1wiICsgbmFtZSArIFwiJ10sIC5cIiArIG5hbWU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbnRhaW5lcjoge1xuXHRcdFx0XHRcdFwibGlcIjogXCJ1bCwgb2xcIixcblx0XHRcdFx0XHRcInRyXCI6IFwidGFibGVcIixcblx0XHRcdFx0XHRcIm9wdGlvblwiOiBcInNlbGVjdFwiLFxuXHRcdFx0XHRcdFwiZHRcIjogXCJkbFwiLFxuXHRcdFx0XHRcdFwiZGRcIjogXCJkbFwiXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdHZhciBhcnIgPSBzLmFyciA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuXHRcdFx0XHRyZXR1cm4gc2VsZWN0b3Iuc3BsaXQoL1xccyosXFxzKi9nKTtcblx0XHRcdH07XG5cdFx0XHR2YXIgbm90ID0gcy5ub3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0XHRcdFx0cmV0dXJuIGFycihzZWxlY3RvcikubWFwKGZ1bmN0aW9uIChzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwiOm5vdChcIiArIHMgKyBcIilcIjtcblx0XHRcdFx0fSkuam9pbihcIlwiKTtcblx0XHRcdH07XG5cdFx0XHR2YXIgb3IgPSBzLm9yID0gZnVuY3Rpb24gKHNlbGVjdG9yMSwgc2VsZWN0b3IyKSB7XG5cdFx0XHRcdHJldHVybiBzZWxlY3RvcjEgKyBcIiwgXCIgKyBzZWxlY3RvcjI7XG5cdFx0XHR9O1xuXHRcdFx0dmFyIGFuZCA9IHMuYW5kID0gZnVuY3Rpb24gKHNlbGVjdG9yMSwgc2VsZWN0b3IyKSB7XG5cdFx0XHRcdHJldHVybiBfLmZsYXR0ZW4oYXJyKHNlbGVjdG9yMSkubWFwKGZ1bmN0aW9uIChzMSkge1xuXHRcdFx0XHRcdHJldHVybiBhcnIoc2VsZWN0b3IyKS5tYXAoZnVuY3Rpb24gKHMyKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gczEgKyBzMjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSkpLmpvaW4oXCIsIFwiKTtcblx0XHRcdH07XG5cdFx0XHR2YXIgYW5kTm90ID0gcy5hbmROb3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IxLCBzZWxlY3RvcjIpIHtcblx0XHRcdFx0cmV0dXJuIGFuZChzZWxlY3RvcjEsIG5vdChzZWxlY3RvcjIpKTtcblx0XHRcdH07XG5cblx0XHRcdCQuZXh0ZW5kKF8uc2VsZWN0b3JzLCB7XG5cdFx0XHRcdHByaW1pdGl2ZTogYW5kTm90KHMucHJvcGVydHksIHMuc2NvcGUpLFxuXHRcdFx0XHRyb290U2NvcGU6IGFuZE5vdChzLnNjb3BlLCBzLnByb3BlcnR5KSxcblx0XHRcdFx0b3V0cHV0OiBvcihzLnNwZWNpZmljUHJvcGVydHkoXCJvdXRwdXRcIiksIFwiLm91dHB1dCwgLnZhbHVlXCIpLFxuXHRcdFx0XHRhdXRvTXVsdGlwbGU6IGFuZChcImxpLCB0ciwgb3B0aW9uXCIsIFwiOm9ubHktb2YtdHlwZVwiKVxuXHRcdFx0fSk7XG5cdFx0fSkoKTtcblx0fVxuXG5cdC8vIEJsaXNzIHBsdWdpbnNcblxuXHQvLyBQcm92aWRlIHNob3J0Y3V0cyB0byBsb25nIHByb3BlcnR5IGNoYWluc1xuXHQkLnByb3h5ID0gJC5jbGFzc1Byb3BzLnByb3h5ID0gJC5vdmVybG9hZChmdW5jdGlvbiAob2JqLCBwcm9wZXJ0eSwgcHJveHkpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wZXJ0eSwge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzW3Byb3h5XVtwcm9wZXJ0eV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0XHRcdFx0dGhpc1twcm94eV1bcHJvcGVydHldID0gdmFsdWU7XG5cdFx0XHR9LFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG9iajtcblx0fSk7XG5cblx0JC5jbGFzc1Byb3BzLnByb3BhZ2F0ZWQgPSBmdW5jdGlvbiAocHJvdG8sIG5hbWVzKSB7XG5cdFx0V3lzaWUudG9BcnJheShuYW1lcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0dmFyIGV4aXN0aW5nID0gcHJvdG9bbmFtZV07XG5cblx0XHRcdHByb3RvW25hbWVdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgcmV0ID0gZXhpc3RpbmcgJiYgZXhpc3RpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuXHRcdFx0XHRpZiAodGhpcy5wcm9wYWdhdGUgJiYgcmV0ICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdHRoaXMucHJvcGFnYXRlKG5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8vIDpmb2N1cy13aXRoaW4gc2hpbVxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZnVuY3Rpb24gKGV2dCkge1xuXHRcdCQkKFwiLmZvY3VzLXdpdGhpblwiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuXHRcdFx0cmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJmb2N1cy13aXRoaW5cIik7XG5cdFx0fSk7XG5cblx0XHR2YXIgZWxlbWVudCA9IGV2dC50YXJnZXQ7XG5cblx0XHR3aGlsZSAoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkge1xuXHRcdFx0aWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG5cdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZvY3VzLXdpdGhpblwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHRydWUpO1xuXG5cdC8vIEluaXQgd3lzaWVcblx0UHJvbWlzZS5hbGwoWyQucmVhZHkoKSwgJC5pbmNsdWRlKEFycmF5LmZyb20gJiYgd2luZG93LkludGwgJiYgZG9jdW1lbnQuYm9keS5jbG9zZXN0LCBcImh0dHBzOi8vY2RuLnBvbHlmaWxsLmlvL3YyL3BvbHlmaWxsLm1pbi5qcz9mZWF0dXJlcz1ibGlzc2Z1bGpzLEludGwufmxvY2FsZS5lblwiKV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXG5cdFx0JCQoXCJbZGF0YS1zdG9yZV1cIikuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG5cdFx0XHRuZXcgV3lzaWUoZWxlbWVudCk7XG5cdFx0fSk7XG5cdH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRyZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xuXHR9KTtcblxuXHRTdHJldGNoeS5zZWxlY3RvcnMuZmlsdGVyID0gXCIud3lzaWUtZWRpdG9yOm5vdChbcHJvcGVydHldKVwiO1xufSkoQmxpc3MsIEJsaXNzLiQpO1xuXG4oZnVuY3Rpb24gKCQpIHtcblxuXHR2YXIgXyA9IFd5c2llLlBlcm1pc3Npb25zID0gJC5DbGFzcyh7XG5cdFx0Y29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKG8sIHd5c2llKSB7XG5cdFx0XHR0aGlzLnRyaWdnZXJzID0gW107XG5cdFx0XHR0aGlzLnd5c2llID0gd3lzaWU7XG5cblx0XHRcdHRoaXMuc2V0KG8pO1xuXHRcdH0sXG5cblx0XHQvLyBTZXQgbXVsdGlwbGUgcGVybWlzc2lvbnMgYXQgb25jZVxuXHRcdHNldDogZnVuY3Rpb24gc2V0KG8pIHtcblx0XHRcdGZvciAodmFyIGFjdGlvbiBpbiBvKSB7XG5cdFx0XHRcdHRoaXNbYWN0aW9uXSA9IG9bYWN0aW9uXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gU2V0IGEgYnVuY2ggb2YgcGVybWlzc2lvbnMgdG8gdHJ1ZS4gQ2hhaW5hYmxlLlxuXHRcdG9uOiBmdW5jdGlvbiBvbihhY3Rpb25zKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0V3lzaWUudG9BcnJheShhY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcblx0XHRcdFx0cmV0dXJuIF90aGlzMlthY3Rpb25dID0gdHJ1ZTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0Ly8gU2V0IGEgYnVuY2ggb2YgcGVybWlzc2lvbnMgdG8gZmFsc2UuIENoYWluYWJsZS5cblx0XHRvZmY6IGZ1bmN0aW9uIG9mZihhY3Rpb25zKSB7XG5cdFx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdFx0YWN0aW9ucyA9IEFycmF5LmlzQXJyYXkoYWN0aW9ucykgPyBhY3Rpb25zIDogW2FjdGlvbnNdO1xuXG5cdFx0XHRhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXMzW2FjdGlvbl0gPSBmYWxzZTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0Ly8gRmlyZWQgb25jZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGFjdGlvbnMgcGFzc2VkIGNhbiBiZSBwZXJmb3JtZWRcblx0XHQvLyBLaW5kIG9mIGxpa2UgYSBQcm9taXNlIHRoYXQgY2FuIGJlIHJlc29sdmVkIG11bHRpcGxlIHRpbWVzLlxuXHRcdGNhbjogZnVuY3Rpb24gY2FuKGFjdGlvbnMsIGNhbGxiYWNrLCBjYW5ub3QpIHtcblx0XHRcdHRoaXMub2JzZXJ2ZShhY3Rpb25zLCB0cnVlLCBjYWxsYmFjayk7XG5cblx0XHRcdGlmIChjYW5ub3QpIHtcblx0XHRcdFx0Ly8gRmlyZWQgb25jZSB0aGUgYWN0aW9uIGNhbm5vdCBiZSBkb25lIGFueW1vcmUsIGV2ZW4gdGhvdWdoIGl0IGNvdWxkIGJlIGRvbmUgYmVmb3JlXG5cdFx0XHRcdHRoaXMub2JzZXJ2ZShhY3Rpb25zLCBmYWxzZSwgY2Fubm90KTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTGlrZSB0aGlzLmNhbigpLCBidXQgcmV0dXJucyBhIHByb21pc2Vcblx0XHQvLyBVc2VmdWwgZm9yIHRoaW5ncyB0aGF0IHlvdSB3YW50IHRvIGRvIG9ubHkgb25jZVxuXHRcdHdoZW46IGZ1bmN0aW9uIHdoZW4oYWN0aW9ucykge1xuXHRcdFx0dmFyIF90aGlzNCA9IHRoaXM7XG5cblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdF90aGlzNC5jYW4oYWN0aW9ucywgcmVzb2x2ZSwgcmVqZWN0KTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHQvLyBTY2hlZHVsZSBhIGNhbGxiYWNrIGZvciB3aGVuIGEgc2V0IG9mIHBlcm1pc3Npb25zIGNoYW5nZXMgdmFsdWVcblx0XHRvYnNlcnZlOiBmdW5jdGlvbiBvYnNlcnZlKGFjdGlvbnMsIHZhbHVlLCBjYWxsYmFjaykge1xuXHRcdFx0YWN0aW9ucyA9IEFycmF5LmlzQXJyYXkoYWN0aW9ucykgPyBhY3Rpb25zIDogW2FjdGlvbnNdO1xuXG5cdFx0XHRpZiAodGhpcy5pcyhhY3Rpb25zLCB2YWx1ZSkpIHtcblx0XHRcdFx0Ly8gU2hvdWxkIGJlIGZpcmVkIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBmdXR1cmUgdHJhbnNpdGlvbnNcblx0XHRcdHRoaXMudHJpZ2dlcnMucHVzaCh7IGFjdGlvbnM6IGFjdGlvbnMsIHZhbHVlOiB2YWx1ZSwgY2FsbGJhY2s6IGNhbGxiYWNrLCBhY3RpdmU6IHRydWUgfSk7XG5cdFx0fSxcblxuXHRcdC8vIENvbXBhcmUgYSBzZXQgb2YgcGVybWlzc2lvbnMgd2l0aCB0cnVlIG9yIGZhbHNlXG5cdFx0Ly8gSWYgY29tcGFyaW5nIHdpdGggdHJ1ZSwgd2Ugd2FudCBhdCBsZWFzdCBvbmUgdG8gYmUgdHJ1ZSwgaS5lLiBPUlxuXHRcdC8vIElmIGNvbXBhcmluZyB3aXRoIGZhbHNlLCB3ZSB3YW50IEFMTCB0byBiZSBmYWxzZSwgaS5lLiBOT1Jcblx0XHRpczogZnVuY3Rpb24gaXMoYWN0aW9ucywgYWJsZSkge1xuXHRcdFx0dmFyIF90aGlzNSA9IHRoaXM7XG5cblx0XHRcdHZhciBvciA9IGFjdGlvbnMubWFwKGZ1bmN0aW9uIChhY3Rpb24pIHtcblx0XHRcdFx0cmV0dXJuICEhX3RoaXM1W2FjdGlvbl07XG5cdFx0XHR9KS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnJlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHByZXYgfHwgY3VycmVudDtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gYWJsZSA/IG9yIDogIW9yO1xuXHRcdH0sXG5cblx0XHQvLyBBIHNpbmdsZSBwZXJtaXNzaW9uIGNoYW5nZWQgdmFsdWVcblx0XHRjaGFuZ2VkOiBmdW5jdGlvbiBjaGFuZ2VkKGFjdGlvbiwgdmFsdWUsIGZyb20pIHtcblx0XHRcdHZhciBfdGhpczYgPSB0aGlzO1xuXG5cdFx0XHRmcm9tID0gISFmcm9tO1xuXHRcdFx0dmFsdWUgPSAhIXZhbHVlO1xuXG5cdFx0XHRpZiAodmFsdWUgPT0gZnJvbSkge1xuXHRcdFx0XHQvLyBOb3RoaW5nIGNoYW5nZWRcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy53eXNpZSkge1xuXHRcdFx0XHR0aGlzLnd5c2llLndyYXBwZXIuY2xhc3NMaXN0LnRvZ2dsZShcImNhbi1cIiArIGFjdGlvbiwgdmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyAkLmxpdmUoKSBjYWxscyB0aGUgc2V0dGVyIGJlZm9yZSB0aGUgYWN0dWFsIHByb3BlcnR5IGlzIHNldCBzbyB3ZVxuXHRcdFx0Ly8gbmVlZCB0byBzZXQgaXQgbWFudWFsbHksIG90aGVyd2lzZSBpdCBzdGlsbCBoYXMgaXRzIHByZXZpb3VzIHZhbHVlXG5cdFx0XHR0aGlzW1wiX1wiICsgYWN0aW9uXSA9IHZhbHVlO1xuXG5cdFx0XHQvLyBUT0RPIGFkZCBjbGFzc2VzIHRvIHdyYXBwZXJcblx0XHRcdHRoaXMudHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuXHRcdFx0XHR2YXIgbWF0Y2ggPSBfdGhpczYuaXModHJpZ2dlci5hY3Rpb25zLCB0cmlnZ2VyLnZhbHVlKTtcblxuXHRcdFx0XHRpZiAodHJpZ2dlci5hY3RpdmUgJiYgdHJpZ2dlci5hY3Rpb25zLmluZGV4T2YoYWN0aW9uKSA+IC0xICYmIG1hdGNoKSB7XG5cblx0XHRcdFx0XHR0cmlnZ2VyLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRyaWdnZXIuY2FsbGJhY2soKTtcblx0XHRcdFx0fSBlbHNlIGlmICghbWF0Y2gpIHtcblx0XHRcdFx0XHQvLyBUaGlzIGlzIHNvIHRoYXQgdHJpZ2dlcnMgY2FuIG9ubHkgYmUgZXhlY3V0ZWQgaW4gYW4gYWN0dWFsIHRyYW5zaXRpb25cblx0XHRcdFx0XHQvLyBBbmQgdGhhdCBpZiB0aGVyZSBpcyBhIHRyaWdnZXIgZm9yIFthLGJdIGl0IHdvbid0IGJlIGV4ZWN1dGVkIHR3aWNlXG5cdFx0XHRcdFx0Ly8gaWYgYSBhbmQgYiBhcmUgc2V0IHRvIHRydWUgb25lIGFmdGVyIHRoZSBvdGhlclxuXHRcdFx0XHRcdHRyaWdnZXIuYWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdG9yOiBmdW5jdGlvbiBvcihwZXJtaXNzaW9ucykge1xuXHRcdFx0dmFyIF90aGlzNyA9IHRoaXM7XG5cblx0XHRcdF8uYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcblx0XHRcdFx0X3RoaXM3W2FjdGlvbl0gPSBfdGhpczdbYWN0aW9uXSB8fCBwZXJtaXNzaW9uc1thY3Rpb25dO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cblx0XHRzdGF0aWM6IHtcblx0XHRcdGFjdGlvbnM6IFtdLFxuXG5cdFx0XHQvLyBSZWdpc3RlciBhIG5ldyBwZXJtaXNzaW9uIHR5cGVcblx0XHRcdHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihhY3Rpb24sIHNldHRlcikge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShhY3Rpb24pKSB7XG5cdFx0XHRcdFx0YWN0aW9uLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuXHRcdFx0XHRcdFx0cmV0dXJuIF8ucmVnaXN0ZXIoYWN0aW9uLCBzZXR0ZXIpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCQubGl2ZShfLnByb3RvdHlwZSwgYWN0aW9uLCBmdW5jdGlvbiAoYWJsZSwgcHJldmlvdXMpIHtcblx0XHRcdFx0XHRpZiAoc2V0dGVyKSB7XG5cdFx0XHRcdFx0XHRzZXR0ZXIuY2FsbCh0aGlzLCBhYmxlLCBwcmV2aW91cyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5jaGFuZ2VkKGFjdGlvbiwgYWJsZSwgcHJldmlvdXMpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRfLmFjdGlvbnMucHVzaChhY3Rpb24pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Xy5yZWdpc3RlcihcInJlYWRcIik7XG5cblx0Xy5yZWdpc3RlcihcImxvZ2luXCIsIGZ1bmN0aW9uIChjYW4pIHtcblx0XHRpZiAoY2FuICYmIHRoaXMubG9nb3V0KSB7XG5cdFx0XHR0aGlzLmxvZ291dCA9IGZhbHNlO1xuXHRcdH1cblx0fSk7XG5cblx0Xy5yZWdpc3RlcihcImxvZ291dFwiLCBmdW5jdGlvbiAoY2FuKSB7XG5cdFx0aWYgKGNhbiAmJiB0aGlzLmxvZ2luKSB7XG5cdFx0XHR0aGlzLmxvZ2luID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblxuXHRfLnJlZ2lzdGVyKFwiZWRpdFwiLCBmdW5jdGlvbiAoY2FuKSB7XG5cdFx0aWYgKGNhbikge1xuXHRcdFx0dGhpcy5hZGQgPSB0aGlzLmRlbGV0ZSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblxuXHRfLnJlZ2lzdGVyKFtcImFkZFwiLCBcImRlbGV0ZVwiXSwgZnVuY3Rpb24gKGNhbikge1xuXHRcdGlmICghY2FuKSB7XG5cdFx0XHR0aGlzLmVkaXQgPSBmYWxzZTtcblx0XHR9XG5cdH0pO1xufSkoQmxpc3MpO1xuXG4oZnVuY3Rpb24gKCQpIHtcblxuXHR2YXIgXyA9IFd5c2llLlN0b3JhZ2UgPSAkLkNsYXNzKHtcblx0XHRjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3Iod3lzaWUpIHtcblx0XHRcdHZhciBfdGhpczggPSB0aGlzO1xuXG5cdFx0XHR0aGlzLnd5c2llID0gd3lzaWU7XG5cblx0XHRcdHRoaXMudXJscyA9IHd5c2llLnN0b3JlLnNwbGl0KC9cXHMrLykubWFwKGZ1bmN0aW9uICh1cmwpIHtcblx0XHRcdFx0aWYgKHVybCA9PT0gXCJsb2NhbFwiKSB7XG5cdFx0XHRcdFx0dXJsID0gXCIjXCIgKyBfdGhpczgud3lzaWUuaWQgKyBcIi1zdG9yZVwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG5ldyBVUkwodXJsLCBsb2NhdGlvbik7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5iYWNrZW5kcyA9IFd5c2llLmZsYXR0ZW4odGhpcy51cmxzLm1hcChmdW5jdGlvbiAodXJsKSB7XG5cdFx0XHRcdHJldHVybiBfLkJhY2tlbmQuY3JlYXRlKHVybCwgX3RoaXM4KTtcblx0XHRcdH0pKTtcblxuXHRcdFx0dGhpcy5iYWNrZW5kc1swXS5wZXJtaXNzaW9ucyA9IHRoaXMud3lzaWUucGVybWlzc2lvbnMub3IodGhpcy5iYWNrZW5kc1swXS5wZXJtaXNzaW9ucyk7XG5cblx0XHRcdHRoaXMucmVhZHkgPSBQcm9taXNlLmFsbCh0aGlzLmJhY2tlbmRzLm1hcChmdW5jdGlvbiAoYmFja2VuZCkge1xuXHRcdFx0XHRyZXR1cm4gYmFja2VuZC5yZWFkeTtcblx0XHRcdH0pKTtcblxuXHRcdFx0dGhpcy5sb2FkZWQgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdF90aGlzOC53eXNpZS53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ3eXNpZTpsb2FkXCIsIHJlc29sdmUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuYXV0aENvbnRyb2xzID0ge307XG5cblx0XHRcdHRoaXMucGVybWlzc2lvbnMuY2FuKFwibG9naW5cIiwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQvLyAjbG9naW4gYXV0aGVudGljYXRlcyBpZiBvbmx5IDEgd3lzaWUgb24gdGhlIHBhZ2UsIG9yIGlmIHRoZSBmaXJzdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBoYXZlIHRvIGdlbmVyYXRlIGEgc2xpZ2h0bHkgbW9yZSBjb21wbGV4IGhhc2hcblx0XHRcdFx0X3RoaXM4LmxvZ2luSGFzaCA9IFwiI2xvZ2luXCIgKyAoV3lzaWUuYWxsWzBdID09PSBfdGhpczgud3lzaWUgPyBcIlwiIDogXCItXCIgKyBfdGhpczgud3lzaWUuaWQpO1xuXG5cdFx0XHRcdF90aGlzOC5hdXRoQ29udHJvbHMubG9naW4gPSAkLmNyZWF0ZSh7XG5cdFx0XHRcdFx0dGFnOiBcImFcIixcblx0XHRcdFx0XHRocmVmOiBfdGhpczgubG9naW5IYXNoLFxuXHRcdFx0XHRcdHRleHRDb250ZW50OiBcIkxvZ2luXCIsXG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiBcImxvZ2luIGJ1dHRvblwiLFxuXHRcdFx0XHRcdGV2ZW50czoge1xuXHRcdFx0XHRcdFx0Y2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGV2dCkge1xuXHRcdFx0XHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0X3RoaXM4LmxvZ2luKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRhZnRlcjogJChcIi5zdGF0dXNcIiwgX3RoaXM4Lnd5c2llLmJhcilcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Ly8gV2UgYWxzbyBzdXBwb3J0IGEgaGFzaCB0byB0cmlnZ2VyIGxvZ2luLCBpbiBjYXNlIHRoZSB1c2VyIGRvZXNuJ3Qgd2FudCB2aXNpYmxlIGxvZ2luIFVJXG5cdFx0XHRcdHZhciBsb2dpbjtcblx0XHRcdFx0KGxvZ2luID0gZnVuY3Rpb24gbG9naW4oKSB7XG5cdFx0XHRcdFx0aWYgKGxvY2F0aW9uLmhhc2ggPT09IF90aGlzOC5sb2dpbkhhc2gpIHtcblx0XHRcdFx0XHRcdC8vIFRoaXMganVzdCBkb2VzIGxvY2F0aW9uLmhhc2ggPSBcIlwiIHdpdGhvdXQgZ2V0dGluZyBhIHBvaW50bGVzcyAjIGF0IHRoZSBlbmQgb2YgdGhlIFVSTFxuXHRcdFx0XHRcdFx0aGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgZG9jdW1lbnQudGl0bGUsIG5ldyBVUkwoXCJcIiwgbG9jYXRpb24pICsgXCJcIik7XG5cdFx0XHRcdFx0XHRfdGhpczgubG9naW4oKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKCk7XG5cdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZS53eXNpZVwiLCBsb2dpbik7XG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCQucmVtb3ZlKF90aGlzOC5hdXRoQ29udHJvbHMubG9naW4pO1xuXHRcdFx0XHRfdGhpczgud3lzaWUud3JhcHBlci5fLnVuYmluZChcImhhc2hjaGFuZ2Uud3lzaWVcIik7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gVXBkYXRlIGxvZ2luIHN0YXR1c1xuXHRcdFx0dGhpcy53eXNpZS53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ3eXNpZTpsb2dpbi53eXNpZVwiLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHRcdHZhciBzdGF0dXMgPSAkKFwiLnN0YXR1c1wiLCBfdGhpczgud3lzaWUuYmFyKTtcblx0XHRcdFx0c3RhdHVzLmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRcdHN0YXR1cy5fLmNvbnRlbnRzKFtcIkxvZ2dlZCBpbiB0byBcIiArIGV2dC5iYWNrZW5kLmlkICsgXCIgYXMgXCIsIHsgdGFnOiBcInN0cm9uZ1wiLCBpbm5lckhUTUw6IGV2dC5uYW1lIH0sIHtcblx0XHRcdFx0XHR0YWc6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdFx0dGV4dENvbnRlbnQ6IFwiTG9nb3V0XCIsXG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiBcImxvZ291dFwiLFxuXHRcdFx0XHRcdGV2ZW50czoge1xuXHRcdFx0XHRcdFx0Y2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGV2dC5iYWNrZW5kLmxvZ291dCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fV0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMud3lzaWUud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwid3lzaWU6bG9nb3V0Lnd5c2llXCIsIGZ1bmN0aW9uIChldnQpIHtcblx0XHRcdFx0JChcIi5zdGF0dXNcIiwgX3RoaXM4Lnd5c2llLmJhcikudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldCBnZXRCYWNrZW5kcygpIHtcblx0XHRcdHJldHVybiB0aGlzLmJhY2tlbmRzLmZpbHRlcihmdW5jdGlvbiAoYmFja2VuZCkge1xuXHRcdFx0XHRyZXR1cm4gISFiYWNrZW5kLmdldDtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXQgcHV0QmFja2VuZHMoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5iYWNrZW5kcy5maWx0ZXIoZnVuY3Rpb24gKGJhY2tlbmQpIHtcblx0XHRcdFx0cmV0dXJuICEhYmFja2VuZC5wdXQ7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Z2V0IGF1dGhCYWNrZW5kcygpIHtcblx0XHRcdHJldHVybiB0aGlzLmJhY2tlbmRzLmZpbHRlcihmdW5jdGlvbiAoYmFja2VuZCkge1xuXHRcdFx0XHRyZXR1cm4gISFiYWNrZW5kLmxvZ2luO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdHByb3h5OiB7XG5cdFx0XHRwZXJtaXNzaW9uczogXCJ3eXNpZVwiXG5cdFx0fSxcblxuXHRcdC8qKlxuICAgKiBsb2FkIC0gRmV0Y2ggZGF0YSBmcm9tIHNvdXJjZSBhbmQgcmVuZGVyIGl0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZGF0YSBpcyBsb2FkZWQuXG4gICAqL1xuXHRcdGxvYWQ6IGZ1bmN0aW9uIGxvYWQoKSB7XG5cdFx0XHR2YXIgX3RoaXM5ID0gdGhpcztcblxuXHRcdFx0dmFyIHJldCA9IHRoaXMucmVhZHk7XG5cblx0XHRcdHRoaXMuaW5Qcm9ncmVzcyA9IFwiTG9hZGluZ1wiO1xuXG5cdFx0XHR2YXIgZ2V0QmFja2VuZCA9IHRoaXMuZ2V0QmFja2VuZHNbMF07XG5cblx0XHRcdGlmIChnZXRCYWNrZW5kKSB7XG5cdFx0XHRcdGdldEJhY2tlbmQucmVhZHkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGdldEJhY2tlbmQuZ2V0KCk7XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFx0X3RoaXM5LmluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHRfdGhpczkud3lzaWUud3JhcHBlci5fLmZpcmUoXCJ3eXNpZTpsb2FkXCIpO1xuXG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlICYmICQudHlwZShyZXNwb25zZSkgPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZGF0YSA9IFd5c2llLnF1ZXJ5SlNPTihyZXNwb25zZSwgX3RoaXM5LnBhcmFtKFwicm9vdFwiKSk7XG5cdFx0XHRcdFx0X3RoaXM5Lnd5c2llLnJlbmRlcihkYXRhKTtcblx0XHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRcdC8vIFRPRE8gdHJ5IG1vcmUgYmFja2VuZHMgaWYgdGhpcyBmYWlsc1xuXHRcdFx0XHRcdF90aGlzOS5pblByb2dyZXNzID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoZXJyLnhociAmJiBlcnIueGhyLnN0YXR1cyA9PSA0MDQpIHtcblx0XHRcdFx0XHRcdF90aGlzOS53eXNpZS5yZW5kZXIoXCJcIik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGVyci5zdGFjayk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0X3RoaXM5Lnd5c2llLndyYXBwZXIuXy5maXJlKFwid3lzaWU6bG9hZFwiKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNhdmU6IGZ1bmN0aW9uIHNhdmUoKSB7XG5cdFx0XHR2YXIgX3RoaXMxMCA9IHRoaXM7XG5cblx0XHRcdHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdGhpcy53eXNpZS5kYXRhIDogYXJndW1lbnRzWzBdO1xuXG5cdFx0XHR0aGlzLmluUHJvZ3Jlc3MgPSBcIlNhdmluZ1wiO1xuXG5cdFx0XHRQcm9taXNlLmFsbCh0aGlzLnB1dEJhY2tlbmRzLm1hcChmdW5jdGlvbiAoYmFja2VuZCkge1xuXHRcdFx0XHRyZXR1cm4gYmFja2VuZC5sb2dpbigpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHJldHVybiBiYWNrZW5kLnB1dCh7XG5cdFx0XHRcdFx0XHRuYW1lOiBiYWNrZW5kLmZpbGVuYW1lLFxuXHRcdFx0XHRcdFx0cGF0aDogYmFja2VuZC5wYXRoLFxuXHRcdFx0XHRcdFx0ZGF0YTogZGF0YVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0X3RoaXMxMC53eXNpZS53cmFwcGVyLl8uZmlyZShcInd5c2llOnNhdmVcIik7XG5cblx0XHRcdFx0X3RoaXMxMC5pblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHR9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdF90aGlzMTAuaW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZXJyLnN0YWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGxvZ2luOiBmdW5jdGlvbiBsb2dpbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmF1dGhCYWNrZW5kc1swXSAmJiB0aGlzLmF1dGhCYWNrZW5kc1swXS5sb2dpbigpO1xuXHRcdH0sXG5cblx0XHRsb2dvdXQ6IGZ1bmN0aW9uIGxvZ291dCgpIHtcblx0XHRcdHJldHVybiB0aGlzLmF1dGhCYWNrZW5kc1swXSAmJiB0aGlzLmF1dGhCYWNrZW5kc1swXS5sb2dvdXQoKTtcblx0XHR9LFxuXG5cdFx0Y2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuXHRcdFx0dGhpcy5zYXZlKG51bGwpO1xuXHRcdH0sXG5cblx0XHQvLyBHZXQgc3RvcmFnZSBwYXJhbWV0ZXJzIGZyb20gdGhlIG1haW4gZWxlbWVudCBhbmQgY2FjaGUgdGhlbS4gVXNlZCBmb3IgQVBJIGtleXMgYW5kIHRoZSBsaWtlLlxuXHRcdHBhcmFtOiBmdW5jdGlvbiBwYXJhbShpZCkge1xuXHRcdFx0Ly8gVE9ETyB0cmF2ZXJzZSBhbGwgcHJvcGVydGllcyBhbmQgY2FjaGUgcGFyYW1zIGluIGNvbnN0cnVjdG9yLCB0byBhdm9pZFxuXHRcdFx0Ly8gY29sbGVjdGlvbiBpdGVtcyBjYXJyeWluZyBhbGwgb2YgdGhlc2Vcblx0XHRcdHRoaXMucGFyYW1zID0gdGhpcy5wYXJhbXMgfHwge307XG5cblx0XHRcdGlmICghKGlkIGluIHRoaXMucGFyYW1zKSkge1xuXHRcdFx0XHR2YXIgYXR0cmlidXRlID0gXCJkYXRhLXN0b3JlLVwiICsgaWQ7XG5cblx0XHRcdFx0dGhpcy5wYXJhbXNbaWRdID0gdGhpcy53eXNpZS53cmFwcGVyLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpIHx8IHRoaXMud3lzaWUuZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcblxuXHRcdFx0XHR0aGlzLnd5c2llLndyYXBwZXIucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG5cdFx0XHRcdHRoaXMud3lzaWUuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMucGFyYW1zW2lkXTtcblx0XHR9LFxuXG5cdFx0bGl2ZToge1xuXHRcdFx0aW5Qcm9ncmVzczogZnVuY3Rpb24gaW5Qcm9ncmVzcyh2YWx1ZSkge1xuXHRcdFx0XHRpZiAodmFsdWUpIHtcblx0XHRcdFx0XHR2YXIgcCA9ICQuY3JlYXRlKFwiZGl2XCIsIHtcblx0XHRcdFx0XHRcdHRleHRDb250ZW50OiB2YWx1ZSArIFwi4oCmXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU6IFwicHJvZ3Jlc3NcIixcblx0XHRcdFx0XHRcdGluc2lkZTogdGhpcy53eXNpZS53cmFwcGVyXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5yZW1vdmUoJChcIi5wcm9ncmVzc1wiLCB0aGlzLnd5c2llLndyYXBwZXIpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzdGF0aWM6IHtcblx0XHRcdGlzSGFzaDogZnVuY3Rpb24gaXNIYXNoKHVybCkge1xuXHRcdFx0XHRyZXR1cm4gdXJsLm9yaWdpbiA9PT0gbG9jYXRpb24ub3JpZ2luICYmIHVybC5wYXRobmFtZSA9PT0gbG9jYXRpb24ucGF0aG5hbWUgJiYgISF1cmwuaGFzaDtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIEJhc2UgY2xhc3MgZm9yIGFsbCBiYWNrZW5kc1xuXHRfLkJhY2tlbmQgPSAkLkNsYXNzKHtcblx0XHRjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IodXJsLCBzdG9yYWdlKSB7XG5cdFx0XHR2YXIgX3RoaXMxMSA9IHRoaXM7XG5cblx0XHRcdHRoaXMudXJsID0gdXJsO1xuXHRcdFx0dGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcblx0XHRcdHRoaXMuaWQgPSB0aGlzLmNvbnN0cnVjdG9yLmlkO1xuXG5cdFx0XHQvLyBQZXJtaXNzaW9ucyBvZiB0aGlzIHBhcnRpY3VsYXIgYmFja2VuZC5cblx0XHRcdC8vIEdsb2JhbCBwZXJtaXNzaW9ucyBhcmUgT1IoYWxsIHBlcm1pc3Npb25zKVxuXHRcdFx0dGhpcy5wZXJtaXNzaW9ucyA9IG5ldyBXeXNpZS5QZXJtaXNzaW9ucygpO1xuXG5cdFx0XHRXeXNpZS5QZXJtaXNzaW9ucy5hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuXHRcdFx0XHRfdGhpczExLnBlcm1pc3Npb25zLmNhbihhY3Rpb24sIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRfdGhpczExLnN0b3JhZ2UucGVybWlzc2lvbnMub24oYWN0aW9uKTtcblx0XHRcdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdC8vIFRPRE8gb2ZmXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdC8vIFRvIGJlIGJlIG92ZXJyaWRlbiBieSBzdWJjbGFzc2VzXG5cdFx0cmVhZHk6IFByb21pc2UucmVzb2x2ZSgpLFxuXHRcdGxvZ2luOiBmdW5jdGlvbiBsb2dpbigpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0XHR9LFxuXHRcdGxvZ291dDogZnVuY3Rpb24gbG9nb3V0KCkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdH0sXG5cblx0XHRwcm94eToge1xuXHRcdFx0d3lzaWU6IFwic3RvcmFnZVwiXG5cdFx0fSxcblxuXHRcdHN0YXRpYzoge1xuXHRcdFx0Ly8gUmV0dXJuIHRoZSBhcHByb3ByaWF0ZSBiYWNrZW5kKHMpIGZvciB0aGlzIHVybFxuXHRcdFx0Y3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodXJsLCBzdG9yYWdlKSB7XG5cdFx0XHRcdHZhciByZXQgPSBbXTtcblxuXHRcdFx0XHRfLkJhY2tlbmQuYmFja2VuZHMuZm9yRWFjaChmdW5jdGlvbiAoQmFja2VuZCkge1xuXHRcdFx0XHRcdGlmIChCYWNrZW5kICYmIEJhY2tlbmQudGVzdCh1cmwpKSB7XG5cdFx0XHRcdFx0XHR2YXIgYmFja2VuZCA9IG5ldyBCYWNrZW5kKHVybCwgc3RvcmFnZSk7XG5cdFx0XHRcdFx0XHRiYWNrZW5kLmlkID0gQmFja2VuZC5pZDtcblx0XHRcdFx0XHRcdHJldC5wdXNoKGJhY2tlbmQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH0sXG5cblx0XHRcdGJhY2tlbmRzOiBbXSxcblxuXHRcdFx0YWRkOiBmdW5jdGlvbiBhZGQobmFtZSwgQ2xhc3MsIGZpcnN0KSB7XG5cdFx0XHRcdF8uQmFja2VuZFtuYW1lXSA9IENsYXNzO1xuXHRcdFx0XHRfLkJhY2tlbmQuYmFja2VuZHNbZmlyc3QgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShDbGFzcyk7XG5cdFx0XHRcdENsYXNzLmlkID0gbmFtZTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIFNhdmUgaW4gYW4gZWxlbWVudFxuXHRfLkJhY2tlbmQuYWRkKFwiRWxlbWVudFwiLCAkLkNsYXNzKHsgZXh0ZW5kczogXy5CYWNrZW5kLFxuXHRcdGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcblx0XHRcdHRoaXMucGVybWlzc2lvbnMub24oW1wicmVhZFwiLCBcImVkaXRcIiwgXCJzYXZlXCJdKTtcblxuXHRcdFx0dGhpcy5lbGVtZW50ID0gJCh0aGlzLnVybC5oYXNoKTtcblx0XHR9LFxuXG5cdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCk7XG5cdFx0fSxcblxuXHRcdHB1dDogZnVuY3Rpb24gcHV0KF9yZWYpIHtcblx0XHRcdHZhciBfcmVmJGRhdGEgPSBfcmVmLmRhdGE7XG5cdFx0XHR2YXIgZGF0YSA9IF9yZWYkZGF0YSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IF9yZWYkZGF0YTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy53eXNpZS50b0pTT04oZGF0YSk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0fSxcblxuXHRcdHN0YXRpYzoge1xuXHRcdFx0dGVzdDogZnVuY3Rpb24gdGVzdCh1cmwpIHtcblx0XHRcdFx0aWYgKF8uaXNIYXNoKHVybCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gISEkKHVybC5oYXNoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSkpO1xuXG5cdC8vIExvYWQgZnJvbSBhIHJlbW90ZSBVUkwsIG5vIHNhdmVcblx0Xy5CYWNrZW5kLmFkZChcIlJlbW90ZVwiLCAkLkNsYXNzKHsgZXh0ZW5kczogXy5CYWNrZW5kLFxuXHRcdGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcblx0XHRcdHRoaXMucGVybWlzc2lvbnMub24oW1wicmVhZFwiXSk7XG5cdFx0fSxcblxuXHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0cmV0dXJuICQuZmV0Y2godGhpcy51cmwuaHJlZiwge1xuXHRcdFx0XHRyZXNwb25zZVR5cGU6IFwianNvblwiXG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uICh4aHIpIHtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdHN0YXRpYzoge1xuXHRcdFx0dGVzdDogZnVuY3Rpb24gdGVzdCh1cmwpIHtcblx0XHRcdFx0cmV0dXJuICFfLmlzSGFzaCh1cmwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkpO1xuXG5cdC8vIFNhdmUgaW4gbG9jYWxTdG9yYWdlXG5cdF8uQmFja2VuZC5hZGQoXCJMb2NhbFwiLCAkLkNsYXNzKHsgZXh0ZW5kczogXy5CYWNrZW5kLFxuXHRcdGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcblx0XHRcdHRoaXMucGVybWlzc2lvbnMub24oW1wicmVhZFwiLCBcImVkaXRcIiwgXCJzYXZlXCJdKTtcblx0XHRcdHRoaXMua2V5ID0gdGhpcy51cmwgKyBcIlwiO1xuXHRcdH0sXG5cblx0XHRnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUobG9jYWxTdG9yYWdlW3RoaXMua2V5XSk7XG5cdFx0fSxcblxuXHRcdHB1dDogZnVuY3Rpb24gcHV0KF9yZWYyKSB7XG5cdFx0XHR2YXIgX3JlZjIkZGF0YSA9IF9yZWYyLmRhdGE7XG5cdFx0XHR2YXIgZGF0YSA9IF9yZWYyJGRhdGEgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBfcmVmMiRkYXRhO1xuXG5cdFx0XHRsb2NhbFN0b3JhZ2VbdGhpcy5rZXldID0gdGhpcy53eXNpZS50b0pTT04oZGF0YSk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0fSxcblxuXHRcdHN0YXRpYzoge1xuXHRcdFx0dGVzdDogZnVuY3Rpb24gdGVzdCh1cmwpIHtcblx0XHRcdFx0aWYgKF8uaXNIYXNoKHVybCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gISQodXJsLmhhc2gpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KSk7XG59KShCbGlzcyk7XG5cbihmdW5jdGlvbiAoJCwgJCQpIHtcblxuXHR2YXIgXyA9IFd5c2llLk5vZGUgPSAkLkNsYXNzKHtcblx0XHRhYnN0cmFjdDogdHJ1ZSxcblx0XHRjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoZWxlbWVudCwgd3lzaWUpIHtcblx0XHRcdGlmICghZWxlbWVudCB8fCAhd3lzaWUpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiV3lzaWUuTm9kZSBjb25zdHJ1Y3RvciByZXF1aXJlcyBhbiBlbGVtZW50IGFyZ3VtZW50IGFuZCBhIHd5c2llIG9iamVjdFwiKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblxuXHRcdFx0dGhpcy53eXNpZSA9IHd5c2llO1xuXHRcdFx0dGhpcy5wcm9wZXJ0eSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIik7XG5cdFx0XHR0aGlzLnR5cGUgPSBXeXNpZS5TY29wZS5ub3JtYWxpemUoZWxlbWVudCk7XG5cblx0XHRcdFd5c2llLmhvb2tzLnJ1bihcIm5vZGUtaW5pdC1lbmRcIiwgdGhpcyk7XG5cdFx0fSxcblxuXHRcdGdldCBpc1Jvb3QoKSB7XG5cdFx0XHRyZXR1cm4gIXRoaXMucHJvcGVydHk7XG5cdFx0fSxcblxuXHRcdGdldCBuYW1lKCkge1xuXHRcdFx0cmV0dXJuIFd5c2llLnJlYWRhYmxlKHRoaXMucHJvcGVydHkgfHwgdGhpcy50eXBlKS50b0xvd2VyQ2FzZSgpO1xuXHRcdH0sXG5cblx0XHRnZXQgZGF0YSgpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldERhdGEoKTtcblx0XHR9LFxuXG5cdFx0Z2V0UmVsYXRpdmVEYXRhOiBmdW5jdGlvbiBnZXRSZWxhdGl2ZURhdGEoKSB7XG5cdFx0XHR2YXIgX3RoaXMxMiA9IHRoaXM7XG5cblx0XHRcdHZhciBvID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8geyBkaXJ0eTogdHJ1ZSwgY29tcHV0ZWQ6IHRydWUsIG51bGw6IHRydWUgfSA6IGFyZ3VtZW50c1swXTtcblxuXHRcdFx0dmFyIHJldCA9IHRoaXMuZ2V0RGF0YShvKTtcblxuXHRcdFx0aWYgKHNlbGYuUHJveHkgJiYgcmV0ICYmICh0eXBlb2YgcmV0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YocmV0KSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0cmV0ID0gbmV3IFByb3h5KHJldCwge1xuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KGRhdGEsIHByb3BlcnR5KSB7XG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgaW4gZGF0YSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZGF0YVtwcm9wZXJ0eV07XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIExvb2sgaW4gYW5jZXN0b3JzXG5cdFx0XHRcdFx0XHR2YXIgcmV0ID0gX3RoaXMxMi53YWxrVXAoZnVuY3Rpb24gKHNjb3BlKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSBpbiBzY29wZS5wcm9wZXJ0aWVzKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVE9ETyBkZWNvdXBsZVxuXHRcdFx0XHRcdFx0XHRcdHNjb3BlLmV4cHJlc3Npb25zLnVwZGF0ZUFsc28uYWRkKF90aGlzMTIuZXhwcmVzc2lvbnMpO1xuXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNjb3BlLnByb3BlcnRpZXNbcHJvcGVydHldLmdldFJlbGF0aXZlRGF0YShvKTtcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0aGFzOiBmdW5jdGlvbiBoYXMoZGF0YSwgcHJvcGVydHkpIHtcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSBpbiBkYXRhKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBQcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCwgbG9vayBmb3IgaXQgZWxzZXdoZXJlXG5cblx0XHRcdFx0XHRcdC8vIEZpcnN0IGxvb2sgaW4gYW5jZXN0b3JzXG5cdFx0XHRcdFx0XHR2YXIgcmV0ID0gX3RoaXMxMi53YWxrVXAoZnVuY3Rpb24gKHNjb3BlKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSBpbiBzY29wZS5wcm9wZXJ0aWVzKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0aWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFN0aWxsIG5vdCBmb3VuZCwgbG9vayBpbiBkZXNjZW5kYW50c1xuXHRcdFx0XHRcdFx0cmV0ID0gX3RoaXMxMi5maW5kKHByb3BlcnR5KTtcblxuXHRcdFx0XHRcdFx0aWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHJldCkpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXQgPSByZXQubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaXRlbS5nZXREYXRhKG8pO1xuXHRcdFx0XHRcdFx0XHRcdH0pLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGl0ZW0gIT09IG51bGw7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0ID0gcmV0LmdldERhdGEobyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRkYXRhW3Byb3BlcnR5XSA9IHJldDtcblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQoZGF0YSwgcHJvcGVydHksIHZhbHVlKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBFcnJvcihcIllvdSBjYW7igJl0IHNldCBkYXRhIHZpYSBleHByZXNzaW9ucy5cIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9LFxuXG5cdFx0d2FsazogZnVuY3Rpb24gd2FsayhjYWxsYmFjaykge1xuXHRcdFx0dmFyIHdhbGtlciA9IGZ1bmN0aW9uIHdhbGtlcihvYmopIHtcblx0XHRcdFx0dmFyIHJldCA9IGNhbGxiYWNrKG9iaik7XG5cblx0XHRcdFx0aWYgKHJldCAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRvYmoucHJvcGFnYXRlICYmIG9iai5wcm9wYWdhdGUod2Fsa2VyKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0d2Fsa2VyKHRoaXMpO1xuXHRcdH0sXG5cblx0XHR3YWxrVXA6IGZ1bmN0aW9uIHdhbGtVcChjYWxsYmFjaykge1xuXHRcdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdFx0d2hpbGUgKHNjb3BlID0gc2NvcGUucGFyZW50U2NvcGUpIHtcblx0XHRcdFx0dmFyIHJldCA9IGNhbGxiYWNrKHNjb3BlKTtcblxuXHRcdFx0XHRpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNhbGw6IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2spIHtcblx0XHRcdGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHRcdFx0XHRhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0XHRcdH1cblxuXHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cblx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXNbY2FsbGJhY2tdLmFwcGx5KHRoaXMsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgW3RoaXNdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZWRpdDogZnVuY3Rpb24gZWRpdCgpIHtcblx0XHRcdHRoaXMucHJvcGFnYXRlKGZ1bmN0aW9uIChvYmopIHtcblx0XHRcdFx0cmV0dXJuIG9ialtvYmoucHJlRWRpdCA/IFwicHJlRWRpdFwiIDogXCJlZGl0XCJdKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0cHJvcGFnYXRlZDogW1wic2F2ZVwiLCBcInJldmVydFwiLCBcImRvbmVcIiwgXCJpbXBvcnRcIl0sXG5cblx0XHR0b0pTT046IFd5c2llLnByb3RvdHlwZS50b0pTT04sXG5cblx0XHRzdGF0aWM6IHtcblx0XHRcdGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGVsZW1lbnQsIHd5c2llLCBjb2xsZWN0aW9uKSB7XG5cdFx0XHRcdHZhciBfV3lzaWUkVW5pdDtcblxuXHRcdFx0XHRpZiAoV3lzaWUuaXMoXCJtdWx0aXBsZVwiLCBlbGVtZW50KSAmJiAhY29sbGVjdGlvbikge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgV3lzaWUuQ29sbGVjdGlvbihlbGVtZW50LCB3eXNpZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gKF9XeXNpZSRVbml0ID0gV3lzaWUuVW5pdCkuY3JlYXRlLmFwcGx5KF9XeXNpZSRVbml0LCBhcmd1bWVudHMpO1xuXHRcdFx0fSxcblxuXHRcdFx0bm9ybWFsaXplUHJvcGVydHk6IGZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnR5KGVsZW1lbnQpIHtcblx0XHRcdFx0Ly8gR2V0ICYgbm9ybWFsaXplIHByb3BlcnR5IG5hbWUsIGlmIGV4aXN0c1xuXHRcdFx0XHR2YXIgcHJvcGVydHkgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInByb3BlcnR5XCIpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaXRlbXByb3BcIik7XG5cblx0XHRcdFx0aWYgKCFwcm9wZXJ0eSAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZShcInByb3BlcnR5XCIpKSB7XG5cdFx0XHRcdFx0cHJvcGVydHkgPSBlbGVtZW50Lm5hbWUgfHwgZWxlbWVudC5pZCB8fCBlbGVtZW50LmNsYXNzTGlzdFswXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChwcm9wZXJ0eSkge1xuXHRcdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwicHJvcGVydHlcIiwgcHJvcGVydHkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHByb3BlcnR5O1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59KShCbGlzcywgQmxpc3MuJCk7XG5cbi8qXG4gKiBXeXNpZSBVbml0OiBTdXBlciBjbGFzcyB0aGF0IFNjb3BlIGFuZCBQcmltaXRpdmUgaW5oZXJpdCBmcm9tXG4gKi9cbihmdW5jdGlvbiAoJCwgJCQpIHtcblxuXHR2YXIgXyA9IFd5c2llLlVuaXQgPSAkLkNsYXNzKHtcblx0XHRhYnN0cmFjdDogdHJ1ZSxcblx0XHRleHRlbmRzOiBXeXNpZS5Ob2RlLFxuXHRcdGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcihlbGVtZW50LCB3eXNpZSwgY29sbGVjdGlvbikge1xuXHRcdFx0dGhpcy5jb25zdHJ1Y3Rvci5hbGwuc2V0KHRoaXMuZWxlbWVudCwgdGhpcyk7XG5cblx0XHRcdHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5cblx0XHRcdGlmICh0aGlzLmNvbGxlY3Rpb24pIHtcblx0XHRcdFx0Ly8gVGhpcyBpcyBhIGNvbGxlY3Rpb24gaXRlbVxuXHRcdFx0XHR0aGlzLnNjb3BlID0gdGhpcy5wYXJlbnRTY29wZSA9IHRoaXMuY29sbGVjdGlvbi5wYXJlbnRTY29wZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5jb21wdXRlZCA9IFd5c2llLmlzKFwiY29tcHV0ZWRcIiwgdGhpcy5lbGVtZW50KTtcblx0XHRcdHRoaXMucmVxdWlyZWQgPSBXeXNpZS5pcyhcInJlcXVpcmVkXCIsIHRoaXMuZWxlbWVudCk7XG5cblx0XHRcdFd5c2llLmhvb2tzLnJ1bihcInVuaXQtaW5pdC1lbmRcIiwgdGhpcyk7XG5cdFx0fSxcblxuXHRcdGdldCBjbG9zZXN0Q29sbGVjdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLmNvbGxlY3Rpb24pIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29sbGVjdGlvbjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMud2Fsa1VwKGZ1bmN0aW9uIChzY29wZSkge1xuXHRcdFx0XHRpZiAoc2NvcGUuY29sbGVjdGlvbikge1xuXHRcdFx0XHRcdHJldHVybiBzY29wZS5jb2xsZWN0aW9uO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSB8fCBudWxsO1xuXHRcdH0sXG5cblx0XHQvKipcbiAgICogQ2hlY2sgaWYgdGhpcyB1bml0IGlzIGVpdGhlciBkZWxldGVkIG9yIGluc2lkZSBhIGRlbGV0ZWQgc2NvcGVcbiAgICovXG5cdFx0aXNEZWxldGVkOiBmdW5jdGlvbiBpc0RlbGV0ZWQoKSB7XG5cdFx0XHR2YXIgcmV0ID0gdGhpcy5kZWxldGVkO1xuXG5cdFx0XHRpZiAodGhpcy5kZWxldGVkKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gISF0aGlzLnBhcmVudFNjb3BlICYmIHRoaXMucGFyZW50U2NvcGUuaXNEZWxldGVkKCk7XG5cdFx0fSxcblxuXHRcdGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEobykge1xuXHRcdFx0byA9IG8gfHwge307XG5cblx0XHRcdHZhciBpc051bGwgPSBmdW5jdGlvbiBpc051bGwodW5pdCkge1xuXHRcdFx0XHRyZXR1cm4gIXVuaXQuZXZlclNhdmVkICYmICFvLmRpcnR5IHx8IHVuaXQuZGVsZXRlZCAmJiBvLmRpcnR5IHx8IHVuaXQuY29tcHV0ZWQgJiYgIW8uY29tcHV0ZWQgfHwgdW5pdC5wbGFjZWhvbGRlcjtcblx0XHRcdH07XG5cblx0XHRcdGlmIChpc051bGwodGhpcykpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENoZWNrIGlmIGFueSBvZiB0aGUgcGFyZW50IHNjb3BlcyBkb2Vzbid0IHJldHVybiBkYXRhXG5cdFx0XHR0aGlzLndhbGtVcChmdW5jdGlvbiAoc2NvcGUpIHtcblx0XHRcdFx0aWYgKGlzTnVsbChzY29wZSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGxpdmU6IHtcblx0XHRcdGRlbGV0ZWQ6IGZ1bmN0aW9uIGRlbGV0ZWQodmFsdWUpIHtcblx0XHRcdFx0dmFyIF90aGlzMTMgPSB0aGlzO1xuXG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiZGVsZXRlZFwiLCB2YWx1ZSk7XG5cblx0XHRcdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRcdFx0Ly8gU29mdCBkZWxldGUsIHN0b3JlIGVsZW1lbnQgY29udGVudHMgaW4gYSBmcmFnbWVudFxuXHRcdFx0XHRcdC8vIGFuZCByZXBsYWNlIHRoZW0gd2l0aCBhbiB1bmRvIHByb21wdC5cblx0XHRcdFx0XHR0aGlzLmVsZW1lbnRDb250ZW50cyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcdFx0XHQkJCh0aGlzLmVsZW1lbnQuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuXHRcdFx0XHRcdFx0X3RoaXMxMy5lbGVtZW50Q29udGVudHMuYXBwZW5kQ2hpbGQobm9kZSk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQkLmNvbnRlbnRzKHRoaXMuZWxlbWVudCwgW1wiRGVsZXRlZCBcIiArIHRoaXMubmFtZSwge1xuXHRcdFx0XHRcdFx0dGFnOiBcImJ1dHRvblwiLFxuXHRcdFx0XHRcdFx0dGV4dENvbnRlbnQ6IFwiVW5kb1wiLFxuXHRcdFx0XHRcdFx0ZXZlbnRzOiB7XG5cdFx0XHRcdFx0XHRcdFwiY2xpY2tcIjogZnVuY3Rpb24gY2xpY2soZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzMTMuZGVsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fV0pO1xuXG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkZWxldGUtaG92ZXJcIik7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5kZWxldGVkKSB7XG5cdFx0XHRcdFx0Ly8gVW5kZWxldGVcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRDb250ZW50cyk7XG5cblx0XHRcdFx0XHQvLyBvdGhlcndpc2UgZXhwcmVzc2lvbnMgd29uJ3QgdXBkYXRlIGJlY2F1c2UgdGhpcyB3aWxsIHN0aWxsIHNlZW0gYXMgZGVsZXRlZFxuXHRcdFx0XHRcdC8vIEFsdGVybmF0aXZlbHksIHdlIGNvdWxkIGZpcmUgZGF0YWNoYW5nZSB3aXRoIGEgdGltZW91dC5cblx0XHRcdFx0XHR0aGlzLl9kZWxldGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHQkLmZpcmUodGhpcy5lbGVtZW50LCBcInd5c2llOmRhdGFjaGFuZ2VcIiwge1xuXHRcdFx0XHRcdFx0dW5pdDogdGhpcy5jb2xsZWN0aW9uLFxuXHRcdFx0XHRcdFx0d3lzaWU6IHRoaXMud3lzaWUsXG5cdFx0XHRcdFx0XHRhY3Rpb246IFwidW5kZWxldGVcIixcblx0XHRcdFx0XHRcdGl0ZW06IHRoaXNcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0dW5zYXZlZENoYW5nZXM6IGZ1bmN0aW9uIHVuc2F2ZWRDaGFuZ2VzKHZhbHVlKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwidW5zYXZlZC1jaGFuZ2VzXCIsIHZhbHVlKTtcblxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9LFxuXG5cdFx0XHRwbGFjZWhvbGRlcjogZnVuY3Rpb24gcGxhY2Vob2xkZXIodmFsdWUpIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJwbGFjZWhvbGRlclwiLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHN0YXRpYzoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZWxlbWVudCwgcHJpb3JpdGl6ZVByaW1pdGl2ZSkge1xuXHRcdFx0XHR2YXIgc2NvcGUgPSBXeXNpZS5TY29wZS5hbGwuZ2V0KGVsZW1lbnQpO1xuXG5cdFx0XHRcdHJldHVybiBwcmlvcml0aXplUHJpbWl0aXZlIHx8ICFzY29wZSA/IFd5c2llLlByaW1pdGl2ZS5hbGwuZ2V0KGVsZW1lbnQpIDogc2NvcGU7XG5cdFx0XHR9LFxuXG5cdFx0XHRjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShlbGVtZW50LCB3eXNpZSwgY29sbGVjdGlvbikge1xuXHRcdFx0XHRpZiAoIWVsZW1lbnQgfHwgIXd5c2llKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcIld5c2llLlVuaXQuY3JlYXRlKCkgcmVxdWlyZXMgYW4gZWxlbWVudCBhcmd1bWVudCBhbmQgYSB3eXNpZSBvYmplY3RcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbmV3IFd5c2llW1d5c2llLmlzKFwic2NvcGVcIiwgZWxlbWVudCkgPyBcIlNjb3BlXCIgOiBcIlByaW1pdGl2ZVwiXShlbGVtZW50LCB3eXNpZSwgY29sbGVjdGlvbik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn0pKEJsaXNzLCBCbGlzcy4kKTtcblxuKGZ1bmN0aW9uICgkLCAkJCkge1xuXG5cdHZhciBfID0gV3lzaWUuRXhwcmVzc2lvbiA9ICQuQ2xhc3Moe1xuXHRcdGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcihleHByZXNzaW9uKSB7XG5cdFx0XHR0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuXHRcdH0sXG5cblx0XHRldmFsOiBmdW5jdGlvbiBfZXZhbChkYXRhKSB7XG5cdFx0XHR0aGlzLm9sZFZhbHVlID0gdGhpcy52YWx1ZTtcblxuXHRcdFx0Ly8gVE9ETyBjb252ZXJ0IHRvIG5ldyBGdW5jdGlvbigpIHdoaWNoIGlzIG1vcmUgb3B0aW1pemFibGUgYnkgSlMgZW5naW5lcy5cblx0XHRcdC8vIEFsc28sIGNhY2hlIHRoZSBmdW5jdGlvbiwgc2luY2Ugb25seSBkYXRhIGNoYW5nZXMgYWNyb3NzIGludm9jYXRpb25zLlxuXHRcdFx0V3lzaWUuaG9va3MucnVuKFwiZXhwcmVzc2lvbi1ldmFsLWJlZm9yZWV2YWxcIiwgdGhpcyk7XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghdGhpcy5mdW5jdGlvbikge1xuXHRcdFx0XHRcdHRoaXMuZnVuY3Rpb24gPSB0aGlzLmNyZWF0ZUZ1bmN0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnZhbHVlID0gdGhpcy5mdW5jdGlvbihkYXRhKTtcblx0XHRcdH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuXHRcdFx0XHRXeXNpZS5ob29rcy5ydW4oXCJleHByZXNzaW9uLWV2YWwtZXJyb3JcIiwgeyBjb250ZXh0OiB0aGlzLCBleGNlcHRpb246IGV4Y2VwdGlvbiB9KTtcblxuXHRcdFx0XHR0aGlzLnZhbHVlID0gXy5FUlJPUjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMudmFsdWU7XG5cdFx0fSxcblxuXHRcdHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRcdHJldHVybiBcIj0oXCIgKyB0aGlzLmV4cHJlc3Npb24gKyBcIilcIjtcblx0XHR9LFxuXG5cblx0XHRjcmVhdGVGdW5jdGlvbjogZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY29kZSA9IHRoaXMuZXhwcmVzc2lvbjtcblxuXHRcdFx0aWYgKC9eaWZcXChbXFxTXFxzXStcXCkkL2kudGVzdChjb2RlKSkge1xuXHRcdFx0XHRjb2RlID0gY29kZS5yZXBsYWNlKC9eaWZcXCgvLCBcImlmZihcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyYW5zZm9ybSBzaW1wbGUgb3BlcmF0b3JzIHRvIGFycmF5LWZyaWVuZGx5IG1hdGggZnVuY3Rpb25zXG5cdFx0XHRjb2RlID0gY29kZS5yZXBsYWNlKF8uc2ltcGxlT3BlcmF0aW9uLCBmdW5jdGlvbiAoZXhwciwgb3BlcmFuZDEsIG9wZXJhdG9yLCBvcGVyYW5kMikge1xuXHRcdFx0XHR2YXIgcmV0ID0gXCIoXCIgKyBXeXNpZS5GdW5jdGlvbnMub3BlcmF0b3JzW29wZXJhdG9yXSArIFwiKFwiICsgb3BlcmFuZDEgKyBcIiwgXCIgKyBvcGVyYW5kMiArIFwiKSlcIjtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH0pO1xuXG5cdFx0XHRfLnNpbXBsZU9wZXJhdGlvbi5sYXN0SW5kZXggPSAwO1xuXG5cdFx0XHRyZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZGF0YVwiLCBcIndpdGgoV3lzaWUuRnVuY3Rpb25zLl9UcmFwKVxcblxcdFxcdFxcdFxcdHdpdGgoZGF0YSkge1xcblxcdFxcdFxcdFxcdFxcdHJldHVybiBcIiArIGNvZGUgKyBcIjtcXG5cXHRcXHRcXHRcXHR9XCIpO1xuXHRcdH0sXG5cblx0XHRsaXZlOiB7XG5cdFx0XHRleHByZXNzaW9uOiBmdW5jdGlvbiBleHByZXNzaW9uKHZhbHVlKSB7XG5cdFx0XHRcdHZhciBjb2RlID0gdmFsdWUgPSB2YWx1ZS50cmltKCk7XG5cblx0XHRcdFx0dGhpcy5mdW5jdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHN0YXRpYzoge1xuXHRcdFx0RVJST1I6IFwiTi9BXCIsXG5cblx0XHRcdGxhenk6IHtcblx0XHRcdFx0c2ltcGxlT3BlcmF0aW9uOiBmdW5jdGlvbiBzaW1wbGVPcGVyYXRpb24oKSB7XG5cdFx0XHRcdFx0dmFyIG9wZXJhdG9yID0gT2JqZWN0LmtleXMoV3lzaWUuRnVuY3Rpb25zLm9wZXJhdG9ycykubWFwKGZ1bmN0aW9uIChvKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gby5yZXBsYWNlKC9bfCorXS9nLCBcIlxcXFwkJlwiKTtcblx0XHRcdFx0XHR9KS5qb2luKFwifFwiKTtcblx0XHRcdFx0XHR2YXIgb3BlcmFuZCA9IFwiXFxcXHMqKFxcXFxiW1xcXFx3Ll0rXFxcXGIpXFxcXHMqXCI7XG5cblx0XHRcdFx0XHRyZXR1cm4gUmVnRXhwKFwiKD86XnxcXFxcKClcIiArIG9wZXJhbmQgKyBcIihcIiArIG9wZXJhdG9yICsgXCIpXCIgKyBvcGVyYW5kICsgXCIoPzokfFxcXFwpKVwiLCBcImdcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgXyA9IFd5c2llLkV4cHJlc3Npb24uVGV4dCA9ICQuQ2xhc3Moe1xuXHRcdFx0Y29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKG8pIHtcblx0XHRcdFx0dGhpcy5ub2RlID0gdGhpcy5lbGVtZW50ID0gby5ub2RlO1xuXG5cdFx0XHRcdGlmICh0aGlzLm5vZGUubm9kZVR5cGUgPT09IDMpIHtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLm5vZGUucGFyZW50Tm9kZTtcblxuXHRcdFx0XHRcdGlmICghdGhpcy5ub2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgIXRoaXMubm9kZS5uZXh0RWxlbWVudFNpYmxpbmcpIHtcblx0XHRcdFx0XHRcdHRoaXMubm9kZSA9IHRoaXMuZWxlbWVudDtcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5ub3JtYWxpemUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmF0dHJpYnV0ZSA9IG8uYXR0cmlidXRlIHx8IG51bGw7XG5cdFx0XHRcdHRoaXMuYWxsID0gby5hbGw7IC8vIHRoZSBXeXNpZS5FeHByZXNzaW9ucyBvYmplY3QgdGhhdCB0aGlzIGJlbG9uZ3MgdG9cblx0XHRcdFx0dGhpcy5leHByZXNzaW9uID0gdGhpcy50ZXh0LnRyaW0oKTtcblx0XHRcdFx0dGhpcy50ZW1wbGF0ZSA9IHRoaXMudG9rZW5pemUodGhpcy5leHByZXNzaW9uKTtcblxuXHRcdFx0XHRXeXNpZS5ob29rcy5ydW4oXCJleHByZXNzaW9udGV4dC1pbml0LWVuZFwiLCB0aGlzKTtcblxuXHRcdFx0XHRfLmVsZW1lbnRzLnNldCh0aGlzLmVsZW1lbnQsIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoXy5lbGVtZW50cy5nZXQodGhpcy5lbGVtZW50KSB8fCBbXSksIFt0aGlzXSkpO1xuXHRcdFx0fSxcblxuXHRcdFx0Z2V0IHRleHQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZSA/IHRoaXMubm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGUpIDogdGhpcy5ub2RlLnRleHRDb250ZW50O1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0IHRleHQodmFsdWUpIHtcblx0XHRcdFx0dGhpcy5vbGRUZXh0ID0gdGhpcy50ZXh0O1xuXHRcdFx0XHRpZiAodGhpcy5wcmltaXRpdmUgJiYgdGhpcy5wcmltaXRpdmUucHJvcGVydHkgPT0gXCJtYXJnaW5hbF9jb3N0XCIpIHt9XG5cdFx0XHRcdFd5c2llLlByaW1pdGl2ZS5zZXRWYWx1ZSh0aGlzLm5vZGUsIHZhbHVlLCB0aGlzLmF0dHJpYnV0ZSk7XG5cdFx0XHR9LFxuXG5cdFx0XHR1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkYXRhKSB7XG5cdFx0XHRcdHZhciBfdGhpczE0ID0gdGhpcztcblxuXHRcdFx0XHR0aGlzLnZhbHVlID0gW107XG5cdFx0XHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cblx0XHRcdFx0dGhpcy50ZXh0ID0gdGhpcy50ZW1wbGF0ZS5tYXAoZnVuY3Rpb24gKGV4cHIpIHtcblx0XHRcdFx0XHRpZiAoZXhwciBpbnN0YW5jZW9mIFd5c2llLkV4cHJlc3Npb24pIHtcblx0XHRcdFx0XHRcdHZhciBlbnYgPSB7IGNvbnRleHQ6IF90aGlzMTQsIGV4cHI6IGV4cHIgfTtcblxuXHRcdFx0XHRcdFx0V3lzaWUuaG9va3MucnVuKFwiZXhwcmVzc2lvbnRleHQtdXBkYXRlLWJlZm9yZWV2YWxcIiwgZW52KTtcblxuXHRcdFx0XHRcdFx0ZW52LnZhbHVlID0gZW52LmV4cHIuZXZhbChkYXRhKTtcblxuXHRcdFx0XHRcdFx0V3lzaWUuaG9va3MucnVuKFwiZXhwcmVzc2lvbnRleHQtdXBkYXRlLWFmdGVyZXZhbFwiLCBlbnYpO1xuXG5cdFx0XHRcdFx0XHRpZiAoZW52LnZhbHVlID09PSB1bmRlZmluZWQgfHwgZW52LnZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdC8vIERvbuKAmXQgcHJpbnQgdGhpbmdzIGxpa2UgXCJ1bmRlZmluZWRcIiBvciBcIm51bGxcIlxuXHRcdFx0XHRcdFx0XHRfdGhpczE0LnZhbHVlLnB1c2goXCJcIik7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBcIlwiO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRfdGhpczE0LnZhbHVlLnB1c2goZW52LnZhbHVlKTtcblxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBlbnYudmFsdWUgPT09IFwibnVtYmVyXCIgJiYgIV90aGlzMTQuYXR0cmlidXRlKSB7XG5cdFx0XHRcdFx0XHRcdGVudi52YWx1ZSA9IF8uZm9ybWF0TnVtYmVyKGVudi52YWx1ZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZW52LnZhbHVlKSkge1xuXHRcdFx0XHRcdFx0XHRlbnYudmFsdWUgPSBlbnYudmFsdWUuam9pbihcIiwgXCIpO1xuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIGVudi52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfdGhpczE0LnZhbHVlLnB1c2goZXhwcik7XG5cdFx0XHRcdFx0cmV0dXJuIGV4cHI7XG5cdFx0XHRcdH0pLmpvaW4oXCJcIik7XG5cblx0XHRcdFx0aWYgKHRoaXMucHJpbWl0aXZlKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMudGVtcGxhdGUubGVuZ3RoID09PSAxICYmIHR5cGVvZiB0aGlzLnZhbHVlWzBdID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnByaW1pdGl2ZS5kYXRhdHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuam9pbihcIlwiKTtcblxuXHRcdFx0XHRpZiAodGhpcy5wcmltaXRpdmUpIHtcblx0XHRcdFx0XHRpZiAoIXRoaXMuYXR0cmlidXRlKSB7XG5cdFx0XHRcdFx0XHRXeXNpZS5QcmltaXRpdmUuc2V0VmFsdWUodGhpcy5lbGVtZW50LCB0aGlzLnZhbHVlLCBcImNvbnRlbnRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHR0b2tlbml6ZTogZnVuY3Rpb24gdG9rZW5pemUodGVtcGxhdGUpIHtcblx0XHRcdFx0dmFyIHJlZ2V4ID0gdGhpcy5leHByZXNzaW9uUmVnZXg7XG5cdFx0XHRcdHZhciBtYXRjaCxcblx0XHRcdFx0ICAgIHJldCA9IFtdLFxuXHRcdFx0XHQgICAgbGFzdEluZGV4ID0gMDtcblxuXHRcdFx0XHRyZWdleC5sYXN0SW5kZXggPSAwO1xuXG5cdFx0XHRcdHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKHRlbXBsYXRlKSkgIT09IG51bGwpIHtcblx0XHRcdFx0XHQvLyBMaXRlcmFsIGJlZm9yZSB0aGUgZXhwcmVzc2lvblxuXHRcdFx0XHRcdGlmIChtYXRjaC5pbmRleCA+IGxhc3RJbmRleCkge1xuXHRcdFx0XHRcdFx0cmV0LnB1c2godGVtcGxhdGUuc3Vic3RyaW5nKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsYXN0SW5kZXggPSByZWdleC5sYXN0SW5kZXggPSBfLmZpbmRFbmQodGVtcGxhdGUuc2xpY2UobWF0Y2guaW5kZXgpKSArIG1hdGNoLmluZGV4ICsgMTtcblx0XHRcdFx0XHR2YXIgZXhwcmVzc2lvbiA9IHRlbXBsYXRlLnNsaWNlKG1hdGNoLmluZGV4ICsgMSwgbGFzdEluZGV4IC0gMSk7XG5cblx0XHRcdFx0XHRyZXQucHVzaChuZXcgV3lzaWUuRXhwcmVzc2lvbihleHByZXNzaW9uKSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMaXRlcmFsIGF0IHRoZSBlbmRcblx0XHRcdFx0aWYgKGxhc3RJbmRleCA8IHRlbXBsYXRlLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldC5wdXNoKHRlbXBsYXRlLnN1YnN0cmluZyhsYXN0SW5kZXgpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9LFxuXG5cdFx0XHRsYXp5OiB7fSxcblxuXHRcdFx0cHJveHk6IHtcblx0XHRcdFx0c2NvcGU6IFwiYWxsXCIsXG5cdFx0XHRcdGV4cHJlc3Npb25SZWdleDogXCJhbGxcIlxuXHRcdFx0fSxcblxuXHRcdFx0c3RhdGljOiB7XG5cdFx0XHRcdGVsZW1lbnRzOiBuZXcgV2Vha01hcCgpLFxuXG5cdFx0XHRcdC8vIEZpbmQgd2hlcmUgYSAoIG9yIFsgb3IgeyBlbmRzLlxuXHRcdFx0XHRmaW5kRW5kOiBmdW5jdGlvbiBmaW5kRW5kKGV4cHIpIHtcblx0XHRcdFx0XHR2YXIgc3RhY2sgPSBbXTtcblx0XHRcdFx0XHR2YXIgaW5zaWRlLFxuXHRcdFx0XHRcdCAgICBpbnNpZGVzID0gXCJcXFwiJ2BcIjtcblx0XHRcdFx0XHR2YXIgb3BlbiA9IFwiKFt7XCIsXG5cdFx0XHRcdFx0ICAgIGNsb3NlID0gXCIpXX1cIjtcblx0XHRcdFx0XHR2YXIgaXNFc2NhcGU7XG5cblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgZXhwcltpXTsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2YXIgY2hhciA9IGV4cHJbaV07XG5cblx0XHRcdFx0XHRcdGlmIChpbnNpZGUpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGNoYXIgPT09IGluc2lkZSAmJiAhaXNFc2NhcGUpIHtcblx0XHRcdFx0XHRcdFx0XHRpbnNpZGUgPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCFpc0VzY2FwZSAmJiBpbnNpZGVzLmluZGV4T2YoY2hhcikgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRpbnNpZGUgPSBjaGFyO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChvcGVuLmluZGV4T2YoY2hhcikgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRzdGFjay5wdXNoKGNoYXIpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dmFyIHBlZWsgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoY2hhciA9PT0gY2xvc2Vbb3Blbi5pbmRleE9mKHBlZWspXSkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YWNrLnBvcCgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlzRXNjYXBlID0gY2hhciA9PSBcIlxcXFxcIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRsYXp5OiB7XG5cdFx0XHRcdFx0Zm9ybWF0TnVtYmVyOiBmdW5jdGlvbiBmb3JtYXROdW1iZXIoKSB7XG5cdFx0XHRcdFx0XHR2YXIgbnVtYmVyRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KFwiZW4tVVNcIiwgeyBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDIgfSk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHZhbHVlID09PSBJbmZpbml0eSB8fCB2YWx1ZSA9PT0gLUluZmluaXR5KSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUHJldHR5IHByaW50IGluZmluaXR5XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlIDwgMCA/IFwiLeKInlwiIDogXCLiiJ5cIjtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBudW1iZXJGb3JtYXQuZm9ybWF0KHZhbHVlKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdHJvb3RGdW5jdGlvblJlZ0V4cDogZnVuY3Rpb24gcm9vdEZ1bmN0aW9uUmVnRXhwKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFJlZ0V4cChcIl49XFxcXHMqKD86XCIgKyBXeXNpZS5FeHByZXNzaW9ucy5yb290RnVuY3Rpb25zLmpvaW4oXCJ8XCIpICsgXCIpXFxcXCgkXCIsIFwiaVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSkoKTtcblxuXHQoZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIF8gPSBXeXNpZS5FeHByZXNzaW9ucyA9ICQuQ2xhc3Moe1xuXHRcdFx0Y29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKHNjb3BlKSB7XG5cdFx0XHRcdHRoaXMuc2NvcGUgPSBzY29wZTtcblx0XHRcdFx0dGhpcy5zY29wZS5leHByZXNzaW9ucyA9IHRoaXM7XG5cdFx0XHRcdHRoaXMuYWxsID0gW107IC8vIGFsbCBFeHByZXNzaW9uLlRleHQgb2JqZWN0cyBpbiB0aGlzIHNjb3BlXG5cblx0XHRcdFx0V3lzaWUuaG9va3MucnVuKFwiZXhwcmVzc2lvbnMtaW5pdC1zdGFydFwiLCB0aGlzKTtcblxuXHRcdFx0XHR0aGlzLnRyYXZlcnNlKCk7XG5cblx0XHRcdFx0Ly8gVE9ETyBsZXNzIHN0dXBpZCBuYW1lP1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUFsc28gPSBuZXcgU2V0KCk7XG5cdFx0XHR9LFxuXG5cdFx0XHRpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuXHRcdFx0XHR2YXIgX3RoaXMxNSA9IHRoaXM7XG5cblx0XHRcdFx0aWYgKHRoaXMuYWxsLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR0aGlzLmxhc3RVcGRhdGVkID0gMDtcblxuXHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHRcdFx0XHQvLyBXYXRjaCBjaGFuZ2VzIGFuZCB1cGRhdGUgdmFsdWVcblx0XHRcdFx0XHR0aGlzLnNjb3BlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInd5c2llOmRhdGFjaGFuZ2VcIiwgZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzMTUudXBkYXRlKCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvLyBFbmFibGUgdGhyb3R0bGluZyBvbmx5IGFmdGVyIGEgd2hpbGUgdG8gZW5zdXJlIGV2ZXJ5dGhpbmcgaGFzIGluaXRpYWxseSBydW5cblx0XHRcdFx0XHR0aGlzLlRIUk9UVExFID0gMDtcblxuXHRcdFx0XHRcdHRoaXMuc2NvcGUud3lzaWUud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwid3lzaWU6bG9hZFwiLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzMTUuVEhST1RUTEUgPSAyNTtcblx0XHRcdFx0XHRcdH0sIDEwMCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuICAgICogVXBkYXRlIGFsbCBleHByZXNzaW9ucyBpbiB0aGlzIHNjb3BlXG4gICAgKi9cblx0XHRcdHVwZGF0ZTogZnVuY3Rpb24gY2FsbGVlKCkge1xuXHRcdFx0XHR2YXIgX3RoaXMxNiA9IHRoaXM7XG5cblx0XHRcdFx0aWYgKHRoaXMuc2NvcGUuaXNEZWxldGVkKCkpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodGhpcy5USFJPVFRMRSA+IDApIHtcblx0XHRcdFx0XHR2YXIgZWxhcHNlZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMubGFzdFVwZGF0ZWQ7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoY2FsbGVlLnRpbWVvdXQpO1xuXG5cdFx0XHRcdFx0aWYgKHRoaXMubGFzdFVwZGF0ZWQgJiYgZWxhcHNlZFRpbWUgPCB0aGlzLlRIUk9UVExFKSB7XG5cdFx0XHRcdFx0XHQvLyBUaHJvdHRsZVxuXHRcdFx0XHRcdFx0Y2FsbGVlLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzMTYudXBkYXRlKCk7XG5cdFx0XHRcdFx0XHR9LCB0aGlzLlRIUk9UVExFIC0gZWxhcHNlZFRpbWUpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGVudiA9IHsgY29udGV4dDogdGhpcywgZGF0YTogdGhpcy5zY29wZS5nZXRSZWxhdGl2ZURhdGEoKSB9O1xuXG5cdFx0XHRcdFd5c2llLmhvb2tzLnJ1bihcImV4cHJlc3Npb25zLXVwZGF0ZS1zdGFydFwiLCBlbnYpO1xuXG5cdFx0XHRcdCQkKHRoaXMuYWxsKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVmLnVwZGF0ZShlbnYuZGF0YSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmICh0aGlzLlRIUk9UVExFID4gMCkge1xuXHRcdFx0XHRcdHRoaXMubGFzdFVwZGF0ZWQgPSBwZXJmb3JtYW5jZS5ub3coKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudXBkYXRlQWxzby5mb3JFYWNoKGZ1bmN0aW9uIChleHApIHtcblx0XHRcdFx0XHRyZXR1cm4gZXhwLnVwZGF0ZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cblx0XHRcdGV4dHJhY3Q6IGZ1bmN0aW9uIGV4dHJhY3Qobm9kZSwgYXR0cmlidXRlKSB7XG5cdFx0XHRcdHRoaXMuZXhwcmVzc2lvblJlZ2V4Lmxhc3RJbmRleCA9IDA7XG5cblx0XHRcdFx0aWYgKHRoaXMuZXhwcmVzc2lvblJlZ2V4LnRlc3QoYXR0cmlidXRlID8gYXR0cmlidXRlLnZhbHVlIDogbm9kZS50ZXh0Q29udGVudCkpIHtcblx0XHRcdFx0XHR0aGlzLmFsbC5wdXNoKG5ldyBXeXNpZS5FeHByZXNzaW9uLlRleHQoe1xuXHRcdFx0XHRcdFx0bm9kZTogbm9kZSxcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZTogYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5uYW1lLFxuXHRcdFx0XHRcdFx0YWxsOiB0aGlzXG5cdFx0XHRcdFx0fSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUcmF2ZXJzZSBhbiBlbGVtZW50LCBpbmNsdWRpbmcgYXR0cmlidXRlIG5vZGVzLCB0ZXh0IG5vZGVzIGFuZCBhbGwgZGVzY2VuZGFudHNcblx0XHRcdHRyYXZlcnNlOiBmdW5jdGlvbiB0cmF2ZXJzZShub2RlKSB7XG5cdFx0XHRcdHZhciBfdGhpczE3ID0gdGhpcztcblxuXHRcdFx0XHRub2RlID0gbm9kZSB8fCB0aGlzLnNjb3BlLmVsZW1lbnQ7XG5cblx0XHRcdFx0aWYgKG5vZGUubWF0Y2hlcyAmJiBub2RlLm1hdGNoZXMoXy5lc2NhcGUpKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcblx0XHRcdFx0XHQvLyBUZXh0IG5vZGVcblx0XHRcdFx0XHQvLyBMZWFmIG5vZGUsIGV4dHJhY3QgcmVmZXJlbmNlcyBmcm9tIGNvbnRlbnRcblx0XHRcdFx0XHR0aGlzLmV4dHJhY3Qobm9kZSwgbnVsbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmF2ZXJzZSBjaGlsZHJlbiBhbmQgYXR0cmlidXRlcyBhcyBsb25nIGFzIHRoaXMgaXMgTk9UIHRoZSByb290IG9mIGEgY2hpbGQgc2NvcGVcblx0XHRcdFx0Ly8gKG90aGVyd2lzZSwgaXQgd2lsbCBiZSB0YWtlbiBjYXJlIG9mIGl0cyBvd24gRXhwcmVzc2lvbnMgb2JqZWN0KVxuXHRcdFx0XHRpZiAobm9kZSA9PSB0aGlzLnNjb3BlLmVsZW1lbnQgfHwgIVd5c2llLmlzKFwic2NvcGVcIiwgbm9kZSkpIHtcblx0XHRcdFx0XHQkJChub2RlLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzMTcuZXh0cmFjdChub2RlLCBhdHRyaWJ1dGUpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdCQkKG5vZGUuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBfdGhpczE3LnRyYXZlcnNlKGNoaWxkKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0bGF6eToge1xuXHRcdFx0XHQvLyBSZWdleCB0aGF0IGxvb3NlbHkgbWF0Y2hlcyBhbGwgcG9zc2libGUgZXhwcmVzc2lvbnNcblx0XHRcdFx0Ly8gRmFsc2UgcG9zaXRpdmVzIGFyZSBvaywgYnV0IGZhbHNlIG5lZ2F0aXZlcyBhcmUgbm90LlxuXHRcdFx0XHRleHByZXNzaW9uUmVnZXg6IGZ1bmN0aW9uIGV4cHJlc3Npb25SZWdleCgpIHtcblx0XHRcdFx0XHR2YXIgcHJvcGVydHlSZWdleCA9IFwiKD86XCIgKyB0aGlzLnNjb3BlLnd5c2llLnByb3BlcnR5TmFtZXMuam9pbihcInxcIikgKyBcIilcIjtcblxuXHRcdFx0XHRcdHJldHVybiBSZWdFeHAoW1wiXFxcXFtbXFxcXFNcXFxcc10qP1wiICsgcHJvcGVydHlSZWdleCArIFwiW1xcXFxTXFxcXHNdKj9cXFxcXVwiLCBcIntcXFxccypcIiArIHByb3BlcnR5UmVnZXggKyBcIlxcXFxzKn1cIiwgXCJcXFxcJHtbXFxcXFNcXFxcc10rP31cIl0uam9pbihcInxcIiksIFwiZ2lcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHN0YXRpYzoge1xuXHRcdFx0XHRUSFJPVFRMRTogMCxcblxuXHRcdFx0XHRlc2NhcGU6IFwiLmlnbm9yZS1leHByZXNzaW9uc1wiLFxuXG5cdFx0XHRcdGxhenk6IHtcblx0XHRcdFx0XHRyb290RnVuY3Rpb25zOiBmdW5jdGlvbiByb290RnVuY3Rpb25zKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoT2JqZWN0LmtleXMoV3lzaWUuRnVuY3Rpb25zKSksIF90b0NvbnN1bWFibGVBcnJheShPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhNYXRoKSksIFtcImlmXCIsIFwiXCJdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSkoKTtcblxuXHRXeXNpZS5ob29rcy5hZGQoXCJzY29wZS1pbml0LXN0YXJ0XCIsIGZ1bmN0aW9uICgpIHtcblx0XHRuZXcgV3lzaWUuRXhwcmVzc2lvbnModGhpcyk7XG5cdH0pO1xuXG5cdFd5c2llLmhvb2tzLmFkZChcInNjb3BlLWluaXQtZW5kXCIsIGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmV4cHJlc3Npb25zLmluaXQoKTtcblx0fSk7XG59KShCbGlzcywgQmxpc3MuJCk7XG5cbi8qKlxuICogRnVuY3Rpb25zIGF2YWlsYWJsZSBpbnNpZGUgV3lzaWUgZXhwcmVzc2lvbnNcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXG5cdHZhciBfID0gV3lzaWUuRnVuY3Rpb25zID0ge1xuXHRcdG9wZXJhdG9yczoge30sXG5cblx0XHQvKipcbiAgICogQWdncmVnYXRlIHN1bVxuICAgKi9cblx0XHRzdW06IGZ1bmN0aW9uIHN1bShhcnJheSkge1xuXHRcdFx0cmV0dXJuIG51bWJlcnMoYXJyYXksIGFyZ3VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50KSB7XG5cdFx0XHRcdHJldHVybiArcHJldiArICgrY3VycmVudCB8fCAwKTtcblx0XHRcdH0sIDApO1xuXHRcdH0sXG5cblx0XHQvKipcbiAgICogQXZlcmFnZSBvZiBhbiBhcnJheSBvZiBudW1iZXJzXG4gICAqL1xuXHRcdGF2ZXJhZ2U6IGZ1bmN0aW9uIGF2ZXJhZ2UoYXJyYXkpIHtcblx0XHRcdGFycmF5ID0gbnVtYmVycyhhcnJheSwgYXJndW1lbnRzKTtcblxuXHRcdFx0cmV0dXJuIGFycmF5Lmxlbmd0aCAmJiBfLnN1bShhcnJheSkgLyBhcnJheS5sZW5ndGg7XG5cdFx0fSxcblxuXHRcdC8qKlxuICAgKiBNaW4gb2YgYW4gYXJyYXkgb2YgbnVtYmVyc1xuICAgKi9cblx0XHRtaW46IGZ1bmN0aW9uIG1pbihhcnJheSkge1xuXHRcdFx0dmFyIF9NYXRoO1xuXG5cdFx0XHRyZXR1cm4gKF9NYXRoID0gTWF0aCkubWluLmFwcGx5KF9NYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkobnVtYmVycyhhcnJheSwgYXJndW1lbnRzKSkpO1xuXHRcdH0sXG5cblx0XHQvKipcbiAgICogTWF4IG9mIGFuIGFycmF5IG9mIG51bWJlcnNcbiAgICovXG5cdFx0bWF4OiBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcblx0XHRcdHZhciBfTWF0aDI7XG5cblx0XHRcdHJldHVybiAoX01hdGgyID0gTWF0aCkubWF4LmFwcGx5KF9NYXRoMiwgX3RvQ29uc3VtYWJsZUFycmF5KG51bWJlcnMoYXJyYXksIGFyZ3VtZW50cykpKTtcblx0XHR9LFxuXG5cdFx0Y291bnQ6IGZ1bmN0aW9uIGNvdW50KGFycmF5KSB7XG5cdFx0XHRyZXR1cm4gV3lzaWUudG9BcnJheShhcnJheSkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG5cdFx0XHRcdHJldHVybiBhICE9PSBudWxsICYmIGEgIT09IGZhbHNlO1xuXHRcdFx0fSkubGVuZ3RoO1xuXHRcdH0sXG5cblx0XHRyb3VuZDogZnVuY3Rpb24gcm91bmQobnVtLCBkZWNpbWFscykge1xuXHRcdFx0aWYgKCFudW0gfHwgIWRlY2ltYWxzIHx8ICFpc0Zpbml0ZShudW0pKSB7XG5cdFx0XHRcdHJldHVybiBNYXRoLnJvdW5kKG51bSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiArbnVtLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIiwge1xuXHRcdFx0XHR1c2VHcm91cGluZzogZmFsc2UsXG5cdFx0XHRcdG1heGltdW1GcmFjdGlvbkRpZ2l0czogZGVjaW1hbHNcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRpZmY6IGZ1bmN0aW9uIGlmZihjb25kaXRpb24sIGlmdHJ1ZSkge1xuXHRcdFx0dmFyIGlmZmFsc2UgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBcIlwiIDogYXJndW1lbnRzWzJdO1xuXG5cdFx0XHRyZXR1cm4gY29uZGl0aW9uID8gaWZ0cnVlIDogaWZmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG4gICogQWRkaXRpb24gZm9yIGVsZW1lbnRzIGFuZCBzY2FsYXJzLlxuICAqIEFkZGl0aW9uIGJldHdlZW4gYXJyYXlzIGhhcHBlbnMgZWxlbWVudC13aXNlLlxuICAqIEFkZGl0aW9uIGJldHdlZW4gc2NhbGFycyByZXR1cm5zIHRoZWlyIHNjYWxhciBzdW0gKHNhbWUgYXMgKylcbiAgKiBBZGRpdGlvbiBiZXR3ZWVuIGEgc2NhbGFyIGFuZCBhbiBhcnJheSB3aWxsIHJlc3VsdCBpbiB0aGUgc2NhbGFyIGJlaW5nIGFkZGVkIHRvIGV2ZXJ5IGFycmF5IGVsZW1lbnQuXG4gICogT3JkZXJlZCBieSBwcmVjZWRlbmNlIChoaWdoZXIgdG8gbG93ZXIpXG4gICovXG5cdG9wZXJhdG9yKFwibm90XCIsIGZ1bmN0aW9uIChhKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChhKSB7XG5cdFx0XHRyZXR1cm4gIWE7XG5cdFx0fTtcblx0fSk7XG5cdG9wZXJhdG9yKFwibXVsdGlwbHlcIiwgZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRyZXR1cm4gYSAqIGI7XG5cdH0sIHsgaWRlbnRpdHk6IDEsIHN5bWJvbDogXCIqXCIgfSk7XG5cdG9wZXJhdG9yKFwiZGl2aWRlXCIsIGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0cmV0dXJuIGEgLyBiO1xuXHR9LCB7IGlkZW50aXR5OiAxLCBzeW1ib2w6IFwiL1wiIH0pO1xuXHRvcGVyYXRvcihcImFkZFwiLCBmdW5jdGlvbiAoYSwgYikge1xuXHRcdHJldHVybiArYSArICtiO1xuXHR9LCB7IHN5bWJvbDogXCIrXCIgfSk7XG5cdG9wZXJhdG9yKFwic3VidHJhY3RcIiwgZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRyZXR1cm4gYSAtIGI7XG5cdH0sIHsgc3ltYm9sOiBcIi1cIiB9KTtcblx0b3BlcmF0b3IoXCJsdGVcIiwgZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRyZXR1cm4gYSA8PSBiO1xuXHR9LCB7IHN5bWJvbDogXCI8PVwiIH0pO1xuXHRvcGVyYXRvcihcImx0XCIsIGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0cmV0dXJuIGEgPCBiO1xuXHR9LCB7IHN5bWJvbDogXCI8XCIgfSk7XG5cdG9wZXJhdG9yKFwiZ3RlXCIsIGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0cmV0dXJuIGEgPj0gYjtcblx0fSwgeyBzeW1ib2w6IFwiPj1cIiB9KTtcblx0b3BlcmF0b3IoXCJndFwiLCBmdW5jdGlvbiAoYSwgYikge1xuXHRcdHJldHVybiBhID4gYjtcblx0fSwgeyBzeW1ib2w6IFwiPlwiIH0pO1xuXHRvcGVyYXRvcihcImVxXCIsIGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0cmV0dXJuIGEgPT0gYjtcblx0fSwgeyBzeW1ib2w6IFwiPT1cIiB9KTtcblx0b3BlcmF0b3IoXCJhbmRcIiwgZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRyZXR1cm4gISFhICYmICEhYjtcblx0fSwgeyBpZGVudGl0eTogdHJ1ZSwgc3ltYm9sOiBcIiYmXCIgfSk7XG5cdG9wZXJhdG9yKFwib3JcIiwgZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRyZXR1cm4gISFhIHx8ICEhYjtcblx0fSwgeyBpZGVudGl0eTogZmFsc2UsIHN5bWJvbDogXCJ8fFwiIH0pO1xuXG5cdHZhciBhbGlhc2VzID0ge1xuXHRcdGF2ZXJhZ2U6IFwiYXZnXCIsXG5cdFx0aWZmOiBcImlmZiBJRlwiLFxuXHRcdHN1YnRyYWN0OiBcIm1pbnVzXCIsXG5cdFx0bXVsdGlwbHk6IFwibXVsdCBwcm9kdWN0XCIsXG5cdFx0ZGl2aWRlOiBcImRpdlwiLFxuXHRcdGx0OiBcImxlc3NUaGFuIHNtYWxsZXJcIixcblx0XHRndDogXCJtb3JlVGhhbiBncmVhdGVyIGdyZWF0ZXJUaGFuIGJpZ2dlclwiLFxuXHRcdGVxOiBcImVxdWFsIGVxdWFsaXR5XCJcblx0fTtcblxuXHRmb3IgKG5hbWUgaW4gYWxpYXNlcykge1xuXHRcdGFsaWFzZXNbbmFtZV0uc3BsaXQoL1xccysvZykuZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcblx0XHRcdHJldHVybiBfW2FsaWFzXSA9IF9bbmFtZV07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBNYWtlIGZ1bmN0aW9uIG5hbWVzIGNhc2UgaW5zZW5zaXRpdmVcblx0V3lzaWUuRnVuY3Rpb25zLl9UcmFwID0gc2VsZi5Qcm94eSA/IG5ldyBQcm94eShfLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbiBnZXQoZnVuY3Rpb25zLCBwcm9wZXJ0eSkge1xuXHRcdFx0aWYgKHByb3BlcnR5IGluIGZ1bmN0aW9ucykge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb25zW3Byb3BlcnR5XTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHByb3BlcnR5TCA9IHByb3BlcnR5LnRvTG93ZXJDYXNlICYmIHByb3BlcnR5LnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmIChwcm9wZXJ0eUwgJiYgZnVuY3Rpb25zLmhhc093blByb3BlcnR5KHByb3BlcnR5TCkpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uc1twcm9wZXJ0eUxdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJvcGVydHkgaW4gTWF0aCB8fCBwcm9wZXJ0eUwgaW4gTWF0aCkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aFtwcm9wZXJ0eV0gfHwgTWF0aFtwcm9wZXJ0eUxdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJvcGVydHkgaW4gc2VsZikge1xuXHRcdFx0XHRyZXR1cm4gc2VsZltwcm9wZXJ0eV07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFByZXZlbnQgdW5kZWZpbmVkIGF0IGFsbCBjb3N0c1xuXHRcdFx0cmV0dXJuIHByb3BlcnR5O1xuXHRcdH0sXG5cblx0XHQvLyBTdXBlciB1Z2x5IGhhY2ssIGJ1dCBvdGhlcndpc2UgZGF0YSBpcyBub3Rcblx0XHQvLyB0aGUgbG9jYWwgdmFyaWFibGUgaXQgc2hvdWxkIGJlLCBidXQgdGhlIHN0cmluZyBcImRhdGFcIlxuXHRcdC8vIHNvIGFsbCBwcm9wZXJ0eSBsb29rdXBzIGZhaWwuXG5cdFx0aGFzOiBmdW5jdGlvbiBoYXMoZnVuY3Rpb25zLCBwcm9wZXJ0eSkge1xuXHRcdFx0cmV0dXJuIHByb3BlcnR5ICE9IFwiZGF0YVwiO1xuXHRcdH1cblx0fSkgOiBXeXNpZS5GdW5jdGlvbnM7XG5cblx0LyoqXG4gICogUHJpdmF0ZSBoZWxwZXIgbWV0aG9kc1xuICAqL1xuXHRmdW5jdGlvbiBudW1iZXJzKGFycmF5LCBhcmdzKSB7XG5cdFx0YXJyYXkgPSBBcnJheS5pc0FycmF5KGFycmF5KSA/IGFycmF5IDogYXJncyA/ICQkKGFyZ3MpIDogW2FycmF5XTtcblxuXHRcdHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKG51bWJlcikge1xuXHRcdFx0cmV0dXJuICFpc05hTihudW1iZXIpO1xuXHRcdH0pLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuICtuO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG4gICogRXh0ZW5kIGEgc2NhbGFyIG9wZXJhdG9yIHRvIGFycmF5cywgb3IgYXJyYXlzIGFuZCBzY2FsYXJzXG4gICogVGhlIG9wZXJhdGlvbiBiZXR3ZWVuIGFycmF5cyBpcyBhcHBsaWVkIGVsZW1lbnQtd2lzZS5cbiAgKiBUaGUgb3BlcmF0aW9uIG9wZXJhdGlvbiBiZXR3ZWVuIGEgc2NhbGFyIGFuZCBhbiBhcnJheSB3aWxsIHJlc3VsdCBpblxuICAqIHRoZSBvcGVyYXRpb24gYmVpbmcgYXBwbGllZCBiZXR3ZWVuIHRoZSBzY2FsYXIgYW5kIGV2ZXJ5IGFycmF5IGVsZW1lbnQuXG4gICogQHBhcmFtIG9wIHtGdW5jdGlvbn0gVGhlIG9wZXJhdGlvbiBiZXR3ZWVuIHR3byBzY2FsYXJzXG4gICogQHBhcmFtIGlkZW50aXR5IFRoZSBvcGVyYXRpb27igJlzIGlkZW50aXR5IGVsZW1lbnQuIERlZmF1bHRzIHRvIDAuXG4gICovXG5cdGZ1bmN0aW9uIG9wZXJhdG9yKG5hbWUsIG9wKSB7XG5cdFx0dmFyIG8gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1syXTtcblxuXHRcdGlmIChvcC5sZW5ndGggPCAyKSB7XG5cdFx0XHQvLyBVbmFyeSBvcGVyYXRvclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChvcGVyYW5kKSB7XG5cdFx0XHRcdHJldHVybiBBcnJheS5pc0FycmF5KG9wZXJhbmQpID8gb3BlcmFuZC5tYXAob3ApIDogb3Aob3BlcmFuZCk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmIChvLnN5bWJvbCkge1xuXHRcdFx0Xy5vcGVyYXRvcnNbby5zeW1ib2xdID0gbmFtZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gX1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgb3BlcmFuZHMgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuXHRcdFx0XHRvcGVyYW5kc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3BlcmFuZHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdG9wZXJhbmRzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShvcGVyYW5kcyksIFtvLmlkZW50aXR5XSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvcGVyYW5kcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYikpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIG8uaWRlbnRpdHkgPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdFx0YiA9IG51bWJlcnMoYik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGIubWFwKGZ1bmN0aW9uIChuLCBpKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBvcChhW2ldID09PSB1bmRlZmluZWQgPyBvLmlkZW50aXR5IDogYVtpXSwgbik7XG5cdFx0XHRcdFx0XHR9KSksIF90b0NvbnN1bWFibGVBcnJheShhLnNsaWNlKGIubGVuZ3RoKSkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYi5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG9wKGEsIG4pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIE9wZXJhbmQgaXMgc2NhbGFyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBvLmlkZW50aXR5ID09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRcdGIgPSArYjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGEubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBvcChuLCBiKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3AoYSwgYik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG59KSgpO1xuXG4oZnVuY3Rpb24gKCQsICQkKSB7XG5cblx0dmFyIF8gPSBXeXNpZS5TY29wZSA9ICQuQ2xhc3Moe1xuXHRcdGV4dGVuZHM6IFd5c2llLlVuaXQsXG5cdFx0Y29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHd5c2llLCBjb2xsZWN0aW9uKSB7XG5cdFx0XHR2YXIgX3RoaXMxOCA9IHRoaXM7XG5cblx0XHRcdHRoaXMucHJvcGVydGllcyA9IHt9O1xuXG5cdFx0XHR0aGlzLnNjb3BlID0gdGhpcztcblxuXHRcdFx0V3lzaWUuaG9va3MucnVuKFwic2NvcGUtaW5pdC1zdGFydFwiLCB0aGlzKTtcblxuXHRcdFx0Ly8gU2hvdWxkIHRoaXMgZWxlbWVudCBhbHNvIGNyZWF0ZSBhIHByaW1pdGl2ZT9cblx0XHRcdGlmIChXeXNpZS5QcmltaXRpdmUuZ2V0VmFsdWVBdHRyaWJ1dGUodGhpcy5lbGVtZW50KSkge1xuXHRcdFx0XHR2YXIgb2JqID0gdGhpcy5wcm9wZXJ0aWVzW3RoaXMucHJvcGVydHldID0gbmV3IFd5c2llLlByaW1pdGl2ZSh0aGlzLmVsZW1lbnQsIHRoaXMud3lzaWUpO1xuXHRcdFx0XHRvYmouc2NvcGUgPSBvYmoucGFyZW50U2NvcGUgPSB0aGlzO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDcmVhdGUgV3lzaWUgb2JqZWN0cyBmb3IgYWxsIHByb3BlcnRpZXMgaW4gdGhpcyBzY29wZSAocHJpbWl0aXZlcyBvciBzY29wZXMpLFxuXHRcdFx0Ly8gYnV0IG5vdCBwcm9wZXJ0aWVzIGluIGRlc2NlbmRhbnQgc2NvcGVzICh0aGV5IHdpbGwgYmUgaGFuZGxlZCBieSB0aGVpciBzY29wZSlcblx0XHRcdCQkKFd5c2llLnNlbGVjdG9ycy5wcm9wZXJ0eSwgdGhpcy5lbGVtZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0XHRcdHZhciBwcm9wZXJ0eSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIik7XG5cblx0XHRcdFx0aWYgKF90aGlzMTguY29udGFpbnMoZWxlbWVudCkpIHtcblx0XHRcdFx0XHR2YXIgZXhpc3RpbmcgPSBfdGhpczE4LnByb3BlcnRpZXNbcHJvcGVydHldO1xuXG5cdFx0XHRcdFx0aWYgKGV4aXN0aW5nKSB7XG5cdFx0XHRcdFx0XHQvLyBUd28gc2NvcGVzIHdpdGggdGhlIHNhbWUgcHJvcGVydHksIGNvbnZlcnQgdG8gc3RhdGljIGNvbGxlY3Rpb25cblx0XHRcdFx0XHRcdHZhciBjb2xsZWN0aW9uID0gZXhpc3Rpbmc7XG5cblx0XHRcdFx0XHRcdGlmICghKGV4aXN0aW5nIGluc3RhbmNlb2YgV3lzaWUuQ29sbGVjdGlvbikpIHtcblx0XHRcdFx0XHRcdFx0Y29sbGVjdGlvbiA9IG5ldyBXeXNpZS5Db2xsZWN0aW9uKGV4aXN0aW5nLmVsZW1lbnQsIF90aGlzMTgud3lzaWUpO1xuXHRcdFx0XHRcdFx0XHRjb2xsZWN0aW9uLnBhcmVudFNjb3BlID0gX3RoaXMxODtcblx0XHRcdFx0XHRcdFx0X3RoaXMxOC5wcm9wZXJ0aWVzW3Byb3BlcnR5XSA9IGV4aXN0aW5nLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuXHRcdFx0XHRcdFx0XHRjb2xsZWN0aW9uLmFkZChleGlzdGluZyk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICghY29sbGVjdGlvbi5tdXRhYmxlICYmIFd5c2llLmlzKFwibXVsdGlwbGVcIiwgZWxlbWVudCkpIHtcblx0XHRcdFx0XHRcdFx0Y29sbGVjdGlvbi5tdXRhYmxlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y29sbGVjdGlvbi5hZGQoZWxlbWVudCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIE5vIGV4aXN0aW5nIHByb3BlcnRpZXMgd2l0aCB0aGlzIGlkLCBub3JtYWwgY2FzZVxuXHRcdFx0XHRcdFx0dmFyIG9iaiA9IFd5c2llLk5vZGUuY3JlYXRlKGVsZW1lbnQsIF90aGlzMTgud3lzaWUpO1xuXHRcdFx0XHRcdFx0b2JqLnNjb3BlID0gb2JqIGluc3RhbmNlb2YgXyA/IG9iaiA6IF90aGlzMTg7XG5cblx0XHRcdFx0XHRcdG9iai5wYXJlbnRTY29wZSA9IF90aGlzMTg7XG5cdFx0XHRcdFx0XHRfdGhpczE4LnByb3BlcnRpZXNbcHJvcGVydHldID0gb2JqO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdFd5c2llLmhvb2tzLnJ1bihcInNjb3BlLWluaXQtZW5kXCIsIHRoaXMpO1xuXHRcdH0sXG5cblx0XHRnZXQgcHJvcGVydHlOYW1lcygpIHtcblx0XHRcdHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpO1xuXHRcdH0sXG5cblx0XHRnZXREYXRhOiBmdW5jdGlvbiBnZXREYXRhKG8pIHtcblx0XHRcdG8gPSBvIHx8IHt9O1xuXG5cdFx0XHR2YXIgcmV0ID0gdGhpcy5zdXBlci5nZXREYXRhLmNhbGwodGhpcywgbyk7XG5cblx0XHRcdGlmIChyZXQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXQgPSB7fTtcblxuXHRcdFx0dGhpcy5wcm9wYWdhdGUoZnVuY3Rpb24gKG9iaikge1xuXHRcdFx0XHRpZiAoKCFvYmouY29tcHV0ZWQgfHwgby5jb21wdXRlZCkgJiYgIShvYmoucHJvcGVydHkgaW4gcmV0KSkge1xuXHRcdFx0XHRcdHZhciBkYXRhID0gb2JqLmdldERhdGEobyk7XG5cblx0XHRcdFx0XHRpZiAoZGF0YSAhPT0gbnVsbCB8fCBvLm51bGwpIHtcblx0XHRcdFx0XHRcdHJldFtvYmoucHJvcGVydHldID0gZGF0YTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoIW8uZGlydHkpIHtcblx0XHRcdFx0JC5leHRlbmQocmV0LCB0aGlzLnVuaGFuZGxlZCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuICAgKiBTZWFyY2ggZW50aXJlIHN1YnRyZWUgZm9yIHByb3BlcnR5LCByZXR1cm4gcmVsYXRpdmUgdmFsdWVcbiAgICogQHJldHVybiB7V3lzaWUuVW5pdH1cbiAgICovXG5cdFx0ZmluZDogZnVuY3Rpb24gZmluZChwcm9wZXJ0eSkge1xuXHRcdFx0aWYgKHRoaXMucHJvcGVydHkgPT0gcHJvcGVydHkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwcm9wZXJ0eSBpbiB0aGlzLnByb3BlcnRpZXMpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMucHJvcGVydGllc1twcm9wZXJ0eV0uZmluZChwcm9wZXJ0eSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIHByb3AgaW4gdGhpcy5wcm9wZXJ0aWVzKSB7XG5cdFx0XHRcdHZhciByZXQgPSB0aGlzLnByb3BlcnRpZXNbcHJvcF0uZmluZChwcm9wZXJ0eSk7XG5cblx0XHRcdFx0aWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRwcm9wYWdhdGU6IGZ1bmN0aW9uIHByb3BhZ2F0ZShjYWxsYmFjaykge1xuXHRcdFx0dmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cblx0XHRcdCQuZWFjaCh0aGlzLnByb3BlcnRpZXMsIGZ1bmN0aW9uIChwcm9wZXJ0eSwgb2JqKSB7XG5cdFx0XHRcdG9iai5jYWxsLmFwcGx5KG9iaiwgX2FyZ3VtZW50cyk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0c2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHtcblx0XHRcdGlmICh0aGlzLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ldmVyU2F2ZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy51bnNhdmVkQ2hhbmdlcyA9IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRkb25lOiBmdW5jdGlvbiBkb25lKCkge1xuXHRcdFx0JC51bmJpbmQodGhpcy5lbGVtZW50LCBcIi53eXNpZTplZGl0XCIpO1xuXHRcdH0sXG5cblx0XHRpbXBvcnQ6IGZ1bmN0aW9uIF9pbXBvcnQoKSB7XG5cdFx0XHR0aGlzLmV2ZXJTYXZlZCA9IHRydWU7XG5cdFx0fSxcblxuXHRcdHByb3BhZ2F0ZWQ6IFtcInNhdmVcIiwgXCJkb25lXCIsIFwiaW1wb3J0XCIsIFwiY2xlYXJcIl0sXG5cblx0XHQvLyBJbmplY3QgZGF0YSBpbiB0aGlzIGVsZW1lbnRcblx0XHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihkYXRhKSB7XG5cdFx0XHR2YXIgX3RoaXMxOSA9IHRoaXM7XG5cblx0XHRcdGlmICghZGF0YSkge1xuXHRcdFx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZGF0YSA9IGRhdGEuaXNBcnJheSA/IGRhdGFbMF0gOiBkYXRhO1xuXG5cdFx0XHQvLyBUT0RPIHdoYXQgaWYgaXQgd2FzIGEgcHJpbWl0aXZlIGFuZCBub3cgaXQncyBhIHNjb3BlP1xuXHRcdFx0Ly8gSW4gdGhhdCBjYXNlLCByZW5kZXIgdGhlIHRoaXMucHJvcGVydGllc1t0aGlzLnByb3BlcnR5XSB3aXRoIGl0XG5cblx0XHRcdHRoaXMudW5oYW5kbGVkID0gJC5leHRlbmQoe30sIGRhdGEsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuXHRcdFx0XHRyZXR1cm4gIShwcm9wZXJ0eSBpbiBfdGhpczE5LnByb3BlcnRpZXMpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMucHJvcGFnYXRlKGZ1bmN0aW9uIChvYmopIHtcblx0XHRcdFx0b2JqLnJlbmRlcihkYXRhW29iai5wcm9wZXJ0eV0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuc2F2ZSgpO1xuXHRcdH0sXG5cblx0XHQvLyBDaGVjayBpZiB0aGlzIHNjb3BlIGNvbnRhaW5zIGEgcHJvcGVydHlcblx0XHQvLyBwcm9wZXJ0eSBjYW4gYmUgZWl0aGVyIGEgV3lzaWUuVW5pdCBvciBhIE5vZGVcblx0XHRjb250YWluczogZnVuY3Rpb24gY29udGFpbnMocHJvcGVydHkpIHtcblx0XHRcdGlmIChwcm9wZXJ0eSBpbnN0YW5jZW9mIFd5c2llLlVuaXQpIHtcblx0XHRcdFx0cmV0dXJuIHByb3BlcnR5LnBhcmVudFNjb3BlID09PSB0aGlzO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcHJvcGVydHkucGFyZW50Tm9kZSAmJiB0aGlzLmVsZW1lbnQgPT09IHByb3BlcnR5LnBhcmVudE5vZGUuY2xvc2VzdChXeXNpZS5zZWxlY3RvcnMuc2NvcGUpO1xuXHRcdH0sXG5cblx0XHRzdGF0aWM6IHtcblx0XHRcdGFsbDogbmV3IFdlYWtNYXAoKSxcblxuXHRcdFx0bm9ybWFsaXplOiBmdW5jdGlvbiBub3JtYWxpemUoZWxlbWVudCkge1xuXHRcdFx0XHQvLyBHZXQgJiBub3JtYWxpemUgdHlwZW9mIG5hbWUsIGlmIGV4aXN0c1xuXHRcdFx0XHRpZiAoV3lzaWUuaXMoXCJzY29wZVwiLCBlbGVtZW50KSkge1xuXHRcdFx0XHRcdHZhciB0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0eXBlb2ZcIikgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpdGVtdHlwZVwiKSB8fCBcIkl0ZW1cIjtcblxuXHRcdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZW9mXCIsIHR5cGUpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHR5cGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufSkoQmxpc3MsIEJsaXNzLiQpO1xuXG4oZnVuY3Rpb24gKCQsICQkKSB7XG5cblx0dmFyIERJU0FCTEVfQ0FDSEUgPSBmYWxzZTtcblxuXHR2YXIgXyA9IFd5c2llLlByaW1pdGl2ZSA9ICQuQ2xhc3Moe1xuXHRcdGV4dGVuZHM6IFd5c2llLlVuaXQsXG5cdFx0Y29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHd5c2llLCBjb2xsZWN0aW9uKSB7XG5cdFx0XHR2YXIgX3RoaXMyMCA9IHRoaXM7XG5cblx0XHRcdC8vIFdoaWNoIGF0dHJpYnV0ZSBob2xkcyB0aGUgZGF0YSwgaWYgYW55P1xuXHRcdFx0Ly8gXCJudWxsXCIgb3IgbnVsbCBmb3Igbm9uZSAoaS5lLiBkYXRhIGlzIGluIGNvbnRlbnQpLlxuXHRcdFx0dGhpcy5hdHRyaWJ1dGUgPSBfLmdldFZhbHVlQXR0cmlidXRlKHRoaXMuZWxlbWVudCk7XG5cblx0XHRcdGlmICghdGhpcy5hdHRyaWJ1dGUpIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50Lm5vcm1hbGl6ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXaGF0IGlzIHRoZSBkYXRhdHlwZT9cblx0XHRcdHRoaXMuZGF0YXR5cGUgPSBfLmdldERhdGF0eXBlKHRoaXMuZWxlbWVudCwgdGhpcy5hdHRyaWJ1dGUpO1xuXG5cdFx0XHQvLyBQcmltaXRpdmVzIGNvbnRhaW5pbmcgYW4gZXhwcmVzc2lvbiBhcyB0aGVpciB2YWx1ZSBhcmUgaW1wbGljaXRseSBjb21wdXRlZFxuXHRcdFx0dmFyIGV4cHJlc3Npb25zID0gV3lzaWUuRXhwcmVzc2lvbi5UZXh0LmVsZW1lbnRzLmdldCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0dmFyIGV4cHJlc3Npb25UZXh0ID0gZXhwcmVzc2lvbnMgJiYgZXhwcmVzc2lvbnMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdHJldHVybiBlLmF0dHJpYnV0ZSA9PSBfdGhpczIwLmF0dHJpYnV0ZTtcblx0XHRcdH0pWzBdO1xuXG5cdFx0XHRpZiAoZXhwcmVzc2lvblRleHQpIHtcblx0XHRcdFx0ZXhwcmVzc2lvblRleHQucHJpbWl0aXZlID0gdGhpcztcblx0XHRcdFx0dGhpcy5jb21wdXRlZCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuICAgICogU2V0IHVwIGlucHV0IHdpZGdldFxuICAgICovXG5cblx0XHRcdC8vIEV4cG9zZWQgd2lkZ2V0cyAodmlzaWJsZSBhbHdheXMpXG5cdFx0XHRpZiAoV3lzaWUuaXMoXCJmb3JtQ29udHJvbFwiLCB0aGlzLmVsZW1lbnQpKSB7XG5cdFx0XHRcdHRoaXMuZWRpdG9yID0gdGhpcy5lbGVtZW50O1xuXG5cdFx0XHRcdHRoaXMuZWRpdCgpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTmVzdGVkIHdpZGdldHNcblx0XHRcdGVsc2UgaWYgKCF0aGlzLmVkaXRvcikge1xuXHRcdFx0XHRcdHRoaXMuZWRpdG9yID0gJCQodGhpcy5lbGVtZW50LmNoaWxkcmVuKS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWwubWF0Y2hlcyhXeXNpZS5zZWxlY3RvcnMuZm9ybUNvbnRyb2wpICYmICFlbC5tYXRjaGVzKFd5c2llLnNlbGVjdG9ycy5wcm9wZXJ0eSk7XG5cdFx0XHRcdFx0fSlbMF07XG5cblx0XHRcdFx0XHQkLnJlbW92ZSh0aGlzLmVkaXRvcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0aWYgKCF0aGlzLmV4cG9zZWQgJiYgIXRoaXMuY29tcHV0ZWQpIHtcblx0XHRcdFx0dGhpcy53eXNpZS5uZWVkc0VkaXQgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRlbXBsYXRlVmFsdWUgPSB0aGlzLnZhbHVlO1xuXG5cdFx0XHR0aGlzLmRlZmF1bHQgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1kZWZhdWx0XCIpO1xuXG5cdFx0XHQvLyBPYnNlcnZlIGZ1dHVyZSBtdXRhdGlvbnMgdG8gdGhpcyBwcm9wZXJ0eSwgaWYgcG9zc2libGVcblx0XHRcdC8vIFByb3BlcnRpZXMgbGlrZSBpbnB1dC5jaGVja2VkIG9yIGlucHV0LnZhbHVlIGNhbm5vdCBiZSBvYnNlcnZlZCB0aGF0IHdheVxuXHRcdFx0Ly8gc28gd2UgY2Fubm90IGRlcGVuZCBvbiBtdXRhdGlvbiBvYnNlcnZlcnMgZm9yIGV2ZXJ5dGhpbmcgOihcblx0XHRcdHRoaXMub2JzZXJ2ZXIgPSBXeXNpZS5vYnNlcnZlKHRoaXMuZWxlbWVudCwgdGhpcy5hdHRyaWJ1dGUsIGZ1bmN0aW9uIChyZWNvcmQpIHtcblx0XHRcdFx0aWYgKF90aGlzMjAuYXR0cmlidXRlKSB7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gX3RoaXMyMC52YWx1ZTtcblxuXHRcdFx0XHRcdGlmIChyZWNvcmRbcmVjb3JkLmxlbmd0aCAtIDFdLm9sZFZhbHVlICE9IHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRfdGhpczIwLnVwZGF0ZSh2YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKCFfdGhpczIwLnd5c2llLmVkaXRpbmcgfHwgX3RoaXMyMC5jb21wdXRlZCkge1xuXHRcdFx0XHRcdGlmIChfdGhpczIwLm9sZFZhbHVlICE9IF90aGlzMjAudmFsdWUpIHtcblx0XHRcdFx0XHRcdF90aGlzMjAudXBkYXRlKF90aGlzMjAudmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSwgdHJ1ZSk7XG5cblx0XHRcdGlmICh0aGlzLmNvbXB1dGVkIHx8IHRoaXMuZGVmYXVsdCA9PT0gXCJcIikge1xuXHRcdFx0XHQvLyBhdHRyaWJ1dGUgZXhpc3RzLCBubyB2YWx1ZSwgZGVmYXVsdCBpcyB0ZW1wbGF0ZSB2YWx1ZVxuXHRcdFx0XHR0aGlzLmRlZmF1bHQgPSB0aGlzLnRlbXBsYXRlVmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGhpcy5kZWZhdWx0ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0Ly8gYXR0cmlidXRlIGRvZXMgbm90IGV4aXN0XG5cdFx0XHRcdFx0dGhpcy5kZWZhdWx0ID0gdGhpcy5lZGl0b3IgPyB0aGlzLmVkaXRvclZhbHVlIDogdGhpcy5lbXB0eVZhbHVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy51cGRhdGUodGhpcy52YWx1ZSk7XG5cblx0XHRcdGlmICh0aGlzLmNvbGxlY3Rpb24pIHtcblx0XHRcdFx0Ly8gQ29sbGVjdGlvbiBvZiBwcmltaXRpdmVzLCBkZWFsIHdpdGggc2V0dGluZyB0ZXh0Q29udGVudCBldGMgd2l0aG91dCB0aGUgVUkgaW50ZXJmZXJpbmcuXG5cdFx0XHRcdHZhciBzd2FwVUkgPSBmdW5jdGlvbiBzd2FwVUkoY2FsbGJhY2spIHtcblx0XHRcdFx0XHRfdGhpczIwLnVub2JzZXJ2ZSgpO1xuXHRcdFx0XHRcdHZhciB1aSA9ICQucmVtb3ZlKCQoV3lzaWUuc2VsZWN0b3JzLnVpLCBfdGhpczIwLmVsZW1lbnQpKTtcblxuXHRcdFx0XHRcdHZhciByZXQgPSBjYWxsYmFjaygpO1xuXG5cdFx0XHRcdFx0JC5pbnNpZGUodWksIF90aGlzMjAuZWxlbWVudCk7XG5cdFx0XHRcdFx0X3RoaXMyMC5vYnNlcnZlKCk7XG5cblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIEludGVyY2VwdCBjZXJ0YWluIHByb3BlcnRpZXMgc28gdGhhdCBhbnkgV3lzaWUgVUkgaW5zaWRlIHRoaXMgcHJpbWl0aXZlIHdpbGwgbm90IGJlIGRlc3Ryb3llZFxuXHRcdFx0XHRbXCJ0ZXh0Q29udGVudFwiLCBcImlubmVySFRNTFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuXHRcdFx0XHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSwgcHJvcGVydHkpO1xuXG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzMjAuZWxlbWVudCwgcHJvcGVydHksIHtcblx0XHRcdFx0XHRcdGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgX3RoaXMyMSA9IHRoaXM7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN3YXBVSShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwoX3RoaXMyMSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0dmFyIF90aGlzMjIgPSB0aGlzO1xuXG5cdFx0XHRcdFx0XHRcdHN3YXBVSShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGRlc2NyaXB0b3Iuc2V0LmNhbGwoX3RoaXMyMiwgdmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdH0sXG5cblx0XHRnZXQgdmFsdWUoKSB7XG5cdFx0XHRpZiAodGhpcy5lZGl0aW5nKSB7XG5cdFx0XHRcdHZhciByZXQgPSB0aGlzLmVkaXRvclZhbHVlO1xuXHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gbnVsbCA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIF8uZ2V0VmFsdWUodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJpYnV0ZSwgdGhpcy5kYXRhdHlwZSk7XG5cdFx0fSxcblxuXHRcdHNldCB2YWx1ZSh2YWx1ZSkge1xuXHRcdFx0aWYgKHRoaXMuZWRpdGluZyAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9IHRoaXMuZWRpdG9yKSB7XG5cdFx0XHRcdHRoaXMuZWRpdG9yVmFsdWUgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG5cblx0XHRcdGlmICghdGhpcy5lZGl0aW5nIHx8IHRoaXMuYXR0cmlidXRlKSB7XG5cdFx0XHRcdGlmICh0aGlzLmRhdGF0eXBlID09IFwibnVtYmVyXCIgJiYgIXRoaXMuYXR0cmlidXRlKSB7XG5cdFx0XHRcdFx0Xy5zZXRWYWx1ZSh0aGlzLmVsZW1lbnQsIHZhbHVlLCBcImNvbnRlbnRcIiwgdGhpcy5kYXRhdHlwZSk7XG5cdFx0XHRcdFx0Xy5zZXRWYWx1ZSh0aGlzLmVsZW1lbnQsIFd5c2llLkV4cHJlc3Npb24uVGV4dC5mb3JtYXROdW1iZXIodmFsdWUpLCBudWxsLCB0aGlzLmRhdGF0eXBlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfLnNldFZhbHVlKHRoaXMuZWxlbWVudCwgdmFsdWUsIHRoaXMuYXR0cmlidXRlLCB0aGlzLmRhdGF0eXBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoV3lzaWUuaXMoXCJmb3JtQ29udHJvbFwiLCB0aGlzLmVsZW1lbnQpIHx8ICF0aGlzLmF0dHJpYnV0ZSkge1xuXHRcdFx0XHQvLyBNdXRhdGlvbiBvYnNlcnZlciB3b24ndCBjYXRjaCB0aGlzLCBzbyB3ZSBoYXZlIHRvIGNhbGwgdXBkYXRlIG1hbnVhbGx5XG5cdFx0XHRcdHRoaXMudXBkYXRlKHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy51bnNhdmVkQ2hhbmdlcyA9IHRoaXMud3lzaWUudW5zYXZlZENoYW5nZXMgPSB0cnVlO1xuXHRcdH0sXG5cblx0XHRnZXQgZWRpdG9yVmFsdWUoKSB7XG5cdFx0XHRpZiAodGhpcy5lZGl0b3IpIHtcblx0XHRcdFx0aWYgKHRoaXMuZWRpdG9yLm1hdGNoZXMoV3lzaWUuc2VsZWN0b3JzLmZvcm1Db250cm9sKSkge1xuXHRcdFx0XHRcdHJldHVybiBfLmdldFZhbHVlKHRoaXMuZWRpdG9yLCB1bmRlZmluZWQsIHRoaXMuZGF0YXR5cGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgd2UncmUgaGVyZSwgdGhpcy5lZGl0b3IgaXMgYW4gZW50aXJlIEhUTUwgc3RydWN0dXJlXG5cdFx0XHRcdHZhciBvdXRwdXQgPSAkKFd5c2llLnNlbGVjdG9ycy5vdXRwdXQgKyBcIiwgXCIgKyBXeXNpZS5zZWxlY3RvcnMuZm9ybUNvbnRyb2wsIHRoaXMuZWRpdG9yKTtcblxuXHRcdFx0XHRpZiAob3V0cHV0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIF8uYWxsLmhhcyhvdXRwdXQpID8gXy5hbGwuZ2V0KG91dHB1dCkudmFsdWUgOiBfLmdldFZhbHVlKG91dHB1dCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0IGVkaXRvclZhbHVlKHZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy5lZGl0b3IpIHtcblx0XHRcdFx0aWYgKHRoaXMuZWRpdG9yLm1hdGNoZXMoV3lzaWUuc2VsZWN0b3JzLmZvcm1Db250cm9sKSkge1xuXHRcdFx0XHRcdF8uc2V0VmFsdWUodGhpcy5lZGl0b3IsIHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBpZiB3ZSdyZSBoZXJlLCB0aGlzLmVkaXRvciBpcyBhbiBlbnRpcmUgSFRNTCBzdHJ1Y3R1cmVcblx0XHRcdFx0XHR2YXIgb3V0cHV0ID0gJChXeXNpZS5zZWxlY3RvcnMub3V0cHV0ICsgXCIsIFwiICsgV3lzaWUuc2VsZWN0b3JzLmZvcm1Db250cm9sLCB0aGlzLmVkaXRvcik7XG5cblx0XHRcdFx0XHRpZiAob3V0cHV0KSB7XG5cdFx0XHRcdFx0XHRpZiAoXy5hbGwuaGFzKG91dHB1dCkpIHtcblx0XHRcdFx0XHRcdFx0Xy5hbGwuZ2V0KG91dHB1dCkudmFsdWUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdF8uc2V0VmFsdWUob3V0cHV0LCB2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGdldCBleHBvc2VkKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWRpdG9yID09PSB0aGlzLmVsZW1lbnQ7XG5cdFx0fSxcblxuXHRcdGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEobykge1xuXHRcdFx0byA9IG8gfHwge307XG5cblx0XHRcdHZhciByZXQgPSB0aGlzLnN1cGVyLmdldERhdGEuY2FsbCh0aGlzLCBvKTtcblxuXHRcdFx0aWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHZhciByZXQgPSAhby5kaXJ0eSAmJiAhdGhpcy5leHBvc2VkID8gdGhpcy5zYXZlZFZhbHVlIDogdGhpcy52YWx1ZTtcblxuXHRcdFx0aWYgKCFvLmRpcnR5ICYmIHJldCA9PT0gXCJcIikge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9LFxuXG5cdFx0dXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUodmFsdWUpIHtcblx0XHRcdHZhbHVlID0gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyB2YWx1ZSA6IFwiXCI7XG5cblx0XHRcdHRoaXMuZW1wdHkgPSB2YWx1ZSA9PT0gXCJcIjtcblxuXHRcdFx0aWYgKHRoaXMuaHVtYW5SZWFkYWJsZSAmJiB0aGlzLmF0dHJpYnV0ZSkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLmh1bWFuUmVhZGFibGUodmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5pbml0aWFsaXplZCkge1xuXHRcdFx0XHR0aGlzLm9sZFZhbHVlID0gdGhpcy52YWx1ZTtcblxuXHRcdFx0XHQkLmZpcmUodGhpcy5lbGVtZW50LCBcInd5c2llOmRhdGFjaGFuZ2VcIiwge1xuXHRcdFx0XHRcdHByb3BlcnR5OiB0aGlzLnByb3BlcnR5LFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHR3eXNpZTogdGhpcy53eXNpZSxcblx0XHRcdFx0XHRub2RlOiB0aGlzLFxuXHRcdFx0XHRcdGRpcnR5OiB0aGlzLmVkaXRpbmcsXG5cdFx0XHRcdFx0YWN0aW9uOiBcInByb3BlcnR5Y2hhbmdlXCJcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNhdmU6IGZ1bmN0aW9uIHNhdmUoKSB7XG5cdFx0XHRpZiAodGhpcy5wbGFjZWhvbGRlcikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2F2ZWRWYWx1ZSA9IHRoaXMudmFsdWU7XG5cdFx0XHR0aGlzLmV2ZXJTYXZlZCA9IHRydWU7XG5cdFx0XHR0aGlzLnVuc2F2ZWRDaGFuZ2VzID0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdGRvbmU6IGZ1bmN0aW9uIGRvbmUoKSB7XG5cdFx0XHR0aGlzLnVub2JzZXJ2ZSgpO1xuXG5cdFx0XHRpZiAodGhpcy5wb3B1cCkge1xuXHRcdFx0XHR0aGlzLmhpZGVQb3B1cCgpO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5hdHRyaWJ1dGUgJiYgIXRoaXMuZXhwb3NlZCAmJiB0aGlzLmVkaXRpbmcpIHtcblx0XHRcdFx0JC5yZW1vdmUodGhpcy5lZGl0b3IpO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLmVkaXRvclZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMuZXhwb3NlZCkge1xuXHRcdFx0XHR0aGlzLmVkaXRpbmcgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJ0IHRhYkluZGV4XG5cdFx0XHRpZiAodGhpcy5lbGVtZW50Ll8uZGF0YS5wcmV2VGFiaW5kZXggIT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnRhYkluZGV4ID0gdGhpcy5lbGVtZW50Ll8uZGF0YS5wcmV2VGFiaW5kZXg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidGFiaW5kZXhcIik7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWxlbWVudC5fLnVuYmluZChcIi53eXNpZTplZGl0IC53eXNpZTpwcmVlZGl0IC53eXNpZTpzaG93cG9wdXBcIik7XG5cblx0XHRcdHRoaXMub2JzZXJ2ZSgpO1xuXHRcdH0sXG5cblx0XHRyZXZlcnQ6IGZ1bmN0aW9uIHJldmVydCgpIHtcblx0XHRcdGlmICh0aGlzLnVuc2F2ZWRDaGFuZ2VzICYmIHRoaXMuc2F2ZWRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIEZJWE1FIGlmIHdlIGhhdmUgYSBjb2xsZWN0aW9uIG9mIHByb3BlcnRpZXMgKG5vdCBzY29wZXMpLCB0aGlzIHdpbGwgY2F1c2Vcblx0XHRcdFx0Ly8gY2FuY2VsIHRvIG5vdCByZW1vdmUgbmV3IHVuc2F2ZWQgaXRlbXNcblx0XHRcdFx0Ly8gVGhpcyBzaG91bGQgYmUgZml4ZWQgYnkgaGFuZGxpbmcgdGhpcyBvbiB0aGUgY29sbGVjdGlvbiBsZXZlbC5cblx0XHRcdFx0dGhpcy52YWx1ZSA9IHRoaXMuc2F2ZWRWYWx1ZTtcblx0XHRcdFx0dGhpcy51bnNhdmVkQ2hhbmdlcyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBQcmVwYXJlIHRvIGJlIGVkaXRlZFxuXHRcdC8vIENhbGxlZCB3aGVuIHJvb3QgZWRpdCBidXR0b24gaXMgcHJlc3NlZFxuXHRcdHByZUVkaXQ6IGZ1bmN0aW9uIHByZUVkaXQoKSB7XG5cdFx0XHR2YXIgX3RoaXMyMyA9IHRoaXM7XG5cblx0XHRcdGlmICh0aGlzLmNvbXB1dGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRW1wdHkgcHJvcGVydGllcyBzaG91bGQgYmVjb21lIGVkaXRhYmxlIGltbWVkaWF0ZWx5XG5cdFx0XHQvLyBvdGhlcndpc2UgdGhleSBjb3VsZCBiZSBpbnZpc2libGUhXG5cdFx0XHRpZiAodGhpcy5lbXB0eSAmJiAhdGhpcy5hdHRyaWJ1dGUpIHtcblx0XHRcdFx0dGhpcy5lZGl0KCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHRpbWVyO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQuXy5ldmVudHMoe1xuXHRcdFx0XHQvLyBjbGljayBpcyBuZWVkZWQgdG9vIGJlY2F1c2UgaXQgd29ya3Mgd2l0aCB0aGUga2V5Ym9hcmQgYXMgd2VsbFxuXHRcdFx0XHRcImNsaWNrLnd5c2llOnByZWVkaXRcIjogZnVuY3Rpb24gY2xpY2tXeXNpZVByZWVkaXQoZSkge1xuXHRcdFx0XHRcdHJldHVybiBfdGhpczIzLmVkaXQoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJmb2N1cy53eXNpZTpwcmVlZGl0XCI6IGZ1bmN0aW9uIGZvY3VzV3lzaWVQcmVlZGl0KGUpIHtcblx0XHRcdFx0XHRfdGhpczIzLmVkaXQoKTtcblxuXHRcdFx0XHRcdGlmICghX3RoaXMyMy5wb3B1cCkge1xuXHRcdFx0XHRcdFx0X3RoaXMyMy5lZGl0b3IuZm9jdXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2xpY2sud3lzaWU6ZWRpdFwiOiBmdW5jdGlvbiBjbGlja1d5c2llRWRpdChldnQpIHtcblx0XHRcdFx0XHQvLyBQcmV2ZW50IGRlZmF1bHQgYWN0aW9ucyB3aGlsZSBlZGl0aW5nXG5cdFx0XHRcdFx0Ly8gZS5nLiBmb2xsb3dpbmcgbGlua3MgZXRjXG5cdFx0XHRcdFx0aWYgKCFfdGhpczIzLmV4cG9zZWQpIHtcblx0XHRcdFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmICghdGhpcy5hdHRyaWJ1dGUpIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50Ll8uZXZlbnRzKHtcblx0XHRcdFx0XHRcIm1vdXNlZW50ZXIud3lzaWU6cHJlZWRpdFwiOiBmdW5jdGlvbiBtb3VzZWVudGVyV3lzaWVQcmVlZGl0KGUpIHtcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lcik7XG5cdFx0XHRcdFx0XHR0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXMyMy5lZGl0KCk7XG5cdFx0XHRcdFx0XHR9LCAxNTApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJtb3VzZWxlYXZlLnd5c2llOnByZWVkaXRcIjogZnVuY3Rpb24gbW91c2VsZWF2ZVd5c2llUHJlZWRpdChlKSB7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGltZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2UgZWxlbWVudCBmb2N1c2FibGUsIHNvIGl0IGNhbiBhY3R1YWxseSByZWNlaXZlIGZvY3VzXG5cdFx0XHR0aGlzLmVsZW1lbnQuXy5kYXRhLnByZXZUYWJpbmRleCA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKTtcblx0XHRcdHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XG5cdFx0fSxcblxuXHRcdC8vIENhbGxlZCBvbmx5IHRoZSBmaXJzdCB0aW1lIHRoaXMgcHJpbWl0aXZlIGlzIGVkaXRlZFxuXHRcdGluaXRFZGl0OiBmdW5jdGlvbiBpbml0RWRpdCgpIHtcblx0XHRcdHZhciBfdGhpczI0ID0gdGhpcztcblxuXHRcdFx0Ly8gTGlua2VkIHdpZGdldHNcblx0XHRcdGlmICh0aGlzLmVsZW1lbnQuaGFzQXR0cmlidXRlKFwiZGF0YS1pbnB1dFwiKSkge1xuXHRcdFx0XHR2YXIgc2VsZWN0b3IgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbnB1dFwiKTtcblxuXHRcdFx0XHRpZiAoc2VsZWN0b3IpIHtcblx0XHRcdFx0XHR0aGlzLmVkaXRvciA9ICQuY2xvbmUoJChzZWxlY3RvcikpO1xuXG5cdFx0XHRcdFx0aWYgKCFXeXNpZS5pcyhcImZvcm1Db250cm9sXCIsIHRoaXMuZWRpdG9yKSkge1xuXHRcdFx0XHRcdFx0aWYgKCQoV3lzaWUuc2VsZWN0b3JzLm91dHB1dCwgdGhpcy5lZGl0b3IpKSB7XG5cdFx0XHRcdFx0XHRcdC8vIGhhcyBvdXRwdXQgZWxlbWVudD9cblx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyBpdCBhcyBhIHd5c2llIGluc3RhbmNlLCBzbyBwZW9wbGUgY2FuIHVzZSByZWZlcmVuY2VzXG5cdFx0XHRcdFx0XHRcdHRoaXMuZWRpdG9yLnNldEF0dHJpYnV0ZShcImRhdGEtc3RvcmVcIiwgXCJub25lXCIpO1xuXHRcdFx0XHRcdFx0XHRuZXcgV3lzaWUodGhpcy5lZGl0b3IpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5lZGl0b3IgPSBudWxsOyAvLyBDYW5ub3QgdXNlIHRoaXMsIHNvcnJ5IGJyb1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMuZWRpdG9yKSB7XG5cdFx0XHRcdC8vIE5vIGVkaXRvciBwcm92aWRlZCwgdXNlIGRlZmF1bHQgZm9yIGVsZW1lbnQgdHlwZVxuXHRcdFx0XHQvLyBGaW5kIGRlZmF1bHQgZWRpdG9yIGZvciBkYXRhdHlwZVxuXHRcdFx0XHR2YXIgZWRpdG9yID0gXy5nZXRNYXRjaCh0aGlzLmVsZW1lbnQsIF8uZWRpdG9ycyk7XG5cblx0XHRcdFx0aWYgKGVkaXRvci5jcmVhdGUpIHtcblx0XHRcdFx0XHQkLmV4dGVuZCh0aGlzLCBlZGl0b3IsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByb3BlcnR5ICE9IFwiY3JlYXRlXCI7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgY3JlYXRlID0gZWRpdG9yLmNyZWF0ZSB8fCBlZGl0b3I7XG5cdFx0XHRcdHRoaXMuZWRpdG9yID0gJC5jcmVhdGUoJC50eXBlKGNyZWF0ZSkgPT09IFwiZnVuY3Rpb25cIiA/IGNyZWF0ZS5jYWxsKHRoaXMpIDogY3JlYXRlKTtcblx0XHRcdFx0dGhpcy5lZGl0b3JWYWx1ZSA9IHRoaXMudmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWRpdG9yLl8uZXZlbnRzKHtcblx0XHRcdFx0XCJpbnB1dCBjaGFuZ2VcIjogZnVuY3Rpb24gaW5wdXRDaGFuZ2UoZXZ0KSB7XG5cdFx0XHRcdFx0dmFyIHVuc2F2ZWRDaGFuZ2VzID0gX3RoaXMyNC53eXNpZS51bnNhdmVkQ2hhbmdlcztcblxuXHRcdFx0XHRcdF90aGlzMjQudmFsdWUgPSBfdGhpczI0LmVkaXRvclZhbHVlO1xuXG5cdFx0XHRcdFx0Ly8gRWRpdGluZyBleHBvc2VkIGVsZW1lbnRzIG91dHNpZGUgZWRpdCBtb2RlIGlzIGluc3RhbnRseSBzYXZlZFxuXHRcdFx0XHRcdGlmIChfdGhpczI0LmV4cG9zZWQgJiYgIV90aGlzMjQud3lzaWUuZWRpdGluZyAmJiAvLyBtdXN0IG5vdCBiZSBpbiBlZGl0IG1vZGVcblx0XHRcdFx0XHRfdGhpczI0Lnd5c2llLnBlcm1pc3Npb25zLnNhdmUgJiYgLy8gbXVzdCBiZSBhYmxlIHRvIHNhdmVcblx0XHRcdFx0XHRfdGhpczI0LnNjb3BlLmV2ZXJTYXZlZCAvLyBtdXN0IG5vdCBjYXVzZSB1bnNhdmVkIGl0ZW1zIHRvIGJlIHNhdmVkXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE8gd2hhdCBpZiBjaGFuZ2UgZXZlbnQgbmV2ZXIgZmlyZXM/IFdoYXQgaWYgdXNlclxuXHRcdFx0XHRcdFx0XHRfdGhpczI0LnVuc2F2ZWRDaGFuZ2VzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdF90aGlzMjQud3lzaWUudW5zYXZlZENoYW5nZXMgPSB1bnNhdmVkQ2hhbmdlcztcblxuXHRcdFx0XHRcdFx0XHQvLyBNdXN0IG5vdCBzYXZlIHRvbyBtYW55IHRpbWVzIChlLmcuIG5vdCB3aGlsZSBkcmFnZ2luZyBhIHNsaWRlcilcblx0XHRcdFx0XHRcdFx0aWYgKGV2dC50eXBlID09IFwiY2hhbmdlXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRfdGhpczI0LnNhdmUoKTsgLy8gU2F2ZSBjdXJyZW50IGVsZW1lbnRcblxuXHRcdFx0XHRcdFx0XHRcdC8vIERvbuKAmXQgY2FsbCB0aGlzLnd5c2llLnNhdmUoKSBhcyBpdCB3aWxsIHNhdmUgb3RoZXIgZmllbGRzIHRvb1xuXHRcdFx0XHRcdFx0XHRcdC8vIFdlIG9ubHkgd2FudCB0byBzYXZlIGV4cG9zZWQgY29udHJvbHMsIHNvIHNhdmUgY3VycmVudCBzdGF0dXNcblx0XHRcdFx0XHRcdFx0XHRfdGhpczI0Lnd5c2llLnN0b3JhZ2Uuc2F2ZSgpO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQXJlIHRoZXJlIGFueSB1bnNhdmVkIGNoYW5nZXMgZnJvbSBvdGhlciBwcm9wZXJ0aWVzP1xuXHRcdFx0XHRcdFx0XHRcdF90aGlzMjQud3lzaWUudW5zYXZlZENoYW5nZXMgPSBfdGhpczI0Lnd5c2llLmNhbGN1bGF0ZVVuc2F2ZWRDaGFuZ2VzKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiBmb2N1cyhldnQpIHtcblx0XHRcdFx0XHRfdGhpczI0LmVkaXRvci5zZWxlY3QgJiYgX3RoaXMyNC5lZGl0b3Iuc2VsZWN0KCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwia2V5dXBcIjogZnVuY3Rpb24ga2V5dXAoZXZ0KSB7XG5cdFx0XHRcdFx0aWYgKF90aGlzMjQucG9wdXAgJiYgZXZ0LmtleUNvZGUgPT0gMTMgfHwgZXZ0LmtleUNvZGUgPT0gMjcpIHtcblx0XHRcdFx0XHRcdGlmIChfdGhpczI0LnBvcHVwLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG5cdFx0XHRcdFx0XHRcdF90aGlzMjQuZWxlbWVudC5mb2N1cygpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRfdGhpczI0LmhpZGVQb3B1cCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ3eXNpZTpkYXRhY2hhbmdlXCI6IGZ1bmN0aW9uIHd5c2llRGF0YWNoYW5nZShldnQpIHtcblx0XHRcdFx0XHRpZiAoZXZ0LnByb3BlcnR5ID09PSBcIm91dHB1dFwiKSB7XG5cdFx0XHRcdFx0XHRldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHQkLmZpcmUoX3RoaXMyNC5lZGl0b3IsIFwiaW5wdXRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKFwicGxhY2Vob2xkZXJcIiBpbiB0aGlzLmVkaXRvcikge1xuXHRcdFx0XHR0aGlzLmVkaXRvci5wbGFjZWhvbGRlciA9IFwiKFwiICsgdGhpcy5sYWJlbCArIFwiKVwiO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMuZXhwb3NlZCkge1xuXHRcdFx0XHQvLyBDb3B5IGFueSBkYXRhLWlucHV0LSogYXR0cmlidXRlcyBmcm9tIHRoZSBlbGVtZW50IHRvIHRoZSBlZGl0b3Jcblx0XHRcdFx0dmFyIGRhdGFJbnB1dCA9IC9eZGF0YS1pbnB1dC0vaTtcblx0XHRcdFx0JCQodGhpcy5lbGVtZW50LmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuXHRcdFx0XHRcdGlmIChkYXRhSW5wdXQudGVzdChhdHRyaWJ1dGUubmFtZSkpIHtcblx0XHRcdFx0XHRcdHRoaXMuZWRpdG9yLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZS5yZXBsYWNlKGRhdGFJbnB1dCwgXCJcIiksIGF0dHJpYnV0ZS52YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCB0aGlzKTtcblxuXHRcdFx0XHRpZiAodGhpcy5hdHRyaWJ1dGUpIHtcblx0XHRcdFx0XHQvLyBTZXQgdXAgcG9wdXBcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInVzaW5nLXBvcHVwXCIpO1xuXG5cdFx0XHRcdFx0dGhpcy5wb3B1cCA9IHRoaXMucG9wdXAgfHwgJC5jcmVhdGUoXCJkaXZcIiwge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lOiBcInd5c2llLXBvcHVwXCIsXG5cdFx0XHRcdFx0XHRoaWRkZW46IHRydWUsXG5cdFx0XHRcdFx0XHRjb250ZW50czogW3RoaXMubGFiZWwgKyBcIjpcIiwgdGhpcy5lZGl0b3JdXG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvLyBObyBwb2ludCBpbiBoYXZpbmcgYSBkcm9wZG93biBpbiBhIHBvcHVwXG5cdFx0XHRcdFx0aWYgKHRoaXMuZWRpdG9yLm1hdGNoZXMoXCJzZWxlY3RcIikpIHtcblx0XHRcdFx0XHRcdHRoaXMuZWRpdG9yLnNpemUgPSBNYXRoLm1pbigxMCwgdGhpcy5lZGl0b3IuY2hpbGRyZW4ubGVuZ3RoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBUb2dnbGUgcG9wdXAgZXZlbnRzICYgbWV0aG9kc1xuXHRcdFx0XHRcdHZhciBoaWRlQ2FsbGJhY2sgPSBmdW5jdGlvbiBoaWRlQ2FsbGJhY2soZXZ0KSB7XG5cdFx0XHRcdFx0XHRpZiAoIV90aGlzMjQucG9wdXAuY29udGFpbnMoZXZ0LnRhcmdldCkgJiYgIV90aGlzMjQuZWxlbWVudC5jb250YWlucyhldnQudGFyZ2V0KSkge1xuXHRcdFx0XHRcdFx0XHRfdGhpczI0LmhpZGVQb3B1cCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHR0aGlzLnNob3dQb3B1cCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdCQudW5iaW5kKFt0aGlzLmVsZW1lbnQsIHRoaXMucG9wdXBdLCBcIi53eXNpZTpzaG93cG9wdXBcIik7XG5cdFx0XHRcdFx0XHR0aGlzLnBvcHVwLl8uYWZ0ZXIodGhpcy5lbGVtZW50KTtcblxuXHRcdFx0XHRcdFx0dmFyIHggPSB0aGlzLmVsZW1lbnQub2Zmc2V0TGVmdDtcblx0XHRcdFx0XHRcdHZhciB5ID0gdGhpcy5lbGVtZW50Lm9mZnNldFRvcCArIHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0XHRcdC8vIFRPRE8gd2hhdCBpZiBpdCBkb2VzbuKAmXQgZml0P1xuXHRcdFx0XHRcdFx0dGhpcy5wb3B1cC5fLnN0eWxlKHsgdG9wOiB5ICsgXCJweFwiLCBsZWZ0OiB4ICsgXCJweFwiIH0pO1xuXG5cdFx0XHRcdFx0XHR0aGlzLnBvcHVwLl8ucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpOyAvLyB0cmlnZ2VyIHRyYW5zaXRpb25cblxuXHRcdFx0XHRcdFx0JC5ldmVudHMoZG9jdW1lbnQsIFwiZm9jdXMgY2xpY2tcIiwgaGlkZUNhbGxiYWNrLCB0cnVlKTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0dGhpcy5oaWRlUG9wdXAgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHR2YXIgX3RoaXMyNSA9IHRoaXM7XG5cblx0XHRcdFx0XHRcdCQudW5iaW5kKGRvY3VtZW50LCBcImZvY3VzIGNsaWNrXCIsIGhpZGVDYWxsYmFjaywgdHJ1ZSk7XG5cblx0XHRcdFx0XHRcdHRoaXMucG9wdXAuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsIFwiXCIpOyAvLyB0cmlnZ2VyIHRyYW5zaXRpb25cblxuXHRcdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdCQucmVtb3ZlKF90aGlzMjUucG9wdXApO1xuXHRcdFx0XHRcdFx0fSwgNDAwKTsgLy8gVE9ETyB0cmFuc2l0aW9uLWR1cmF0aW9uIGNvdWxkIG92ZXJyaWRlIHRoaXNcblxuXHRcdFx0XHRcdFx0JC5ldmVudHModGhpcy5lbGVtZW50LCBcImZvY3VzLnd5c2llOnNob3dwb3B1cCBjbGljay53eXNpZTpzaG93cG9wdXBcIiwgZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0XHRcdFx0XHRfdGhpczI1LnNob3dQb3B1cCgpO1xuXHRcdFx0XHRcdFx0fSwgdHJ1ZSk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMucG9wdXApIHtcblx0XHRcdFx0dGhpcy5lZGl0b3IuY2xhc3NMaXN0LmFkZChcInd5c2llLWVkaXRvclwiKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5pbml0RWRpdCA9IG51bGw7XG5cdFx0fSxcblxuXHRcdGVkaXQ6IGZ1bmN0aW9uIGVkaXQoKSB7XG5cdFx0XHRpZiAodGhpcy5jb21wdXRlZCB8fCB0aGlzLmVkaXRpbmcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVsZW1lbnQuXy51bmJpbmQoXCIud3lzaWU6cHJlZWRpdFwiKTtcblxuXHRcdFx0aWYgKHRoaXMuaW5pdEVkaXQpIHtcblx0XHRcdFx0dGhpcy5pbml0RWRpdCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5wb3B1cCkge1xuXHRcdFx0XHR0aGlzLnNob3dQb3B1cCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMuYXR0cmlidXRlKSB7XG5cdFx0XHRcdGlmICh0aGlzLmVkaXRvci5wYXJlbnROb2RlICE9IHRoaXMuZWxlbWVudCAmJiAhdGhpcy5leHBvc2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5lZGl0b3JWYWx1ZSA9IHRoaXMudmFsdWU7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdFx0XHRcdGlmICghdGhpcy5leHBvc2VkKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5lZGl0b3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVkaXRpbmcgPSB0cnVlO1xuXHRcdH0sIC8vIGVkaXRcblxuXHRcdGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcblx0XHRcdHRoaXMudmFsdWUgPSB0aGlzLmVtcHR5VmFsdWU7XG5cdFx0fSxcblxuXHRcdGltcG9ydDogZnVuY3Rpb24gX2ltcG9ydCgpIHtcblx0XHRcdGlmICghdGhpcy5jb21wdXRlZCkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdGhpcy50ZW1wbGF0ZVZhbHVlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihkYXRhKSB7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVswXTsgLy8gVE9ETyB3aGF0IGlzIGdvbm5hIGhhcHBlbiB0byB0aGUgcmVzdD8gTG9zdD9cblx0XHRcdH1cblxuXHRcdFx0aWYgKCh0eXBlb2YgZGF0YSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRhdGEpKSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRkYXRhID0gZGF0YVt0aGlzLnByb3BlcnR5XTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy52YWx1ZSA9IGRhdGEgPT09IHVuZGVmaW5lZCA/IHRoaXMuZW1wdHlWYWx1ZSA6IGRhdGE7XG5cblx0XHRcdHRoaXMuc2F2ZSgpO1xuXHRcdH0sXG5cblx0XHRmaW5kOiBmdW5jdGlvbiBmaW5kKHByb3BlcnR5KSB7XG5cdFx0XHRpZiAodGhpcy5wcm9wZXJ0eSA9PSBwcm9wZXJ0eSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b2JzZXJ2ZTogZnVuY3Rpb24gb2JzZXJ2ZSgpIHtcblx0XHRcdFd5c2llLm9ic2VydmUodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJpYnV0ZSwgdGhpcy5vYnNlcnZlcik7XG5cdFx0fSxcblxuXHRcdHVub2JzZXJ2ZTogZnVuY3Rpb24gdW5vYnNlcnZlKCkge1xuXHRcdFx0dGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG5cdFx0fSxcblxuXHRcdGxhenk6IHtcblx0XHRcdGxhYmVsOiBmdW5jdGlvbiBsYWJlbCgpIHtcblx0XHRcdFx0cmV0dXJuIFd5c2llLnJlYWRhYmxlKHRoaXMucHJvcGVydHkpO1xuXHRcdFx0fSxcblxuXHRcdFx0ZW1wdHlWYWx1ZTogZnVuY3Rpb24gZW1wdHlWYWx1ZSgpIHtcblx0XHRcdFx0c3dpdGNoICh0aGlzLmRhdGF0eXBlKSB7XG5cdFx0XHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRjYXNlIFwibnVtYmVyXCI6XG5cdFx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBcIlwiO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRsaXZlOiB7XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24gZW1wdHkodmFsdWUpIHtcblx0XHRcdFx0dmFyIGhpZGUgPSAodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwpICYmICEodGhpcy5hdHRyaWJ1dGUgJiYgJChXeXNpZS5zZWxlY3RvcnMucHJvcGVydHksIHRoaXMuZWxlbWVudCkpO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImVtcHR5XCIsIGhpZGUpO1xuXHRcdFx0fSxcblxuXHRcdFx0ZWRpdGluZzogZnVuY3Rpb24gZWRpdGluZyh2YWx1ZSkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImVkaXRpbmdcIiwgdmFsdWUpO1xuXHRcdFx0fSxcblxuXHRcdFx0Y29tcHV0ZWQ6IGZ1bmN0aW9uIGNvbXB1dGVkKHZhbHVlKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiY29tcHV0ZWRcIiwgdmFsdWUpO1xuXHRcdFx0fSxcblxuXHRcdFx0ZGF0YXR5cGU6IGZ1bmN0aW9uIGRhdGF0eXBlKHZhbHVlKSB7XG5cdFx0XHRcdC8vIFB1cmdlIGNhY2hlcyBpZiBkYXRhdHlwZSBjaGFuZ2VzXG5cdFx0XHRcdGlmIChfLmdldFZhbHVlLmNhY2hlKSB7XG5cdFx0XHRcdFx0Xy5nZXRWYWx1ZS5jYWNoZS5kZWxldGUodGhpcy5lbGVtZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzdGF0aWM6IHtcblx0XHRcdGFsbDogbmV3IFdlYWtNYXAoKSxcblxuXHRcdFx0Z2V0TWF0Y2g6IGZ1bmN0aW9uIGdldE1hdGNoKGVsZW1lbnQsIGFsbCkge1xuXHRcdFx0XHQvLyBUT0RPIHNwZWNpZmljaXR5XG5cdFx0XHRcdHZhciByZXQgPSBudWxsO1xuXG5cdFx0XHRcdGZvciAodmFyIHNlbGVjdG9yIGluIGFsbCkge1xuXHRcdFx0XHRcdGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG5cdFx0XHRcdFx0XHRyZXQgPSBhbGxbc2VsZWN0b3JdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9LFxuXG5cdFx0XHRnZXRWYWx1ZUF0dHJpYnV0ZTogZnVuY3Rpb24gY2FsbGVlKGVsZW1lbnQpIHtcblx0XHRcdFx0dmFyIHJldCA9IChjYWxsZWUuY2FjaGUgPSBjYWxsZWUuY2FjaGUgfHwgbmV3IFdlYWtNYXAoKSkuZ2V0KGVsZW1lbnQpO1xuXG5cdFx0XHRcdGlmIChyZXQgPT09IHVuZGVmaW5lZCB8fCBESVNBQkxFX0NBQ0hFKSB7XG5cdFx0XHRcdFx0cmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWF0dHJpYnV0ZVwiKSB8fCBfLmdldE1hdGNoKGVsZW1lbnQsIF8uYXR0cmlidXRlcyk7XG5cblx0XHRcdFx0XHQvLyBUT0RPIHJlZmFjdG9yIHRoaXNcblx0XHRcdFx0XHRpZiAocmV0KSB7XG5cdFx0XHRcdFx0XHRpZiAocmV0Lmh1bWFuUmVhZGFibGUgJiYgXy5hbGwuaGFzKGVsZW1lbnQpKSB7XG5cdFx0XHRcdFx0XHRcdF8uYWxsLmdldChlbGVtZW50KS5odW1hblJlYWRhYmxlID0gcmV0Lmh1bWFuUmVhZGFibGU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldCA9IHJldC52YWx1ZSB8fCByZXQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFyZXQgfHwgcmV0ID09PSBcIm51bGxcIikge1xuXHRcdFx0XHRcdFx0cmV0ID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYWxsZWUuY2FjaGUuc2V0KGVsZW1lbnQsIHJldCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fSxcblxuXHRcdFx0Z2V0RGF0YXR5cGU6IGZ1bmN0aW9uIGNhbGxlZShlbGVtZW50LCBhdHRyaWJ1dGUpIHtcblx0XHRcdFx0dmFyIHJldCA9IChjYWxsZWUuY2FjaGUgPSBjYWxsZWUuY2FjaGUgfHwgbmV3IFdlYWtNYXAoKSkuZ2V0KGVsZW1lbnQpO1xuXG5cdFx0XHRcdGlmIChyZXQgPT09IHVuZGVmaW5lZCB8fCBESVNBQkxFX0NBQ0hFKSB7XG5cdFx0XHRcdFx0cmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhdHlwZVwiKTtcblxuXHRcdFx0XHRcdGlmICghcmV0KSB7XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBzZWxlY3RvciBpbiBfLmRhdGF0eXBlcykge1xuXHRcdFx0XHRcdFx0XHRpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuXHRcdFx0XHRcdFx0XHRcdHJldCA9IF8uZGF0YXR5cGVzW3NlbGVjdG9yXVthdHRyaWJ1dGVdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0ID0gcmV0IHx8IFwic3RyaW5nXCI7XG5cblx0XHRcdFx0XHRjYWxsZWUuY2FjaGUuc2V0KGVsZW1lbnQsIHJldCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fSxcblxuXHRcdFx0Z2V0VmFsdWU6IGZ1bmN0aW9uIGNhbGxlZShlbGVtZW50LCBhdHRyaWJ1dGUsIGRhdGF0eXBlKSB7XG5cdFx0XHRcdHZhciBnZXR0ZXIgPSAoY2FsbGVlLmNhY2hlID0gY2FsbGVlLmNhY2hlIHx8IG5ldyBXZWFrTWFwKCkpLmdldChlbGVtZW50KTtcblxuXHRcdFx0XHRpZiAoIWdldHRlciB8fCBESVNBQkxFX0NBQ0hFKSB7XG5cdFx0XHRcdFx0YXR0cmlidXRlID0gYXR0cmlidXRlIHx8IGF0dHJpYnV0ZSA9PT0gbnVsbCA/IGF0dHJpYnV0ZSA6IF8uZ2V0VmFsdWVBdHRyaWJ1dGUoZWxlbWVudCk7XG5cdFx0XHRcdFx0ZGF0YXR5cGUgPSBkYXRhdHlwZSB8fCBfLmdldERhdGF0eXBlKGVsZW1lbnQsIGF0dHJpYnV0ZSk7XG5cblx0XHRcdFx0XHRnZXR0ZXIgPSBmdW5jdGlvbiBnZXR0ZXIoKSB7XG5cdFx0XHRcdFx0XHR2YXIgcmV0O1xuXG5cdFx0XHRcdFx0XHRpZiAoYXR0cmlidXRlIGluIGVsZW1lbnQgJiYgXy51c2VQcm9wZXJ0eShlbGVtZW50LCBhdHRyaWJ1dGUpKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldHVybmluZyBwcm9wZXJ0aWVzIChpZiB0aGV5IGV4aXN0KSBpbnN0ZWFkIG9mIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0Ly8gaXMgbmVlZGVkIGZvciBkeW5hbWljIGVsZW1lbnRzIHN1Y2ggYXMgY2hlY2tib3hlcywgc2xpZGVycyBldGNcblx0XHRcdFx0XHRcdFx0cmV0ID0gZWxlbWVudFthdHRyaWJ1dGVdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChhdHRyaWJ1dGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKSB8fCBlbGVtZW50LnRleHRDb250ZW50IHx8IG51bGw7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoZGF0YXR5cGUpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiArcmV0O1xuXHRcdFx0XHRcdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAhIXJldDtcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRjYWxsZWUuY2FjaGUuc2V0KGVsZW1lbnQsIGdldHRlcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZ2V0dGVyKCk7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRWYWx1ZTogZnVuY3Rpb24gY2FsbGVlKGVsZW1lbnQsIHZhbHVlLCBhdHRyaWJ1dGUpIHtcblx0XHRcdFx0aWYgKGF0dHJpYnV0ZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZSB8fCBfLmdldFZhbHVlQXR0cmlidXRlKGVsZW1lbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGF0dHJpYnV0ZSBpbiBlbGVtZW50ICYmIF8udXNlUHJvcGVydHkoZWxlbWVudCwgYXR0cmlidXRlKSAmJiBlbGVtZW50W2F0dHJpYnV0ZV0gIT0gdmFsdWUpIHtcblx0XHRcdFx0XHQvLyBTZXR0aW5nIHByb3BlcnRpZXMgKGlmIHRoZXkgZXhpc3QpIGluc3RlYWQgb2YgYXR0cmlidXRlc1xuXHRcdFx0XHRcdC8vIGlzIG5lZWRlZCBmb3IgZHluYW1pYyBlbGVtZW50cyBzdWNoIGFzIGNoZWNrYm94ZXMsIHNsaWRlcnMgZXRjXG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVsZW1lbnRbYXR0cmlidXRlXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgYXR0cmlidXRlIGFueXdheSwgZXZlbiBpZiB3ZSBzZXQgYSBwcm9wZXJ0eSBiZWNhdXNlIHdoZW5cblx0XHRcdFx0Ly8gdGhleSdyZSBub3QgaW4gc3luYyBpdCBnZXRzIHJlYWxseSBmdWNraW5nIGNvbmZ1c2luZy5cblx0XHRcdFx0aWYgKGF0dHJpYnV0ZSkge1xuXHRcdFx0XHRcdGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9IHZhbHVlKSB7XG5cdFx0XHRcdFx0XHQvLyBpbnRlbnRpb25hbGx5IG5vbi1zdHJpY3QsIGUuZy4gXCIzLlwiICE9PSAzXG5cdFx0XHRcdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcbiAgICAqICBTZXQvZ2V0IGEgcHJvcGVydHkgb3IgYW4gYXR0cmlidXRlP1xuICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSB0byB1c2UgYSBwcm9wZXJ0eSwgZmFsc2UgdG8gdXNlIHRoZSBhdHRyaWJ1dGVcbiAgICAqL1xuXHRcdFx0dXNlUHJvcGVydHk6IGZ1bmN0aW9uIHVzZVByb3BlcnR5KGVsZW1lbnQsIGF0dHJpYnV0ZSkge1xuXHRcdFx0XHRpZiAoW1wiaHJlZlwiLCBcInNyY1wiXS5pbmRleE9mKGF0dHJpYnV0ZSkgPiAtMSkge1xuXHRcdFx0XHRcdC8vIFVSTCBwcm9wZXJ0aWVzIHJlc29sdmUgXCJcIiBhcyBsb2NhdGlvbi5ocmVmLCBmdWNraW5nIHVwIGVtcHRpbmVzcyBjaGVja3Ncblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZWxlbWVudC5uYW1lc3BhY2VVUkkgPT0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSB7XG5cdFx0XHRcdFx0Ly8gU1ZHIGhhcyBhIGZ1Y2tlZCB1cCBET00sIGRvIG5vdCB1c2UgdGhlc2UgcHJvcGVydGllc1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gRGVmaW5lIGRlZmF1bHQgYXR0cmlidXRlc1xuXHRfLmF0dHJpYnV0ZXMgPSB7XG5cdFx0XCJpbWcsIHZpZGVvLCBhdWRpb1wiOiBcInNyY1wiLFxuXHRcdFwiYSwgbGlua1wiOiBcImhyZWZcIixcblx0XHRcInNlbGVjdCwgaW5wdXQsIHRleHRhcmVhLCBtZXRlciwgcHJvZ3Jlc3NcIjogXCJ2YWx1ZVwiLFxuXHRcdFwiaW5wdXRbdHlwZT1jaGVja2JveF1cIjogXCJjaGVja2VkXCIsXG5cdFx0XCJ0aW1lXCI6IHtcblx0XHRcdHZhbHVlOiBcImRhdGV0aW1lXCIsXG5cdFx0XHRodW1hblJlYWRhYmxlOiBmdW5jdGlvbiBodW1hblJlYWRhYmxlKHZhbHVlKSB7XG5cdFx0XHRcdHZhciBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xuXG5cdFx0XHRcdGlmICghdmFsdWUgfHwgaXNOYU4oZGF0ZSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCIoTm8gXCIgKyB0aGlzLmxhYmVsICsgXCIpXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUT0RPIGRvIHRoaXMgcHJvcGVybHkgKGFjY291bnQgZm9yIG90aGVyIGRhdGV0aW1lIGRhdGF0eXBlcyBhbmQgZGlmZmVyZW50IGZvcm1hdHMpXG5cdFx0XHRcdHZhciBvcHRpb25zID0ge1xuXHRcdFx0XHRcdFwiZGF0ZVwiOiB7IGRheTogXCJudW1lcmljXCIsIG1vbnRoOiBcInNob3J0XCIsIHllYXI6IFwibnVtZXJpY1wiIH0sXG5cdFx0XHRcdFx0XCJtb250aFwiOiB7IG1vbnRoOiBcImxvbmdcIiB9LFxuXHRcdFx0XHRcdFwidGltZVwiOiB7IGhvdXI6IFwibnVtZXJpY1wiLCBtaW51dGU6IFwibnVtZXJpY1wiIH0sXG5cdFx0XHRcdFx0XCJkYXRldGltZS1sb2NhbFwiOiB7IGRheTogXCJudW1lcmljXCIsIG1vbnRoOiBcInNob3J0XCIsIHllYXI6IFwibnVtZXJpY1wiLCBob3VyOiBcIm51bWVyaWNcIiwgbWludXRlOiBcIm51bWVyaWNcIiB9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dmFyIGZvcm1hdCA9IG9wdGlvbnNbdGhpcy5lZGl0b3IgJiYgdGhpcy5lZGl0b3IudHlwZV0gfHwgb3B0aW9ucy5kYXRlO1xuXHRcdFx0XHRmb3JtYXQudGltZVpvbmUgPSBcIlVUQ1wiO1xuXG5cdFx0XHRcdHJldHVybiBkYXRlLnRvTG9jYWxlU3RyaW5nKFwiZW4tR0JcIiwgZm9ybWF0KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwibWV0YVwiOiBcImNvbnRlbnRcIlxuXHR9O1xuXG5cdC8vIEJhc2ljIGRhdGF0eXBlcyBwZXIgYXR0cmlidXRlXG5cdC8vIE9ubHkgbnVtYmVyLCBib29sZWFuXG5cdF8uZGF0YXR5cGVzID0ge1xuXHRcdFwiaW5wdXRbdHlwZT1jaGVja2JveF1cIjoge1xuXHRcdFx0XCJjaGVja2VkXCI6IFwiYm9vbGVhblwiXG5cdFx0fSxcblx0XHRcImlucHV0W3R5cGU9cmFuZ2VdLCBpbnB1dFt0eXBlPW51bWJlcl0sIG1ldGVyLCBwcm9ncmVzc1wiOiB7XG5cdFx0XHRcInZhbHVlXCI6IFwibnVtYmVyXCJcblx0XHR9XG5cdH07XG5cblx0Xy5lZGl0b3JzID0ge1xuXHRcdFwiKlwiOiB7IFwidGFnXCI6IFwiaW5wdXRcIiB9LFxuXG5cdFx0XCIubnVtYmVyXCI6IHtcblx0XHRcdFwidGFnXCI6IFwiaW5wdXRcIixcblx0XHRcdFwidHlwZVwiOiBcIm51bWJlclwiXG5cdFx0fSxcblxuXHRcdFwiLmJvb2xlYW5cIjoge1xuXHRcdFx0XCJ0YWdcIjogXCJpbnB1dFwiLFxuXHRcdFx0XCJ0eXBlXCI6IFwiY2hlY2tib3hcIlxuXHRcdH0sXG5cblx0XHRcImEsIGltZywgdmlkZW8sIGF1ZGlvLCAudXJsXCI6IHtcblx0XHRcdFwidGFnXCI6IFwiaW5wdXRcIixcblx0XHRcdFwidHlwZVwiOiBcInVybFwiLFxuXHRcdFx0XCJwbGFjZWhvbGRlclwiOiBcImh0dHA6Ly9cIlxuXHRcdH0sXG5cblx0XHQvLyBCbG9jayBlbGVtZW50c1xuXHRcdFwicCwgZGl2LCBsaSwgZHQsIGRkLCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBhcnRpY2xlLCBzZWN0aW9uLCAubXVsdGlsaW5lXCI6IHtcblx0XHRcdGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuXHRcdFx0XHR2YXIgZGlzcGxheSA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50KS5kaXNwbGF5O1xuXHRcdFx0XHR2YXIgdGFnID0gZGlzcGxheS5pbmRleE9mKFwiaW5saW5lXCIpID09PSAwID8gXCJpbnB1dFwiIDogXCJ0ZXh0YXJlYVwiO1xuXHRcdFx0XHR2YXIgZWRpdG9yID0gJC5jcmVhdGUodGFnKTtcblxuXHRcdFx0XHRpZiAodGFnID09IFwidGV4dGFyZWFcIikge1xuXHRcdFx0XHRcdHZhciB3aWR0aCA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcblxuXHRcdFx0XHRcdGlmICh3aWR0aCkge1xuXHRcdFx0XHRcdFx0ZWRpdG9yLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVkaXRvcjtcblx0XHRcdH0sXG5cblx0XHRcdGdldCBlZGl0b3JWYWx1ZSgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWRpdG9yICYmIHRoaXMuZWRpdG9yLnZhbHVlO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0IGVkaXRvclZhbHVlKHZhbHVlKSB7XG5cdFx0XHRcdGlmICh0aGlzLmVkaXRvcikge1xuXHRcdFx0XHRcdHRoaXMuZWRpdG9yLnZhbHVlID0gdmFsdWUgPyB2YWx1ZS5yZXBsYWNlKC9cXHI/XFxuL2csIFwiXCIpIDogXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRcIm1ldGVyLCBwcm9ncmVzc1wiOiBmdW5jdGlvbiBtZXRlclByb2dyZXNzKCkge1xuXHRcdFx0cmV0dXJuICQuY3JlYXRlKHtcblx0XHRcdFx0dGFnOiBcImlucHV0XCIsXG5cdFx0XHRcdHR5cGU6IFwicmFuZ2VcIixcblx0XHRcdFx0bWluOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibWluXCIpIHx8IDAsXG5cdFx0XHRcdG1heDogdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcIm1heFwiKSB8fCAxMDBcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcInRpbWUsIC5kYXRlXCI6IGZ1bmN0aW9uIHRpbWVEYXRlKCkge1xuXHRcdFx0dmFyIHR5cGVzID0ge1xuXHRcdFx0XHRcImRhdGVcIjogL15bWVxcZF17NH0tW01cXGRdezJ9LVtEXFxkXXsyfSQvaSxcblx0XHRcdFx0XCJtb250aFwiOiAvXltZXFxkXXs0fS1bTVxcZF17Mn0kL2ksXG5cdFx0XHRcdFwidGltZVwiOiAvXltIXFxkXXsyfTpbTVxcZF17Mn0vaSxcblx0XHRcdFx0XCJ3ZWVrXCI6IC9bWVxcZF17NH0tV1tXXFxkXXsyfSQvaSxcblx0XHRcdFx0XCJkYXRldGltZS1sb2NhbFwiOiAvXltZXFxkXXs0fS1bTVxcZF17Mn0tW0RcXGRdezJ9IFtIXFxkXXsyfTpbTVxcZF17Mn0vaVxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGRhdGV0aW1lID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGV0aW1lXCIpIHx8IFwiWVlZWS1NTS1ERFwiO1xuXG5cdFx0XHRmb3IgKHZhciB0eXBlIGluIHR5cGVzKSB7XG5cdFx0XHRcdGlmICh0eXBlc1t0eXBlXS50ZXN0KGRhdGV0aW1lKSkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAkLmNyZWF0ZShcImlucHV0XCIsIHsgdHlwZTogdHlwZSB9KTtcblx0XHR9XG5cdH07XG59KShCbGlzcywgQmxpc3MuJCk7XG5cbi8vIEltYWdlIHVwbG9hZCB3aWRnZXQgdmlhIGltZ3VyXG5XeXNpZS5QcmltaXRpdmUuZWRpdG9ycy5pbWcgPSB7XG5cdGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuXHRcdHZhciByb290ID0gJC5jcmVhdGUoXCJkaXZcIiwge1xuXHRcdFx0Y2xhc3NOYW1lOiBcImltYWdlLXBvcHVwXCIsXG5cdFx0XHRldmVudHM6IHtcblx0XHRcdFx0XCJkcmFnZW50ZXIgZHJhZ292ZXIgZHJvcFwiOiBmdW5jdGlvbiBkcmFnZW50ZXJEcmFnb3ZlckRyb3AoZXZ0KSB7XG5cdFx0XHRcdFx0ZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGRyb3A6IGZ1bmN0aW9uIGRyb3AoZXZ0KSB7XG5cdFx0XHRcdFx0dmFyIGZpbGUgPSAkLnZhbHVlKGV2dC5kYXRhVHJhbnNmZXIsIFwiZmlsZXNcIiwgMCk7XG5cblx0XHRcdFx0XHQvLyBEbyB1cGxvYWQgc3R1ZmZcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNvbnRlbnRzOiBbe1xuXHRcdFx0XHR0YWc6IFwiaW5wdXRcIixcblx0XHRcdFx0dHlwZTogXCJ1cmxcIixcblx0XHRcdFx0Y2xhc3NOYW1lOiBcInZhbHVlXCJcblx0XHRcdH0sIHtcblx0XHRcdFx0dGFnOiBcImxhYmVsXCIsXG5cdFx0XHRcdGNsYXNzTmFtZTogXCJ1cGxvYWRcIixcblx0XHRcdFx0Y29udGVudHM6IFtcIlVwbG9hZDogXCIsIHtcblx0XHRcdFx0XHR0YWc6IFwiaW5wdXRcIixcblx0XHRcdFx0XHR0eXBlOiBcImZpbGVcIixcblx0XHRcdFx0XHRhY2NlcHQ6IFwiaW1hZ2UvKlwiLFxuXHRcdFx0XHRcdGV2ZW50czoge1xuXHRcdFx0XHRcdFx0Y2hhbmdlOiBmdW5jdGlvbiBjaGFuZ2UoZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdHZhciBmaWxlID0gdGhpcy5maWxlc1swXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIWZpbGUpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyBTaG93IGltYWdlIGxvY2FsbHlcblx0XHRcdFx0XHRcdFx0JChcImltZ1wiLCByb290KS5maWxlID0gZmlsZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBVcGxvYWRcblxuXHRcdFx0XHRcdFx0XHQvLyBPbmNlIHVwbG9hZGVkLCBzaGFyZSBhbmQgZ2V0IHB1YmxpYyBVUkxcblxuXHRcdFx0XHRcdFx0XHQvLyBTZXQgcHVibGljIFVSTCBhcyB0aGUgdmFsdWUgb2YgdGhlIFVSTCBpbnB1dFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fV1cblx0XHRcdH0sIHtcblx0XHRcdFx0Y2xhc3NOYW1lOiBcImltYWdlLXByZXZpZXdcIixcblx0XHRcdFx0Y29udGVudHM6IFt7XG5cdFx0XHRcdFx0dGFnOiBcInByb2dyZXNzXCIsXG5cdFx0XHRcdFx0dmFsdWU6IFwiMFwiLFxuXHRcdFx0XHRcdG1heDogXCIxMDBcIlxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0dGFnOiBcImltZ1wiXG5cdFx0XHRcdH1dXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGNsYXNzTmFtZTogXCJ0aXBcIixcblx0XHRcdFx0aW5uZXJIVE1MOiBcIjxzdHJvbmc+VGlwOjwvc3Ryb25nPiBZb3UgY2FuIGFsc28gZHJhZyAmIGRyb3Agb3IgcGFzdGUgdGhlIGltYWdlIHRvIGJlIHVwbG9hZGVkIVwiXG5cdFx0XHR9XSB9KTtcblxuXHRcdHJldHVybiByb290O1xuXHR9XG59O1xuXG4oZnVuY3Rpb24gKCQsICQkKSB7XG5cblx0dmFyIF8gPSBXeXNpZS5Db2xsZWN0aW9uID0gJC5DbGFzcyh7XG5cdFx0ZXh0ZW5kczogV3lzaWUuTm9kZSxcblx0XHRjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoZWxlbWVudCwgd3lzaWUpIHtcblx0XHRcdC8qXG4gICAgKiBDcmVhdGUgdGhlIHRlbXBsYXRlLCByZW1vdmUgaXQgZnJvbSB0aGUgRE9NIGFuZCBzdG9yZSBpdFxuICAgICovXG5cdFx0XHR0aGlzLnRlbXBsYXRlID0gZWxlbWVudDtcblxuXHRcdFx0dGhpcy5pdGVtcyA9IFtdO1xuXG5cdFx0XHQvLyBBTEwgZGVzY2VuZGFudCBwcm9wZXJ0eSBuYW1lcyBhcyBhbiBhcnJheVxuXHRcdFx0dGhpcy5wcm9wZXJ0aWVzID0gJCQoV3lzaWUuc2VsZWN0b3JzLnByb3BlcnR5LCB0aGlzLnRlbXBsYXRlKS5fLmdldEF0dHJpYnV0ZShcInByb3BlcnR5XCIpO1xuXG5cdFx0XHR0aGlzLm11dGFibGUgPSB0aGlzLnRlbXBsYXRlLm1hdGNoZXMoV3lzaWUuc2VsZWN0b3JzLm11bHRpcGxlKTtcblxuXHRcdFx0V3lzaWUuaG9va3MucnVuKFwiY29sbGVjdGlvbi1pbml0LWVuZFwiLCB0aGlzKTtcblx0XHR9LFxuXG5cdFx0Z2V0IGxlbmd0aCgpIHtcblx0XHRcdHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0Ly8gQ29sbGVjdGlvbiBzdGlsbCBjb250YWlucyBpdHMgdGVtcGxhdGUgYXMgZGF0YVxuXHRcdGdldCBjb250YWluc1RlbXBsYXRlKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoICYmIHRoaXMuaXRlbXNbMF0uZWxlbWVudCA9PT0gdGhpcy5lbGVtZW50O1xuXHRcdH0sXG5cblx0XHRnZXREYXRhOiBmdW5jdGlvbiBnZXREYXRhKG8pIHtcblx0XHRcdG8gPSBvIHx8IHt9O1xuXG5cdFx0XHR2YXIgZGF0YSA9IFtdO1xuXG5cdFx0XHR0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0aWYgKCFpdGVtLmRlbGV0ZWQpIHtcblx0XHRcdFx0XHR2YXIgaXRlbURhdGEgPSBpdGVtLmdldERhdGEobyk7XG5cblx0XHRcdFx0XHRpZiAoaXRlbURhdGEpIHtcblx0XHRcdFx0XHRcdGRhdGEucHVzaChpdGVtRGF0YSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKCFvLmRpcnR5ICYmIHRoaXMudW5oYW5kbGVkKSB7XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnVuaGFuZGxlZC5iZWZvcmUuY29uY2F0KGRhdGEsIHRoaXMudW5oYW5kbGVkLmFmdGVyKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fSxcblxuXHRcdC8vIENyZWF0ZSBpdGVtIGJ1dCBkb24ndCBpbnNlcnQgaXQgYW55d2hlcmVcblx0XHQvLyBNb3N0bHkgdXNlZCBpbnRlcm5hbGx5XG5cdFx0Y3JlYXRlSXRlbTogZnVuY3Rpb24gY3JlYXRlSXRlbShlbGVtZW50KSB7XG5cdFx0XHR2YXIgX3RoaXMyNiA9IHRoaXM7XG5cblx0XHRcdHZhciBlbGVtZW50ID0gZWxlbWVudCB8fCB0aGlzLnRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcblxuXHRcdFx0dmFyIGl0ZW0gPSBXeXNpZS5Vbml0LmNyZWF0ZShlbGVtZW50LCB0aGlzLnd5c2llLCB0aGlzKTtcblxuXHRcdFx0Ly8gQWRkIGRlbGV0ZSAmIGFkZCBidXR0b25zXG5cdFx0XHRpZiAodGhpcy5tdXRhYmxlKSB7XG5cdFx0XHRcdCQuY3JlYXRlKHtcblx0XHRcdFx0XHR0YWc6IFwibWVudVwiLFxuXHRcdFx0XHRcdHR5cGU6IFwidG9vbGJhclwiLFxuXHRcdFx0XHRcdGNsYXNzTmFtZTogXCJ3eXNpZS1pdGVtLWNvbnRyb2xzIHd5c2llLXVpXCIsXG5cdFx0XHRcdFx0Y29udGVudHM6IFt7XG5cdFx0XHRcdFx0XHR0YWc6IFwiYnV0dG9uXCIsXG5cdFx0XHRcdFx0XHR0aXRsZTogXCJEZWxldGUgdGhpcyBcIiArIHRoaXMubmFtZSxcblx0XHRcdFx0XHRcdGNsYXNzTmFtZTogXCJkZWxldGVcIixcblx0XHRcdFx0XHRcdGV2ZW50czoge1xuXHRcdFx0XHRcdFx0XHRcImNsaWNrXCI6IGZ1bmN0aW9uIGNsaWNrKGV2dCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBfdGhpczI2LmRlbGV0ZShpdGVtKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRcdHRhZzogXCJidXR0b25cIixcblx0XHRcdFx0XHRcdHRpdGxlOiBcIkFkZCBuZXcgXCIgKyB0aGlzLm5hbWUucmVwbGFjZSgvcyQvaSwgXCJcIiksXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU6IFwiYWRkXCIsXG5cdFx0XHRcdFx0XHRldmVudHM6IHtcblx0XHRcdFx0XHRcdFx0XCJjbGlja1wiOiBmdW5jdGlvbiBjbGljayhldnQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXMyNi5hZGQobnVsbCwgX3RoaXMyNi5pdGVtcy5pbmRleE9mKGl0ZW0pKS5lZGl0KCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XSxcblx0XHRcdFx0XHRpbnNpZGU6IGVsZW1lbnRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpdGVtO1xuXHRcdH0sXG5cblx0XHRhZGQ6IGZ1bmN0aW9uIGFkZChpdGVtLCBpbmRleCwgc2lsZW50KSB7XG5cdFx0XHRpZiAoaXRlbSBpbnN0YW5jZW9mIE5vZGUpIHtcblx0XHRcdFx0aXRlbSA9IFd5c2llLlVuaXQuZ2V0KGl0ZW0pIHx8IHRoaXMuY3JlYXRlSXRlbShpdGVtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtIHx8IHRoaXMuY3JlYXRlSXRlbSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaW5kZXggaW4gdGhpcy5pdGVtcykge1xuXHRcdFx0XHRpdGVtLmVsZW1lbnQuXy5hZnRlcih0aGlzLml0ZW1zW2luZGV4XS5lbGVtZW50KTtcblxuXHRcdFx0XHR0aGlzLml0ZW1zLnNwbGljZShpbmRleCwgMCwgaXRlbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIWl0ZW0uZWxlbWVudC5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMubXV0YWJsZSkge1xuXHRcdFx0XHRcdFx0dmFyIHByZWNlZGluZyA9IHRoaXMuYm90dG9tVXAgJiYgdGhpcy5pdGVtcy5sZW5ndGggPiAwID8gdGhpcy5pdGVtc1swXS5lbGVtZW50IDogdGhpcy5tYXJrZXI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZhciBwcmVjZWRpbmcgPSB0aGlzLml0ZW1zW3RoaXMubGVuZ3RoIC0gMV0uZWxlbWVudDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpdGVtLmVsZW1lbnQuXy5iZWZvcmUocHJlY2VkaW5nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuaXRlbXMucHVzaChpdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFzaWxlbnQpIHtcblx0XHRcdFx0aXRlbS5lbGVtZW50Ll8uZmlyZShcInd5c2llOmRhdGFjaGFuZ2VcIiwge1xuXHRcdFx0XHRcdG5vZGU6IHRoaXMsXG5cdFx0XHRcdFx0d3lzaWU6IHRoaXMud3lzaWUsXG5cdFx0XHRcdFx0YWN0aW9uOiBcImFkZFwiLFxuXHRcdFx0XHRcdGl0ZW06IGl0ZW1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aXRlbS51bnNhdmVkQ2hhbmdlcyA9IHRoaXMud3lzaWUudW5zYXZlZENoYW5nZXMgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaXRlbTtcblx0XHR9LFxuXG5cdFx0cHJvcGFnYXRlOiBmdW5jdGlvbiBwcm9wYWdhdGUoKSB7XG5cdFx0XHR2YXIgX2FyZ3VtZW50czIgPSBhcmd1bWVudHM7XG5cblx0XHRcdHRoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gaXRlbS5jYWxsLmFwcGx5KGl0ZW0sIF9hcmd1bWVudHMyKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoaXRlbSwgaGFyZCkge1xuXHRcdFx0dmFyIF90aGlzMjcgPSB0aGlzO1xuXG5cdFx0XHRpZiAoaGFyZCkge1xuXHRcdFx0XHQvLyBIYXJkIGRlbGV0ZVxuXHRcdFx0XHQkLnJlbW92ZShpdGVtLmVsZW1lbnQpO1xuXHRcdFx0XHR0aGlzLml0ZW1zLnNwbGljZSh0aGlzLml0ZW1zLmluZGV4T2YoaXRlbSksIDEpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAkLnRyYW5zaXRpb24oaXRlbS5lbGVtZW50LCB7IG9wYWNpdHk6IDAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGl0ZW0uZGVsZXRlZCA9IHRydWU7IC8vIHNjaGVkdWxlIGZvciBkZWxldGlvblxuXHRcdFx0XHRpdGVtLmVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IFwiXCI7XG5cblx0XHRcdFx0aXRlbS5lbGVtZW50Ll8uZmlyZShcInd5c2llOmRhdGFjaGFuZ2VcIiwge1xuXHRcdFx0XHRcdG5vZGU6IF90aGlzMjcsXG5cdFx0XHRcdFx0d3lzaWU6IF90aGlzMjcud3lzaWUsXG5cdFx0XHRcdFx0YWN0aW9uOiBcImRlbGV0ZVwiLFxuXHRcdFx0XHRcdGl0ZW06IGl0ZW1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aXRlbS51bnNhdmVkQ2hhbmdlcyA9IF90aGlzMjcud3lzaWUudW5zYXZlZENoYW5nZXMgPSB0cnVlO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGVkaXQ6IGZ1bmN0aW9uIGVkaXQoKSB7XG5cdFx0XHRpZiAodGhpcy5sZW5ndGggPT09IDAgJiYgdGhpcy5yZXF1aXJlZCkge1xuXHRcdFx0XHQvLyBOZXN0ZWQgY29sbGVjdGlvbiB3aXRoIG5vIGl0ZW1zLCBhZGQgb25lXG5cdFx0XHRcdHZhciBpdGVtID0gdGhpcy5hZGQobnVsbCwgbnVsbCwgdHJ1ZSk7XG5cblx0XHRcdFx0aXRlbS5wbGFjZWhvbGRlciA9IHRydWU7XG5cdFx0XHRcdGl0ZW0ud2FsayhmdW5jdGlvbiAob2JqKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iai51bnNhdmVkQ2hhbmdlcyA9IGZhbHNlO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQkLm9uY2UoaXRlbS5lbGVtZW50LCBcInd5c2llOmRhdGFjaGFuZ2VcIiwgZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0XHRcdGl0ZW0udW5zYXZlZENoYW5nZXMgPSB0cnVlO1xuXHRcdFx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIgPSBmYWxzZTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucHJvcGFnYXRlKGZ1bmN0aW9uIChvYmopIHtcblx0XHRcdFx0cmV0dXJuIG9ialtvYmoucHJlRWRpdCA/IFwicHJlRWRpdFwiIDogXCJlZGl0XCJdKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0LyoqXG4gICAqIERlbGV0ZSBhbGwgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuXHRcdGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcblx0XHRcdGlmICh0aGlzLm11dGFibGUpIHtcblx0XHRcdFx0dGhpcy5wcm9wYWdhdGUoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbS5lbGVtZW50LnJlbW92ZSgpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLml0ZW1zID0gW107XG5cblx0XHRcdFx0dGhpcy5tYXJrZXIuXy5maXJlKFwid3lzaWU6ZGF0YWNoYW5nZVwiLCB7XG5cdFx0XHRcdFx0bm9kZTogdGhpcyxcblx0XHRcdFx0XHR3eXNpZTogdGhpcy53eXNpZSxcblx0XHRcdFx0XHRhY3Rpb246IFwiY2xlYXJcIlxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHtcblx0XHRcdHZhciBfdGhpczI4ID0gdGhpcztcblxuXHRcdFx0dGhpcy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdGlmIChpdGVtLmRlbGV0ZWQpIHtcblx0XHRcdFx0XHRfdGhpczI4LmRlbGV0ZShpdGVtLCB0cnVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpdGVtLnVuc2F2ZWRDaGFuZ2VzID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRkb25lOiBmdW5jdGlvbiBkb25lKCkge1xuXHRcdFx0dmFyIF90aGlzMjkgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0aWYgKGl0ZW0ucGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRfdGhpczI5LmRlbGV0ZShpdGVtLCB0cnVlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRwcm9wYWdhdGVkOiBbXCJzYXZlXCIsIFwiZG9uZVwiXSxcblxuXHRcdHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KCkge1xuXHRcdFx0dmFyIF90aGlzMzAgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcblx0XHRcdFx0Ly8gRGVsZXRlIGFkZGVkIGl0ZW1zXG5cdFx0XHRcdGlmICghaXRlbS5ldmVyU2F2ZWQgJiYgIWl0ZW0ucGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRfdGhpczMwLmRlbGV0ZShpdGVtLCB0cnVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBCcmluZyBiYWNrIGRlbGV0ZWQgaXRlbXNcblx0XHRcdFx0XHRpZiAoaXRlbS5kZWxldGVkKSB7XG5cdFx0XHRcdFx0XHRpdGVtLmRlbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZXZlcnQgYWxsIHByb3BlcnRpZXNcblx0XHRcdFx0XHRpdGVtLnJldmVydCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0aW1wb3J0OiBmdW5jdGlvbiBfaW1wb3J0KCkge1xuXHRcdFx0aWYgKHRoaXMubXV0YWJsZSkge1xuXHRcdFx0XHR0aGlzLmFkZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uaW1wb3J0KCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoZGF0YSkge1xuXHRcdFx0dmFyIF90aGlzMzEgPSB0aGlzO1xuXG5cdFx0XHR0aGlzLnVuaGFuZGxlZCA9IHsgYmVmb3JlOiBbXSwgYWZ0ZXI6IFtdIH07XG5cblx0XHRcdGlmICghZGF0YSkge1xuXHRcdFx0XHRpZiAoZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRpZiAoIXRoaXMuY2xvc2VzdENvbGxlY3Rpb24gfHwgdGhpcy5jbG9zZXN0Q29sbGVjdGlvbi5jb250YWluc1RlbXBsYXRlKSB7XG5cdFx0XHRcdFx0XHQvLyBUaGlzIGlzIG5vdCBjb250YWluZWQgaW4gYW55IG90aGVyIGNvbGxlY3Rpb24sIGRpc3BsYXkgdGVtcGxhdGUgZGF0YVxuXHRcdFx0XHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdFx0XHRcdFx0dGhpcy5pbXBvcnQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGRhdGEgPSBkYXRhICYmIFd5c2llLnRvQXJyYXkoZGF0YSk7XG5cblx0XHRcdGlmICghdGhpcy5tdXRhYmxlKSB7XG5cdFx0XHRcdHRoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtLnJlbmRlcihkYXRhICYmIGRhdGFbaV0pO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZiAoZGF0YSkge1xuXHRcdFx0XHRcdHRoaXMudW5oYW5kbGVkLmFmdGVyID0gZGF0YS5zbGljZSh0aGlzLml0ZW1zLmxlbmd0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Ly8gVXNpbmcgZG9jdW1lbnQgZnJhZ21lbnRzIGltcHJvdmVkIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBieSA2MCVcblx0XHRcdFx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG5cdFx0XHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZGF0dW0pIHtcblx0XHRcdFx0XHR2YXIgaXRlbSA9IF90aGlzMzEuY3JlYXRlSXRlbSgpO1xuXG5cdFx0XHRcdFx0aXRlbS5yZW5kZXIoZGF0dW0pO1xuXG5cdFx0XHRcdFx0X3RoaXMzMS5pdGVtcy5wdXNoKGl0ZW0pO1xuXG5cdFx0XHRcdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoaXRlbS5lbGVtZW50KTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy5tYXJrZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZnJhZ21lbnQsIHRoaXMubWFya2VyKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zYXZlKCk7XG5cdFx0fSxcblxuXHRcdGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJvcGVydHkpIHtcblx0XHRcdHZhciBpdGVtcyA9IHRoaXMuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHRcdHJldHVybiAhaXRlbS5kZWxldGVkO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmICh0aGlzLnByb3BlcnR5ID09IHByb3BlcnR5KSB7XG5cdFx0XHRcdHJldHVybiBpdGVtcztcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMucHJvcGVydGllcy5pbmRleE9mKHByb3BlcnR5KSA+IC0xKSB7XG5cdFx0XHRcdHZhciByZXQgPSBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbS5maW5kKHByb3BlcnR5KTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuIFd5c2llLmZsYXR0ZW4ocmV0KTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0bGl2ZToge1xuXHRcdFx0bXV0YWJsZTogZnVuY3Rpb24gbXV0YWJsZSh2YWx1ZSkge1xuXHRcdFx0XHRpZiAodmFsdWUgJiYgdmFsdWUgIT09IHRoaXMubXV0YWJsZSkge1xuXHRcdFx0XHRcdHRoaXMud3lzaWUubmVlZHNFZGl0ID0gdHJ1ZTtcblxuXHRcdFx0XHRcdHRoaXMucmVxdWlyZWQgPSB0aGlzLnRlbXBsYXRlLm1hdGNoZXMoV3lzaWUuc2VsZWN0b3JzLnJlcXVpcmVkKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcG9zaXRpb24gb2YgdGhlIHRlbXBsYXRlIGluIHRoZSBET00sIHNpbmNlIHdl4oCZcmUgZ29ubmEgcmVtb3ZlIGl0XG5cdFx0XHRcdFx0dGhpcy5tYXJrZXIgPSAkLmNyZWF0ZShcImRpdlwiLCB7XG5cdFx0XHRcdFx0XHRoaWRkZW46IHRydWUsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU6IFwid3lzaWUtbWFya2VyXCIsXG5cdFx0XHRcdFx0XHRhZnRlcjogdGhpcy50ZW1wbGF0ZVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0dGhpcy50ZW1wbGF0ZS5jbGFzc0xpc3QuYWRkKFwid3lzaWUtaXRlbVwiKTtcblxuXHRcdFx0XHRcdHRoaXMudGVtcGxhdGUucmVtb3ZlKCk7XG5cblx0XHRcdFx0XHQvLyBJbnNlcnQgdGhlIGFkZCBidXR0b24gaWYgaXQncyBub3QgYWxyZWFkeSBpbiB0aGUgRE9NXG5cdFx0XHRcdFx0aWYgKCF0aGlzLmFkZEJ1dHRvbi5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5ib3R0b21VcCkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmFkZEJ1dHRvbi5fLmJlZm9yZSgkLnZhbHVlKHRoaXMuaXRlbXNbMF0sIFwiZWxlbWVudFwiKSB8fCB0aGlzLm1hcmtlcik7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGFnID0gdGhpcy5lbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdFx0dmFyIGNvbnRhaW5lclNlbGVjdG9yID0gV3lzaWUuc2VsZWN0b3JzLmNvbnRhaW5lclt0YWddO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChjb250YWluZXJTZWxlY3Rvcikge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBhZnRlciA9IHRoaXMubWFya2VyLmNsb3Nlc3QoY29udGFpbmVyU2VsZWN0b3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dGhpcy5hZGRCdXR0b24uXy5hZnRlcihhZnRlciAmJiBhZnRlci5wYXJlbnROb2RlID8gYWZ0ZXIgOiB0aGlzLm1hcmtlcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy50ZW1wbGF0ZSA9IHRoaXMuZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0bGF6eToge1xuXHRcdFx0Ym90dG9tVXA6IGZ1bmN0aW9uIGJvdHRvbVVwKCkge1xuXHRcdFx0XHQvKlxuICAgICAqIEFkZCBuZXcgaXRlbXMgYXQgdGhlIHRvcCBvciBib3R0b20/XG4gICAgICovXG5cdFx0XHRcdGlmICghdGhpcy5tdXRhYmxlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMudGVtcGxhdGUuaGFzQXR0cmlidXRlKFwiZGF0YS1ib3R0b211cFwiKSkge1xuXHRcdFx0XHRcdC8vIEF0dHJpYnV0ZSBkYXRhLWJvdHRvbXVwIGhhcyB0aGUgaGlnaGVzdCBwcmlvcml0eSBhbmQgb3ZlcnJpZGVzIGFueSBoZXVyaXN0aWNzXG5cdFx0XHRcdFx0Ly8gVE9ETyB3aGF0IGlmIHdlIHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGhldXJpc3RpY3MgYW5kIHNldCBpdCB0byBmYWxzZT9cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdGhpcy5hZGRCdXR0b24ucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdC8vIElmIGFkZCBidXR0b24gbm90IGluIERPTSwgZG8gdGhlIGRlZmF1bHRcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiBhZGQgYnV0dG9uIGlzIGFscmVhZHkgaW4gdGhlIERPTSBhbmQgKmJlZm9yZSogb3VyIHRlbXBsYXRlLCB0aGVuIHdlIGRlZmF1bHQgdG8gcHJlcGVuZGluZ1xuXHRcdFx0XHRyZXR1cm4gISEodGhpcy5hZGRCdXR0b24uY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcy50ZW1wbGF0ZSkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyk7XG5cdFx0XHR9LFxuXG5cdFx0XHRjbG9zZXN0Q29sbGVjdGlvbjogZnVuY3Rpb24gY2xvc2VzdENvbGxlY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLm1hcmtlciA/IHRoaXMubWFya2VyLnBhcmVudE5vZGUgOiB0aGlzLnRlbXBsYXRlLnBhcmVudE5vZGU7XG5cblx0XHRcdFx0cmV0dXJuIHBhcmVudC5jbG9zZXN0KFd5c2llLnNlbGVjdG9ycy5pdGVtKTtcblx0XHRcdH0sXG5cblx0XHRcdGFkZEJ1dHRvbjogZnVuY3Rpb24gYWRkQnV0dG9uKCkge1xuXHRcdFx0XHR2YXIgX3RoaXMzMiA9IHRoaXM7XG5cblx0XHRcdFx0Ly8gRmluZCBhZGQgYnV0dG9uIGlmIHByb3ZpZGVkLCBvciBnZW5lcmF0ZSBvbmVcblx0XHRcdFx0dmFyIHNlbGVjdG9yID0gXCJidXR0b24uYWRkLVwiICsgdGhpcy5wcm9wZXJ0eTtcblx0XHRcdFx0dmFyIHNjb3BlID0gdGhpcy5jbG9zZXN0Q29sbGVjdGlvbiB8fCB0aGlzLm1hcmtlci5jbG9zZXN0KFd5c2llLnNlbGVjdG9ycy5zY29wZSk7XG5cblx0XHRcdFx0aWYgKHNjb3BlKSB7XG5cdFx0XHRcdFx0dmFyIGJ1dHRvbiA9ICQkKHNlbGVjdG9yLCBzY29wZSkuZmlsdGVyKGZ1bmN0aW9uIChidXR0b24pIHtcblx0XHRcdFx0XHRcdHJldHVybiAhX3RoaXMzMi50ZW1wbGF0ZS5jb250YWlucyhidXR0b24pO1xuXHRcdFx0XHRcdH0pWzBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFidXR0b24pIHtcblx0XHRcdFx0XHRidXR0b24gPSAkLmNyZWF0ZShcImJ1dHRvblwiLCB7XG5cdFx0XHRcdFx0XHRjbGFzc05hbWU6IFwiYWRkXCIsXG5cdFx0XHRcdFx0XHR0ZXh0Q29udGVudDogXCJBZGQgXCIgKyB0aGlzLm5hbWVcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRidXR0b24uY2xhc3NMaXN0LmFkZChcInd5c2llLXVpXCIsIFwid3lzaWUtYWRkXCIpO1xuXG5cdFx0XHRcdGlmICh0aGlzLnByb3BlcnR5KSB7XG5cdFx0XHRcdFx0YnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJhZGQtXCIgKyB0aGlzLnByb3BlcnR5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2dCkge1xuXHRcdFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0X3RoaXMzMi5hZGQoKS5lZGl0KCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBidXR0b247XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn0pKEJsaXNzLCBCbGlzcy4kKTtcblxuLypcbkNvcHlyaWdodCAoYykgMjAwOSBKYW1lcyBQYWRvbHNleS4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxubW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zXG5hcmUgbWV0OlxuXG4gICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuXHQgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuICAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcblx0ICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG5cdCAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBKYW1lcyBQYWRvbHNleSBgYEFTIElTXCJcIiBBTkRcbkFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbkFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBKYW1lcyBQYWRvbHNleSBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFXG5GT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxuREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1JcblNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSXG5DQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1RcbkxJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVlcbk9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0ZcblNVQ0ggREFNQUdFLlxuXG5UaGUgdmlld3MgYW5kIGNvbmNsdXNpb25zIGNvbnRhaW5lZCBpbiB0aGUgc29mdHdhcmUgYW5kIGRvY3VtZW50YXRpb24gYXJlXG50aG9zZSBvZiB0aGUgYXV0aG9ycyBhbmQgc2hvdWxkIG5vdCBiZSBpbnRlcnByZXRlZCBhcyByZXByZXNlbnRpbmcgb2ZmaWNpYWxcbnBvbGljaWVzLCBlaXRoZXIgZXhwcmVzc2VkIG9yIGltcGxpZWQsIG9mIEphbWVzIFBhZG9sc2V5LlxuXG4gQVVUSE9SIEphbWVzIFBhZG9sc2V5IChodHRwOi8vamFtZXMucGFkb2xzZXkuY29tKVxuIFZFUlNJT04gMS4wMy4wXG4gVVBEQVRFRCAyOS0xMC0yMDExXG4gQ09OVFJJQlVUT1JTXG5cdERhdmlkIFdhbGxlclxuICAgIEJlbmphbWluIERydWNrZXJcblxuKi9cblxudmFyIHByZXR0eVByaW50ID0gZnVuY3Rpb24gKCkge1xuXG5cdC8qIFRoZXNlIFwidXRpbFwiIGZ1bmN0aW9ucyBhcmUgbm90IHBhcnQgb2YgdGhlIGNvcmVcbiAgICBmdW5jdGlvbmFsaXR5IGJ1dCBhcmUgIGFsbCBuZWNlc3NhcnkgLSBtb3N0bHkgRE9NIGhlbHBlcnMgKi9cblxuXHR2YXIgdXRpbCA9IHtcblxuXHRcdHR4dDogZnVuY3Rpb24gdHh0KHQpIHtcblx0XHRcdC8qIENyZWF0ZSB0ZXh0IG5vZGUgKi9cblx0XHRcdHQgPSB0ICsgXCJcIjtcblx0XHRcdHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KTtcblx0XHR9LFxuXG5cdFx0cm93OiBmdW5jdGlvbiByb3coY2VsbHMsIHR5cGUsIGNlbGxUeXBlKSB7XG5cblx0XHRcdC8qIENyZWF0ZXMgbmV3IDx0cj4gKi9cblx0XHRcdGNlbGxUeXBlID0gY2VsbFR5cGUgfHwgXCJ0ZFwiO1xuXG5cdFx0XHQvKiBjb2xTcGFuIGlzIGNhbGN1bGF0ZWQgYnkgbGVuZ3RoIG9mIG51bGwgaXRlbXMgaW4gYXJyYXkgKi9cblx0XHRcdHZhciBjb2xTcGFuID0gdXRpbC5jb3VudChjZWxscywgbnVsbCkgKyAxLFxuXHRcdFx0ICAgIHRyID0gJC5jcmVhdGUoXCJ0clwiKSxcblx0XHRcdCAgICB0ZCxcblx0XHRcdCAgICBhdHRycyA9IHtcblx0XHRcdFx0Y29sU3BhbjogY29sU3BhblxuXHRcdFx0fTtcblxuXHRcdFx0JCQoY2VsbHMpLmZvckVhY2goZnVuY3Rpb24gKGNlbGwpIHtcblx0XHRcdFx0aWYgKGNlbGwgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvKiBEZWZhdWx0IGNlbGwgdHlwZSBpcyA8dGQ+ICovXG5cdFx0XHRcdHRkID0gJC5jcmVhdGUoY2VsbFR5cGUsIGF0dHJzKTtcblxuXHRcdFx0XHRpZiAoY2VsbC5ub2RlVHlwZSkge1xuXHRcdFx0XHRcdC8qIElzRG9tRWxlbWVudCAqL1xuXHRcdFx0XHRcdHRkLmFwcGVuZENoaWxkKGNlbGwpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8qIElzU3RyaW5nICovXG5cdFx0XHRcdFx0dGQuaW5uZXJIVE1MID0gdXRpbC5zaG9ydGVuKGNlbGwudG9TdHJpbmcoKSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ci5hcHBlbmRDaGlsZCh0ZCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHRyO1xuXHRcdH0sXG5cblx0XHRoUm93OiBmdW5jdGlvbiBoUm93KGNlbGxzLCB0eXBlKSB7XG5cdFx0XHQvKiBSZXR1cm4gbmV3IDx0aD4gKi9cblx0XHRcdHJldHVybiB1dGlsLnJvdyhjZWxscywgdHlwZSwgXCJ0aFwiKTtcblx0XHR9LFxuXG5cdFx0dGFibGU6IGZ1bmN0aW9uIHRhYmxlKGhlYWRpbmdzLCB0eXBlKSB7XG5cblx0XHRcdGhlYWRpbmdzID0gaGVhZGluZ3MgfHwgW107XG5cblx0XHRcdC8qIENyZWF0ZXMgbmV3IHRhYmxlOiAqL1xuXHRcdFx0dmFyIHRibCA9ICQuY3JlYXRlKFwidGFibGVcIik7XG5cdFx0XHR2YXIgdGhlYWQgPSAkLmNyZWF0ZShcInRoZWFkXCIpO1xuXHRcdFx0dmFyIHRib2R5ID0gJC5jcmVhdGUoXCJ0Ym9keVwiKTtcblxuXHRcdFx0dGJsLmNsYXNzTGlzdC5hZGQodHlwZSk7XG5cblx0XHRcdGlmIChoZWFkaW5ncy5sZW5ndGgpIHtcblx0XHRcdFx0dGJsLmFwcGVuZENoaWxkKHRoZWFkKTtcblx0XHRcdFx0dGhlYWQuYXBwZW5kQ2hpbGQodXRpbC5oUm93KGhlYWRpbmdzLCB0eXBlKSk7XG5cdFx0XHR9XG5cblx0XHRcdHRibC5hcHBlbmRDaGlsZCh0Ym9keSk7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC8qIEZhY2FkZSBmb3IgZGVhbGluZyB3aXRoIHRhYmxlL3Rib2R5XG4gICAgICAgQWN0dWFsIHRhYmxlIG5vZGUgaXMgdGhpcy5ub2RlOiAqL1xuXHRcdFx0XHRub2RlOiB0YmwsXG5cdFx0XHRcdHRib2R5OiB0Ym9keSxcblx0XHRcdFx0dGhlYWQ6IHRoZWFkLFxuXHRcdFx0XHRhcHBlbmRDaGlsZDogZnVuY3Rpb24gYXBwZW5kQ2hpbGQobm9kZSkge1xuXHRcdFx0XHRcdHRoaXMudGJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFkZFJvdzogZnVuY3Rpb24gYWRkUm93KGNlbGxzLCBfdHlwZSwgY2VsbFR5cGUpIHtcblx0XHRcdFx0XHR0aGlzLmFwcGVuZENoaWxkKHV0aWwucm93KGNlbGxzLCBfdHlwZSB8fCB0eXBlLCBjZWxsVHlwZSkpO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRzaG9ydGVuOiBmdW5jdGlvbiBzaG9ydGVuKHN0cikge1xuXHRcdFx0dmFyIG1heCA9IDQwO1xuXHRcdFx0c3RyID0gc3RyLnJlcGxhY2UoL15cXHNcXHMqfFxcc1xccyokfFxcbi9nLCBcIlwiKTtcblx0XHRcdHJldHVybiBzdHIubGVuZ3RoID4gbWF4ID8gc3RyLnN1YnN0cmluZygwLCBtYXggLSAxKSArIFwiLi4uXCIgOiBzdHI7XG5cdFx0fSxcblxuXHRcdGh0bWxlbnRpdGllczogZnVuY3Rpb24gaHRtbGVudGl0aWVzKHN0cikge1xuXHRcdFx0cmV0dXJuIHN0ci5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLCBcIiZsdDtcIikucmVwbGFjZSgvPi9nLCBcIiZndDtcIik7XG5cdFx0fSxcblxuXHRcdGNvdW50OiBmdW5jdGlvbiBjb3VudChhcnIsIGl0ZW0pIHtcblx0XHRcdHZhciBjb3VudCA9IDA7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0aWYgKGFycltpXSA9PT0gaXRlbSkge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudDtcblx0XHR9LFxuXG5cdFx0dGhlYWQ6IGZ1bmN0aW9uIHRoZWFkKHRibCkge1xuXHRcdFx0cmV0dXJuIHRibC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRoZWFkXCIpWzBdO1xuXHRcdH0sXG5cblx0XHR3aXRoaW46IGZ1bmN0aW9uIHdpdGhpbihyZWYpIHtcblx0XHRcdC8qIENoZWNrIGV4aXN0ZW5jZSBvZiBhIHZhbCB3aXRoaW4gYW4gb2JqZWN0XG4gICAgICBSRVRVUk5TIEtFWSAqL1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0aXM6IGZ1bmN0aW9uIGlzKG8pIHtcblx0XHRcdFx0XHRmb3IgKHZhciBpIGluIHJlZikge1xuXHRcdFx0XHRcdFx0aWYgKHJlZltpXSA9PT0gbykge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGNvbW1vbjoge1xuXHRcdFx0Y2lyY1JlZjogZnVuY3Rpb24gY2lyY1JlZihvYmosIGtleSwgc2V0dGluZ3MpIHtcblx0XHRcdFx0cmV0dXJuIHV0aWwuZXhwYW5kZXIoXCJbUE9JTlRTIEJBQ0sgVE8gPHN0cm9uZz5cIiArIGtleSArIFwiPC9zdHJvbmc+XVwiLCBcIkNsaWNrIHRvIHNob3cgdGhpcyBpdGVtIGFueXdheVwiLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHByZXR0eVByaW50VGhpcyhvYmosIHsgbWF4RGVwdGg6IDEgfSkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0XHRkZXB0aFJlYWNoZWQ6IGZ1bmN0aW9uIGRlcHRoUmVhY2hlZChvYmosIHNldHRpbmdzKSB7XG5cdFx0XHRcdHJldHVybiB1dGlsLmV4cGFuZGVyKFwiW0RFUFRIIFJFQUNIRURdXCIsIFwiQ2xpY2sgdG8gc2hvdyB0aGlzIGl0ZW0gYW55d2F5XCIsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHByZXR0eVByaW50VGhpcyhvYmosIHsgbWF4RGVwdGg6IDEgfSkpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh1dGlsLnRhYmxlKFtcIkVSUk9SIE9DQ1VSRUQgRFVSSU5HIE9CSkVDVCBSRVRSSUVWQUxcIl0sIFwiZXJyb3JcIikuYWRkUm93KFtlLm1lc3NhZ2VdKS5ub2RlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRleHBhbmRlcjogZnVuY3Rpb24gZXhwYW5kZXIodGV4dCwgdGl0bGUsIGNsaWNrRm4pIHtcblx0XHRcdHJldHVybiAkLmNyZWF0ZShcImFcIiwge1xuXHRcdFx0XHRpbm5lckhUTUw6IHV0aWwuc2hvcnRlbih0ZXh0KSArICcgPGIgc3R5bGU9XCJ2aXNpYmlsaXR5OmhpZGRlbjtcIj5bK108L2I+Jyxcblx0XHRcdFx0dGl0bGU6IHRpdGxlLFxuXHRcdFx0XHRvbm1vdXNlb3ZlcjogZnVuY3Rpb24gb25tb3VzZW92ZXIoKSB7XG5cdFx0XHRcdFx0dGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJcIilbMF0uc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbm1vdXNlb3V0OiBmdW5jdGlvbiBvbm1vdXNlb3V0KCkge1xuXHRcdFx0XHRcdHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJiXCIpWzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbmNsaWNrOiBmdW5jdGlvbiBvbmNsaWNrKCkge1xuXHRcdFx0XHRcdHRoaXMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdFx0XHRcdGNsaWNrRm4uY2FsbCh0aGlzKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0Y3Vyc29yOiBcInBvaW50ZXJcIlxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0Ly8gTWFpbi4uXG5cdHZhciBwcmV0dHlQcmludFRoaXMgPSBmdW5jdGlvbiBwcmV0dHlQcmludFRoaXMob2JqLCBvcHRpb25zKSB7XG5cblx0XHQvKlxuICAqXHQgIG9iaiA6OiBPYmplY3QgdG8gYmUgcHJpbnRlZFxuICAqICBvcHRpb25zIDo6IE9wdGlvbnMgKG1lcmdlZCB3aXRoIGNvbmZpZylcbiAgKi9cblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHNldHRpbmdzID0gJC5leHRlbmQoe30sIHByZXR0eVByaW50VGhpcy5jb25maWcsIG9wdGlvbnMpLFxuXHRcdCAgICBjb250YWluZXIgPSAkLmNyZWF0ZShcImRpdlwiKSxcblx0XHQgICAgY29uZmlnID0gcHJldHR5UHJpbnRUaGlzLmNvbmZpZyxcblx0XHQgICAgY3VycmVudERlcHRoID0gMCxcblx0XHQgICAgc3RhY2sgPSB7fSxcblx0XHQgICAgaGFzUnVuT25jZSA9IGZhbHNlO1xuXG5cdFx0LyogRXhwb3NlIHBlci1jYWxsIHNldHRpbmdzLlxuICAgICBOb3RlOiBcImNvbmZpZ1wiIGlzIG92ZXJ3cml0dGVuICh3aGVyZSBuZWNlc3NhcnkpIGJ5IG9wdGlvbnMvXCJzZXR0aW5nc1wiXG4gICAgIFNvLCBpZiB5b3UgbmVlZCB0byBhY2Nlc3MvY2hhbmdlICpERUZBVUxUKiBzZXR0aW5ncyB0aGVuIGdvIHZpYSBcIi5jb25maWdcIiAqL1xuXHRcdHByZXR0eVByaW50VGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuXG5cdFx0dmFyIHR5cGVEZWFsZXIgPSB7XG5cdFx0XHRzdHJpbmc6IGZ1bmN0aW9uIHN0cmluZyhpdGVtKSB7XG5cdFx0XHRcdHJldHVybiB1dGlsLnR4dCgnXCInICsgdXRpbC5zaG9ydGVuKGl0ZW0ucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpKSArICdcIicpO1xuXHRcdFx0fSxcblxuXHRcdFx0b2JqZWN0OiBmdW5jdGlvbiBvYmplY3Qob2JqLCBkZXB0aCwga2V5KSB7XG5cblx0XHRcdFx0LyogQ2hlY2tpbmcgZGVwdGggKyBjaXJjdWxhciByZWZzICovXG5cdFx0XHRcdC8qIE5vdGUsIGNoZWNrIGZvciBjaXJjdWxhciByZWZzIGJlZm9yZSBkZXB0aDsganVzdCBtYWtlcyBtb3JlIHNlbnNlICovXG5cdFx0XHRcdHZhciBzdGFja0tleSA9IHV0aWwud2l0aGluKHN0YWNrKS5pcyhvYmopO1xuXG5cdFx0XHRcdGlmIChzdGFja0tleSkge1xuXHRcdFx0XHRcdHJldHVybiB1dGlsLmNvbW1vbi5jaXJjUmVmKG9iaiwgc3RhY2tLZXksIHNldHRpbmdzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YWNrW2tleSB8fCBcIlRPUFwiXSA9IG9iajtcblxuXHRcdFx0XHRpZiAoZGVwdGggPT09IHNldHRpbmdzLm1heERlcHRoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHV0aWwuY29tbW9uLmRlcHRoUmVhY2hlZChvYmosIHNldHRpbmdzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB0YWJsZSA9IHV0aWwudGFibGUoW1wiR3JvdXBcIiwgbnVsbF0sIFwib2JqZWN0XCIpLFxuXHRcdFx0XHQgICAgaXNFbXB0eSA9IHRydWU7XG5cblx0XHRcdFx0Zm9yICh2YXIgaSBpbiBvYmopIHtcblx0XHRcdFx0XHRpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eSB8fCBvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcblx0XHRcdFx0XHRcdHZhciBpdGVtID0gb2JqW2ldLFxuXHRcdFx0XHRcdFx0ICAgIHR5cGUgPSAkLnR5cGUoaXRlbSk7XG5cdFx0XHRcdFx0XHRpc0VtcHR5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHR0YWJsZS5hZGRSb3coW2ksIHR5cGVEZWFsZXJbdHlwZV0oaXRlbSwgZGVwdGggKyAxLCBpKV0sIHR5cGUpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0XHQvKiBTZWN1cml0eSBlcnJvcnMgYXJlIHRocm93biBvbiBjZXJ0YWluIFdpbmRvdy9ET00gcHJvcGVydGllcyAqL1xuXHRcdFx0XHRcdFx0XHRpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coZS5tZXNzYWdlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciByZXQgPSBzZXR0aW5ncy5leHBhbmRlZCB8fCBoYXNSdW5PbmNlID8gdGFibGUubm9kZSA6IHV0aWwuZXhwYW5kZXIoSlNPTi5zdHJpbmdpZnkob2JqKSwgXCJDbGljayB0byBzaG93IG1vcmVcIiwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0YWJsZS5ub2RlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aGFzUnVuT25jZSA9IHRydWU7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH0sXG5cblx0XHRcdGFycmF5OiBmdW5jdGlvbiBhcnJheShhcnIsIGRlcHRoLCBrZXksIGpxdWVyeSkge1xuXG5cdFx0XHRcdC8qIENoZWNraW5nIGRlcHRoICsgY2lyY3VsYXIgcmVmcyAqL1xuXHRcdFx0XHQvKiBOb3RlLCBjaGVjayBmb3IgY2lyY3VsYXIgcmVmcyBiZWZvcmUgZGVwdGg7IGp1c3QgbWFrZXMgbW9yZSBzZW5zZSAqL1xuXHRcdFx0XHR2YXIgc3RhY2tLZXkgPSB1dGlsLndpdGhpbihzdGFjaykuaXMoYXJyKTtcblxuXHRcdFx0XHRpZiAoc3RhY2tLZXkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdXRpbC5jb21tb24uY2lyY1JlZihhcnIsIHN0YWNrS2V5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YWNrW2tleSB8fCBcIlRPUFwiXSA9IGFycjtcblxuXHRcdFx0XHRpZiAoZGVwdGggPT09IHNldHRpbmdzLm1heERlcHRoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHV0aWwuY29tbW9uLmRlcHRoUmVhY2hlZChhcnIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0LyogQWNjZXB0cyBhIHRhYmxlIGFuZCBtb2RpZmllcyBpdCAqL1xuXHRcdFx0XHR2YXIgdGFibGUgPSB1dGlsLnRhYmxlKFtcIkxpc3QgKFwiICsgYXJyLmxlbmd0aCArIFwiIGl0ZW1zKVwiLCBudWxsXSwgXCJsaXN0XCIpO1xuXHRcdFx0XHR2YXIgaXNFbXB0eSA9IHRydWU7XG5cdFx0XHRcdHZhciBjb3VudCA9IDA7XG5cblx0XHRcdFx0JCQoYXJyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG5cdFx0XHRcdFx0aWYgKHNldHRpbmdzLm1heEFycmF5ID49IDAgJiYgKytjb3VudCA+IHNldHRpbmdzLm1heEFycmF5KSB7XG5cdFx0XHRcdFx0XHR0YWJsZS5hZGRSb3coW2kgKyBcIi4uXCIgKyAoYXJyLmxlbmd0aCAtIDEpLCB0eXBlRGVhbGVyWyQudHlwZShpdGVtKV0oXCIuLi5cIiwgZGVwdGggKyAxLCBpKV0pO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpc0VtcHR5ID0gZmFsc2U7XG5cdFx0XHRcdFx0dGFibGUuYWRkUm93KFtpLCB0eXBlRGVhbGVyWyQudHlwZShpdGVtKV0oaXRlbSwgZGVwdGggKyAxLCBpKV0pO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gc2V0dGluZ3MuZXhwYW5kZWQgPyB0YWJsZS5ub2RlIDogdXRpbC5leHBhbmRlcihKU09OLnN0cmluZ2lmeShhcnIpLCBcIkNsaWNrIHRvIHNob3cgbW9yZVwiLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRhYmxlLm5vZGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cblx0XHRcdFwiZGF0ZVwiOiBmdW5jdGlvbiBkYXRlKF9kYXRlKSB7XG5cblx0XHRcdFx0dmFyIG1pbmlUYWJsZSA9IHV0aWwudGFibGUoW1wiRGF0ZVwiLCBudWxsXSwgXCJkYXRlXCIpLFxuXHRcdFx0XHQgICAgc0RhdGUgPSBfZGF0ZS50b1N0cmluZygpLnNwbGl0KC9cXHMvKTtcblxuXHRcdFx0XHQvKiBUT0RPOiBNYWtlIHRoaXMgd29yayB3ZWxsIGluIElFISAqL1xuXHRcdFx0XHRtaW5pVGFibGUuYWRkUm93KFtcIlRpbWVcIiwgc0RhdGVbNF1dKS5hZGRSb3coW1wiRGF0ZVwiLCBzRGF0ZS5zbGljZSgwLCA0KS5qb2luKFwiLVwiKV0pO1xuXG5cdFx0XHRcdHJldHVybiBzZXR0aW5ncy5leHBhbmRlZCA/IG1pbmlUYWJsZS5ub2RlIDogdXRpbC5leHBhbmRlcihcIkRhdGUgKHRpbWVzdGFtcCk6IFwiICsgK19kYXRlLCBcIkNsaWNrIHRvIHNlZSBhIGxpdHRsZSBtb3JlIGluZm8gYWJvdXQgdGhpcyBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobWluaVRhYmxlLm5vZGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dHlwZURlYWxlci5udW1iZXIgPSB0eXBlRGVhbGVyLmJvb2xlYW4gPSB0eXBlRGVhbGVyLnVuZGVmaW5lZCA9IHR5cGVEZWFsZXIubnVsbCA9IHR5cGVEZWFsZXIuZGVmYXVsdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHV0aWwudHh0KHZhbHVlKTtcblx0XHR9LCBjb250YWluZXIuYXBwZW5kQ2hpbGQodHlwZURlYWxlclskLnR5cGUob2JqKV0ob2JqLCBjdXJyZW50RGVwdGgpKTtcblxuXHRcdHJldHVybiBjb250YWluZXI7XG5cdH07XG5cblx0LyogQ29uZmlndXJhdGlvbiAqL1xuXG5cdC8qIEFsbCBpdGVtcyBjYW4gYmUgb3ZlcndyaWRkZW4gYnkgcGFzc2luZyBhblxuICAgIFwib3B0aW9uc1wiIG9iamVjdCB3aGVuIGNhbGxpbmcgcHJldHR5UHJpbnQgKi9cblx0cHJldHR5UHJpbnRUaGlzLmNvbmZpZyA9IHtcblx0XHQvKiBUcnkgc2V0dGluZyB0aGlzIHRvIGZhbHNlIHRvIHNhdmUgc3BhY2UgKi9cblx0XHRleHBhbmRlZDogdHJ1ZSxcblxuXHRcdG1heERlcHRoOiAxMCxcblx0XHRtYXhBcnJheTogLTEgLy8gZGVmYXVsdCBpcyB1bmxpbWl0ZWRcblx0fTtcblxuXHRyZXR1cm4gcHJldHR5UHJpbnRUaGlzO1xufSgpO1xuXG4oZnVuY3Rpb24gKCQsICQkKSB7XG5cblx0dmFyIF8gPSBXeXNpZS5EZWJ1ZyA9IHtcblx0XHRmcmllbmRseUVycm9yOiBmdW5jdGlvbiBmcmllbmRseUVycm9yKGUsIGV4cHIpIHtcblx0XHRcdHZhciB0eXBlID0gZS5jb25zdHJ1Y3Rvci5uYW1lLnJlcGxhY2UoL0Vycm9yJC8sIFwiXCIpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IGUubWVzc2FnZTtcblxuXHRcdFx0Ly8gRnJpZW5kbGlmeSBjb21tb24gZXJyb3JzXG5cblx0XHRcdC8vIE5vbi1kZXZlbG9wZXJzIGRvbid0IGtub3cgd3RmIGEgdG9rZW4gaXMuXG5cdFx0XHRtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKC9cXHMrdG9rZW5cXHMrL2csIFwiIFwiKTtcblxuXHRcdFx0aWYgKG1lc3NhZ2UgPT0gXCJVbmV4cGVjdGVkIH1cIiAmJiAhL1t7fV0vLnRlc3QoZXhwcikpIHtcblx0XHRcdFx0bWVzc2FnZSA9IFwiTWlzc2luZyBhIClcIjtcblx0XHRcdH0gZWxzZSBpZiAobWVzc2FnZSA9PT0gXCJVbmV4cGVjdGVkIClcIikge1xuXHRcdFx0XHRtZXNzYWdlID0gXCJNaXNzaW5nIGEgKFwiO1xuXHRcdFx0fSBlbHNlIGlmIChtZXNzYWdlID09PSBcIkludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gYXNzaWdubWVudFwiKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBcIkludmFsaWQgYXNzaWdubWVudC4gTWF5YmUgeW91IHR5cGVkID0gaW5zdGVhZCBvZiA9PSA/XCI7XG5cdFx0XHR9IGVsc2UgaWYgKG1lc3NhZ2UgPT0gXCJVbmV4cGVjdGVkIElMTEVHQUxcIikge1xuXHRcdFx0XHRtZXNzYWdlID0gXCJUaGVyZSBpcyBhbiBpbnZhbGlkIGNoYXJhY3RlciBzb21ld2hlcmUuXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBcIjxzcGFuIGNsYXNzPVxcXCJ0eXBlXFxcIj5PaCBub2VzLCBhIFwiICsgdHlwZSArIFwiIGVycm9yITwvc3Bhbj4gXCIgKyBtZXNzYWdlO1xuXHRcdH0sXG5cblx0XHRlbGVtZW50TGFiZWw6IGZ1bmN0aW9uIGVsZW1lbnRMYWJlbChlbGVtZW50LCBhdHRyaWJ1dGUpIHtcblx0XHRcdHZhciByZXQgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZShcInByb3BlcnR5XCIpKSB7XG5cdFx0XHRcdHJldCArPSBcIltwcm9wZXJ0eT1cIiArIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgKyBcIl1cIjtcblx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudC5pZCkge1xuXHRcdFx0XHRyZXQgKz0gXCIjXCIgKyBlbGVtZW50LmlkO1xuXHRcdFx0fSBlbHNlIGlmIChlbGVtZW50LmNsYXNzTGlzdC5sZW5ndGgpIHtcblx0XHRcdFx0cmV0ICs9ICQkKGVsZW1lbnQuY2xhc3NMaXN0KS5tYXAoZnVuY3Rpb24gKGMpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCIuXCIgKyBjO1xuXHRcdFx0XHR9KS5qb2luKFwiXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYXR0cmlidXRlKSB7XG5cdFx0XHRcdHJldCArPSBcIkBcIiArIGF0dHJpYnV0ZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9LFxuXG5cdFx0cHJpbnRWYWx1ZTogZnVuY3Rpb24gcHJpbnRWYWx1ZShvYmopIHtcblx0XHRcdHZhciByZXQ7XG5cblx0XHRcdGlmICgodHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaikpICE9PSBcIm9iamVjdFwiIHx8IG9iaiA9PT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PSBcInN0cmluZ1wiID8gXCJcXFwiXCIgKyBvYmogKyBcIlxcXCJcIiA6IG9iaiArIFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcblx0XHRcdFx0aWYgKG9iai5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aWYgKF90eXBlb2Yob2JqWzBdKSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiTGlzdDogXCIgKyBvYmoubGVuZ3RoICsgXCIgZ3JvdXAocylcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiTGlzdDogXCIgKyBvYmoubWFwKF8ucHJpbnRWYWx1ZSkuam9pbihcIiwgXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJMaXN0OiAoRW1wdHkpXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG5cdFx0XHRcdHJldHVybiBcIkdyb3VwIHdpdGggXCIgKyBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCArIFwiIHByb3BlcnRpZXNcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9iaiBpbnN0YW5jZW9mIFd5c2llLlByaW1pdGl2ZSkge1xuXHRcdFx0XHRyZXR1cm4gXy5wcmludFZhbHVlKG9iai52YWx1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIFd5c2llLkNvbGxlY3Rpb24pIHtcblx0XHRcdFx0aWYgKG9iai5pdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aWYgKG9iai5pdGVtc1swXSBpbnN0YW5jZW9mIFd5c2llLlNjb3BlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJMaXN0OiBcIiArIG9iai5pdGVtcy5sZW5ndGggKyBcIiBncm91cChzKVwiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJMaXN0OiBcIiArIG9iai5pdGVtcy5tYXAoXy5wcmludFZhbHVlKS5qb2luKFwiLCBcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBfLnByaW50VmFsdWUoW10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIFd5c2llLlNjb3BlKSB7XG5cdFx0XHRcdC8vIEdyb3VwXG5cdFx0XHRcdHJldHVybiBcIkdyb3VwIHdpdGggXCIgKyBvYmoucHJvcGVydHlOYW1lcy5sZW5ndGggKyBcIiBwcm9wZXJ0aWVzXCI7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHRpbWVkOiBmdW5jdGlvbiB0aW1lZChpZCwgY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGNvbnNvbGUudGltZShpZCk7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdGNvbnNvbGUudGltZUVuZChpZCk7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRyZXNlcnZlZFdvcmRzOiBcImFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGRcIi5zcGxpdChcInxcIilcblx0fTtcblxuXHRXeXNpZS5wcm90b3R5cGUucmVuZGVyID0gXy50aW1lZChcInJlbmRlclwiLCBXeXNpZS5wcm90b3R5cGUucmVuZGVyKTtcblxuXHRXeXNpZS5zZWxlY3RvcnMuZGVidWcgPSBcIi5kZWJ1Z1wiO1xuXG5cdHZhciBzZWxlY3RvciA9IFwiLCAud3lzaWUtZGVidWdpbmZvXCI7XG5cdFd5c2llLkV4cHJlc3Npb25zLmVzY2FwZSArPSBzZWxlY3Rvcjtcblx0U3RyZXRjaHkuc2VsZWN0b3JzLmZpbHRlciArPSBzZWxlY3RvcjtcblxuXHQvLyBBZGQgZWxlbWVudCB0byBzaG93IHNhdmVkIGRhdGFcblx0V3lzaWUuaG9va3MuYWRkKFwiaW5pdC10cmVlLWFmdGVyXCIsIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcy5yb290LmRlYnVnKSB7XG5cdFx0XHR0aGlzLndyYXBwZXIuY2xhc3NMaXN0LmFkZChcImRlYnVnLXNhdmluZ1wiKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5zdG9yZSAmJiB0aGlzLndyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGVidWctc2F2aW5nXCIpKSB7XG5cdFx0XHR2YXIgZWxlbWVudDtcblxuXHRcdFx0dmFyIGRldGFpbHMgPSAkLmNyZWF0ZShcImRldGFpbHNcIiwge1xuXHRcdFx0XHRjbGFzc05hbWU6IFwid3lzaWUtZGVidWctc3RvcmFnZVwiLFxuXHRcdFx0XHRjb250ZW50czogW3sgdGFnOiBcIlN1bW1hcnlcIiwgdGV4dENvbnRlbnQ6IFwiU2F2ZWQgZGF0YVwiIH0sIGVsZW1lbnQgPSAkLmNyZWF0ZShcInByZVwiLCB7IGlkOiB0aGlzLmlkICsgXCItZGVidWctc3RvcmFnZVwiIH0pXSxcblx0XHRcdFx0YWZ0ZXI6IHRoaXMud3JhcHBlclxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEludGVyY2VwdCB0ZXh0Q29udGVudFxuXG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsIFwidGV4dENvbnRlbnRcIik7XG5cblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCBcInRleHRDb250ZW50XCIsIHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwodGhpcyk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0c2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0XHRcdFx0XHR0aGlzLmlubmVySFRNTCA9IFwiXCI7XG5cblx0XHRcdFx0XHRpZiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdHRoaXMuYXBwZW5kQ2hpbGQocHJldHR5UHJpbnQoSlNPTi5wYXJzZSh2YWx1ZSkpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnN0b3JlICs9IFwiICNcIiArIGVsZW1lbnQuaWQ7XG5cdFx0fVxuXHR9KTtcblxuXHRXeXNpZS5ob29rcy5hZGQoXCJyZW5kZXItc3RhcnRcIiwgZnVuY3Rpb24gKF9yZWYzKSB7XG5cdFx0dmFyIGRhdGEgPSBfcmVmMy5kYXRhO1xuXG5cdFx0aWYgKHRoaXMuc3RvcmFnZSAmJiB0aGlzLndyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGVidWctc2F2aW5nXCIpKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9ICQoXCIjXCIgKyB0aGlzLmlkICsgXCItZGVidWctc3RvcmFnZVwiKTtcblxuXHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0ZWxlbWVudC50ZXh0Q29udGVudCA9IGRhdGEgPyB0aGlzLnRvSlNPTihkYXRhKSA6IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRXeXNpZS5ob29rcy5hZGQoXCJzY29wZS1pbml0LXN0YXJ0XCIsIGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmRlYnVnID0gdGhpcy5kZWJ1ZyB8fCB0aGlzLndhbGtVcChmdW5jdGlvbiAoc2NvcGUpIHtcblx0XHRcdGlmIChzY29wZS5kZWJ1Zykge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmICghdGhpcy5kZWJ1ZyAmJiB0aGlzLmVsZW1lbnQuY2xvc2VzdChXeXNpZS5zZWxlY3RvcnMuZGVidWcpKSB7XG5cdFx0XHR0aGlzLmRlYnVnID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5kZWJ1Zykge1xuXHRcdFx0dGhpcy5kZWJ1ZyA9ICQuY3JlYXRlKFwidGJvZHlcIiwge1xuXHRcdFx0XHRpbnNpZGU6ICQuY3JlYXRlKFwidGFibGVcIiwge1xuXHRcdFx0XHRcdGNsYXNzTmFtZTogXCJ3eXNpZS11aSB3eXNpZS1kZWJ1Z2luZm9cIixcblx0XHRcdFx0XHRpbm5lckhUTUw6IFwiPHRoZWFkPjx0cj5cXG5cXHRcXHRcXHRcXHRcXHQ8dGg+PC90aD5cXG5cXHRcXHRcXHRcXHRcXHQ8dGg+RXhwcmVzc2lvbjwvdGg+XFxuXFx0XFx0XFx0XFx0XFx0PHRoPlZhbHVlPC90aD5cXG5cXHRcXHRcXHRcXHRcXHQ8dGg+RWxlbWVudDwvdGg+XFxuXFx0XFx0XFx0XFx0PC90cj48L3RoZWFkPlwiLFxuXHRcdFx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5OiBcIm5vbmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0aW5zaWRlOiB0aGlzLmVsZW1lbnRcblx0XHRcdFx0fSlcblx0XHRcdH0pO1xuXHRcdH1cblx0fSwgdHJ1ZSk7XG5cblx0V3lzaWUuaG9va3MuYWRkKFwidW5pdC1pbml0LWVuZFwiLCBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuY29sbGVjdGlvbikge1xuXHRcdFx0dGhpcy5kZWJ1ZyA9IHRoaXMuY29sbGVjdGlvbi5kZWJ1Zztcblx0XHR9XG5cdH0pO1xuXG5cdFd5c2llLmhvb2tzLmFkZChcImV4cHJlc3Npb25zLWluaXQtc3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuZGVidWcgPSB0aGlzLnNjb3BlLmRlYnVnO1xuXHR9KTtcblxuXHRXeXNpZS5ob29rcy5hZGQoXCJleHByZXNzaW9uLWV2YWwtYmVmb3JlZXZhbFwiLCBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuZGVidWcpIHtcblx0XHRcdHRoaXMuZGVidWcuY2xhc3NMaXN0LnJlbW92ZShcImVycm9yXCIpO1xuXHRcdH1cblx0fSk7XG5cblx0V3lzaWUuaG9va3MuYWRkKFwiZXhwcmVzc2lvbi1ldmFsLWVycm9yXCIsIGZ1bmN0aW9uIChlbnYpIHtcblx0XHRpZiAodGhpcy5kZWJ1Zykge1xuXHRcdFx0dGhpcy5kZWJ1Zy5pbm5lckhUTUwgPSBfLmZyaWVuZGx5RXJyb3IoZW52LmV4Y2VwdGlvbiwgZW52LmV4cHJlc3Npb24pO1xuXHRcdFx0dGhpcy5kZWJ1Zy5jbGFzc0xpc3QuYWRkKFwiZXJyb3JcIik7XG5cdFx0fVxuXHR9KTtcblxuXHRXeXNpZS5TY29wZS5wcm90b3R5cGUuZGVidWdSb3cgPSBmdW5jdGlvbiAoX3JlZjQpIHtcblx0XHR2YXIgZWxlbWVudCA9IF9yZWY0LmVsZW1lbnQ7XG5cdFx0dmFyIF9yZWY0JGF0dHJpYnV0ZSA9IF9yZWY0LmF0dHJpYnV0ZTtcblx0XHR2YXIgYXR0cmlidXRlID0gX3JlZjQkYXR0cmlidXRlID09PSB1bmRlZmluZWQgPyBudWxsIDogX3JlZjQkYXR0cmlidXRlO1xuXHRcdHZhciBfcmVmNCR0ZHMgPSBfcmVmNC50ZHM7XG5cdFx0dmFyIHRkcyA9IF9yZWY0JHRkcyA9PT0gdW5kZWZpbmVkID8gW10gOiBfcmVmNCR0ZHM7XG5cblx0XHRpZiAoIXRoaXMuZGVidWcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmRlYnVnLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cblx0XHR2YXIgdHlwZSA9IHRkc1swXTtcblxuXHRcdHRkc1swXSA9ICQuY3JlYXRlKFwidGRcIiwge1xuXHRcdFx0dGl0bGU6IHR5cGVcblx0XHR9KTtcblxuXHRcdGlmICghdGRzWzNdKSB7XG5cdFx0XHR2YXIgZWxlbWVudExhYmVsID0gXy5lbGVtZW50TGFiZWwoZWxlbWVudCwgYXR0cmlidXRlKTtcblxuXHRcdFx0dGRzWzNdID0gJC5jcmVhdGUoXCJ0ZFwiLCB7XG5cdFx0XHRcdHRleHRDb250ZW50OiBlbGVtZW50TGFiZWwsXG5cdFx0XHRcdHRpdGxlOiBlbGVtZW50TGFiZWwsXG5cdFx0XHRcdGV2ZW50czoge1xuXHRcdFx0XHRcdFwibW91c2VlbnRlciBtb3VzZWxlYXZlXCI6IGZ1bmN0aW9uIG1vdXNlZW50ZXJNb3VzZWxlYXZlKGV2dCkge1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwid3lzaWUtaGlnaGxpZ2h0XCIsIGV2dC50eXBlID09PSBcIm1vdXNlZW50ZXJcIik7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImNsaWNrXCI6IGZ1bmN0aW9uIGNsaWNrKGV2dCkge1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiBcInNtb290aFwiIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGRzID0gdGRzLm1hcChmdW5jdGlvbiAodGQpIHtcblx0XHRcdGlmICghKHRkIGluc3RhbmNlb2YgTm9kZSkpIHtcblx0XHRcdFx0cmV0dXJuICQuY3JlYXRlKFwidGRcIiwgKHR5cGVvZiB0ZCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHRkKSkgPT0gXCJvYmplY3RcIiA/IHRkIDogeyB0ZXh0Q29udGVudDogdGQgfSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZDtcblx0XHR9KTtcblxuXHRcdGlmICh0eXBlID09IFwiV2FybmluZ1wiKSB7XG5cdFx0XHR0ZHNbMV0uc2V0QXR0cmlidXRlKFwiY29sc3BhblwiLCAyKTtcblx0XHR9XG5cblx0XHR2YXIgdHIgPSAkLmNyZWF0ZShcInRyXCIsIHtcblx0XHRcdGNsYXNzTmFtZTogXCJkZWJ1Zy1cIiArIHR5cGUudG9Mb3dlckNhc2UoKSxcblx0XHRcdGNvbnRlbnRzOiB0ZHMsXG5cdFx0XHRpbnNpZGU6IHRoaXMuZGVidWdcblx0XHR9KTtcblx0fTtcblxuXHRXeXNpZS5ob29rcy5hZGQoXCJleHByZXNzaW9udGV4dC1pbml0LWVuZFwiLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIF90aGlzMzMgPSB0aGlzO1xuXG5cdFx0aWYgKHRoaXMuc2NvcGUuZGVidWcpIHtcblx0XHRcdHRoaXMuZGVidWcgPSB7fTtcblxuXHRcdFx0dGhpcy50ZW1wbGF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChleHByKSB7XG5cdFx0XHRcdGlmIChleHByIGluc3RhbmNlb2YgV3lzaWUuRXhwcmVzc2lvbikge1xuXHRcdFx0XHRcdF90aGlzMzMuc2NvcGUuZGVidWdSb3coe1xuXHRcdFx0XHRcdFx0ZWxlbWVudDogX3RoaXMzMy5lbGVtZW50LFxuXHRcdFx0XHRcdFx0YXR0cmlidXRlOiBfdGhpczMzLmF0dHJpYnV0ZSxcblx0XHRcdFx0XHRcdHRkczogW1wiRXhwcmVzc2lvblwiLCB7XG5cdFx0XHRcdFx0XHRcdHRhZzogXCJ0ZFwiLFxuXHRcdFx0XHRcdFx0XHRjb250ZW50czoge1xuXHRcdFx0XHRcdFx0XHRcdHRhZzogXCJ0ZXh0YXJlYVwiLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiBleHByLmV4cHJlc3Npb24sXG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnRzOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpbnB1dDogZnVuY3Rpb24gaW5wdXQoZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGV4cHIuZXhwcmVzc2lvbiA9IGV2dC50YXJnZXQudmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdF90aGlzMzMudXBkYXRlKF90aGlzMzMuZGF0YSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0XHRvbmNlOiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmb2N1czogZnVuY3Rpb24gZm9jdXMoZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBTdHJldGNoeS5yZXNpemUoZXZ0LnRhcmdldCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9LCBleHByLmRlYnVnID0gJC5jcmVhdGUoXCJ0ZFwiKV1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHRXeXNpZS5ob29rcy5hZGQoXCJzY29wZS1pbml0LWVuZFwiLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIF90aGlzMzQgPSB0aGlzO1xuXG5cdFx0Ly8gVE9ETyBtYWtlIHByb3BlcnRpZXMgdXBkYXRlLCBjb2xsYXBzZSBkdXBsaWNhdGUgZXhwcmVzc2lvbnNcblx0XHRpZiAodGhpcy5kZWJ1ZyBpbnN0YW5jZW9mIE5vZGUpIHtcblx0XHRcdC8vIFdlIGhhdmUgYSBkZWJ1ZyB0YWJsZSwgYWRkIHN0dWZmIHRvIGl0XG5cblx0XHRcdHZhciBzZWxlY3RvciA9IFd5c2llLnNlbGVjdG9ycy5hbmROb3QoV3lzaWUuc2VsZWN0b3JzLm11bHRpcGxlLCBXeXNpZS5zZWxlY3RvcnMucHJvcGVydHkpO1xuXHRcdFx0JCQoc2VsZWN0b3IsIHRoaXMuZWxlbWVudCkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdFx0XHRfdGhpczM0LmRlYnVnUm93KHtcblx0XHRcdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0XHRcdHRkczogW1wiV2FybmluZ1wiLCBcImRhdGEtbXVsdGlwbGUgd2l0aG91dCBhIHByb3BlcnR5IGF0dHJpYnV0ZVwiXVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnByb3BhZ2F0ZShmdW5jdGlvbiAob2JqKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IF8ucHJpbnRWYWx1ZShvYmopO1xuXG5cdFx0XHRcdF90aGlzMzQuZGVidWdSb3coe1xuXHRcdFx0XHRcdGVsZW1lbnQ6IG9iai5lbGVtZW50LFxuXHRcdFx0XHRcdHRkczogW1wiUHJvcGVydHlcIiwgb2JqLnByb3BlcnR5LCBvYmoudmFsdWVdXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmIChfLnJlc2VydmVkV29yZHMuaW5kZXhPZihvYmoucHJvcGVydHkpID4gLTEpIHtcblx0XHRcdFx0XHRfdGhpczM0LmRlYnVnUm93KHtcblx0XHRcdFx0XHRcdGVsZW1lbnQ6IG9iai5lbGVtZW50LFxuXHRcdFx0XHRcdFx0dGRzOiBbXCJXYXJuaW5nXCIsIFwiWW91IGNhbuKAmXQgdXNlIFxcXCJcIiArIG9iai5wcm9wZXJ0eSArIFwiXFxcIiBhcyBhIHByb3BlcnR5IG5hbWUsIGl04oCZcyBhIHJlc2VydmVkIHdvcmQuXCJdXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoL15cXGR8W1xcVyRdLy50ZXN0KG9iai5wcm9wZXJ0eSkpIHtcblx0XHRcdFx0XHRfdGhpczM0LmRlYnVnUm93KHtcblx0XHRcdFx0XHRcdGVsZW1lbnQ6IG9iai5lbGVtZW50LFxuXHRcdFx0XHRcdFx0dGRzOiBbXCJXYXJuaW5nXCIsIHtcblx0XHRcdFx0XHRcdFx0dGV4dENvbnRlbnQ6IFwiWW91IGNhbuKAmXQgdXNlIFxcXCJcIiArIG9iai5wcm9wZXJ0eSArIFwiXFxcIiBhcyBhIHByb3BlcnR5IG5hbWUuXCIsXG5cdFx0XHRcdFx0XHRcdHRpdGxlOiBcIlByb3BlcnR5IG5hbWVzIGNhbiBvbmx5IGNvbnRhaW4gbGV0dGVycywgbnVtYmVycyBhbmQgdW5kZXJzY29yZXMgYW5kIGNhbm5vdCBzdGFydCB3aXRoIGEgbnVtYmVyLlwiXG5cdFx0XHRcdFx0XHR9XVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5zY29wZS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3eXNpZTpkYXRhY2hhbmdlXCIsIGZ1bmN0aW9uIChldnQpIHtcblx0XHRcdFx0JCQoXCJ0ci5kZWJ1Zy1wcm9wZXJ0eVwiLCBfdGhpczM0LmRlYnVnKS5mb3JFYWNoKGZ1bmN0aW9uICh0cikge1xuXHRcdFx0XHRcdHZhciBwcm9wZXJ0eSA9IHRyLmNlbGxzWzFdLnRleHRDb250ZW50O1xuXHRcdFx0XHRcdHZhciB2YWx1ZSA9IF8ucHJpbnRWYWx1ZShfdGhpczM0LnByb3BlcnRpZXNbcHJvcGVydHldKTtcblxuXHRcdFx0XHRcdGlmICh0ci5jZWxsc1syXSkge1xuXHRcdFx0XHRcdFx0dmFyIHRkID0gdHIuY2VsbHNbMl07XG5cdFx0XHRcdFx0XHR0ZC50ZXh0Q29udGVudCA9IHRkLnRpdGxlID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0V3lzaWUuaG9va3MuYWRkKFwiZXhwcmVzc2lvbnRleHQtdXBkYXRlLWJlZm9yZWV2YWxcIiwgZnVuY3Rpb24gKGVudikge1xuXHRcdGlmICh0aGlzLmRlYnVnKSB7XG5cdFx0XHRlbnYudGQgPSBlbnYuZXhwci5kZWJ1ZztcblxuXHRcdFx0aWYgKGVudi50ZCkge1xuXHRcdFx0XHRlbnYudGQuY2xhc3NMaXN0LnJlbW92ZShcImVycm9yXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0V3lzaWUuaG9va3MuYWRkKFwiZXhwcmVzc2lvbnRleHQtdXBkYXRlLWFmdGVyZXZhbFwiLCBmdW5jdGlvbiAoZW52KSB7XG5cdFx0aWYgKGVudi50ZCAmJiAhZW52LnRkLmNsYXNzTGlzdC5jb250YWlucyhcImVycm9yXCIpKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBfLnByaW50VmFsdWUoZW52LnZhbHVlKTtcblx0XHRcdGVudi50ZC50ZXh0Q29udGVudCA9IGVudi50ZC50aXRsZSA9IHZhbHVlO1xuXHRcdH1cblx0fSk7XG59KShCbGlzcywgQmxpc3MuJCk7XG5cbihmdW5jdGlvbiAoJCkge1xuXG5cdGlmICghc2VsZi5XeXNpZSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciBkcm9wYm94VVJMID0gXCIvL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kcm9wYm94LmpzLzAuMTAuMi9kcm9wYm94Lm1pbi5qc1wiO1xuXG5cdFd5c2llLlN0b3JhZ2UuQmFja2VuZC5hZGQoXCJEcm9wYm94XCIsICQuQ2xhc3MoeyBleHRlbmRzOiBXeXNpZS5TdG9yYWdlLkJhY2tlbmQsXG5cdFx0Y29uc3RydWN0b3I6IGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge1xuXHRcdFx0dmFyIF90aGlzMzUgPSB0aGlzO1xuXG5cdFx0XHQvLyBUcmFuc2Zvcm0gdGhlIGRyb3Bib3ggc2hhcmVkIFVSTCBpbnRvIHNvbWV0aGluZyByYXcgYW5kIENPUlMtZW5hYmxlZFxuXHRcdFx0aWYgKHRoaXMudXJsLnByb3RvY29sICE9IFwiZHJvcGJveDpcIikge1xuXHRcdFx0XHR0aGlzLnVybC5ob3N0bmFtZSA9IFwiZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbVwiO1xuXHRcdFx0XHR0aGlzLnVybC5zZWFyY2ggPSB0aGlzLnVybC5zZWFyY2gucmVwbGFjZSgvXFxiZGw9MHxeJC8sIFwicmF3PTFcIik7XG5cdFx0XHRcdHRoaXMucGVybWlzc2lvbnMub24oXCJyZWFkXCIpOyAvLyBUT0RPIGNoZWNrIGlmIGZpbGUgYWN0dWFsbHkgaXMgcHVibGljbHkgcmVhZGFibGVcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5wZXJtaXNzaW9ucy5vbihcImxvZ2luXCIpO1xuXG5cdFx0XHR0aGlzLnJlYWR5ID0gJC5pbmNsdWRlKHNlbGYuRHJvcGJveCwgZHJvcGJveFVSTCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciByZWZlcnJlciA9IG5ldyBVUkwoZG9jdW1lbnQucmVmZXJyZXIsIGxvY2F0aW9uKTtcblxuXHRcdFx0XHRpZiAocmVmZXJyZXIuaG9zdG5hbWUgPT09IFwid3d3LmRyb3Bib3guY29tXCIgJiYgbG9jYXRpb24uaGFzaC5pbmRleE9mKFwiI2FjY2Vzc190b2tlbj1cIikgPT09IDApIHtcblx0XHRcdFx0XHQvLyBXZeKAmXJlIGluIGFuIE9BdXRoIHJlc3BvbnNlIHBvcHVwLCBkbyB3aGF0IHlvdSBuZWVkIHRoZW4gY2xvc2UgdGhpc1xuXHRcdFx0XHRcdERyb3Bib3guQXV0aERyaXZlci5Qb3B1cC5vYXV0aFJlY2VpdmVyKCk7XG5cdFx0XHRcdFx0JC5maXJlKHdpbmRvdywgXCJsb2FkXCIpOyAvLyBoYWNrIGJlY2F1c2UgZHJvcGJveC5qcyBkaWRuJ3QgZm9yZXNlZSB1c2UgY2FzZXMgbGlrZSBvdXJzIDovXG5cdFx0XHRcdFx0Y2xvc2UoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJbnRlcm5hbCBmaWxlbmFtZSAodG8gYmUgdXNlZCBmb3Igc2F2aW5nKVxuXHRcdFx0XHRfdGhpczM1LmZpbGVuYW1lID0gKF90aGlzMzUuc3RvcmFnZS5wYXJhbShcInBhdGhcIikgfHwgXCJcIikgKyBuZXcgVVJMKF90aGlzMzUudXJsKS5wYXRobmFtZS5tYXRjaCgvW14vXSokLylbMF07XG5cblx0XHRcdFx0X3RoaXMzNS5rZXkgPSBfdGhpczM1LnN0b3JhZ2UucGFyYW0oXCJrZXlcIikgfHwgXCJmbGU2Z3NjNjF3NXY3OWpcIjtcblxuXHRcdFx0XHRfdGhpczM1LmNsaWVudCA9IG5ldyBEcm9wYm94LkNsaWVudCh7IGtleTogX3RoaXMzNS5rZXkgfSk7XG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0X3RoaXMzNS5sb2dpbih0cnVlKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHQvKipcbiAgICogU2F2ZXMgYSBmaWxlIHRvIHRoZSBiYWNrZW5kLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZmlsZSAtIEFuIG9iamVjdCB3aXRoIG5hbWUgJiBkYXRhIGtleXNcbiAgICogQHJldHVybiB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZmlsZSBpcyBzYXZlZC5cbiAgICovXG5cdFx0cHV0OiBmdW5jdGlvbiBwdXQoZmlsZSkge1xuXHRcdFx0dmFyIF90aGlzMzYgPSB0aGlzO1xuXG5cdFx0XHRmaWxlLmRhdGEgPSBXeXNpZS50b0pTT04oZmlsZS5kYXRhKTtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0X3RoaXMzNi5jbGllbnQud3JpdGVGaWxlKGZpbGUubmFtZSwgZmlsZS5kYXRhLCBmdW5jdGlvbiAoZXJyb3IsIHN0YXQpIHtcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdHJldHVybiByZWplY3QoRXJyb3IoZXJyb3IpKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIkZpbGUgc2F2ZWQgYXMgcmV2aXNpb24gXCIgKyBzdGF0LnZlcnNpb25UYWcpO1xuXHRcdFx0XHRcdHJlc29sdmUoc3RhdCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGxvZ2luOiBmdW5jdGlvbiBsb2dpbihwYXNzaXZlKSB7XG5cdFx0XHR2YXIgX3RoaXMzNyA9IHRoaXM7XG5cblx0XHRcdHJldHVybiB0aGlzLnJlYWR5LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXMzNy5jbGllbnQuaXNBdXRoZW50aWNhdGVkKCkgPyBQcm9taXNlLnJlc29sdmUoKSA6IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0XHRfdGhpczM3LmNsaWVudC5hdXRoRHJpdmVyKG5ldyBEcm9wYm94LkF1dGhEcml2ZXIuUG9wdXAoe1xuXHRcdFx0XHRcdFx0cmVjZWl2ZXJVcmw6IG5ldyBVUkwobG9jYXRpb24pICsgXCJcIlxuXHRcdFx0XHRcdH0pKTtcblxuXHRcdFx0XHRcdF90aGlzMzcuY2xpZW50LmF1dGhlbnRpY2F0ZSh7IGludGVyYWN0aXZlOiAhcGFzc2l2ZSB9LCBmdW5jdGlvbiAoZXJyb3IsIGNsaWVudCkge1xuXG5cdFx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KEVycm9yKGVycm9yKSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChfdGhpczM3LmNsaWVudC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuXHRcdFx0XHRcdFx0XHQvLyBUT0RPIGNoZWNrIGlmIGNhbiBhY3R1YWxseSBlZGl0IHRoZSBmaWxlXG5cdFx0XHRcdFx0XHRcdF90aGlzMzcucGVybWlzc2lvbnMub24oW1wibG9nb3V0XCIsIFwiZWRpdFwiXSk7XG5cblx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0X3RoaXMzNy5wZXJtaXNzaW9ucy5vZmYoW1wibG9nb3V0XCIsIFwiZWRpdFwiLCBcImFkZFwiLCBcImRlbGV0ZVwiXSk7XG5cblx0XHRcdFx0XHRcdFx0cmVqZWN0KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdC8vIE5vdCByZXR1cm5pbmcgYSBwcm9taXNlIGhlcmUsIHNpbmNlIHByb2Nlc3NlcyBkZXBlbmRpbmcgb24gbG9naW4gZG9uJ3QgbmVlZCB0byB3YWl0IGZvciB0aGlzXG5cdFx0XHRcdF90aGlzMzcuY2xpZW50LmdldEFjY291bnRJbmZvKGZ1bmN0aW9uIChlcnJvciwgYWNjb3VudEluZm8pIHtcblx0XHRcdFx0XHRpZiAoIWVycm9yKSB7XG5cdFx0XHRcdFx0XHRfdGhpczM3Lnd5c2llLndyYXBwZXIuXy5maXJlKFwid3lzaWU6bG9naW5cIiwgJC5leHRlbmQoeyBiYWNrZW5kOiBfdGhpczM3IH0sIGFjY291bnRJbmZvKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uICgpIHt9KTtcblx0XHR9LFxuXG5cdFx0bG9nb3V0OiBmdW5jdGlvbiBsb2dvdXQoKSB7XG5cdFx0XHR2YXIgX3RoaXMzOCA9IHRoaXM7XG5cblx0XHRcdHJldHVybiAhdGhpcy5jbGllbnQuaXNBdXRoZW50aWNhdGVkKCkgPyBQcm9taXNlLnJlc29sdmUoKSA6IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0X3RoaXMzOC5jbGllbnQuc2lnbk91dChudWxsLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0X3RoaXMzOC5wZXJtaXNzaW9ucy5vZmYoW1wiZWRpdFwiLCBcImFkZFwiLCBcImRlbGV0ZVwiXSkub24oXCJsb2dpblwiKTtcblxuXHRcdFx0XHRcdF90aGlzMzgud3lzaWUud3JhcHBlci5fLmZpcmUoXCJ3eXNpZTpsb2dvdXRcIiwgeyBiYWNrZW5kOiBfdGhpczM4IH0pO1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0c3RhdGljOiB7XG5cdFx0XHR0ZXN0OiBmdW5jdGlvbiB0ZXN0KHVybCkge1xuXHRcdFx0XHRyZXR1cm4gKC9kcm9wYm94LmNvbS8udGVzdCh1cmwuaG9zdCkgfHwgdXJsLnByb3RvY29sID09PSBcImRyb3Bib3g6XCJcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH0pLCB0cnVlKTtcbn0pKEJsaXNzKTtcblxuKGZ1bmN0aW9uICgkKSB7XG5cblx0aWYgKCFzZWxmLld5c2llKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIF87XG5cblx0V3lzaWUuU3RvcmFnZS5CYWNrZW5kLmFkZChcIkdpdGh1YlwiLCBfID0gJC5DbGFzcyh7IGV4dGVuZHM6IFd5c2llLlN0b3JhZ2UuQmFja2VuZCxcblx0XHRjb25zdHJ1Y3RvcjogZnVuY3Rpb24gY29uc3RydWN0b3IoKSB7XG5cdFx0XHR0aGlzLnBlcm1pc3Npb25zLm9uKFwibG9naW5cIik7XG5cblx0XHRcdHRoaXMua2V5ID0gdGhpcy5zdG9yYWdlLnBhcmFtKFwia2V5XCIpIHx8IFwiN2UwOGUwMTYwNDgwMDBiYzU5NGVcIjtcblxuXHRcdFx0Ly8gRXh0cmFjdCBpbmZvIGZvciB1c2VybmFtZSwgcmVwbywgYnJhbmNoLCBmaWxlbmFtZSwgZmlsZXBhdGggZnJvbSBVUkxcblx0XHRcdCQuZXh0ZW5kKHRoaXMsIF8ucGFyc2VVUkwodGhpcy51cmwpKTtcblx0XHRcdHRoaXMucmVwbyA9IHRoaXMucmVwbyB8fCBcInd5c2llLWRhdGFcIjtcblx0XHRcdHRoaXMuYnJhbmNoID0gdGhpcy5icmFuY2ggfHwgXCJtYXN0ZXJcIjtcblx0XHRcdHRoaXMucGF0aCA9IHRoaXMucGF0aCB8fCB0aGlzLnd5c2llLmlkICsgXCIuanNvblwiO1xuXHRcdFx0dGhpcy5maWxlbmFtZSA9IHRoaXMuZmlsZW5hbWUgfHwgdGhpcy5wYXRoLm1hdGNoKC9bXi9dKiQvKVswXTtcblxuXHRcdFx0Ly8gVHJhbnNmb3JtIHRoZSBHaXRodWIgVVJMIGludG8gc29tZXRoaW5nIHJhdyBhbmQgQ09SUy1lbmFibGVkXG5cdFx0XHR0aGlzLnVybCA9IG5ldyBVUkwoXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vXCIgKyB0aGlzLnVzZXJuYW1lICsgXCIvXCIgKyB0aGlzLnJlcG8gKyBcIi9cIiArIHRoaXMuYnJhbmNoICsgXCIvXCIgKyB0aGlzLnBhdGggKyBcIj90cz1cIiArIERhdGUubm93KCkpO1xuXHRcdFx0dGhpcy5wZXJtaXNzaW9ucy5vbihcInJlYWRcIik7IC8vIFRPRE8gY2hlY2sgaWYgZmlsZSBhY3R1YWxseSBpcyBwdWJsaWNseSByZWFkYWJsZVxuXG5cdFx0XHR0aGlzLmxvZ2luKHRydWUpO1xuXHRcdH0sXG5cblx0XHRnZXQgYXV0aGVudGljYXRlZCgpIHtcblx0XHRcdHJldHVybiAhIXRoaXMuYWNjZXNzVG9rZW47XG5cdFx0fSxcblxuXHRcdHJlcTogZnVuY3Rpb24gcmVxKGNhbGwsIGRhdGEpIHtcblx0XHRcdHZhciBtZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBcIkdFVFwiIDogYXJndW1lbnRzWzJdO1xuXHRcdFx0dmFyIG8gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyB7IG1ldGhvZDogbWV0aG9kIH0gOiBhcmd1bWVudHNbM107XG5cblx0XHRcdGlmIChkYXRhKSB7XG5cdFx0XHRcdG8uZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gJC5mZXRjaChcImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vXCIgKyBjYWxsLCAkLmV4dGVuZChvLCB7XG5cdFx0XHRcdHJlc3BvbnNlVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHRcIkF1dGhvcml6YXRpb25cIjogXCJ0b2tlbiBcIiArIHRoaXMuYWNjZXNzVG9rZW5cblx0XHRcdFx0fVxuXHRcdFx0fSkpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0aWYgKGVyciAmJiBlcnIueGhyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVyci54aHIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uICh4aHIpIHtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldDogV3lzaWUuU3RvcmFnZS5CYWNrZW5kLlJlbW90ZS5wcm90b3R5cGUuZ2V0LFxuXG5cdFx0LyoqXG4gICAqIFNhdmVzIGEgZmlsZSB0byB0aGUgYmFja2VuZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGZpbGUgLSBBbiBvYmplY3Qgd2l0aCBuYW1lICYgZGF0YSBrZXlzXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGZpbGUgaXMgc2F2ZWQuXG4gICAqL1xuXHRcdHB1dDogZnVuY3Rpb24gcHV0KGZpbGUpIHtcblx0XHRcdHZhciBfdGhpczM5ID0gdGhpcztcblxuXHRcdFx0ZmlsZS5kYXRhID0gV3lzaWUudG9KU09OKGZpbGUuZGF0YSk7XG5cdFx0XHRmaWxlLnBhdGggPSBmaWxlLnBhdGggfHwgXCJcIjtcblxuXHRcdFx0dmFyIGZpbGVDYWxsID0gXCJyZXBvcy9cIiArIHRoaXMudXNlcm5hbWUgKyBcIi9cIiArIHRoaXMucmVwbyArIFwiL2NvbnRlbnRzL1wiICsgZmlsZS5wYXRoO1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMucmVwb0luZm8gfHwgdGhpcy5yZXEoXCJ1c2VyL3JlcG9zXCIsIHtcblx0XHRcdFx0bmFtZTogdGhpcy5yZXBvXG5cdFx0XHR9LCBcIlBPU1RcIikpLnRoZW4oZnVuY3Rpb24gKHJlcG9JbmZvKSB7XG5cdFx0XHRcdF90aGlzMzkucmVwb0luZm8gPSByZXBvSW5mbztcblxuXHRcdFx0XHRyZXR1cm4gX3RoaXMzOS5yZXEoZmlsZUNhbGwsIHtcblx0XHRcdFx0XHRyZWY6IF90aGlzMzkuYnJhbmNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSkudGhlbihmdW5jdGlvbiAoZmlsZUluZm8pIHtcblx0XHRcdFx0cmV0dXJuIF90aGlzMzkucmVxKGZpbGVDYWxsLCB7XG5cdFx0XHRcdFx0bWVzc2FnZTogXCJVcGRhdGVkIFwiICsgKGZpbGUubmFtZSB8fCBcImZpbGVcIiksXG5cdFx0XHRcdFx0Y29udGVudDogYnRvYShmaWxlLmRhdGEpLFxuXHRcdFx0XHRcdGJyYW5jaDogX3RoaXMzOS5icmFuY2gsXG5cdFx0XHRcdFx0c2hhOiBmaWxlSW5mby5zaGFcblx0XHRcdFx0fSwgXCJQVVRcIik7XG5cdFx0XHR9LCBmdW5jdGlvbiAoeGhyKSB7XG5cdFx0XHRcdGlmICh4aHIuc3RhdHVzID09IDQwNCkge1xuXHRcdFx0XHRcdC8vIEZpbGUgZG9lcyBub3QgZXhpc3QsIGNyZWF0ZSBpdFxuXHRcdFx0XHRcdHJldHVybiBfdGhpczM5LnJlcShmaWxlQ2FsbCwge1xuXHRcdFx0XHRcdFx0bWVzc2FnZTogXCJDcmVhdGVkIGZpbGVcIixcblx0XHRcdFx0XHRcdGNvbnRlbnQ6IGJ0b2EoZmlsZS5kYXRhKSxcblx0XHRcdFx0XHRcdGJyYW5jaDogX3RoaXMzOS5icmFuY2hcblx0XHRcdFx0XHR9LCBcIlBVVFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcInN1Y2Nlc3NcIik7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0bG9naW46IGZ1bmN0aW9uIGxvZ2luKHBhc3NpdmUpIHtcblx0XHRcdHZhciBfdGhpczQwID0gdGhpcztcblxuXHRcdFx0cmV0dXJuIHRoaXMucmVhZHkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChfdGhpczQwLmF1dGhlbnRpY2F0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XHRcdGlmIChwYXNzaXZlKSB7XG5cdFx0XHRcdFx0XHRfdGhpczQwLmFjY2Vzc1Rva2VuID0gbG9jYWxTdG9yYWdlW1wid3lzaWU6Z2l0aHVidG9rZW5cIl07XG5cblx0XHRcdFx0XHRcdGlmIChfdGhpczQwLmFjY2Vzc1Rva2VuKSB7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoX3RoaXM0MC5hY2Nlc3NUb2tlbik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIFNob3cgd2luZG93XG5cdFx0XHRcdFx0XHRfdGhpczQwLmF1dGhQb3B1cCA9IG9wZW4oXCJodHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgvYXV0aG9yaXplP2NsaWVudF9pZD1cIiArIF90aGlzNDAua2V5ICsgXCImc2NvcGU9cmVwbyxnaXN0JnN0YXRlPVwiICsgbG9jYXRpb24uaHJlZiwgXCJwb3B1cFwiLCBcIndpZHRoPTkwMCxoZWlnaHQ9NTAwXCIpO1xuXG5cdFx0XHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHRcdFx0XHRcdGlmIChldnQuc291cmNlID09PSBfdGhpczQwLmF1dGhQb3B1cCkge1xuXHRcdFx0XHRcdFx0XHRcdF90aGlzNDAuYWNjZXNzVG9rZW4gPSBsb2NhbFN0b3JhZ2VbXCJ3eXNpZTpnaXRodWJ0b2tlblwiXSA9IGV2dC5kYXRhO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFfdGhpczQwLmFjY2Vzc1Rva2VuKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZWplY3QoRXJyb3IoXCJBdXRoZW50aWNhdGlvbiBlcnJvclwiKSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZShfdGhpczQwLmFjY2Vzc1Rva2VuKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3RoaXM0MC5nZXRVc2VyKCk7XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHUpIHtcblx0XHRcdFx0XHRfdGhpczQwLnBlcm1pc3Npb25zLm9uKFwibG9nb3V0XCIpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIF90aGlzNDAucmVxKFwicmVwb3MvXCIgKyBfdGhpczQwLnVzZXJuYW1lICsgXCIvXCIgKyBfdGhpczQwLnJlcG8pO1xuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXBvSW5mbykge1xuXHRcdFx0XHRcdF90aGlzNDAucmVwb0luZm8gPSByZXBvSW5mbztcblxuXHRcdFx0XHRcdGlmIChyZXBvSW5mby5wZXJtaXNzaW9ucy5wdXNoKSB7XG5cdFx0XHRcdFx0XHRfdGhpczQwLnBlcm1pc3Npb25zLm9uKFwiZWRpdFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uICh4aHIpIHtcblx0XHRcdFx0XHRpZiAoeGhyLnN0YXR1cyA9PSA0MDQpIHtcblx0XHRcdFx0XHRcdC8vIFJlcG8gZG9lcyBub3QgZXhpc3Qgc28gd2UgY2FuJ3QgY2hlY2sgcGVybWlzc2lvbnNcblx0XHRcdFx0XHRcdC8vIEp1c3QgY2hlY2sgaWYgYXV0aGVudGljYXRlZCB1c2VyIGlzIHRoZSBzYW1lIGFzIG91ciBVUkwgdXNlcm5hbWVcblx0XHRcdFx0XHRcdGlmIChfdGhpczQwLnVzZXIubG9naW4gPT0gX3RoaXM0MC51c2VybmFtZSkge1xuXHRcdFx0XHRcdFx0XHRfdGhpczQwLnBlcm1pc3Npb25zLm9uKFwiZWRpdFwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGxvZ291dDogZnVuY3Rpb24gbG9nb3V0KCkge1xuXHRcdFx0aWYgKHRoaXMuYXV0aGVudGljYXRlZCkge1xuXHRcdFx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInd5c2llOmdpdGh1YnRva2VuXCIpO1xuXHRcdFx0XHRkZWxldGUgdGhpcy5hY2Nlc3NUb2tlbjtcblxuXHRcdFx0XHR0aGlzLnBlcm1pc3Npb25zLm9mZihbXCJlZGl0XCIsIFwiYWRkXCIsIFwiZGVsZXRlXCJdKS5vbihcImxvZ2luXCIpO1xuXG5cdFx0XHRcdHRoaXMud3lzaWUud3JhcHBlci5fLmZpcmUoXCJ3eXNpZTpsb2dvdXRcIiwgeyBiYWNrZW5kOiB0aGlzIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0fSxcblxuXHRcdGdldFVzZXI6IGZ1bmN0aW9uIGdldFVzZXIoKSB7XG5cdFx0XHR2YXIgX3RoaXM0MSA9IHRoaXM7XG5cblx0XHRcdHJldHVybiB0aGlzLnJlcShcInVzZXJcIikudGhlbihmdW5jdGlvbiAoYWNjb3VudEluZm8pIHtcblx0XHRcdFx0X3RoaXM0MS51c2VyID0gYWNjb3VudEluZm87XG5cblx0XHRcdFx0dmFyIG5hbWUgPSBhY2NvdW50SW5mby5uYW1lIHx8IGFjY291bnRJbmZvLmxvZ2luO1xuXHRcdFx0XHRfdGhpczQxLnd5c2llLndyYXBwZXIuXy5maXJlKFwid3lzaWU6bG9naW5cIiwge1xuXHRcdFx0XHRcdGJhY2tlbmQ6IF90aGlzNDEsXG5cdFx0XHRcdFx0bmFtZTogXCI8YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vXCIgKyBhY2NvdW50SW5mby5sb2dpbiArIFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PGltZyBjbGFzcz1cXFwiYXZhdGFyXFxcIiBzcmM9XFxcIlwiICsgYWNjb3VudEluZm8uYXZhdGFyX3VybCArIFwiXFxcIiAvPiBcIiArIG5hbWUgKyBcIlxcblxcdFxcdFxcdFxcdFxcdFxcdDwvYT5cIlxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRzdGF0aWM6IHtcblx0XHRcdHRlc3Q6IGZ1bmN0aW9uIHRlc3QodXJsKSB7XG5cdFx0XHRcdHJldHVybiAoL1xcYmdpdGh1Yi4oY29tfGlvKXxyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLy50ZXN0KHVybClcblx0XHRcdFx0KTtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuICAgICogUGFyc2UgR2l0aHViIFVSTHMsIHJldHVybiB1c2VybmFtZSwgcmVwbywgYnJhbmNoLCBwYXRoXG4gICAgKi9cblx0XHRcdHBhcnNlVVJMOiBmdW5jdGlvbiBwYXJzZVVSTCh1cmwpIHtcblx0XHRcdFx0dmFyIHJldCA9IHt9O1xuXG5cdFx0XHRcdHVybCA9IG5ldyBVUkwodXJsLCBsb2NhdGlvbik7XG5cblx0XHRcdFx0dmFyIHBhdGggPSB1cmwucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoXCIvXCIpO1xuXG5cdFx0XHRcdGlmICgvZ2l0aHViLmlvJC8udGVzdCh1cmwuaG9zdCkpIHtcblx0XHRcdFx0XHRyZXQudXNlcm5hbWUgPSB1cmwuaG9zdC5tYXRjaCgvKFtcXHctXSspXFwuZ2l0aHViXFwuaW8kLylbMV07XG5cdFx0XHRcdFx0cmV0LmJyYW5jaCA9IFwiZ2gtcGFnZXNcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXQudXNlcm5hbWUgPSBwYXRoLnNoaWZ0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQucmVwbyA9IHBhdGguc2hpZnQoKTtcblxuXHRcdFx0XHRpZiAoL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20kLy50ZXN0KHVybC5ob3N0KSkge1xuXHRcdFx0XHRcdHJldC5icmFuY2ggPSBwYXRoLnNoaWZ0KCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoL2dpdGh1Yi5jb20kLy50ZXN0KHVybC5ob3N0KSAmJiBwYXRoWzBdID09IFwiYmxvYlwiKSB7XG5cdFx0XHRcdFx0cGF0aC5zaGlmdCgpO1xuXHRcdFx0XHRcdHJldC5icmFuY2ggPSBwYXRoLnNoaWZ0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQuZmlsZW5hbWUgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cblx0XHRcdFx0cmV0LnBhdGggPSBwYXRoLmpvaW4oXCIvXCIpO1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KSwgdHJ1ZSk7XG59KShCbGlzcyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Kc2FYTnpMbTFwYmk1cWN5SXNJbk4wY21WMFkyaDVMbXB6SWl3aWQzbHphV1V1YW5NaUxDSndaWEp0YVhOemFXOXVjeTVxY3lJc0luTjBiM0poWjJVdWFuTWlMQ0p1YjJSbExtcHpJaXdpZFc1cGRDNXFjeUlzSW1WNGNISmxjM05wYjI0dWFuTWlMQ0ptZFc1amRHbHZibk11YW5NaUxDSnpZMjl3WlM1cWN5SXNJbkJ5YVcxcGRHbDJaUzVxY3lJc0luQnlhVzFwZEdsMlpTNXBiV2QxY2k1cWN5SXNJbU52Ykd4bFkzUnBiMjR1YW5NaUxDSndjbVYwZEhsd2NtbHVkQzVxY3lJc0ltUmxZblZuTG1weklpd2ljM1J2Y21GblpTNWtjbTl3WW05NExtcHpJaXdpYzNSdmNtRm5aUzVuYVhSb2RXSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0RlEwRkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096dEJRVU5CT3p0QlFVVkJPMEZCUlVFc1FVRkRRVHRCUVVaQk96dEJRVWRCTEdsRFFVTkJPemhNUVVOQkxFRkJRMEU3T3p0QlFVTkJPMEZCUlVFc1FVRkRRU3hUUVVaQk96czdRVUZIUVN4M1FrRkRRVHN5UkVGRFFTeHRSMEZEUVN4QlFVTkJPenM3UVVGRFFTeDVRa0ZEUVR0aFFVTkJPM05KUVVOQk8xZEJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3YVVSQlEwRXNRVUZEUVN4QlFVTkJPenM3T3p0QlFVZEJMRUZCUTBFc1FVRkRRU3hYUVVoQk96czdOa0pCU1VFN1owSkJRMEVzUVVGRFFTeEZRVkJCT3pzN1owSkJVMEVzUzBGRVFUczBRa0ZGUVN4QlFVTkJMRUZCUTBFN096c3JRa0ZEUVN4QlFVTkJPenN5UWtGRFFUc3lRa0ZEUVN4QlFVTkJPenM3YzBKQlJVRXNRVUZEUVN4aFFVWkJPenQxUWtGSlFTeEJRVU5CTEVGQlEwRXNZVUZJUVRzN096SkVRVWxCTEVGQlEwRTdPekJDUVVWQkxFRkJRMEU3T3p0elFrRkZRU3hCUVVOQkxGbEJSa0U3TzNOQ1FVbEJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzV1VGTVFUczdPenM3UVVGT1FTeDVRa0ZaUVN4QlFVTkJPenR2UmtGRFFTeEJRVU5CT3p0clEwRkRRU3hCUVVOQk96czdkME5CUjBFN1owVkJRMEU3YjBSQlEwRXNRVUZEUVN4QlFVTkJPenM3UVVGT1FTeEJRVU5CTEZGQlRVRXNRVUZEUVRzN05rSkJRMEU3T3p0clEwRkhRU3hCUVVOQkxGVkJTRUVzUVVGRFFUczdPMjlDUVVsQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNVMEZNUVRzN096czdlVUpCVFVFc1FVRkRRVHM3WjBOQlEwRTdaMFJCUTBFc1FVRkRRVHM3ZFVSQlEwRXNRVUZEUVRzN05FUkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3YTBOQlEwRTdZVUZEUVN4QlFVTkJMRUZCUTBFN096dGpRVU5CTzI5Q1FVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdZVUZIUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hUUVVwQk8wMUJSRUU3T3p0VlFVMUJMRUZCUTBFc1FVRkRRVHM3TzNGRFFVTkJPMVZCUTBFc2JVSkJRMEVzYzBKQlEwRXNkVU5CUTBFc2NVTkJRMEVzUVVGRFFTeEJRVU5CT3pzN096aERRVVZCTERaSlFVTkJMRUZCUTBFN08wdEJRMEVzUVVGRFFTeEJRVU5CTEZsQlRrRTdPenROUVU5QkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3p0QlFTOUpRVHRKUVd0S1FTeEJRVU5CTEU5QlJrRTdSVUZFUVN4TlFVbEJMRUZCUTBFN08ydEVRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3TzNWRFFVTkJPMmRDUVVOQk8yZENRVU5CTEVGQlEwRXNRVUZEUVRzN096dEJRVU5CTEc5RVFVTkJMRUZCUTBFN096dFRRVU5CTERSRFFVTkJMRUZCUTBFN096czdORU5CUjBFN096QkRRVVZCTzNWRFFVTkJPMnREUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3p0UFFVNUJPenQxUTBGUFFUdGpRVU5CTzFsQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHRMUVdaQk8wVkJSRUU3T3p0QlF6TkxRVHM3UVVGRlFTeEJRVU5CT3p0QlFVTkJMRGhDUVVOQk96czdPMk5CUlVFc1FVRkRRU3hCUVVOQk96czdRVUZJUVN4NVJFRkpRVHM0UTBGRFFTeEJRVU5CTEVGQlEwRTdPenQxUlVGRFFTeEJRVU5CT3p0eFEwRkRRU3hCUVVOQk96czRSVUZEUVN4QlFVTkJPenR6UWtGRFFUdDFSVUZEUVRzMFFrRkRRVHR0UWtGRFFTeEJRVU5CTEVGQlEwRTdPenM0UWtGRFFTeEJRVU5CTEVGQlEwRTdPenQ1UjBGRFFUczdNa05CUlVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzU1VGS1FUczdPenQxUkVGTFFTeEJRVU5CTEVGQlEwRTdPenM3T0VOQlJVRTdlVUpCUTBFN2JVUkJRMEVzUVVGRFFTeEJRVU5CT3p0QlFVeEJMR2xDUVUxQk8yOURRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3pzN2MwSkJSMEVzUVVGRFFTeEJRVU5CT3pzN1FVRktRU3hCUVVOQk8zRkNRVXRCTEVGQlEwRXNWMEZHUVRzN05rSkJTVUVzUVVGRFFTeEJRVU5CTEZOQlNFRTdPenM0UWtGSlFTeEJRVU5CTEVGQlEwRTdPenM0UWtGRFFTeEJRVU5CT3pzeVFrRkRRU3hCUVVOQkxFRkJRMEU3T3pzN2QwTkJSVUVzVTBGRVFUczdkMEpCUlVFc1FVRkRRU3hCUVVOQk96czdPMjlDUVVOQkxFRkJRMEVzUVVGRFFUczdPM1ZEUVVOQk95dERRVU5CTzNORFFVTkJMRUZCUTBFN08ydEVRVU5CTEVGQlEwRTdPMkZCUTBFN2JVUkJRMEU3WjBKQlEwRTdhVUpCUTBFN1pVRkRRVHRYUVVOQk8ybENRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPenQxUTBGRlFUdG5Ra0ZEUVR0clFrRkRRVHM3YTBSQlEwRXNRVUZEUVN4QlFVTkJPenRQUVU1Qk96dDFRMEZQUVR0blFrRkRRVHRyUWtGRFFUdGhRVU5CT3p0dlFrRkRRVHM3TzIxRFFVVkJMR2RDUVVSQk8yOURRVVZCTEVGQlEwRTdPenMyUTBGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdlVU5CUTBFN1owSkJRMEU3YTBKQlEwRTdaVUZEUVR0aFFVTkJPenR2UWtGRFFUczdjMFJCUTBFN05FSkJRMEU3YjBOQlEwRTdjVU5CUTBFc1FVRkRRU3hCUVVOQk96czdPelpEUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096dHRSVUZEUVN4QlFVTkJPenR6UTBGRFFTeEJRVU5CT3pzN096SkNRVVZCTEVGQlEwRTdVVUZHUVRzN2EwSkJSMEU3TzNOQ1FVTkJMRUZCUTBFN096dFhRVVZCTEVGQlEwRXNRVUZEUVN4QlFVTkJMRTlCU2tFN096czdPM2REUVUxQk8yZENRVU5CTzJ0Q1FVTkJPenR0UWtGRFFTeEJRVU5CTEVGQlEwRTdPMDlCVGtFN08zVkRRVTlCTEVGQlEwRTdPM05EUVVOQk8ydENRVU5CT3p0elFrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096czdhVU5CUlVFc1FVRkRRVHM3T3pCQ1FVTkJMRUZCUTBFN1QwRktRVHRWUVV0QkxFRkJRMEU3TzJsRFFVTkJMRUZCUTBFN08yTkJRMEVzUVVGRFFUczdlVUpCUTBFc1FVRkRRU3hCUVVOQk96czdkMEpCUTBFN2VVTkJRMEVzUVVGRFFTeEJRVU5CT3pzN0swSkJRMEVzUVVGRFFTeEJRVU5CT3pzN1lVRkRRVHRsUVVOQkxFRkJRMEVzUVVGRFFUczdPeXRDUVVOQk96UkNRVU5CTEVGQlEwRXNRVUZEUVRzN096czdPMjFDUVVWQkxFRkJRMEVzUVVGRFFTeE5RVWhCT3pzN08yZEVRVXRCTEVGQlEwRTdPMk5CUTBFN1kwRkRRU3hCUVVOQk8xVkJRMEU3Y1VKQlEwRTdhME5CUTBFc1FVRkRRU3hCUVVOQk96czdlVUpCUTBFc1FVRkRRU3hCUVVOQkxFMUJZa0U3T3pzd1FrRmpRVHM3YVVOQlJVRTdZMEZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hSUVV4Qk96czdPenRyUWtGUFFTeEJRVU5CT3p0aFFVTkJMRUZCUTBFN08zZEdRVU5CT3pzclEwRkZRU3hOUVVSQk8zVkVRVVZCTEVGQlEwRXNRVUZEUVRzN096aERRVU5CTzJsRFFVTkJMRUZCUTBFN096UkVRVU5CTEVGQlEwRTdPMmxDUVVOQk96aEVRVU5CTEVGQlEwRXNRVUZEUVRzN08wMUJRMEVzUVVGRFFTeE5RWEpDUVRzN09FSkJjMEpCTEVGQlEwRXNRVUZEUVRzN096dDNRa0ZGUVN4QlFVTkJPenMwUWtGRFFUczdjMEpCUlVFN1dVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeE5RVXhCT3p0TlFVcEJPenRWUVZWQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096dGhRVVZCTEU5QlJFRTdNRUpCUlVFN2EwSkJRMEU3ZVVKQlEwRXNRVUZEUVN4QlFVTkJPenM3TzJGQlJVRXNRVUZEUVN4UFFVWkJPenR4UWtGSFFUdHBRa0ZEUVN4QlFVTkJMRUZCUTBFN096dHZRa0ZEUVR0NVFrRkRRU3hCUVVOQkxFRkJRMEU3T3pzN1lVRkZRU3hCUVVOQkxFRkJRMEVzVTBGSVFUczdPenRyUWtGTFFTeEJRVU5CTEVGQlEwRXNWVUZJUVRzN08xRkJTVUU3V1VGRFFUczJRa0ZEUVRzNFEwRkRRU3hCUVVOQk96dG5Ra0ZEUVR0blJFRkRRU3hCUVVOQk8xbEJRMEU3YlVOQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN2EwUkJRMEU3Y1VSQlEwRXNRVUZEUVRzN2FVTkJRMEU3T0VKQlEwRTdiVVJCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN2QwTkJRMEU3YlVOQlEwRTdaME5CUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenM3VlVGRFFUdFJRVU5CTEVGQlEwRTdPMmxEUVVOQk96dFpRVVZCTEVGQlEwRXNRVUZEUVN4SFFVaEJPenM3T3p0WlFVMUJMRUZCUTBFc1FVRkRRU3hMUVVwQkxFRkJRMEU3T3p0elEwRkpRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenM3T3pzd1FrRkpRVHM3UVVGRVFTeDNRMEZGUVRzN1pVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdRVUZTUVN4QlFVTkJPenM3T3pCQ1FWTkJPMmRFUVVWQk8xbEJSRUVzV1VGRlFUdExRVU5CTEVGQlEwRXNRVUZEUVN4alFWQkJPenM3TmtOQlVVRTdPMWxCUlVFc1FVRkRRU3hCUVVOQkxFdEJTRUU3T3p0eFJFRkpRU3hCUVVOQkxFRkJRMEU3T3pzN2NVWkJSVUVzUVVGRFFUczdPRUpCUTBFN2FVSkJRMEU3ZFVKQlEwRTdNRUpCUTBFN1VVRkRRVHR2UWtGRFFUdG5Ra0ZEUVR0alFVTkJPemhDUVVOQkxFRkJRMEVzUVVGRFFUdE5RV0pCT3pzNFFrRmpRU3hCUVVOQk96dFhRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3TzJ0RFFVTkJPM1ZEUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096czdZVUZIUVN4QlFVTkJMRUZCUTBFc1MwRklRVHM3T3pzN1QwRkpRU3hCUVVOQkxFRkJRMEVzU1VGUVFUczdPMjFEUVZGQk96QkVRVU5CTEVGQlEwRXNRVUZEUVRzN08zTkRRVU5CTzJsRlFVTkJMRUZCUTBFc1FVRkRRVHM3TzJkQ1FVTkJMRUZCUTBFc1FVRkRRVHM3T3p0QlFVTkJMRUZCUTBFN096dEJRVU5CTEhsQ1FVTkJPMk5CUTBFN08yOUVRVU5CT3p0WFFVTkJPMk5CUTBFN1kwRkRRVHRwUWtGRFFUdGpRVU5CTzFWQlEwRTdVVUZEUVRzN05rWkJRMEU3TzJWQlEwRTdWMEZEUVR0WFFVTkJPMlZCUTBFN1YwRkRRVHRYUVVOQkxFRkJRMEVzUVVGRFFUczdPenRCUVVOQk96czdRVUZEUVRzN096czdRVUZEUVRzN08wRkJRMEU3WVVGRFFUczdhMEpCUTBFN096czdRVUZEUVRzNFFrRkRRVHM3TzBGQlEwRXNlVUpCUTBFN2IwTkJRMEU3YVVOQlEwRTdOa05CUTBFN2QwTkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPenM3TzBGQmNHSkJMRVZCY1dKQk8zVkRRVVZCTzNWQ1FVTkJPM1ZDUVVOQkxFRkJRMEU3T3pSQ1FVTkJPelJDUVVOQkxFRkJRMEU3TzJsQ1FVTkJPMlZCUTBFc1FVRkRRU3hCUVVOQk8wdEJXRUU3TzFOQldVRXNRVUZEUVRzN08wRkJRMEU3TzNkQ1FVZEJMRUZCUTBFN096WkNRVU5CT3l0RFFVTkJMRUZCUTBFN096dHZRa0ZGUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzVFVGT1FUczdTMEZPUVR0TFFVUkJPenM3T3pzN09FSkJaMEpCTEVGQlEwRTdTMEZHUVRzN2IwSkJSMEVzUVVGRFFUczdkVU5CUTBFN01FSkJRMEU3TUVKQlEwRXNRVUZEUVN4QlFVTkJPenM3U1VGRFFTeEJRVU5CTEVsQldrRTdPenRoUVdOQkxFZEJRMEVzZFVWQlEwRXNRVUZEUVRzN096dGhRVXRCTEVGQlEwRXNRVUZEUVN4VFFVcEJMRUZCUTBFN1MwRklRU3hCUVVOQk8wZEJUa0U3ZFVKQldVRTdPenRCUVVOQkxEWkNRVU5CTEVGQlEwRTdaMEpCUTBFN08wRkRhbVpCT3p0QlFVVkJMSEZEUVVOQk96dHRRa0ZGUVR0blFrRkRRU3hCUVVOQk96dFpRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRWRCVUVFN096czdkVUpCVVVFN2VVSkJRMEU3Y1VKQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN096czdPelJDUVVWQkxFRkJRMEU3VFVGR1FUczdWVUZIUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN096dHBSRUZGUVN4QlFVTkJPenM3TkVKQlEwRXNRVUZEUVR0TlFVcEJPenRWUVV0QkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3pzclFrRkZRU3hCUVVOQkxGVkJSa0U3TzJWQlIwRXNRVUZEUVRzN2FVTkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3pzN096czdPMmxEUVVkQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNVVUZNUVR0TlFVUkJPenM3T3p0cFJFRlJRU3hCUVVOQk96czdPMEZCUjBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzWlVGTVFTeEJRVU5CT3pzN08wRkJTa0VzYjBaQlUwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenM3T3pzN08yOUNRVVZCT3p0dFFrRkRRU3hCUVVOQk8wMUJTRUU3TzNWQ1FVbEJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenM3TzFsQlJVRTdZVUZEUVN4QlFVTkJPenM3TzBGQlIwRXNRVUZEUVN4QlFVTkJMRmRCU2tFc1FVRkRRVHM3TzIxQ1FVbEJPM2xFUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3TzBGQlpFRXNkMEpCWlVFc1FVRkRRU3hCUVVOQk96czdORU5CUTBFN2JVUkJRMEVzUVVGRFFUczdPenR6UWtGSFFUdGhRVU5CTEVGQlEwRXNWMEZLUVN4QlFVTkJPM1ZDUVVsQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN08zTkNRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPenM3TzNWRFFVVkJPMjFFUVVOQkxFRkJRMEVzUVVGRFFUdE5RVXBCT3p0VlFVdEJMRUZCUTBFc1FVRkRRVHM3TzFWQlEwRTdXVUZEUVN4QlFVTkJMRUZCUTBFN096czdPenRuUTBGSFFUdFJRVVJCTzBGQlJVRXNRVUZEUVN4QlFVTkJPenM3TzJsQ1FVVkJPemhDUVVOQkxFRkJRMEVzUVVGRFFUczdPMmREUVVOQkxFRkJRMEVzUVVGRFFTeFZRVkJCTzA5QlRrRTdPMjFDUVdOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN1NVRTFTVUU3TzBGQk5rbEJMRmxCUTBFN08wRkJRMEVzYjBOQlEwRTdPMmxDUVVWQkxFRkJRMEVzUVVGRFFTeE5RVWhCT3pzN08wRkJTVUVzY1VOQlEwRTdPMmRDUVVWQkxFRkJRMEVzUVVGRFFTeE5RVWhCT3pzN08wRkJTVUVzYlVOQlEwRTdWMEZEUVRzMFFrRkRRU3hCUVVOQkxFRkJRMEU3T3pzN1FVRkRRU3c0UTBGRFFUdFpRVU5CTzJWQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096dEhRVU5CT3p0QlEzcExRVHM3UVVGRlFTeHBRMEZEUVRzN096dG5Ra0ZGUVN4QlFVTkJPenM3ZVVKQlJVRTdPRUpCUTBFc1FVRkRRU3hCUVVOQk96czdkMEpCUTBFc1FVRkRRU3hCUVVOQkxGVkJVRUU3T3pzN05FSkJVVUVzUVVGRFFUczdPelpGUVVOQkxFRkJRMEU3T3p0dFFrRkRRU3hCUVVOQk96czdkMFJCUTBFN2QwUkJRMEVzUVVGRFFTeEJRVU5CT3pzN2RVSkJRMEVzUVVGRFFUczdPenM3TWtaQlNVRXNRVUZEUVRzN2VVTkJRMEU3VlVGRFFUdHJRa0ZEUVR0clFrRkRRVHRuUWtGRFFUdGhRVU5CT3p0WFFVVkJPMk5CUTBFc1FVRkRRU3hCUVVOQkxGRkJTa0U3T3p0elEwRkxRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenRCUVc1Q1FTeEJRVU5CTEVGQlEwRXNVVUZyUWtFN09FSkJRMEU3T3p0NVJVRkhRVHRoUVVOQkxFRkJRMEVzUVVGRFFTeFJRVXhCTEVGQlEwRTdPenRuUkVGTFFUdHJRa0ZEUVR0cFEwRkRRVHRyUTBGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096dEJRWHBFUVRzeVEwRXlSRUU3ZFVKQlEwRTdNRVJCUlVFc2QwTkJRMEVzVVVGRFFUdFZRVU5CTzJ0Q1FVTkJPMmRDUVVOQk8yRkJRMEU3T3pCQ1FVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPMHRCWWtFc1IwRklRVHM3T3p0cFJFRnJRa0VzUVVGRFFTeEJRVU5CTEVGQlEwRXNSMEZLUVRzN096czdPM0ZDUVUxQkxFRkJRMEVzUVVGRFFUdE5RVWhCT3pzN096dHhRa0ZMUVN4QlFVTkJMRUZCUTBFN1RVRklRVHM3T3pzN2NVSkJTMEVzUVVGRFFTeEJRVU5CTzAxQlNFRTdPenRUUVVsQk8yZENRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdPM2RDUVVOQk96czdhMEpCUTBFc1FVRkRRVHM3Y1VKQlEwRXNRVUZEUVRzN2NVTkJRMEVzUVVGRFFUczdPenQxUWtGSFFTeE5RVVJCT3p0NVFrRkhRU3hOUVVSQk8ybERRVVZCTEVGQlEwRTdPenMwUWtGRlFTeEJRVU5CTEVGQlEwRXNWVUZJUVRzN08zVkVRVWxCTzNsQ1FVTkJPelJDUVVOQkxFRkJRMEU3TzNsQ1FVTkJMRUZCUTBFN096c3dRa0ZGUVN4QlFVTkJMRWxCUmtFN1dVRkhRVHR2UWtGRFFUdHpRa0ZEUVN4QlFVTkJMRUZCUTBFN096dHBRMEZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk8wOUJOMEpCT3pzN096czdPenM3Y1VKQkswSkJMRUZCUTBFN096czdkMEpCUjBFN2IwSkJRMEU3YjBKQlEwRTdXVUZEUVN4QlFVTkJMRUZCUTBFN1VVRk9RVHRQUVVSQk8zZENRVkZCTzJsRFFVTkJMRUZCUTBFN08zbENRVU5CT3pKQ1FVTkJPM2xDUVVOQkxFRkJRMEU3TzJGQlEwRTdiVUpCUTBFN2NVSkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN1RVRjRRa0U3T3pzd1FrRjVRa0U3ZFVSQlEwRXNRVUZEUVN4QlFVTkJPenM3TkVKQlEwRTdkVVJCUTBFc1FVRkRRU3hCUVVOQk96czdPMkZCUlVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzVFVGS1FUczdPenM3T3p0blEwRlJRU3hCUVVOQk96czJRa0ZEUVR0dlEwRkRRU3hCUVVOQk96dHZSMEZEUVN4QlFVTkJPenQxUTBGRFFUdDFRMEZEUVN4QlFVTkJMRUZCUTBFN096dHpRa0ZEUVN4QlFVTkJMRUZCUTBFc1NVRm9Ra0VzUVVGRFFTeEJRVU5CT3pzN1VVRmxRVHN3UTBGRFFUczdOa0pCUlVFN01rSkJRMEU3YVVKQlEwRTdlVUpCUTBFc1FVRkRRU3hCUVVOQk8xRkJUa0U3VjBGUFFUdDNRMEZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenRWUVVOQk96dDVSa0ZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN08wRkJkazVCTEVWQmQwNUJMRzFDUVVOQk96czdPMk5CUlVFN2EwSkJRMEU3T0VKQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdRVUZPUVN4blEwRlBRU3hCUVVOQk96czdPMjlEUVVkQkxGRkJSRUU3YlVKQlJVRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3TzA5QlZFRTdPenM3TzJsQ1FWVkJPenRyUWtGRFFUczdPMnRDUVVOQkxFRkJRMEU3T3p0VFFVTkJPMVZCUTBFc1FVRkRRU3hCUVVOQk96czdWVUZEUVN4QlFVTkJPenM3WTBGRlFTeEJRVU5CT3p0clJFRkRRVHM3Y1VOQlJVRTdNa0pCUTBFN1pVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeFRRVTVCT3p0UFFVcEJPenRYUVZkQkxFRkJRMEVzUVVGRFFUczdPMkZCUTBFc1FVRkRRVHM3TzNOQ1FVVkJPMjFFUVVOQk8yVkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4TFFWQkJPenM3T3pzN1JVRlJRU3cyUTBGRFFUczdkME5CUlVFc1FVRkRRVHM3TmtKQlEwRXNRVUZEUVN4QlFVTkJMRTFCVEVFN096dHpRa0ZOUVR0MVEwRkRRU3hCUVVOQkxFRkJRMEU3T3pzd1FrRkRRVHM3T3p0blJFRkRRVHRyUWtGRFFTeEJRVU5CTEVGQlEwRTdPenRWUVVOQk96UkNRVU5CTzNWQ1FVTkJPMjlDUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdPenRGUVVOQkxEUkRRVU5CT3p0M1FrRkZRU3hCUVVOQkxFRkJRMEVzVTBGSVFUczdPenRwUTBGTFFUdHJRa0ZEUVRzN0swSkJRMEVzUVVGRFFTeEJRVU5CTzAxQlRFRTdPenRWUVUxQk96dHhRa0ZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN08wVkJRMEVzTWtOQlEwRTdPM2REUVVWQk8zbENRVU5CTEVGQlEwRXNRVUZEUVN4SFFVcEJPenM3YzBKQlMwRTdORU5CUTBFc1FVRkRRU3hCUVVOQk96czdNa0pCUTBFN096czdPRU5CUTBFN2EwSkJRMEVzUVVGRFFTeEJRVU5CT3pzN1ZVRkRRVHMwUWtGRFFUdDFRa0ZEUVR0dFFrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3TzBkQlEwRTdPMEZEY0ZaQk96dEJRVVZCTERoQ1FVTkJPMWxCUTBFN096SkNRVVZCTzI5Q1FVTkJMRUZCUTBFc1FVRkRRVHM3TzJ0Q1FVTkJMRUZCUTBFN08yZENRVU5CTEUxQlVFRTdkME5CVVVFN2NVTkJRMEVzUVVGRFFUczdiME5CUTBFc1FVRkRRU3hCUVVOQk96czdaVUZEUVR0blFrRkRRU3hCUVVOQkxFRkJRMEU3T3p0aFFVTkJPM0ZFUVVOQkxFRkJRMEVzUVVGRFFUczdPMkZCUTBFN1pVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdPekJDUVVWQkxFRkJRMEU3T3p0NVFrRkZRVHM3TkVKQlJVRTdiVUpCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN1FVRk1RVHQ1UTBGUFFTeEJRVU5CT3p0cFJFRkRRU3hCUVVOQk96c3dSRUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHRUUVZKQk96czdPMk5CVlVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzU1VGS1FUczdPenM3TzJOQlQwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFdEJUa0U3T3pzN096dEJRVVJCT3p0bFFWVkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFdEJTa0U3VTBGRVFUczdPenRqUVU5QkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVsQlNrRTdPenM3ZVVKQlMwRXNRVUZEUVRzN096czdOa0pCUjBFN08zbENRVU5CTEVGQlEwRTdWMEZJUVR0alFVbEJPekJDUVVOQkxFRkJRMEVzUVVGRFFUczdPM2RDUVVOQkxFRkJRMEU3TzJOQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1MwRmtRVHM3T3pzNFEwRmxRVHRyUWtGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenRQUVM5RVFUczdPMVZCWjBWQkxFRkJRMEVzUVVGRFFTeEpRWEpGUVRzN096czdkVUpCZDBWQkxFRkJRMEVzUzBGR1FUczdkVUpCUjBFN2IwTkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPMHRCVWtFN08xVkJVMEVzUVVGRFFTeEJRVU5CT3pzN08yVkJSVUVzUVVGRFFTeExRVVpCT3pzN2RVSkJTVUVzUVVGRFFTeFBRVVpCT3pzN1dVRkpRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVsQlRFRTdPenM3T3pzN08wbEJUVUU3TzJ0Q1FVTkJMRUZCUTBFN08zRkRRVU5CTzNsRVFVTkJMRUZCUTBFN1ZVRkRRVHRwUlVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdPM2xEUVVWQkxFRkJRMEVzUVVGRFFUdE5RVWhCT3pzN2VVTkJTVUVzUVVGRFFUczdNRUpCUTBFc1FVRkRRVHM3VlVGRFFUdDFSRUZEUVRzN096c3dRMEZGUVN4QlFVTkJMRUZCUTBFc1QwRklRVHM3TzJkRlFVbEJMRUZCUTBFc1FVRkRRVHM3T3pzN05FVkJSMEVzUVVGRFFUczdkVVJCUTBFN1owVkJRMEVzUVVGRFFTeEJRVU5CT3pzN2EwSkJRMEU3YzBOQlEwRXNRVUZEUVN4QlFVTkJPenM3VjBGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRk5CYUVKQkxFRkJRMEU3T3p0SlFYcEtRVHRuUWtGNVMwRXNRVU14UzBFc1FVRkRRU3hCUVVOQk96czdPenRCUVVOQk96dEJRVVZCTERoQ1FVTkJPMWxCUTBFN2FVSkJRMEU3T3pCRFFVVkJMRUZCUTBFN08zRkNRVU5CTEVGQlEwRXNWMEZLUVRzN2QwSkJTMEVzUVVGRFFUczdiMFJCUTBFc1FVRkRRU3hCUVVOQk96czdOa05CUTBFN05rTkJRMEVzUVVGRFFUczdiME5CUTBFc1FVRkRRU3hCUVVOQk96czdPM2RDUVVWQk8yZENRVU5CTEVGQlEwRXNRVUZEUVRzN08zVkRRVU5CT3pCQ1FVTkJPMnRDUVVOQkxFRkJRMEU3TzFOQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFdEJaRUU3T3pzN096czdhMEpCWjBKQkxFRkJRMEVzVVVGR1FUczdPMWRCU1VFc1FVRkRRU3hCUVVOQkxFdEJTRUU3T3p0cFJFRkpRU3hCUVVOQkxFRkJRMEU3T3pzN1dVRkZRU3hCUVVOQk96czdhVU5CUTBFc01rSkJRMEVzTmtKQlEwRXNhVUpCUTBFc1FVRkRRVHM3T3p0WFFVVkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFdEJTa0U3T3pzN1FVRlNRU3huUTBGaFFUczdXVUZGUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFdEJURUU3T3pzN08xRkJUVUU3YjBOQlEwRTdPenMyUTBGRFFTeEJRVU5CT3pzN096dHhRMEZKUVRzN01FTkJSVUVzUVVGRFFTeEJRVU5CTEUxQlNFRTdVVUZLUVN4QlFVTkJMRUZCUTBFN08ybEVRVTlCTEUxQlEwRTdWMEZEUVR0dFFrRkRRVHRqUVVOQk96dHBRMEZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdUVUZXUVRzN2JVTkJWMEVzUVVGRFFUczdPMmREUVVkQk8yMURRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3TzBGQlRrRXNRVUZEUVN4eFFrRk5RU3hCUVVOQk96czRRMEZEUVR0cFFrRkRRVHRyUWtGRFFUdGpRVU5CTzFsQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN096dGhRVWRCTEVGQlEwRXNRVUZEUVN4TlFVaEJPenM3Y1VSQlNVRXNRVUZEUVRzN1YwRkRRU3hCUVVOQkxFRkJRMEVzVFVGVVFUczdPelJEUVZWQk8ybEVRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3TzFWQlEwRTdPMjlEUVVWQkxFRkJRMEVzVTBGR1FUczdPRVZCUjBFc1FVRkRRU3hCUVVOQk96czdkVVJCUTBFN05FSkJRMEU3ZVVKQlEwRXNRVUZEUVN4QlFVTkJPenM3ZVVaQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3TzBsQk5VbEJPMmRDUVRaSlFUczdRVU5xU2tFN08wRkJSVUU3TzNGQ1FVZEJMRUZCUTBFc1FVRkRRU3hYUVVoQk96czdPM2RDUVV0QkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN08wRkJTa0VzYVVSQlMwRXNRVUZEUVRzN1QwRkRRVHQzUWtGRFFUc3dRa0ZEUVN4QlFVTkJMRUZCUTBFN096c3JRa0ZEUVN4QlFVTkJPM1ZDUVVOQk96aEVRVU5CTEVGQlEwRTdPMjFDUVVOQkxFRkJRMEVzUVVGRFFUczdPMlZCUTBFc1FVRkRRU3hCUVVOQk96czdaME5CUTBFN2MwSkJRMEVzUVVGRFFTeEJRVU5CTzBkQkwwSkJPenM3TzIxQ1FXbERRU3hCUVVOQk96dHpRMEZEUVR0cFEwRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenRCUVZCQk8ydEdRVk5CTzFkQlEwRXNRVUZEUVN4QlFVTkJMRWxCU2tFN096dHBRMEZMUVN4QlFVTkJPenQxUWtGRFFTeEJRVU5CTEdsR1FVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdVVUZEUVRzN05rSkJSVUVzUVVGRFFUczdiMEpCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUzBGT1FUczdPenRWUVU5Qk8xVkJRMEVzUVVGRFFUczdVMEZEUVRzN096dGhRVVZCTEV0QlJFRTdiVUpCUlVFc1FVRkRRVHM3ZVVaQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3p0SlFUTkZRVHM3UVVFMFJVRTdPMEZCUlVFc01FTkJRMEU3TzJsRFFVVkJMRUZCUTBFN08ydERRVU5CT3poQ1FVTkJMRUZCUTBFN096dDFRa0ZGUVN4UlFVUkJPMjFDUVVWQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN08yOURRVU5CTzJsQ1FVTkJPMEZCWWtFc1owTkJZMEU3ZFVOQlEwRXNRVUZEUVRzN0swTkJRMEVzUVVGRFFUczdiMGRCUTBFc1FVRkRRU3hCUVVOQk96czdZMEZEUVRzclJVRkRRU3hCUVVOQkxFRkJRMEU3T3p0dFFrRkRRVHQzUWtGRFFUdHpSVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHR2UkVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3p0cFFrRkZRVHRuUWtGRFFTeEJRVU5CT3pzN08yOURRVWRCTEVGQlEwRTdPekJFUVVOQkxFRkJRMEU3TzJkRFFVTkJMRUZCUTBFN08zbEVRVU5CTEVGQlEwRTdPenM3TUVKQlIwRTdZMEZEUVN4QlFVTkJMRUZCUTBFc1IwRk1RU3hCUVVOQk96czdOa0pCUzBFc1FVRkRRVHM3TzNORFFVVkJMRUZCUTBFc1QwRkdRVHM3YTBOQlNVRXNRVUZEUVN4QlFVTkJMRTFCU0VFN1VVRndRa0U3TzJsQ1FYZENRU3hCUVVOQkxFRkJRMEU3T3p0M1FrRkRRVHRaUVVOQkxFdEJOMEpCTzFsQk9FSkJMRUZCUTBFc1NVRnVRMEU3TzNkQ1FXOURRVHM3WjBOQlJVRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1UwRktRVHM3T3p0cFEwRkxRU3hCUVVOQk96dDNRa0ZEUVRzd1FrRkRRVHQ1UkVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3pzN2NVSkJSVUU3T3p0dlFrRkRRU3hCUVVOQk96dHpRa0ZEUVN4QlFVTkJPenM3TzJ0RFFVZEJPMjFFUVVOQkxFRkJRMEVzUVVGRFFUczdPekJHUVVOQk8ydEZRVU5CTEVGQlEwRTdPMjFEUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEdGQldrRXNRVUZEUVRzN096dEJRVkJCTEhGRFFXMUNRVHRwUTBGRFFTeEJRVU5CTEVGQlEwRTdPenRYUVVOQkxFRkJRMEVzUVVGRFFUczdPMU5CUTBFc1FVRkRRVHM3VlVGRFFUdFhRVU5CTzNGQ1FVTkJMRUZCUTBFc1FVRkRRVHM3TzFkQlEwRTdhMEpCUTBFc1FVRkRRU3hCUVVOQk96czdPMmxDUVVWQk96dHRRa0ZEUVRzN2FVSkJRMEU3VTBGRFFTeEJRVU5CT3pzN2MwSkJSVUVzUVVGRFFTeEhRVVpCT3p0clFrRkhRVHM3YVVKQlJVRXNRVUZEUVN4QlFVTkJMRWRCU0VFN096dG5Ra0ZMUVN4QlFVTkJMRXRCUmtFN08ydENRVWxCTEVGQlEwRXNUVUZHUVR0aFFVZEJPM1ZEUVVOQkxFRkJRMEU3T3p0alFVVkJMRUZCUTBFc1FVRkRRU3hOUVVoQk96czdPMEZCUzBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzWTBGS1FUczdPenQ1UWtGTFFTeEJRVU5CTEVGQlEwRTdPenRaUVVOQkxFRkJRMEVzUVVGRFFTeEZRWEpEUVRzN08xVkJjME5CT3p0cFJrRkZRU3hCUVVOQk96czRRa0ZEUVRzN08ydERRVWRCTEVGQlEwRXNRVUZEUVN4SlFVcEJMRUZCUTBFN096dHJRMEZKUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHRSUVZwQk96czdPM1ZHUVdGQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096dExRWFpNUVRzN08wRkJkMHhCT3p0QlFVVkJMSE5EUVVOQk96dHBRa0ZGUVRzMlFrRkRRVHRsUVVOQkxFRkJRMEU3TzBGQlNrRXNPRU5CUzBFc1FVRkRRVHM3VTBGRFFTeEJRVU5CTEVGQlEwRTdPenN3UWtGRFFTeEJRVU5CTEVGQlEwRTdPenQ1UWtGRFFUczdPenQzUWtGRlFTeEJRVU5CT3p0VlFVTkJMRUZCUTBFc1FVRkRRVHM3TzBGQlRFRTdjVUpCVFVFc1FVRkRRU3hCUVVOQk96czdPM0ZDUVVOQkxFRkJRMEU3T3pzN08xTkJSVUVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hMUVZKQk96czdPenM3T3pzN096czdRVUZYUVN4QlFVTkJMRUZCUTBFc1dVRklRVHM3T3pKQ1FVbEJPMmRFUVVOQkxFRkJRMEU3TzNsQ1FVTkJMRUZCUTBFN096czdPenQ1UWtGSFFTeEJRVU5CT3p0QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxHRkJVRUVzUVVGRFFUczdPenRuUkVGUFFTeEJRVU5CT3p0blJFRkRRU3hCUVVOQk96czdNa0pCUTBFc1FVRkRRVHRQUVhaQ1FUczdNa0pCZDBKQk8yOURRVU5CTEVGQlEwRXNRVUZEUVRzN096dG5Ra0ZEUVN4QlFVTkJMRUZCUTBFN096czdPM0ZEUVVWQkxFRkJRMEVzUlVGR1FUczdPenRCUVV0QkxHZENRVVJCTzNkRFFVVkJPMWRCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTzFOQlZFRTdPenM3T3pzN096aENRVmRCTEVGQlEwRTdPenRCUVVWQkxFRkJRMEVzUVVGRFFTeFpRVWhCT3pzN05rSkJTVUVzUVVGRFFUczdPM2RDUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3TzBGQllrRTdPMjFEUVdWQk8xRkJSRUU3T3poQ1FVVkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenRUUVVOQkxFRkJRMEVzUVVGRFFUczdPMmRFUVVOQk96UkZRVU5CTEVGQlEwRTdPMjFDUVVOQkxHMURRVU5CTERKRFFVTkJMRk5CUTBFc09FSkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3VjBGRFFUdGpRVU5CTEVGQlEwRTdPMWxCUTBFc1FVRkRRVHM3VlVGRFFUczdORVJCUlVFc01rUkJRMEVzWlVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHROUVZSQk96czdTMEY2U0VFN096dEJRVzFKUVR0M1FrRkZRU3hCUVVOQkxFMUJSa0U3T3p0QlFVZEJPMjFDUVVWQkxFRkJRMEVzUVVGRFFTeFBRVWhCT3p0blFrRkpRU3hCUTI1YVFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdPMEZCUTBFN08wRkJSVUVzTWtKQlEwRTdZVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenM3TzJkRFFVZEJMRWRCUkVFN1RVRkZRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNSMEZTUVRzN096czdPMjFEUVZOQk96QkNRVU5CTEVGQlEwRTdPeXREUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdPekpDUVVOQk96czdORVZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096czdNa0pCUTBFN096czRSVUZEUVN4QlFVTkJMRUZCUTBFN096czdPenROUVVWQkxFRkJRMEVzUVVGRFFTeFBRVWhCT3pzN096dHpRa0ZOUVN4QlFVTkJMRUZCUTBFc1MwRklRVHM3TzNWRFFVbEJPMmxDUVVOQk96SkNRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPMDFCVmtFN096dDFRMEZYUVRzN095dENRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096czdPenM3T3p0QlFUbEVRVHM3T3p0SFFTdEVRVHRCUVVOQk96czdRVUZEUVRzN08wRkJRMEU3T3p0QlFVTkJPenM3UVVGRFFUczdPMEZCUTBFN096dEJRVU5CT3pzN1FVRkRRVHM3TzBGQlEwRTdPenRCUVVOQk96czdRVUZEUVRzN0swSkJRMEU3TzBGQlEwRXNaVUZEUVR0WFFVTkJPMDlCUTBFN1dVRkRRVHRaUVVOQk8xVkJRMEU3VFVGRFFUdE5RVU5CTzAxQlEwRXNRVUZEUVRzN08wRkJRMEU3TzNWQ1FVVkJMRUZCUTBFc1FVRkRRVHRMUVVoQk96czdPMDFCU1VFc05rTkJRMEU3T3poQ1FVVkJPM0ZDUVVOQkxFRkJRMEVzUVVGRFFUczdPMjlFUVVOQkxFRkJRMEU3T3p0eFFrRkZRU3hCUVVOQkxFRkJRMEVzVjBGSVFUczdPenRyUTBGTFFTeEJRVU5CTEVGQlEwRXNWMEZJUVRzN08zbENRVWxCTzJkQ1FVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPMEZCYmtKQkxGVkJiMEpCTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN096dHpRa0ZEUVRzN1dVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenM3T3pSRVFVZEJMRUZCUTBFN096czdPMWRCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN1MwRmFRVHRGUVVSQk96czdPenM3T3pzN096czdPenM3TzNsRVFXdENRU3hCUVVOQkxFRkJRMEU3UzBGS1FTeEJRVU5CT3pzN1owSkJTVUU3TWtKQlEwRXNRVUZEUVN4QlFVTkJPenM3T3pzN1NVRkRRVHM3T0VKQlEwRTdNRVJCUTBFc1FVRkRRU3hCUVVOQk96czdNRU5CUTBFN01FSkJRMEU3TzJ0Q1FVVkJMRUZCUTBFc1FVRkRRU3hIUVVoQk96czdNa0pCU1VFN1FVRkRRVHQ1UkVGRFFUdDNRMEZEUVN4QlFVTkJMRUZCUTBFN096dHZRa0ZGUVN4QlFVTkJMRUZCUTBFN1UwRklRVHM3VjBGSlFTeEJRVU5CT3pzN1YwRkZRU3hCUVVOQkxFRkJRMEVzUlVGSVFUczdPenM3YjBKQlMwRXNRVUZEUVR0VFFVWkJPMWxCUjBFN2JVSkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3p0SlFXaEVRVHRGUVVSQk96czdRVU5vU2tFN08wRkJSVUVzSzBKQlEwRTdhVUpCUTBFN096czdjVUpCUlVFc1FVRkRRVHM3WjBKQlEwRXNRVUZEUVRzN2RVTkJRMEVzUVVGRFFTeEJRVU5CT3pzN1FVRlFRVHR6UmtGVFFUdHJRMEZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFdEJUa0U3T3pzN096dDNRMEZSUVN4QlFVTkJMRmxCUmtFN08yMURRVWRCTzNWRFFVTkJMRUZCUTBFN08yMUNRVU5CTEVGQlEwRTdPM1ZDUVVOQkxFRkJRMEU3T3p0dFJVRkZRVHRyUWtGRFFUczBSRUZEUVR0elFrRkRRU3hCUVVOQkxFRkJRMEVzVlVGT1FUczdPenMwUWtGUlFTeEJRVU5CTEVGQlEwRXNTMEZJUVRzN08zRkNRVWxCTEVGQlEwRTdXVUZEUVN4QlFVTkJPenR0UkVGRFFUdHhRMEZEUVN4QlFVTkJPenRWUVVOQk8zRkRRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPM0ZEUVVOQkxFRkJRMEVzUVVGRFFUczdPM05DUVVOQk96SkNRVU5CTEVGQlEwRXNRVUZEUVRzN096dFpRVVZCTEVGQlEwRTdPekpEUVVOQkxFRkJRMEU3T3p0WFFVVkJMRUZCUTBFc1FVRkRRU3hKUVVoQk96czdVMEZKUVN4QlFVTkJPenRwUTBGRFFUczdORUpCUlVFc1FVRkRRU3hIUVVaQk96czdNRUpCU1VFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeExRVXhCT3pzN1RVRm1RVHM3YVVKQmNVSkJPM1ZDUVVOQkxFRkJRMEVzUVVGRFFUczdPMVZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3pzN1owTkJRMEU3TzFkQlJVRXNRVUZEUVN4QlFVTkJMRXRCU0VFN096dHZRMEZKUVRzd1EwRkRRU3hCUVVOQkxFRkJRMEU3T3p0eFEwRkRRVHQ1UTBGRFFTeEJRVU5CT3pzN1dVRkZRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVsQlRFRTdPenM3T3pzN096dFJRVkZCTEVGQlEwRXNRVUZEUVN4QlFVTkJMRFJDUVVwQk8wMUJSRUU3T3p0M1FrRk5RVHM3VjBGRlFTeEJRVU5CTEVGQlEwRXNUVUZJUVRzN08yOUNRVWxCTzNsQ1FVTkJMRUZCUTBFc1FVRkRRVHM3TzNkQ1FVTkJPekJDUVVOQkxFRkJRMEVzUVVGRFFUczdPenR2UWtGRlFTeEJRVU5CTEVGQlEwRXNTMEZJUVRzN08zbERRVWxCTEVGQlEwRXNRVUZEUVRzN096czdPenRUUVVkQk8wRkJRMEVzUVVGRFFTeEJRVU5CTEZkQlNrRTdPenR0UTBGTFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3p0QlFWWkJPMmxEUVZsQkxFRkJRMEVzUVVGRFFTeFpRVWhCT3pzN2FVTkJTVUU3ZDBKQlEwRXNRVUZEUVN4QlFVTkJPenM3VVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3p0M1EwRkRRVHQxUTBGRFFUdHZRMEZEUVN4QlFVTkJMRUZCUTBFN096czRSa0ZEUVN4QlFVTkJMRUZCUTBFN096dFZRVU5CTzFsQlEwRXNRVUZEUVRzN096czdjMFpCU1VFc1FVRkRRVHM3YjBOQlEwRXNRVUZEUVRzN1dVRkRRU3hCUVVOQkxFRkJRMEVzUzBGUVFUczdPMWRCVVVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeExRV1JCTEVGQlEwRTdPenRKUVRWTFFUdG5Ra0V3VEVFN08wRkRNMHhCT3p0QlFVVkJMSEZDUVVOQk96dEJRVU5CTEcxRFFVTkJPMmxDUVVOQk96czdPenM3TmtOQlNVRXNRVUZEUVRzN2QwSkJRMEU3YVVKQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdRVUZVUVN4QlFVTkJMRUZCUTBFc2IwUkJVVUVzUVVGRFFTeEJRVU5CT3pzN05rUkJRMEU3T3p0TlFVTkJMRUZCUTBFN08zVkNRVU5CT3l0Q1FVTkJPMjlDUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPenM3T3p0MVFrRkZRU3hCUVVOQk96dFRRVU5CTEVGQlEwRXNRVUZEUVN4UFFVeEJPenM3TzJ0RlFVOUJPMjlHUVVOQk8xRkJRMEVzUVVGRFFTeEhRVXBCT3p0dFFrRkxRU3hCUVVOQkxFRkJRMEU3T3pzN01rSkJSVUVzUVVGRFFTeEJRVU5CTEV0QlNFRTdPenMyUWtGSlFTeEJRVU5CT3pzMFEwRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096dHBSa0ZEUVRzeVFrRkRRVHQ1UWtGRFFTeEJRVU5CT3pzN2NVSkJSVUVzUVVGRFFTeEJRVU5CTEU5QlNFRTdPekpFUVVsQk96czJRa0ZGUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hQUVVwQk96czdUVUZMUVN4QlFVTkJPenM3TzNkQ1FVVkJMRUZCUTBFc1kwRkdRVHRWUVVkQk95dENRVU5CT3pzd1JFRkRRU3hCUVVOQkxFRkJRMEU3T3p0elFrRkRRU3hCUVVOQkxFRkJRMEU3T3p0dlFrRkRRU3hCUVVOQk96czdPenRoUVVsQk8zRkVRVU5CTEVGQlEwRTdPMlZCUTBFc1FVRkRRVHM3TUVKQlEwRTdZVUZEUVN4QlFVTkJPenRaUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVsQldrRTdPenM3UVVGR1FTeEJRVU5CTzNORlFXVkJMRUZCUTBFN08zTkVRVU5CT3pzN096czRRa0ZGUVN4QlFVTkJMRUZCUTBFN1ZVRklRVHM3T3pzN096czBRMEZMUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3VlVGT1FUczdVVUZTUVRzN096dHpRa0ZsUVN4QlFVTkJMRUZCUTBFN096dGpRVU5CTzNGQ1FVTkJPMjFDUVVOQk95dENRVU5CTEVGQlEwRXNRVUZEUVRzN08zZEVRVU5CTEVGQlEwRXNRVUZEUVRzN08yMUNRVU5CT3p0MVFrRkZRU3hCUVVOQkxFRkJRMEVzVFVGSVFUczdPM2RDUVVsQkxFRkJRMEU3TzNkRFFVTkJPM05FUVVOQk8zRkVRVU5CTzI5R1FVTkJMRUZCUTBFN1YwRkRRVHN3UkVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdPMmRDUVVkQkxFRkJRMEVzUVVGRFFTeFBRVXBCTEVGQlEwRTdPenR4UkVGSlFTeEJRVU5CTEVGQlEwRTdPenR2UWtGRFFUczdNRVJCUlVFN2IwUkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3UVVGTVFTeHhSa0ZOUVN4QlFVTkJPenRuUWtGRFFUdHhSVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenQ1UWtGRFFUdHZRa0ZEUVRzN05rSkJSVUVzUVVGRFFTeFBRVVpCTzFkQlIwRXNRVUZEUVRzN2MwWkJRMEVzUVVGRFFUczdhVUpCUTBFN05rSkJRMEU3YVVOQlEwRXNRVUZEUVR0aFFVTkJPekJDUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3pzN08yZENRVU5CT3l0Q1FVTkJMRUZCUTBFc1FVRkRRVHM3T3p0WlFVVkJMRUZCUTBFN096SkRRVU5CTEVGQlEwRTdPenRYUVVWQkxFRkJRMEVzUVVGRFFTeEpRVWhCT3pzN1owVkJTVUVzUVVGRFFUczdPMWRCUlVFc1FVRkRRU3hCUVVOQkxFdEJTRUU3T3p0VlFVbEJMRUZCUTBFc1FVRkRRU3hKUVdwQ1FUczdPenN3UTBGdFFrRXNRVUZEUVRzN01FSkJRMEVzUVVGRFFTeEhRVXBCT3pzMlEwRkxRVHRyUkVGRFFTeEJRVU5CTEVGQlEwRTdPenM3ZVVKQlJVRXNRVUZEUVRzN05rTkJRMEU3YjBKQlEwRTdXVUZEUVR0cFFrRkRRVHRYUVVOQk8ybENRVU5CTzJGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHRQUVdKQk96czdPM2RDUVdOQk96dFhRVVZCTEVGQlEwRXNRVUZEUVN4TlFVaEJPenM3TUVKQlNVRTdiMEpCUTBFN2VVSkJRMEVzUVVGRFFTeEJRVU5CT3pzN08xRkJSVUVzUVVGRFFUczdiVUpCUTBFN1UwRkRRU3hCUVVOQk96dHJRa0ZGUVN4UlFVUkJPMjlEUVVWQkxFRkJRMEVzUVVGRFFUczdPM05DUVVOQk8yMUNRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3TzBGQlprRXNhMFJCWjBKQk8yZEVRVU5CTEVGQlEwRTdWVUZEUVR0cFEwRkRRU3hCUVVOQkxFRkJRMEU3T3p0NVFrRkRRU3hCUVVOQk96dFJRVU5CTEVGQlEwRXNRVUZEUVRzN096UkNRVU5CT3pzN096dHpRa0ZMUVRzd1FrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNUVUZXUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN096czdPenRCUVZWQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNWMEZNUVRzN096czdRVUZFUVR0VFFWRkJPMEZCUTBFc1FVRkRRU3hCUVVOQkxGZEJTa0U3T3p0UFFVdEJMRUZCUTBFN08zbENRVU5CTEVGQlEwRTdPenR2UWtGRFFUczdPMkZCUlVFc1FVRkRRU3hQUVVaQk96dDVRa0ZIUVR0eFFrRkRRU3hCUVVOQkxFRkJRMEU3T3p0eFJFRkRRU3hCUVVOQkxFRkJRMEU3T3pzeVFrRkRRVHRWUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3pzd1FrRkZRVHM3YlVKQlJVRTdPenRUUVVOQkxFRkJRMEVzUzBGSVFUczdPMjFDUVV0QkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4UFFVNUJPenRQUVU1Qk96czdPMmRGUVdGQk96SkNRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3pzN096dG5SRUZIUVRzMlEwRkRRU3hCUVVOQk96dHJRa0ZEUVRzMlFrRkRRU3hCUVVOQk96dG5SRUZEUVRzN096czRRMEZIUVR0elFrRkRRU3hCUVVOQkxGRkJTa0VzUVVGRFFUczdjVUpCUzBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTzBGQlRrRTdPenM3TzNGQ1FVOUJMRUZCUTBFc1FVRkRRVHM3T3pSRFFVTkJMRUZCUTBFN096czdlVUpCUlVFc1FVRkRRU3hCUVVOQk8xRkJTRUU3T3p0clEwRkpRVHNyUlVGRFFUczBRa0ZEUVN4QlFVTkJMRUZCUTBFN096dDNRa0ZEUVRzN2QwTkJSVUVzUVVGRFFUczdOa0pCUTBFc1FVRkRRU3hCUVVOQk96czdRVUZNUVN4cFFrRlBRU3d3UWtGRFFUc3JRa0ZEUVR0dFFrRkRRVHRCUVVwQk96dG5RMEZQUVR0elEwRkRRU3hCUVVOQkxFRkJRMEU3T3p0QlFVeEJMRUZCUTBFN1owSkJUVUVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3UVVGS1FTdzRRa0ZMUVN4QlFVTkJMRUZCUTBFN096dHhSRUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3p0cFEwRkRRVHMyUTBGRFFTeEJRVU5CT3p0cFEwRkRRVHM3TzNWQ1FVZEJMRUZCUTBFc1FVRkRRU3hSUVVoQk96czdWVUZKUVR0alFVTkJMRUZCUTBFc1FVRkRRU3haUVZKQk96czdjMFJCVTBFN08xVkJSVUVzYTBKQlJFRTdOa0pCUlVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPMDFCY2taQkxFRkJRMEU3TzNGRFFYRkdRVHRwUkVGRFFTeEJRVU5CTEVGQlEwRTdPenM3TzI5Q1FVZEJPelpFUVVOQk8zbERRVU5CTzJkR1FVTkJMRUZCUTBFN08wOUJRMEVzUVVGRFFTeE5RVkpCTEVGQlEwRTdPenM3WjBOQlZVRXNRVUZEUVRzN1owUkJRMEU3YVVKQlEwRTdZMEZEUVR0blFrRkRRU3hqUVVOQkxGVkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096dEJRV0pCTEVGQlEwRXNkME5CWVVFN01rUkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3YlVSQlEwRTdPMlZCUlVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzV1VGS1FUczdPenM3TWtOQlRVRTdPRUpCUTBFc1FVRkRRVHM3TWtKQlEwRTdiMFJCUTBFc1FVRkRRU3hCUVVOQk96czdRVUZRUVN4blJFRlJRU3hCUVVOQk96dHRRMEZEUVN4QlFVTkJPenR6UkVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3p0elJFRkZRU3hCUVVOQk96dDNRMEZEUVN4QlFVTkJPenRCUVVwQkxEWkNRVXRCTzNkQ1FVTkJPMU5CUTBFc1FVRkRRVHM3TzJWQlJVRXNXVUZFUVR0VFFVVkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN08yOUNRVU5CT3poQ1FVTkJMRUZCUTBFc1FVRkRRVHM3TzIxQ1FVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN1FVRkhRU3hCUVVOQkxFRkJRMEVzVjBGSVFUczdPM2xDUVVsQkxFRkJRMEU3T3p0VFFVVkJMRUZCUTBFc1FVRkRRU3hYUVVoQk96czdiVUpCU1VFN1UwRkRRU3hCUVVOQkxFRkJRMEU3T3p0M1FrRkRRVHM3TmtKQlJVRXNUVUZFUVR0blEwRkZRU3hCUVVOQk96dDNRa0ZEUVR0dlEwRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096dHJRa0ZEUVN4QlFVTkJMRUZCUTBFc1MwRTFRa0U3T3pzd1FrRTJRa0U3Y1VKQlEwRXNRVUZEUVN4QlFVTkJPenM3TmtKQlEwRTdkVUpCUTBFN2MwSkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3p0blFrRkhRU3hCUVVOQkxFRkJRMEU3UVVGSVFUczdPM0ZDUVV0QkxFRkJRMEVzUVVGRFFTeFZRVWhCT3pzN2RVUkJTVUVzUVVGRFFUczdVVUZEUVN4QlFVTkJMRUZCUTBFc1QwRmlRVHM3TzJkRFFXTkJPenRYUVVWQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEV0QlNrRTdPenM3T0VKQlMwRTdiMFJCUTBFc1FVRkRRU3hCUVVOQk96czdPMmxDUVVWQkxFRkJRMEVzUVVGRFFTeGhRVWhCT3pzN1VVRkpRVHN5UWtGRFFUc3JRa0ZEUVN4QlFVTkJMRUZCUTBFN096czdhVUpCUlVFN1ZVRkRRVHRoUVVOQk8xVkJRMEU3WVVGRFFTeEJRVU5CTEVGQlEwRTdTMEZRUVRzN1YwRlJRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenRSUVVOQk8yZERRVU5CTzNkSFFVTkJPekpEUVVOQkxFRkJRMEVzUVVGRFFUczdPMjlEUVVOQk96WkRRVU5CTEVGQlEwRXNRVUZEUVRzN08zTkRRVU5CT3poRFFVTkJMRUZCUTBFc1FVRkRRVHM3TzNORFFVTkJMRUZCUTBFN096QkNRVU5CTzJ0RFFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN08xVkJRMEU3V1VGRFFTeEJRVU5CT3pzN08yTkJSMEVzUVVGRFFUczdPRUpCUTBFN08yZENRVVZCTEVGQlEwRXNRVUZEUVN4QlFVTkJMRlZCU2tFN096czdWMEZMUVN4QlFVTkJMRUZCUTBFc1NVRmFRU3hCUVVOQk96czdPMmxGUVdGQkxFRkJRMEU3T3pzeVJVRkZRU3hCUVVOQkxFRkJRMEU3T3p0QlFVaEJMR05CU1VFN2JVUkJRMEU3T0VOQlEwRXNRVUZEUVN4QlFVTkJPenM3ZVVKQlEwRXNRVUZEUVN4QlFVTkJPenM3TzFsQlJVRXNRVUZEUVN4QlFVTkJMRXRCU0VFN096c3JRa0ZKUVN4QlFVTkJMRUZCUTBFN096dFhRVU5CTEVGQlEwRXNRVUZEUVN4SlFYaENRVHM3T3p0cFJVRXdRa0VzUVVGRFFUczdPMmREUVVWQkxFRkJRMEU3TzJWQlEwRTdkME5CUTBFN2MwTkJRMEU3YjBOQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN2EwSkJRMEVzUVVGRFFTeFRRVnBCT3pzclFrRmhRU3hCUVVOQkxFRkJRMEU3T3p0WFFVTkJMRUZCUTBFc1FVRkRRU3hKUVhKQ1FUczdPenR2UlVGMVFrRXNRVUZEUVRzN08yMUdRVVZCTzIxRVFVTkJMRUZCUTBFN096dFZRVVZCTEVGQlEwRTdPenM3TzNGQ1FVbEJMRUZCUTBFc1YwRktRU3hCUVVOQkxFRkJRMEU3TkVKQlIwRTdhME5CUTBFc1FVRkRRVHRoUVVOQk8zVkZRVU5CTEVGQlEwRXNRVUZEUVRzN08yTkJRMEU3TzJkQ1FVTkJPenRwUWtGRFFUczdaVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHRQUVhKQ1FUdFBRVXBCT3pzclFrRXdRa0VzUVVGRFFTeEJRVU5CT3pzN1YwRkRRU3hCUVVOQkxFRkJRMEVzVTBGc1EwRTdPenM3TkVKQmIwTkJPMnRFUVVOQkxFRkJRMEVzUVVGRFFUczdPMnRIUVVOQkxFRkJRMEVzUVVGRFFUczdPMU5CUTBFN01rSkJRMEVzUVVGRFFUdHBRa0ZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenRCUVdaQkxHMUNRV2RDUVRzN08zTkRRVVZCTEVGQlEwRXNRVUZEUVN4UFFVaEJPenRYUVVsQk96SkNRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdPenM3TzFsQlNVRXNRVUZEUVN4QlFVTkJMRTFCU2tFc1FVRkRRVHM3T3pzN1dVRk5RU3hCUVVOQkxFRkJRMEVzVFVGS1FTeEJRVU5CT3pzN1YwRkpRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEV0QlprRTdPenM3T3p0QlFUTjBRa0VzUlVFeWRVSkJMR05CUTBFN2RVSkJRMEU3WVVGRFFUczRRMEZEUVRzd1FrRkRRVHRWUVVOQk8xVkJRMEU3TzNkQ1FVVkJMRUZCUTBFN095dENRVU5CTzJ0RFFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPMEZCVUVFc2EwSkJVVUU3Y1VSQlEwRTdkVUpCUTBFN2QwTkJRMEU3YlVkQlEwRXNRVUZEUVN4QlFVTkJPenM3Y1VWQlEwRTdjMEpCUTBFc1FVRkRRVHM3ZDBOQlEwRXNRVUZEUVN4QlFVTkJPenM3VlVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdSVUZEUVN4aFFVTkJPekJDUVVOQk8yTkJRMEVzUVVGRFFUczdORVJCUTBFN1dVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN1FVRkRRU3hoUVVOQk8yZENRVU5CTEVGQlEwRTdPMkZCUTBFN1ZVRkRRVHRYUVVOQkxFRkJRMEVzUVVGRFFUczdPMk5CUTBFN1ZVRkRRVHRYUVVOQkxFRkJRMEVzUVVGRFFUczdPMmREUVVOQk8xVkJRMEU3VjBGRFFUdHJRa0ZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzNFJVRkRRVHM3YVVSQlJVRTdNRVJCUTBFN01FSkJRMEVzUVVGRFFUczdNa0pCUTBFN09FSkJRMEVzUVVGRFFUczdaMEpCUTBFN2NVSkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3VjBGRFFTeEJRVU5CTEVGQlEwRXNUMEZtUVRzN08zRkNRV2RDUVR0elEwRkRRU3hCUVVOQkxFRkJRMEU3T3pzd1FrRkRRVHR4UWtGRFFUc3JSRUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenM3YlVKQlJVRTdVMEZEUVR0VlFVTkJPelpEUVVOQk96WkRRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPMDFCVWtFN096czdaVUZWUVR0WlFVTkJPMkZCUTBFN1dVRkRRVHRaUVVOQk8zTkNRVU5CTEVGQlEwRXNRVUZEUVR0TFFWSkJPenN5UkVGVFFTeEJRVU5CT3pzeVFrRkRRVHM3UVVGRlFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4WFFVcEJPenM3TzI5RFFVdEJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdaMEpEY0RKQ1FTeEJSSEV5UWtFN096dEJRM0F5UWtFc09FSkJRMEU3T3paQ1FVVkJPMk5CUTBFN1YwRkRRVHM3VTBGRlFUdFRRVU5CTEVGQlEwRXNRVUZEUVN4cFFrRktRVHM3T3p0dFJFRk5RU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN1FVRk1RVHM3WTBGUFFUdFRRVU5CTzFWQlEwRTdaVUZEUVR0SlFVcEJMRVZCUzBFN1UwRkRRVHRsUVVOQk96SkNRVU5CTzFWQlEwRTdWMEZEUVR0aFFVTkJPMkZCUTBFN096WkNRVVZCTEVGQlEwRTdPenRCUVVWQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEdWQlNrRTdPenM3UVVGSVFTdzJRa0ZSUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096czdPenM3T3p0TlFVTkJPMlZCUTBFN1pVRkRRVHRWUVVOQk8xbEJRMEU3VlVGRFFUdFBRVU5CTzFWQlEwRXNRVUZEUVN4QlFVTkJPenROUVVOQk8yVkJRMEU3WlVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVR0VFFUZEVRVHM3VTBFNFJFRXNRVUZEUVN4QlFVTkJPenM3TzBGRGJrVkJPenRCUVVWQkxHOURRVU5CTzJsQ1FVTkJPenM3T3p0dFFrRkxRU3hCUVVOQk96dG5Ra0ZEUVN4QlFVTkJMRUZCUTBFN096dEJRVkpCTEVGQlEwRXNRVUZEUVN4QlFVTkJMR2RHUVUxQkxFRkJRMEU3TzNkRVFVTkJMRUZCUTBFN096QkRRVU5CTEVGQlEwRXNRVUZEUVRzN08yVkJRMEU3Y1VKQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdlVUpCUTBFN09FUkJRMEVzUVVGRFFTeEJRVU5CT3pzN08xbEJSVUVzUVVGRFFUczdZMEZEUVN4QlFVTkJPenR6UTBGRFFUdDFRa0ZEUVR0cFEwRkRRU3hCUVVOQk96dHRRa0ZEUVR0blFrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN1RVRmtRVHM3YlVOQlpVRTdOa1JCUTBFc1FVRkRRU3hCUVVOQk96czdWVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenM3T3p0dlJFRkZRU3hCUVVOQk96dHhSRUZEUVN4QlFVTkJMRUZCUTBFN096dEJRVXhCTzJGQlQwRTdWVUZEUVR0WFFVTkJPMmRDUVVOQk8yZENRVVZCTzFkQlEwRTdiVU5CUTBFN2FVSkJRMEU3WTBGRFFUczdPRUpCUTBFc1FVRkRRVHM3TzAxQlVFRXNSVUZSUVR0WFFVTkJPMjFFUVVOQk8ybENRVU5CTzJOQlEwRTdPemhFUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN08yRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdUMEY2UWtFN096dFZRVEJDUVN4QlFVTkJMRUZCUTBFN096czdOa0pCUlVFN2JVUkJRMEVzUVVGRFFUdFZRVU5CTzNkQ1FVTkJMRUZCUTBFc1FVRkRRVHM3T3pSQ1FVTkJPekpEUVVOQkxFRkJRMEU3TzJkRFFVTkJMRUZCUTBFN1ZVRkRRVHRyUTBGRFFUdDFRa0ZEUVRzMFJrRkRRU3hCUVVOQk8xbEJRMEU3YTBSQlEwRXNRVUZEUVN4QlFVTkJPenM3TWtKQlEwRXNRVUZEUVN4QlFVTkJPenM3YjBKQlEwRXNRVUZEUVN4QlFVTkJPenM3T3p0WFFVZEJPMmxDUVVOQk8yRkJRMEU3UVVGRFFTeEJRVU5CTEVGQlEwRXNaVUZPUVR0UFFVUkJPenR6UkVGUlFTeEJRVU5CTEVGQlEwRTdPenRWUVVOQkxFRkJRMEVzUVVGRFFTeExRWHBEUVRzN096czdPenN5UWtFeVEwRXNRVUZEUVN4QlFVTkJPMDFCU0VFN096czdPenM3TzJ0Q1FVOUJPMmRFUVVOQk8wRkJRMEVzUVVGRFFTeEJRVU5CTEZkQlRrRXNRVUZEUVRzN096dHRRa0ZQUVR0QlFVUkJMR2xEUVVWQkxFRkJRMEU3T3p0QlFVVkJMR3RDUVVSQk8yOUNRVVZCTzJGQlEwRTdWMEZEUVN4QlFVTkJMRUZCUTBFN096dDVSRUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHROUVhSQ1FUczdPenM3TzI5RFFUQkNRU3hCUVVOQk96dDFRa0ZEUVRzN2FVTkJRMEVzUVVGRFFUdFBRVTVCTEVGQlEwRTdPenN5UWtGUFFUdDNRa0ZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hOUVV4Qk96czdPenQ1UTBGTlFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN1RVRnVRa0U3T3pzN096c3dRa0Z2UWtFN096dDVRa0ZGUVN4QlFVTkJPMDlCUmtFN08ybENRVWRCTEVGQlEwRTdPekpEUVVOQk8xZEJRMEU3YVVKQlEwRTdZVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96czdPenM3T3p0elEwRkZRVHR6UWtGRFFUc3dRa0ZEUVN4QlFVTkJPMWRCUTBFN01rSkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN1RVRldRVHM3T3pzN08zTkRRVmxCT3pzd1FrRkZRVHRCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNXVUZPUVRzN1RVRkdRVHM3TzNWQ1FWTkJMRUZCUTBFN096czdPM2xEUVVWQkxFRkJRMEU3T3pzd1FrRkZRU3hCUVVOQkxFMUJSa0U3T3p0MVFrRkxRVHR4UWtGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096dEJRVTVCTEVGQlEwRXNWVUZOUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk96dE5RV3BDUVRzN096dHhRa0Z0UWtFN2EwSkJRMEVzUVVGRFFTeEJRVU5CT3pzN08yZENRVU5CTEVGQlEwRXNRVUZEUVR0TlFWQkJPenM3T3pzN2VVTkJVMEVzUVVGRFFUczdPelpEUVVWQk96czdWMEZIUVN4UlFVWkJMRUZCUTBFN1YwRkZRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenRCUVVOQkxFRkJRMEVzUVVGRFFTeFhRVmhCT3pzN1owTkJXVUVzUVVGRFFUczdPenR4UTBGRlFTeEJRVU5CTzA5QlJrRTdPMk5CUjBFN2EwUkJRMEVzUVVGRFFTeEJRVU5CT3pzN096UkNRVWRCTEVGQlEwRTdPenQzUWtGRlFTeEJRVU5CT3p0cFFrRkRRU3hCUVVOQkxFOUJTa0U3TzNkQ1FVdEJMRUZCUTBFN095dENRVU5CTEVGQlEwRXNRVUZEUVR0UFFXSkJMRUZCUTBFN08zVkVRV0ZCTEVGQlEwRXNRVUZEUVRzN08xRkJRMEVzUVVGRFFTeEJRVU5CTEU5Qk0wTkJPenM3T3p0cFFrRTJRMEVzUVVGRFFUdE5RVVpCT3pzN1YwRkpRU3hCUVVOQkxFRkJRMEVzVFVGSVFUczdPenM3YzBKQlMwRXNRVUZEUVR0UFFVWkJPenQ1UWtGSFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN096dFJRVU5CTzI5RFFVTkJPenMwUWtGRlFTeEJRVU5CT3pzeVJFRkRRU3hCUVVOQkxFRkJRMEU3T3p0QlFVeEJMRzFEUVUxQk8yTkJRMEU3YVVKQlEwRTdhMEpCUTBFc1FVRkRRU3hCUVVOQk96czdhVU5CUTBFc1FVRkRRVHM3YlVKQlEwRXNRVUZEUVN4QlFVTkJPenM3Y1VOQlEwRTdlVUpCUTBFN2VVVkJRMEVzUVVGRFFUdGhRVU5CTzNORFFVTkJPM2xFUVVOQkxFRkJRMEU3T3poQ1FVTkJPM2REUVVOQkxFRkJRMEVzUVVGRFFUczdPM1ZGUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096UkRRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPMUZCUTBFN096czdPenRaUVUxQkxFRkJRMEVzUVVGRFFTeE5RVWhCT3pzN096czdXVUZQUVN4QlFVTkJMRUZCUTBFc1MwRk1RU3hCUVVOQkxFRkJRMEU3T3pzN08xbEJUVUVzUVVGRFFTeEJRVU5CTEVGQlEwRXNUVUZNUVN4QlFVTkJPenM3TzBGQlprRXNRVUZEUVN4QlFVTkJMRUZCUTBFc01rVkJhVUpCTEVGQlEwRXNRVUZEUVRzN096dHpSVUZGUVN4QlFVTkJPenN3UTBGRFFTeEJRVU5CTEVGQlEwRXNUVUZNUVRzN096czdPenQzUTBGUlFUczRSVUZEUVN4QlFVTkJPenM3TzNkRFFVZEJMRkZCUkVFN1VVRkZRU3hCUVVOQkxFRkJRMEVzUjBGTVFUczdPenRwUTBGUFFUdHBRa0ZEUVR0cFEwRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUdFJRVTVCTzAxQldFRXNRVUZEUVRzN2NVTkJhVUpCTEVGQlEwRTdPM1ZDUVVOQk8zZERRVU5CTEVGQlEwRXNRVUZEUVRzN096dFRRVVZCTEVGQlEwRXNhVUpCUmtFN08yMUNRVWRCTEVGQlEwRXNRVUZEUVRzN08xZEJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN08wbEJhbHBCTzJkQ1FXdGFRU3hCUTI1YVFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQlEwRTdPenM3TzFsQlRVRXNRVUZEUVRzN096dFhRVWRCTEVkQlJrRXNRVUZEUVR0clEwRkZRU3hCUVVOQkxFRkJRMEU3T3pzN096c3dRa0ZKUVN4QlFVTkJMRUZCUTBFN096dEJRVXhCTEVGQlEwRXNRVUZEUVN3eVEwRkpRVHM3VDBGRFFUdGxRVU5CTzJGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3p0QlFVZEJMRUZCUTBFc1FVRkRRU3hCUVVOQkxGbEJTa0U3T3pzN1FVRkVRU3cwUWtGTlFTeEJRVU5CT3p0MVFrRkRRU3hCUVVOQk96dHZRa0ZEUVN4QlFVTkJPMWRCUTBFc1FVRkRRVHM3YzBOQlEwRXNRVUZEUVN4QlFVTkJPenM3YlVKQlEwRXNRVUZEUVN4QlFVTkJPenM3VlVGRFFTeEJRVU5CTEVGQlEwRTdPenR0UTBGRFFTeEJRVU5CT3p0blEwRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096QkNRVWRCTEVGQlEwRXNRVUZEUVRzN08wRkJTa0VzUVVGRFFTeHpRa0ZKUVR0M1FrRkRRVHQzUWtGRFFTeEJRVU5CT3p0eFFrRkRRU3hCUVVOQk96dDNRa0ZEUVR0dlFrRkRRVHN3UTBGRFFTeEJRVU5CTEVGQlEwRTdPenR0UWtGRFFTeEJRVU5CT3p0VlFVTkJMRUZCUTBFc1FVRkRRVHM3TzFWQlEwRTdWMEZEUVR0WFFVTkJPenMwUWtGRlFTeEJRVU5CTEUxQlJrRTdPenR4UkVGSlFUdFpRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1MwRk9RVHM3T3pzN08yRkJVVUVzUjBGRVFUc3dRMEZGUVR0cFJVRkRRU3hCUVVOQkxFRkJRMEU3T3pzeVEwRkRRVHQ1UlVGRFFTeEJRVU5CTEVGQlEwRTdPenM3WlVGRlFUc3JRMEZEUVRzN1FVRkZRU3hCUVVOQkxFRkJRMEVzWVVGSVFUczdPMVZCU1VFc1FVRkRRU3hCUVVOQkxFMUJWRUU3T3pzMlFrRlZRVHMwUTBGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3p0VlFVbEJPenQzUWtGRlFUczdZMEZGUVN4QlFVTkJMRUZCUTBFc1JVRklRVHM3TzFsQlNVRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hIUVZaQk96dExRVXBCTEVGQlEwRXNRVUZEUVRzN08xVkJZVUU3TzJkQ1FVVkJMRFJEUVVOQkxHTkJRMEU3YTBWQlJVRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1RVRktRVHRQUVVwQk96czdaMEpCVlVFc1UwRkRRU3h0UWtGRFFTdzRRMEZEUVR0VFFVTkJPMjFGUVVOQkxFRkJRMEU3YVVKQlEwRTdjMEpCUTBFc0swWkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3VDBGcVFrRTdPenM3TzNkQ1FXMUNRVHR2UTBGRFFUdFhRVU5CTzNkRFFVTkJPekJFUVVOQkxFRkJRMEU3TzNORFFVTkJPekJFUVVOQkxFRkJRMEU3T3pzd1FrRkZRVHRyUWtGRFFUdFpRVU5CTEVGQlEwRXNUVUZLUVRzN1YwRkxRVHRoUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenROUVhSQ1FUczdPenM3UVVFeFNrRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN096dDFRa0Z2VEVFc1FVRkRRVHM3YzBSQlEwRTdNa0pCUTBFN0swSkJRMEU3Y1VKQlEwRTdZMEZEUVR0dFFrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096dEJRV3hDUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTdzJRa0ZoUVN4QlFVTkJPenR0UWtGRFFUdHBRMEZEUVR0dlJVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdlVU5CUzBFc1FVRkRRVHM3YTBKQlEwRTdLME5CUTBFc1FVRkRRU3hCUVVOQk96czdNRUpCUTBFc1FVRkRRVHM3Y1VOQlEwRTdNRU5CUTBFc1FVRkRRU3hCUVVOQk96czdORU5CUTBFN2EwSkJRMEVzUVVGRFFUczdkVUpCUTBFN08zRkNRVVZCTzNkQ1FVTkJPMmRDUVVOQkxFMUJTRUU3VlVGSlFUc3JSRUZEUVN4QlFVTkJPMnRDUVVOQkxFRkJRMEU3T3p0elFrRkZRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNVMEZPUVRzN096czdPMnRGUVU5QkxIZENRVU5CTEUxQlEwRTdkVU5CUlVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzVFVGS1FUdFBRWFpEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3YVVKQmVVTkJMRUZCUTBFN08xZEJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3T3pzN2VVTkJTMEVzUVVGRFFUczdhMEpCUTBFN2NVTkJRMEVzUVVGRFFTeEJRVU5CT3pzN01FSkJRMEVzUVVGRFFUczdjVU5CUTBFN2NVTkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3UVVGb1FrRXNRVUZEUVN4QlFVTkJMRUZCUTBFc2MwVkJZMEU3YTBKQlEwRTdaMEpCUTBFc1FVRkRRVHM3T3p0dFFrRkhRU3d3UWtGRFFTd3JRMEZEUVN4QlFVTkJPMkZCUTBFc1FVRkRRU3hOUVU1Qk96dGxRVTlCTEUxQlVrRTdaMFZCVTBFc1FVRkRRU3hCUVVOQk96czdhVVJCUTBFc2QwSkJRMEVzVFVGRFFUdDFRMEZGUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzVFVGT1FUczdPenM3T3l0RFFWTkJPM1ZEUVVOQkxFRkJRMEVzUVVGRFFUczdPMEZCVEVFc1FVRkRRU3hoUVV0QkxIVkNRVU5CTERSRFFVTkJMRUZCUTBFN08zRkVRVU5CTEdsRFFVTkJMRTlCUTBFN01rTkJSVUVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1RVRlFRVHM3T3pzN1lVRlJRU3h2UWtGRFFTeHhRa0ZEUVN4MVFrRkRRVHR0UWtGRlFTeEJRVU5CTEVGQlEwRXNUMEZJUVR0M1JFRkpRU3hCUVVOQk96dFRRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdPenRaUVVkQkxFRkJRMEU3TzFsQlEwRTdZVUZEUVN4QlFVTkJMRUZCUTBFN1FVRlFRU3hCUVVOQk96dFJRVTlCTEVGQlEwRXNRVUZEUVRzN08wRkRhbGxCT3p0QlFVVkJMSFZDUVVOQk96dDFSRUZGUVR0dFFrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096dEJRVTVCTERaRFFVOUJMRUZCUTBFN096dGpRVVZCTEVGQlEwRXNZMEZHUVRzN1kwRkpRU3hCUVVOQkxHTkJSa0U3YTBWQlIwRTdZMEZEUVN4QlFVTkJPeXREUVVOQk8yTkJRMEVzUVVGRFFTeEJRVU5CT3pzN01FVkJRMEVzUVVGRFFTeEJRVU5CT3pzN096aENRVVZCTEVGQlEwRTdPM2xEUVVOQk95dERRVU5CTEVGQlEwRTdNRUpCUTBFN2VVSkJRMEVzUVVGRFFUczdPenRaUVVWQkxFRkJRMEVzUVVGRFFTeEpRVWhCT3pzN2EwSkJTVUU3YVVKQlEwRXNRVUZEUVN4QlFVTkJPenM3VlVGRFFTeEJRVU5CTEVGQlEwRXNTVUZ1UWtFN096czdUMEZ4UWtFc1FVRkRRU3hKUVVaQk96czdPRVJCU1VFc1FVRkRRU3hCUVVOQkxFZEJTRUU3T3pzeVFrRkpRVHQzUWtGRFFUdDFRMEZEUVRzMFFrRkRRU3hCUVVOQk8xbEJRMEU3YlVSQlEwRXNRVUZEUVN4QlFVTkJPenRYUVVOQk8xbEJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPenM3YlVOQlEwRTdORU5CUTBFc1FVRkRRU3hCUVVOQk96czdPelJDUVVWQkxFRkJRMEVzVDBGR1FUc3JRMEZIUVRzNFFrRkRRVHM0UTBGRFFUdHJRMEZEUVN4QlFVTkJPMWxCUTBFN2VVUkJRMEVzUVVGRFFTeEJRVU5CT3p0WFFVTkJPM2xDUVVOQkxFRkJRMEVzUVVGRFFUczdNRU5CUTBFc1FVRkRRVHM3TmtOQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPenRwUWtGSFFTeEpRVVJCTzNsQ1FVVkJPMjlDUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTzB0QlVFRTdPenMyVlVGUlFTeEJRVU5CT3pzN1FVRkRRU3cwUkVGRFFUczdRVUZEUVN4NVFrRkRRVHM3UVVGRFFUdEJRVU5CTzBGQlEwRXNPRUpCUTBFc1FVRkRRVHM3TzBGQmFraEJMR2RFUVcxSVFUdDFRa0ZEUVRzNFFrRkRRU3hCUVVOQkxFRkJRMEU3T3pzN1QwRkZRU3hCUVVOQk96dHhRMEZEUVR0bFFVTkJPMk5CUTBFc1owTkJRMEVzTUVSQlEwRXNRVUZEUVR0blFrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3pzN096dEJRV0pCTEc5RlFXTkJMRUZCUTBFN08ybEVRVU5CTzNkQ1FVTkJPMmREUVVOQkxFRkJRMEVzUVVGRFFUczdPenR6UWtGRlFTeEJRVU5CTEVkQlJrRTdPMmRDUVVkQk96aERRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFN096czdPMmREUVVOQkxFRkJRMEVzUVVGRFFUczdSMEYwUTBFN08wRkJkVU5CTzNkQ1FVTkJPenM3T0VKQlJVRXNRVUZEUVN4MVFrRkdRVHM3WjBKQlIwRTdjVVJCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN08wRkJRMEU3TUVSQlJVRTdPMWRCUlVFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUzBGS1FUczdTMEZHUVRzN08yZENRVkZCTEVGQlEwRXNRVUZEUVN4TFFVaEJPenM3TzJ0RFFVdEJPemhDUVVOQk8yZENRVU5CTzBGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQk8xbEJRMEU3WlVGRFFTeEJRVU5CT3p0clFrRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdUVUZvUWtFN08wbEJhVUpCT3p0QlFVTkJMRGhEUVVOQk8zVkNRVU5CTzJkRFFVTkJMRUZCUTBFc1FVRkRRVHM3T3p0QlFVTkJPekJDUVVWQkxFRkJRMEVzVFVGR1FUczdPMEZCUjBFc01rUkJRMEU3YTBKQlEwRTdLMEpCUTBFc1FVRkRRU3hCUVVOQk96czdPMEZCUTBFc2VVUkJRMEU3YTBKQlEwRTdOa1JCUTBFN05FSkJRMEVzUVVGRFFTeEJRVU5CT3pzN08wRkJRMEU3T3pzN096czdPMEZCUjBFc1FVRkRRU3hCUVVOQkxGVkJTRUU3T3p0M1EwRkpRU3hCUVVOQk96dHBRa0ZEUVN4QlFVTkJPenN3UWtGRFFUdFZRVU5CTEVGQlEwRXNRVUZEUVR0TFFWcEJPenM3T0VOQlkwRXNRVUZEUVRzN01rSkJRMEU3YVVKQlEwRTdWMEZEUVR0WlFVTkJPMmxGUVVOQk95dEVRVU5CTEVGQlEwRTdPMnREUVVOQk8zbERRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3TzAxQmFFSkJPenM3T3poQ1FXdENRVHR2U0VGRFFTeEJRVU5CTEVGQlEwRTdPenRWUVVOQkxFRkJRMEVzUVVGRFFTeEhRVkJCT3pzN2VVSkJVVUU3YTBOQlEwRXNRVUZEUVN4QlFVTkJPenM3TUVKQlEwRTdPRUpCUTBFN1lVRkRRVHRuUWtGRFFTeEJRVU5CTEVGQlEwRTdPenM3UVVGRFFTeDNSRUZEUVRzN096dG5Ra0ZGUVN4QlFVTkJPenQ1UTBGRFFUczdORUpCUlVFN2RVSkJRMEU3ZVVKQlEwRTdNRUpCUTBFN1dVRkRRVHRwUWtGRFFUdGhRVU5CTzI5Q1FVTkJPMmRDUVVOQk8yOURRVU5CTzNWRFFVTkJPMmxEUVVOQkxFRkJRMEVzUVVGRFFUczdPMk5CUTBFN08zRkRRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPenM3T3l0Q1FVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTzFGQk1VSkJPenROUVVwQk96czdPMEZCSzBKQkxDdERRVU5CTEVGQlEwRTdPenM3T3pzN2JVWkJTVUU3TzNGQ1FVVkJPMEZCUTBFN2MwSkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdUMEZPUVR0TlFVcEJMRUZCUTBFc1FVRkRRVHM3T3paQ1FWVkJMRUZCUTBFN08zRkNRVU5CTzJ0Q1FVTkJPM2xEUVVOQkxFRkJRMEVzUVVGRFFUdFBRVkJCT3pzN2MwSkJVMEU3YlVKQlEwRTdaMFJCUTBFc1FVRkRRU3hCUVVOQk8xRkJURUU3TzNOQ1FVOUJPMjFDUVVOQk8zVkNRVU5CT3paRFFVTkJPMk5CUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CT3p0UlFWWkJPenM3T3pzN1owTkJZVUVzV1VGRVFUdHBSRUZGUVN4QlFVTkJPenR6UWtGRFFUdDNRa0ZEUVR0clEwRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdPMDlCV2tFN096czdPMEZCWVVFc2IwVkJRMEU3YTBKQlEwRTdjVUpCUTBFc1FVRkRRVHM3WlVGRFFUczBRa0ZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3T3pzN1FVRkRRU3h0UlVGRFFUczdaME5CUlVFc1QwRkVRVHQxUTBGRlFTeEJRVU5CTEVGQlEwRXNRVUZEUVRzN08yZENRVU5CT3p0QlEycFlRVHM3UVVGRlFUdEJRVVZCTEVGQlEwRXNVMEZHUVRzN08wRkJSMEVzYTBKQlEwRTdPMEZCUTBFc2RVVkJRMEU3T3pzN096dDNRa0ZKUVRzeVJFRkRRVHQzUWtGRFFTeEJRVU5CTEVGQlEwRTdRVUZNUVRzN2RVSkJUVUVzUVVGRFFUczdPemhEUVVWQkxFRkJRMEU3T3pzN09FSkJSMEU3YjBKQlEwRTdRVUZJUVN4QlFVTkJMRlZCUjBFN1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUczdPenRCUVZoQkxEWkhRVmxCTEVGQlEwRTdPMnRFUVVOQkxFRkJRMEU3TzNWRVFVTkJPM1ZDUVVOQk8ydENRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUdE5RWEJEUVN4QlFVTkJPenM3T3pzN096czdPenRwUTBGeFEwRXNRVUZEUVRzN096dG5Ra0ZIUVRzd1FrRkRRU3hCUVVOQkxFRkJRMEU3T3p0clJFRkRRVHRoUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNUVUZXUVR0UFFVUkJPMDFCU0VFN096czdPenM3T3pSRVFXdENRVHQxUTBGRFFTeEJRVU5CTEVGQlEwRTdPenR4UmtGRFFTeEJRVU5CT3p0cFFrRkRRVHR2UWtGRFFTeEJRVU5CTEVGQlEwRTdPenM3TzNsRFFVZEJMRUZCUTBFN08wRkJRMEVzUVVGRFFTeHBRa0ZNUVN4QlFVTkJPMkZCUzBFN2VVUkJRMEVzUVVGRFFUczdRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRVHM3VVVGMlFrRTdUMEZFUVRzN08yZEZRVEpDUVR0cFFrRkRRVHRwUmtGRFFTeEJRVU5CTEVGQlEwRTdPMDlCVGtFc1FVRkRRVHQzUWtGTlFTeEJRVU5CTEVGQlEwRXNTVUZ1UTBFN096czdPenM3T3pKRVFYVkRRU3hCUVVOQk96dHZSRUZEUVR0QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeGxRVlJCTzA5QlJFRTdUVUZFUVRzN08xVkJXVUU3T3paRVFVVkJMRUZCUTBFc1FVRkRRVHROUVVoQk96czdTMEZKUVN4QlFVTkJMRTFCYmtoQk8wZEJiMGhCT3p0QlEzSklRVHM3UVVGRlFUdEJRVVZCTEVGQlEwRXNVMEZHUVRzN08wRkJSMEVzUzBGRFFTeEZRVTVCT3p0QlFVOUJMREJGUVVOQk96dDFRa0ZGUVN4QlFVTkJPenN5UTBGRFFTeEJRVU5CTEVGQlEwRTdPenRCUVV4QkxHdERRVTFCT3pSQ1FVTkJPMmREUVVOQk8zVkRRVU5CT3poRVFVTkJMRUZCUTBFc1FVRkRRVHM3TzIxS1FVTkJPM1ZDUVVOQkxFRkJRMEU3TzJOQlEwRXNRVUZEUVN4QlFVTkJPenM3YzBKQlEwRTdhVUpCUTBFc1FVRkRRU3hCUVVOQk96czdPenM3TzJGQlJVRTdORUpCUTBFc1FVRkRRU3hCUVVOQk96czdaMFZCUTBFN2EwSkJRMEU3WVVGRFFUdHpRMEZEUVN4QlFVTkJMRUZCUTBFN096UkNRVU5CTzNkQ1FVTkJPeXRDUVVOQkxFRkJRMEU3VjBGRFFUdHRRa0ZEUVR0eFFrRkRRU3hCUVVOQkxFRkJRMEU3T3pzclFrRkRRU3hCUVVOQkxFRkJRMEU3VFVGMFFrRTdPenM0UTBGMVFrRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdPenM3YVVOQlJVRTdORUpCUTBFc1FVRkRRVHM3YlVaQlEwRXNRVUZEUVRzN2EwVkJRMEU3WlVGRFFUdE5RVU5CTzNWQ1FVVkJMRUZCUTBFN08ybERRVU5CTzJ0Q1FVTkJMRUZCUTBFc1FVRkRRVHRQUVU1Qk96dHBRMEZSUVR0NVEwRkRRVHQzUWtGRFFUdHhRa0ZEUVR0dFFrRkRRVHRQUVVOQkxFOUJUa0U3Y1VKQlQwRTdPenRyUTBGSFFUdGxRVU5CTzNsQ1FVTkJPM05DUVVOQk8xRkJRMEVzUVVGRFFTeFBRVkJCTEVGQlEwRTdPekpDUVU5Qk8yZENRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJPMDFCY0VOQk96czdPenM3T3p0dlFrRjNRMEVzUVVGRFFTeEJRVU5CTEZWQlNFRTdPenRyUkVGSlFUdHJRa0ZEUVR0NVEwRkRRU3hCUVVOQk96c3JRa0ZEUVR0MVFrRkRRU3hCUVVOQkxFRkJRMEU3T3pzN01FbEJSMEVzWlVGRFFTeEJRVU5CT3p0cFJFRkRRVHM3YzBWQlJVRXNRVUZEUVRzN2EwTkJRMEU3YzBKQlEwRXNRVUZEUVN4QlFVTkJPenM3ZDBKQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hoUVZoQk96dFRRVTVCTEVGQlEwRTdPenR2UWtGcFFrRTdlVUpCUTBFN05FSkJRMEVzUVVGRFFUczdiMFZCUTBFc1FVRkRRVHRuUTBGRFFUdDNRa0ZEUVN4QlFVTkJPenR2UTBGRFFUczJRa0ZEUVN4QlFVTkJMRUZCUTBFN096UkNRVU5CT3pSQ1FVTkJMRUZCUTBFc1FVRkRRVHM3T3pzNFFrRkZRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4UlFWQkJPenM3VDBGb1JFRTdUVUZFUVRzN096UkNRWGxFUVRzeVFrRkRRVHMwUWtGRFFUdG5Ra0ZEUVN4QlFVTkJPenQxUkVGRFFTeEJRVU5CT3p0NVJFRkRRU3hCUVVOQkxFRkJRMEU3T3p0clFrRkRRU3hCUVVOQkxFRkJRMEU3T3pzN096czdiVUpCUjBFc1FVRkRRVHM3SzBOQlEwRTdPMEZCUlVFc2NVSkJSRUU3ZVVSQlJVRXNhMGhCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTzA5QldrRTdUVUZFUVRzN08xVkJZMEU3T3l0RVFVVkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFUdE5RVTVCT3pzN096czdPMk5CVVVFc1FVRkRRVHM3ZFVKQlEwRXNRVUZEUVRzN01rTkJRMEVzUVVGRFFUczdPelJFUVVWQk8ydENRVU5CTEVGQlEwRXNWMEZJUVR0WFFVbEJPM2xDUVVOQkxFRkJRMEVzUVVGRFFUczdPMjlDUVVOQkxFRkJRMEU3T3p0MVFrRkZRU3hCUVVOQkxGRkJSa0U3TzFWQlNVRXNVVUZFUVR0MVFrRkZRU3hCUVVOQkxFRkJRMEU3T3p0elEwRkRRU3hCUVVOQk96dDVRa0ZEUVN4QlFVTkJPenRYUVVOQkxFRkJRMEVzUVVGRFFTeEpRUzlDUVRzN08wdEJaME5CTEVGQlEwRTdSMEZEUVNJc0ltWnBiR1VpT2lKM2VYTnBaUzVsY3pVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUloWm5WdVkzUnBiMjRvS1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRtZFc1amRHbHZiaUIwS0dVc2NpeHBLWHR5WlhSMWNtNGdjajEyYjJsa0lEQTlQVDF5UHpFNmNpeHBQV2w4ZkhJck1Td3hQajFwTFhJL1puVnVZM1JwYjI0b0tYdHBaaWhoY21kMWJXVnVkSE11YkdWdVozUm9QRDF5Zkh4Y0luTjBjbWx1WjF3aVBUMDliaTUwZVhCbEtHRnlaM1Z0Wlc1MGMxdHlYU2twY21WMGRYSnVJR1V1WVhCd2JIa29kR2hwY3l4aGNtZDFiV1Z1ZEhNcE8zWmhjaUIwTEdrOVlYSm5kVzFsYm5SelczSmRPMlp2Y2loMllYSWdjeUJwYmlCcEtYdDJZWElnYnoxQmNuSmhlUzVtY205dEtHRnlaM1Z0Wlc1MGN5azdieTV6Y0d4cFkyVW9jaXd4TEhNc2FWdHpYU2tzZEQxbExtRndjR3g1S0hSb2FYTXNieWw5Y21WMGRYSnVJSFI5T25Rb2RDaGxMSElyTVN4cEtTeHlMR2t0TVNsOVpuVnVZM1JwYjI0Z1pTaDBMR1VzY2lsN1ptOXlLSFpoY2lCcElHbHVJR1VwZTJsbUtISXBlM1poY2lCelBXNHVkSGx3WlNoeUtUdHBaaWhjSW05M2Jsd2lQVDA5Y2lZbUlXVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2FTbDhmRndpWVhKeVlYbGNJajA5UFhNbUppMHhQVDA5Y2k1cGJtUmxlRTltS0drcGZIeGNJbkpsWjJWNGNGd2lQVDA5Y3lZbUlYSXVkR1Z6ZENocEtYeDhYQ0ptZFc1amRHbHZibHdpUFQwOWN5WW1JWEl1WTJGc2JDaGxMR2twS1dOdmJuUnBiblZsZlhaaGNpQnZQVTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb1pTeHBLVHNoYjN4OGJ5NTNjbWwwWVdKc1pTWW1ieTVqYjI1bWFXZDFjbUZpYkdVbUptOHVaVzUxYldWeVlXSnNaU1ltSVc4dVoyVjBKaVloYnk1elpYUS9kRnRwWFQxbFcybGRPaWhrWld4bGRHVWdkRnRwWFN4UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kQ3hwTEc4cEtYMXlaWFIxY200Z2RIMTJZWElnYmoxelpXeG1Ma0pzYVhOelBXVW9ablZ1WTNScGIyNG9kQ3hsS1h0eVpYUjFjbTVjSW5OMGNtbHVaMXdpUFQwOWJpNTBlWEJsS0hRcFB5aGxmSHhrYjJOMWJXVnVkQ2t1Y1hWbGNubFRaV3hsWTNSdmNpaDBLVHAwZkh4dWRXeHNmU3h6Wld4bUxrSnNhWE56S1R0bEtHNHNlMlY0ZEdWdVpEcGxMRzkyWlhKc2IyRmtPblFzY0hKdmNHVnlkSGs2Ymk1d2NtOXdaWEowZVh4OFhDSmZYQ0lzYzI5MWNtTmxjenA3ZlN4dWIyOXdPbVoxYm1OMGFXOXVLQ2w3ZlN3a09tWjFibU4wYVc5dUtIUXNaU2w3Y21WMGRYSnVJSFFnYVc1emRHRnVZMlZ2WmlCT2IyUmxmSHgwSUdsdWMzUmhibU5sYjJZZ1YybHVaRzkzUDF0MFhUcEJjbkpoZVM1bWNtOXRLRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUIwUHlobGZIeGtiMk4xYldWdWRDa3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaDBLVHAwZkh4YlhTbDlMSFI1Y0dVNlpuVnVZM1JwYjI0b2RDbDdhV1lvYm5Wc2JEMDlQWFFwY21WMGRYSnVYQ0p1ZFd4c1hDSTdhV1lvZG05cFpDQXdQVDA5ZENseVpYUjFjbTVjSW5WdVpHVm1hVzVsWkZ3aU8zWmhjaUJsUFNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kQ2t1YldGMFkyZ29MMTVjWEZ0dlltcGxZM1JjWEhNcktDNHFQeWxjWEYwa0x5bGJNVjE4ZkZ3aVhDSXBMblJ2VEc5M1pYSkRZWE5sS0NrN2NtVjBkWEp1WENKdWRXMWlaWEpjSWowOVpTWW1hWE5PWVU0b2RDay9YQ0p1WVc1Y0lqcGxmU3hrWldacGJtVmtPbVoxYm1OMGFXOXVLQ2w3Wm05eUtIWmhjaUIwUFRBN2REeGhjbWQxYldWdWRITXViR1Z1WjNSb08zUXJLeWxwWmloMmIybGtJREFoUFQxaGNtZDFiV1Z1ZEhOYmRGMHBjbVYwZFhKdUlHRnlaM1Z0Wlc1MGMxdDBYWDBzWTNKbFlYUmxPbVoxYm1OMGFXOXVLSFFzWlNsN2NtVjBkWEp1SUhRZ2FXNXpkR0Z1WTJWdlppQk9iMlJsUDI0dWMyVjBLSFFzWlNrNktERTlQVDFoY21kMWJXVnVkSE11YkdWdVozUm9KaVlvWENKemRISnBibWRjSWowOVBXNHVkSGx3WlNoMEtUOWxQWHQ5T2lobFBYUXNkRDFsTG5SaFp5eGxQVzR1WlhoMFpXNWtLSHQ5TEdVc1puVnVZM1JwYjI0b2RDbDdjbVYwZFhKdVhDSjBZV2RjSWlFOVBYUjlLU2twTEc0dWMyVjBLR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb2RIeDhYQ0prYVhaY0lpa3NaU2twZlN4bFlXTm9PbVoxYm1OMGFXOXVLSFFzWlN4dUtYdHVQVzU4Zkh0OU8yWnZjaWgyWVhJZ2NpQnBiaUIwS1c1YmNsMDlaUzVqWVd4c0tIUXNjaXgwVzNKZEtUdHlaWFIxY200Z2JuMHNjbVZoWkhrNlpuVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlIUTlkSHg4Wkc5amRXMWxiblFzYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b1pTeHVLWHRjSW14dllXUnBibWRjSWlFOVBYUXVjbVZoWkhsVGRHRjBaVDlsS0NrNmRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lSRTlOUTI5dWRHVnVkRXh2WVdSbFpGd2lMR1oxYm1OMGFXOXVLQ2w3WlNncGZTbDlLWDBzUTJ4aGMzTTZablZ1WTNScGIyNG9kQ2w3ZG1GeUlHVTlXMXdpWTI5dWMzUnlkV04wYjNKY0lpeGNJbVY0ZEdWdVpITmNJaXhjSW1GaWMzUnlZV04wWENJc1hDSnpkR0YwYVdOY0lsMHVZMjl1WTJGMEtFOWlhbVZqZEM1clpYbHpLRzR1WTJ4aGMzTlFjbTl3Y3lrcExISTlkQzVvWVhOUGQyNVFjbTl3WlhKMGVTaGNJbU52Ym5OMGNuVmpkRzl5WENJcFAzUXVZMjl1YzNSeWRXTjBiM0k2Ymk1dWIyOXdMR2s5Wm5WdVkzUnBiMjRvS1h0cFppaDBXMXdpWVdKemRISmhZM1JjSWwwbUpuUm9hWE11WTI5dWMzUnlkV04wYjNJOVBUMXBLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJa0ZpYzNSeVlXTjBJR05zWVhOelpYTWdZMkZ1Ym05MElHSmxJR1JwY21WamRHeDVJR2x1YzNSaGJuUnBZWFJsWkM1Y0lpazdhVnRjSW5OMWNHVnlYQ0pkSmlacFcxd2ljM1Z3WlhKY0lsMHVZWEJ3Ykhrb2RHaHBjeXhoY21kMWJXVnVkSE1wTEhJdVlYQndiSGtvZEdocGN5eGhjbWQxYldWdWRITXBmVHRwVzF3aWMzVndaWEpjSWwwOWRGdGNJbVY0ZEdWdVpITmNJbDE4Zkc1MWJHd3NhUzV3Y205MGIzUjVjR1U5Ymk1bGVIUmxibVFvVDJKcVpXTjBMbU55WldGMFpTaHBXMXdpYzNWd1pYSmNJbDAvYVZ0Y0luTjFjR1Z5WENKZExuQnliM1J2ZEhsd1pUcFBZbXBsWTNRcExIdGpiMjV6ZEhKMVkzUnZjanBwZlNrN2RtRnlJSE05Wm5WdVkzUnBiMjRvZENsN2NtVjBkWEp1SUhSb2FYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2RDa21KaTB4UFQwOVpTNXBibVJsZUU5bUtIUXBmVHRwWmloMFcxd2ljM1JoZEdsalhDSmRLWHR1TG1WNGRHVnVaQ2hwTEhSYlhDSnpkR0YwYVdOY0lsMHNjeWs3Wm05eUtIWmhjaUJ2SUdsdUlHNHVZMnhoYzNOUWNtOXdjeWx2SUdsdUlIUmJYQ0p6ZEdGMGFXTmNJbDBtSm00dVkyeGhjM05RY205d2MxdHZYU2hwTEhSYlhDSnpkR0YwYVdOY0lsMWJiMTBwZlc0dVpYaDBaVzVrS0drdWNISnZkRzkwZVhCbExIUXNjeWs3Wm05eUtIWmhjaUJ2SUdsdUlHNHVZMnhoYzNOUWNtOXdjeWx2SUdsdUlIUW1KbTR1WTJ4aGMzTlFjbTl3YzF0dlhTaHBMbkJ5YjNSdmRIbHdaU3gwVzI5ZEtUdHlaWFIxY200Z2FTNXdjbTkwYjNSNWNHVmJYQ0p6ZFhCbGNsd2lYVDFwVzF3aWMzVndaWEpjSWwwL2FWdGNJbk4xY0dWeVhDSmRMbkJ5YjNSdmRIbHdaVHB1ZFd4c0xHbDlMR05zWVhOelVISnZjSE02ZTJ4aGVuazZkQ2htZFc1amRHbHZiaWgwTEdVc2JpbDdjbVYwZFhKdUlFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwTEdVc2UyZGxkRHBtZFc1amRHbHZiaWdwZTNaaGNpQjBQVzR1WTJGc2JDaDBhR2x6S1R0eVpYUjFjbTRnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE1zWlN4N2RtRnNkV1U2ZEN4amIyNW1hV2QxY21GaWJHVTZJVEFzWlc1MWJXVnlZV0pzWlRvaE1DeDNjbWwwWVdKc1pUb2hNSDBwTEhSOUxITmxkRHBtZFc1amRHbHZiaWgwS1h0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR2hwY3l4bExIdDJZV3gxWlRwMExHTnZibVpwWjNWeVlXSnNaVG9oTUN4bGJuVnRaWEpoWW14bE9pRXdMSGR5YVhSaFlteGxPaUV3ZlNsOUxHTnZibVpwWjNWeVlXSnNaVG9oTUN4bGJuVnRaWEpoWW14bE9pRXdmU2tzZEgwcExHeHBkbVU2ZENobWRXNWpkR2x2YmloMExHVXNjaWw3Y21WMGRYSnVYQ0ptZFc1amRHbHZibHdpUFQwOWJpNTBlWEJsS0hJcEppWW9jajE3YzJWME9uSjlLU3hQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RDeGxMSHRuWlhRNlpuVnVZM1JwYjI0b0tYdDJZWElnZEQxMGFHbHpXMXdpWDF3aUsyVmRMRzQ5Y2k1blpYUW1Kbkl1WjJWMExtTmhiR3dvZEdocGN5eDBLVHR5WlhSMWNtNGdkbTlwWkNBd0lUMDliajl1T25SOUxITmxkRHBtZFc1amRHbHZiaWgwS1h0MllYSWdiajEwYUdselcxd2lYMXdpSzJWZExHazljaTV6WlhRbUpuSXVjMlYwTG1OaGJHd29kR2hwY3l4MExHNHBPM1JvYVhOYlhDSmZYQ0lyWlYwOWRtOXBaQ0F3SVQwOWFUOXBPblI5TEdOdmJtWnBaM1Z5WVdKc1pUcHlMbU52Ym1acFozVnlZV0pzWlN4bGJuVnRaWEpoWW14bE9uSXVaVzUxYldWeVlXSnNaWDBwTEhSOUtYMHNhVzVqYkhWa1pUcG1kVzVqZEdsdmJpZ3BlM1poY2lCMFBXRnlaM1Z0Wlc1MGMxdGhjbWQxYldWdWRITXViR1Z1WjNSb0xURmRMR1U5TWowOVBXRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnL1lYSm5kVzFsYm5Seld6QmRPaUV4TEhJOVpHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW5OamNtbHdkRndpS1R0eVpYUjFjbTRnWlQ5UWNtOXRhWE5sTG5KbGMyOXNkbVVvS1RwdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaGxMR2twZTI0dWMyVjBLSElzZTJGemVXNWpPaUV3TEc5dWJHOWhaRHBtZFc1amRHbHZiaWdwZTJVb0tTeHVMbkpsYlc5MlpTaHlLWDBzYjI1bGNuSnZjanBtZFc1amRHbHZiaWdwZTJrb0tYMHNjM0pqT25Rc2FXNXphV1JsT21SdlkzVnRaVzUwTG1obFlXUjlLWDBwZlN4bVpYUmphRHBtZFc1amRHbHZiaWgwTEhJcGUybG1LQ0YwS1hSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlZVa3dnY0dGeVlXMWxkR1Z5SUdseklHMWhibVJoZEc5eWVTQmhibVFnWTJGdWJtOTBJR0psSUZ3aUszUXBPM1poY2lCcFBXVW9lM1Z5YkRwdVpYY2dWVkpNS0hRc2JHOWpZWFJwYjI0cExHUmhkR0U2WENKY0lpeHRaWFJvYjJRNlhDSkhSVlJjSWl4b1pXRmtaWEp6T250OUxIaG9janB1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1I5TEhJcE8ya3ViV1YwYUc5a1BXa3ViV1YwYUc5a0xuUnZWWEJ3WlhKRFlYTmxLQ2tzYmk1b2IyOXJjeTV5ZFc0b1hDSm1aWFJqYUMxaGNtZHpYQ0lzYVNrc1hDSkhSVlJjSWowOVBXa3ViV1YwYUc5a0ppWnBMbVJoZEdFbUppaHBMblZ5YkM1elpXRnlZMmdyUFdrdVpHRjBZU2tzWkc5amRXMWxiblF1WW05a2VTNXpaWFJCZEhSeWFXSjFkR1VvWENKa1lYUmhMV3h2WVdScGJtZGNJaXhwTG5WeWJDa3NhUzU0YUhJdWIzQmxiaWhwTG0xbGRHaHZaQ3hwTG5WeWJDNW9jbVZtTEdrdVlYTjVibU1oUFQwaE1TeHBMblZ6WlhJc2FTNXdZWE56ZDI5eVpDazdabTl5S0haaGNpQnpJR2x1SUhJcGFXWW9jeUJwYmlCcExuaG9jaWwwY25sN2FTNTRhSEpiYzEwOWNsdHpYWDFqWVhSamFDaHZLWHR6Wld4bUxtTnZibk52YkdVbUptTnZibk52YkdVdVpYSnliM0lvYnlsOVhDSkhSVlJjSWowOVBXa3ViV1YwYUc5a2ZIeHBMbWhsWVdSbGNuTmJYQ0pEYjI1MFpXNTBMWFI1Y0dWY0lsMThmR2t1YUdWaFpHVnljMXRjSWtOdmJuUmxiblF0Vkhsd1pWd2lYWHg4YVM1NGFISXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaGNJa052Ym5SbGJuUXRkSGx3WlZ3aUxGd2lZWEJ3YkdsallYUnBiMjR2ZUMxM2QzY3RabTl5YlMxMWNteGxibU52WkdWa1hDSXBPMlp2Y2loMllYSWdZU0JwYmlCcExtaGxZV1JsY25NcGFTNTRhSEl1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWhoTEdrdWFHVmhaR1Z5YzF0aFhTazdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSFFzWlNsN2FTNTRhSEl1YjI1c2IyRmtQV1oxYm1OMGFXOXVLQ2w3Wkc5amRXMWxiblF1WW05a2VTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb1hDSmtZWFJoTFd4dllXUnBibWRjSWlrc01EMDlQV2t1ZUdoeUxuTjBZWFIxYzN4OGFTNTRhSEl1YzNSaGRIVnpQajB5TURBbUpta3VlR2h5TG5OMFlYUjFjend6TURCOGZETXdORDA5UFdrdWVHaHlMbk4wWVhSMWN6OTBLR2t1ZUdoeUtUcGxLRzR1WlhoMFpXNWtLRVZ5Y205eUtHa3VlR2h5TG5OMFlYUjFjMVJsZUhRcExIdG5aWFFnYzNSaGRIVnpLQ2w3Y21WMGRYSnVJSFJvYVhNdWVHaHlMbk4wWVhSMWMzMHNlR2h5T21rdWVHaHlmU2twZlN4cExuaG9jaTV2Ym1WeWNtOXlQV1oxYm1OMGFXOXVLQ2w3Wkc5amRXMWxiblF1WW05a2VTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb1hDSmtZWFJoTFd4dllXUnBibWRjSWlrc1pTaHVMbVY0ZEdWdVpDaEZjbkp2Y2loY0lrNWxkSGR2Y21zZ1JYSnliM0pjSWlrc2UzaG9janBwTG5ob2NuMHBLWDBzYVM1NGFISXViMjUwYVcxbGIzVjBQV1oxYm1OMGFXOXVLQ2w3Wkc5amRXMWxiblF1WW05a2VTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb1hDSmtZWFJoTFd4dllXUnBibWRjSWlrc1pTaHVMbVY0ZEdWdVpDaEZjbkp2Y2loY0lrNWxkSGR2Y21zZ1ZHbHRaVzkxZEZ3aUtTeDdlR2h5T21rdWVHaHlmU2twZlN4cExuaG9jaTV6Wlc1a0tGd2lSMFZVWENJOVBUMXBMbTFsZEdodlpEOXVkV3hzT21rdVpHRjBZU2w5S1gwc2RtRnNkV1U2Wm5WdVkzUnBiMjRvZENsN2RtRnlJR1U5WENKemRISnBibWRjSWlFOVBXNHVkSGx3WlNoMEtUdHlaWFIxY200Z2JpNGtLR0Z5WjNWdFpXNTBjeWt1YzJ4cFkyVW9LMlVwTG5KbFpIVmpaU2htZFc1amRHbHZiaWgwTEdVcGUzSmxkSFZ5YmlCMEppWjBXMlZkZlN4bFAzUTZjMlZzWmlsOWZTa3NiaTVJYjI5cmN6MXVaWGNnYmk1RGJHRnpjeWg3WVdSa09tWjFibU4wYVc5dUtIUXNaU3h1S1h0MGFHbHpXM1JkUFhSb2FYTmJkRjE4ZkZ0ZExIUm9hWE5iZEYxYmJqOWNJblZ1YzJocFpuUmNJanBjSW5CMWMyaGNJbDBvWlNsOUxISjFianBtZFc1amRHbHZiaWgwTEdVcGUzUm9hWE5iZEYwOWRHaHBjMXQwWFh4OFcxMHNkR2hwYzF0MFhTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtIUXBlM1F1WTJGc2JDaGxKaVpsTG1OdmJuUmxlSFEvWlM1amIyNTBaWGgwT21Vc1pTbDlLWDE5S1N4dUxtaHZiMnR6UFc1bGR5QnVMa2h2YjJ0ek8zWmhjaUJ5UFc0dWNISnZjR1Z5ZEhrN2JpNUZiR1Z0Wlc1MFBXWjFibU4wYVc5dUtIUXBlM1JvYVhNdWMzVmlhbVZqZEQxMExIUm9hWE11WkdGMFlUMTdmU3gwYUdsekxtSnNhWE56UFh0OWZTeHVMa1ZzWlcxbGJuUXVjSEp2ZEc5MGVYQmxQWHR6WlhRNmRDaG1kVzVqZEdsdmJpaDBMR1VwZTNRZ2FXNGdiaTV6WlhSUWNtOXdjejl1TG5ObGRGQnliM0J6VzNSZExtTmhiR3dvZEdocGN5eGxLVHAwSUdsdUlIUm9hWE0vZEdocGMxdDBYVDFsT25Sb2FYTXVjMlYwUVhSMGNtbGlkWFJsS0hRc1pTbDlMREFwTEhSeVlXNXphWFJwYjI0NlpuVnVZM1JwYjI0b2RDeGxLWHR5WlhSMWNtNGdaVDByWlh4OE5EQXdMRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hJc2FTbDdhV1lvWENKMGNtRnVjMmwwYVc5dVhDSnBiaUIwYUdsekxuTjBlV3hsS1h0MllYSWdjejF1TG1WNGRHVnVaQ2g3ZlN4MGFHbHpMbk4wZVd4bExDOWVkSEpoYm5OcGRHbHZiaWhFZFhKaGRHbHZibnhRY205d1pYSjBlU2trTHlrN2JpNXpkSGxzWlNoMGFHbHpMSHQwY21GdWMybDBhVzl1UkhWeVlYUnBiMjQ2S0dWOGZEUXdNQ2tyWENKdGMxd2lMSFJ5WVc1emFYUnBiMjVRY205d1pYSjBlVHBQWW1wbFkzUXVhMlY1Y3loMEtTNXFiMmx1S0Z3aUxDQmNJaWw5S1N4dUxtOXVZMlVvZEdocGN5eGNJblJ5WVc1emFYUnBiMjVsYm1SY0lpeG1kVzVqZEdsdmJpZ3BlMk5zWldGeVZHbHRaVzkxZENodktTeHVMbk4wZVd4bEtIUm9hWE1zY3lrc2NpaDBhR2x6S1gwcE8zWmhjaUJ2UFhObGRGUnBiV1Z2ZFhRb2NpeGxLelV3TEhSb2FYTXBPMjR1YzNSNWJHVW9kR2hwY3l4MEtYMWxiSE5sSUc0dWMzUjViR1VvZEdocGN5eDBLU3h5S0hSb2FYTXBmUzVpYVc1a0tIUm9hWE1wS1gwc1ptbHlaVHBtZFc1amRHbHZiaWgwTEdVcGUzWmhjaUJ5UFdSdlkzVnRaVzUwTG1OeVpXRjBaVVYyWlc1MEtGd2lTRlJOVEVWMlpXNTBjMXdpS1R0eVpYUjFjbTRnY2k1cGJtbDBSWFpsYm5Rb2RDd2hNQ3doTUNrc2RHaHBjeTVrYVhOd1lYUmphRVYyWlc1MEtHNHVaWGgwWlc1a0tISXNaU2twZlN4MWJtSnBibVE2ZENobWRXNWpkR2x2YmloMExHVXBleWgwZkh4Y0lsd2lLUzV6Y0d4cGRDZ3ZYRnh6S3k4cExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdhV1lvY2lCcGJpQjBhR2x6SmlZb2RDNXBibVJsZUU5bUtGd2lMbHdpS1Q0dE1YeDhJV1VwS1h0MFBTaDBmSHhjSWx3aUtTNXpjR3hwZENoY0lpNWNJaWs3ZG1GeUlHNDlkRnN4WFR0MFBYUmJNRjA3ZG1GeUlHazlkR2hwYzF0eVhTNWliR2x6Y3k1c2FYTjBaVzVsY25NOWRHaHBjMXR5WFM1aWJHbHpjeTVzYVhOMFpXNWxjbk44Zkh0OU8yWnZjaWgyWVhJZ2N5QnBiaUJwS1dsbUtDRjBmSHh6UFQwOWRDbG1iM0lvZG1GeUlHOHNZVDB3TzI4OWFWdHpYVnRoWFR0aEt5c3BiaVltYmlFOVBXOHVZMnhoYzNOT1lXMWxmSHhsSmlabElUMDlieTVqWVd4c1ltRmphM3g4S0hSb2FYTXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaTVqWVd4c0tIUm9hWE1zY3l4dkxtTmhiR3hpWVdOckxHOHVZMkZ3ZEhWeVpTa3NZUzB0S1gxbGJITmxJSFJvYVhNdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaDBMR1VwZlN4MGFHbHpLWDBzTUNsOUxHNHVjMlYwVUhKdmNITTllM04wZVd4bE9tWjFibU4wYVc5dUtIUXBlMjR1WlhoMFpXNWtLSFJvYVhNdWMzUjViR1VzZENsOUxHRjBkSEpwWW5WMFpYTTZablZ1WTNScGIyNG9kQ2w3Wm05eUtIWmhjaUJsSUdsdUlIUXBkR2hwY3k1elpYUkJkSFJ5YVdKMWRHVW9aU3gwVzJWZEtYMHNjSEp2Y0dWeWRHbGxjenBtZFc1amRHbHZiaWgwS1h0dUxtVjRkR1Z1WkNoMGFHbHpMSFFwZlN4bGRtVnVkSE02Wm5WdVkzUnBiMjRvZENsN2FXWW9kQ1ltZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S1h0MllYSWdaVDEwYUdsek8ybG1LSFJiY2wwbUpuUmJjbDB1WW14cGMzTXBlM1poY2lCcFBYUmJjbDB1WW14cGMzTXViR2x6ZEdWdVpYSnpPMlp2Y2loMllYSWdjeUJwYmlCcEtXbGJjMTB1Wm05eVJXRmphQ2htZFc1amRHbHZiaWgwS1h0bExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb2N5eDBMbU5oYkd4aVlXTnJMSFF1WTJGd2RIVnlaU2w5S1gxbWIzSW9kbUZ5SUc4Z2FXNGdkQ2t3UFQwOWJ5NXBibVJsZUU5bUtGd2liMjVjSWlrbUppaDBhR2x6VzI5ZFBYUmJiMTBwZldWc2MyVWdhV1lvWVhKbmRXMWxiblJ6TG14bGJtZDBhRDR4SmlaY0luTjBjbWx1WjF3aVBUMDliaTUwZVhCbEtIUXBLWHQyWVhJZ1lUMWhjbWQxYldWdWRITmJNVjBzZFQxaGNtZDFiV1Z1ZEhOYk1sMDdkQzV6Y0d4cGRDZ3ZYRnh6S3k4cExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdkR2hwY3k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0hRc1lTeDFLWDBzZEdocGN5bDlaV3h6WlNCbWIzSW9kbUZ5SUdNZ2FXNGdkQ2x1TG1WMlpXNTBjeWgwYUdsekxHTXNkRnRqWFNsOUxHOXVZMlU2ZENobWRXNWpkR2x2YmloMExHVXBlM1E5ZEM1emNHeHBkQ2d2WEZ4ekt5OHBPM1poY2lCdVBYUm9hWE1zY2oxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdiaTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0hRc2NpbDlLU3hsTG1Gd2NHeDVLRzRzWVhKbmRXMWxiblJ6S1gwN2RDNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtIUXBlMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWgwTEhJcGZTbDlMREFwTEdSbGJHVm5ZWFJsT25Rb1puVnVZM1JwYjI0b2RDeGxMRzRwZTNSb2FYTXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaDBMR1oxYm1OMGFXOXVLSFFwZTNRdWRHRnlaMlYwTG1Oc2IzTmxjM1FvWlNrbUptNHVZMkZzYkNoMGFHbHpMSFFwZlNsOUxEQXNNaWtzWTI5dWRHVnVkSE02Wm5WdVkzUnBiMjRvZENsN0tIUjhmREE5UFQxMEtTWW1LRUZ5Y21GNUxtbHpRWEp5WVhrb2RDay9kRHBiZEYwcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdkbUZ5SUdVOWJpNTBlWEJsS0hRcE95OWVLSE4wY21sdVozeHVkVzFpWlhJcEpDOHVkR1Z6ZENobEtUOTBQV1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtIUXJYQ0pjSWlrNlhDSnZZbXBsWTNSY0lqMDlQV1VtSmloMFBXNHVZM0psWVhSbEtIUXBLU3gwSUdsdWMzUmhibU5sYjJZZ1RtOWtaU1ltZEdocGN5NWhjSEJsYm1SRGFHbHNaQ2gwS1gwc2RHaHBjeWw5TEdsdWMybGtaVHBtZFc1amRHbHZiaWgwS1h0MExtRndjR1Z1WkVOb2FXeGtLSFJvYVhNcGZTeGlaV1p2Y21VNlpuVnVZM1JwYjI0b2RDbDdkQzV3WVhKbGJuUk9iMlJsTG1sdWMyVnlkRUpsWm05eVpTaDBhR2x6TEhRcGZTeGhablJsY2pwbWRXNWpkR2x2YmloMEtYdDBMbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtIUm9hWE1zZEM1dVpYaDBVMmxpYkdsdVp5bDlMSE4wWVhKME9tWjFibU4wYVc5dUtIUXBlM1F1YVc1elpYSjBRbVZtYjNKbEtIUm9hWE1zZEM1bWFYSnpkRU5vYVd4a0tYMHNZWEp2ZFc1a09tWjFibU4wYVc5dUtIUXBlM1F1Y0dGeVpXNTBUbTlrWlNZbWJpNWlaV1p2Y21Vb2RHaHBjeXgwS1N3b0wxNTBaVzF3YkdGMFpTUXZhUzUwWlhOMEtIUm9hWE11Ym05a1pVNWhiV1VwUDNSb2FYTXVZMjl1ZEdWdWRIeDhkR2hwY3pwMGFHbHpLUzVoY0hCbGJtUkRhR2xzWkNoMEtYMTlMRzR1UVhKeVlYazlablZ1WTNScGIyNG9kQ2w3ZEdocGN5NXpkV0pxWldOMFBYUjlMRzR1UVhKeVlYa3VjSEp2ZEc5MGVYQmxQWHRoYkd3NlpuVnVZM1JwYjI0b2RDbDdkbUZ5SUdVOUpDUW9ZWEpuZFcxbGJuUnpLUzV6YkdsalpTZ3hLVHR5WlhSMWNtNGdkR2hwYzF0MFhTNWhjSEJzZVNoMGFHbHpMR1VwZlgwc2JpNWhaR1E5ZENobWRXNWpkR2x2YmloMExHVXNjaXhwS1h0eVBXNHVaWGgwWlc1a0tIc2tPaUV3TEdWc1pXMWxiblE2SVRBc1lYSnlZWGs2SVRCOUxISXBMRndpWm5WdVkzUnBiMjVjSWowOWJpNTBlWEJsS0dVcEppWW9JWEl1Wld4bGJXVnVkSHg4ZENCcGJpQnVMa1ZzWlcxbGJuUXVjSEp2ZEc5MGVYQmxKaVpwZkh3b2JpNUZiR1Z0Wlc1MExuQnliM1J2ZEhsd1pWdDBYVDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxuTjFZbXBsWTNRbUptNHVaR1ZtYVc1bFpDaGxMbUZ3Y0d4NUtIUm9hWE11YzNWaWFtVmpkQ3hoY21kMWJXVnVkSE1wTEhSb2FYTXVjM1ZpYW1WamRDbDlLU3doY2k1aGNuSmhlWHg4ZENCcGJpQnVMa0Z5Y21GNUxuQnliM1J2ZEhsd1pTWW1hWHg4S0c0dVFYSnlZWGt1Y0hKdmRHOTBlWEJsVzNSZFBXWjFibU4wYVc5dUtDbDdkbUZ5SUhROVlYSm5kVzFsYm5Sek8zSmxkSFZ5YmlCMGFHbHpMbk4xWW1wbFkzUXViV0Z3S0daMWJtTjBhVzl1S0hJcGUzSmxkSFZ5YmlCeUppWnVMbVJsWm1sdVpXUW9aUzVoY0hCc2VTaHlMSFFwTEhJcGZTbDlLU3h5TGlRbUppaHVMbk52ZFhKalpYTmJkRjA5Ymx0MFhUMWxMQ2h5TG1GeWNtRjVmSHh5TG1Wc1pXMWxiblFwSmlZb2JsdDBYVDFtZFc1amRHbHZiaWdwZTNaaGNpQmxQVnRkTG5Oc2FXTmxMbUZ3Y0d4NUtHRnlaM1Z0Wlc1MGN5a3NhVDFsTG5Ob2FXWjBLQ2tzY3oxeUxtRnljbUY1SmlaQmNuSmhlUzVwYzBGeWNtRjVLR2twUDF3aVFYSnlZWGxjSWpwY0lrVnNaVzFsYm5SY0lqdHlaWFIxY200Z2JsdHpYUzV3Y205MGIzUjVjR1ZiZEYwdVlYQndiSGtvZTNOMVltcGxZM1E2YVgwc1pTbDlLU2twZlN3d0tTeHVMbUZrWkNodUxrRnljbUY1TG5CeWIzUnZkSGx3WlN4N1pXeGxiV1Z1ZERvaE1YMHBMRzR1WVdSa0tHNHVSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXBMRzR1WVdSa0tHNHVjMlYwVUhKdmNITXBMRzR1WVdSa0tHNHVZMnhoYzNOUWNtOXdjeXg3Wld4bGJXVnVkRG9oTVN4aGNuSmhlVG9oTVgwcE8zWmhjaUJwUFdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0pmWENJcE8yNHVZV1JrS0c0dVpYaDBaVzVrS0h0OUxFaFVUVXhGYkdWdFpXNTBMbkJ5YjNSdmRIbHdaU3htZFc1amRHbHZiaWgwS1h0eVpYUjFjbTVjSW1aMWJtTjBhVzl1WENJOVBUMXVMblI1Y0dVb2FWdDBYU2w5S1N4dWRXeHNMQ0V3S1gwb0tTeG1kVzVqZEdsdmJpaDBLWHRjSW5WelpTQnpkSEpwWTNSY0lqdHBaaWhDYkdsemN5WW1JVUpzYVhOekxuTm9lU2w3ZG1GeUlHVTlRbXhwYzNNdWNISnZjR1Z5ZEhrN2FXWW9kQzVoWkdRb2UyTnNiMjVsT21aMWJtTjBhVzl1S0NsN2RtRnlJR1U5ZEdocGN5NWpiRzl1WlU1dlpHVW9JVEFwTEc0OWRDNGtLRndpS2x3aUxHVXBMbU52Ym1OaGRDaGxLVHR5WlhSMWNtNGdkQzRrS0Z3aUtsd2lMSFJvYVhNcExtTnZibU5oZENoMGFHbHpLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR1VzY2l4cEtYdDBMbVYyWlc1MGN5aHVXM0pkTEdVcExHNWJjbDB1WHk1a1lYUmhQWFF1WlhoMFpXNWtLSHQ5TEdVdVh5NWtZWFJoS1gwcExHVjlmU3g3WVhKeVlYazZJVEY5S1N4UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29UbTlrWlM1d2NtOTBiM1I1Y0dVc1pTeDdaMlYwT21aMWJtTjBhVzl1SUc4b0tYdHlaWFIxY200Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRTV2WkdVdWNISnZkRzkwZVhCbExHVXNlMmRsZERwMmIybGtJREI5S1N4UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR2hwY3l4bExIdDJZV3gxWlRwdVpYY2dkQzVGYkdWdFpXNTBLSFJvYVhNcGZTa3NUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0U1dlpHVXVjSEp2ZEc5MGVYQmxMR1VzZTJkbGREcHZmU2tzZEdocGMxdGxYWDBzWTI5dVptbG5kWEpoWW14bE9pRXdmU2tzVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtFRnljbUY1TG5CeWIzUnZkSGx3WlN4bExIdG5aWFE2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUm9hWE1zWlN4N2RtRnNkV1U2Ym1WM0lIUXVRWEp5WVhrb2RHaHBjeWw5S1N4MGFHbHpXMlZkZlN4amIyNW1hV2QxY21GaWJHVTZJVEI5S1N4elpXeG1Ma1YyWlc1MFZHRnlaMlYwSmlaY0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhKY0ltbHVJRVYyWlc1MFZHRnlaMlYwTG5CeWIzUnZkSGx3WlNsN2RtRnlJRzQ5UlhabGJuUlVZWEpuWlhRdWNISnZkRzkwZVhCbExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJc2NqMUZkbVZ1ZEZSaGNtZGxkQzV3Y205MGIzUjVjR1V1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2l4cFBXWjFibU4wYVc5dUtIUXNaU3h1S1h0eVpYUjFjbTRnYmk1allXeHNZbUZqYXowOVBYUW1KbTR1WTJGd2RIVnlaVDA5Wlgwc2N6MW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpRnBMbUZ3Y0d4NUtIUm9hWE1zWVhKbmRXMWxiblJ6S1gwN1JYWmxiblJVWVhKblpYUXVjSEp2ZEc5MGVYQmxMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSTlablZ1WTNScGIyNG9kQ3h5TEhNcGUybG1LSFJvYVhNbUpuUm9hWE5iWlYwbUpuUm9hWE5iWlYwdVlteHBjM01tSm5JcGUzWmhjaUJ2UFhSb2FYTmJaVjB1WW14cGMzTXViR2x6ZEdWdVpYSnpQWFJvYVhOYlpWMHVZbXhwYzNNdWJHbHpkR1Z1WlhKemZIeDdmVHRwWmloMExtbHVaR1Y0VDJZb1hDSXVYQ0lwUGkweEtYdDBQWFF1YzNCc2FYUW9YQ0l1WENJcE8zWmhjaUJoUFhSYk1WMDdkRDEwV3pCZGZXOWJkRjA5YjF0MFhYeDhXMTBzTUQwOVBXOWJkRjB1Wm1sc2RHVnlLR2t1WW1sdVpDaHVkV3hzTEhJc2N5a3BMbXhsYm1kMGFDWW1iMXQwWFM1d2RYTm9LSHRqWVd4c1ltRmphenB5TEdOaGNIUjFjbVU2Y3l4amJHRnpjMDVoYldVNllYMHBmWEpsZEhWeWJpQnVMbU5oYkd3b2RHaHBjeXgwTEhJc2N5bDlMRVYyWlc1MFZHRnlaMlYwTG5CeWIzUnZkSGx3WlM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeVBXWjFibU4wYVc5dUtIUXNiaXhwS1h0cFppaDBhR2x6SmlaMGFHbHpXMlZkSmlaMGFHbHpXMlZkTG1Kc2FYTnpKaVp1S1h0MllYSWdiejEwYUdselcyVmRMbUpzYVhOekxteHBjM1JsYm1WeWN6MTBhR2x6VzJWZExtSnNhWE56TG14cGMzUmxibVZ5YzN4OGUzMDdiMXQwWFNZbUtHOWJkRjA5YjF0MFhTNW1hV3gwWlhJb2N5NWlhVzVrS0c1MWJHd3NiaXhwS1NrcGZYSmxkSFZ5YmlCeUxtTmhiR3dvZEdocGN5eDBMRzRzYVNsOWZYTmxiR1l1SkQxelpXeG1MaVI4ZkhRc2MyVnNaaTRrSkQxelpXeG1MaVFrZkh4MExpUjlmU2hDYkdsemN5azdJaXdpTHlwY2JpQXFJRk4wY21WMFkyaDVPaUJHYjNKdElHVnNaVzFsYm5RZ1lYVjBiM05wZW1sdVp5d2dkR2hsSUhkaGVTQnBkQ0J6YUc5MWJHUWdZbVV1WEc0Z0tpQmllU0JNWldFZ1ZtVnliM1VnYUhSMGNEb3ZMMnhsWVM1MlpYSnZkUzV0WlZ4dUlDb2dUVWxVSUd4cFkyVnVjMlZjYmlBcUwxeHVLR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNXBaaUFvSVhObGJHWXVSV3hsYldWdWRDa2dlMXh1WEhSeVpYUjFjbTQ3SUM4dklITjFjR1Z5SUc5c1pDQmljbTkzYzJWeVhHNTlYRzVjYm1sbUlDZ2hSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXViV0YwWTJobGN5a2dlMXh1WEhSRmJHVnRaVzUwTG5CeWIzUnZkSGx3WlM1dFlYUmphR1Z6SUQwZ1JXeGxiV1Z1ZEM1d2NtOTBiM1I1Y0dVdWQyVmlhMmwwVFdGMFkyaGxjMU5sYkdWamRHOXlJSHg4SUVWc1pXMWxiblF1Y0hKdmRHOTBlWEJsTG0xdmVrMWhkR05vWlhOVFpXeGxZM1J2Y2lCOGZDQkZiR1Z0Wlc1MExuQnliM1J2ZEhsd1pTNXRjMDFoZEdOb1pYTlRaV3hsWTNSdmNpQjhmQ0JGYkdWdFpXNTBMbkJ5YjNSdmRIbHdaUzV2VFdGMFkyaGxjMU5sYkdWamRHOXlJSHg4SUc1MWJHdzdYRzU5WEc1Y2JtbG1JQ2doUld4bGJXVnVkQzV3Y205MGIzUjVjR1V1YldGMFkyaGxjeWtnZTF4dVhIUnlaWFIxY200N1hHNTlYRzVjYm1aMWJtTjBhVzl1SUNRa0tHVjRjSElzSUdOdmJpa2dlMXh1WEhSeVpYUjFjbTRnWlhod2NpQnBibk4wWVc1alpXOW1JRTV2WkdVZ2ZId2daWGh3Y2lCcGJuTjBZVzVqWlc5bUlGZHBibVJ2ZHo4Z1cyVjRjSEpkSURwY2JseDBJQ0FnSUNBZ0lGdGRMbk5zYVdObExtTmhiR3dvZEhsd1pXOW1JR1Y0Y0hJZ1BUMGdYQ0p6ZEhKcGJtZGNJajhnS0dOdmJpQjhmQ0JrYjJOMWJXVnVkQ2t1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2hsZUhCeUtTQTZJR1Y0Y0hJZ2ZId2dXMTBwTzF4dWZWeHVYRzUyWVhJZ1h5QTlJSE5sYkdZdVUzUnlaWFJqYUhrZ1BTQjdYRzVjZEhObGJHVmpkRzl5Y3pvZ2UxeHVYSFJjZEdKaGMyVTZJQ2QwWlhoMFlYSmxZU3dnYzJWc1pXTjBPbTV2ZENoYmMybDZaVjBwTENCcGJuQjFkRHB1YjNRb1czUjVjR1ZkS1N3Z2FXNXdkWFJiZEhsd1pUMWNJaWNnS3lCY0luUmxlSFFnZFhKc0lHVnRZV2xzSUhSbGJGd2lMbk53YkdsMEtGd2lJRndpS1M1cWIybHVLQ2RjSWwwc0lHbHVjSFYwVzNSNWNHVTlYQ0luS1NBcklDZGNJbDBuTEZ4dVhIUmNkR1pwYkhSbGNqb2dYQ0lxWENKY2JseDBmU3hjYmx4dVhIUXZMeUJUWTNKcGNIUWdaV3hsYldWdWRDQjBhR2x6SUhkaGN5QnBibU5zZFdSbFpDQjNhWFJvTENCcFppQmhibmxjYmx4MGMyTnlhWEIwT2lCa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBJSHg4SUNRa0tGd2ljMk55YVhCMFhDSXBMbkJ2Y0NncExGeHVYRzVjZEM4dklFRjFkRzl6YVhwbElHOXVaU0JsYkdWdFpXNTBMaUJVYUdVZ1kyOXlaU0J2WmlCVGRISmxkR05vZVM1Y2JseDBjbVZ6YVhwbE9pQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MEtTQjdYRzVjZEZ4MGFXWWdLQ0ZmTG5KbGMybDZaWE1vWld4bGJXVnVkQ2twSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUjJZWElnWTNNZ1BTQm5aWFJEYjIxd2RYUmxaRk4wZVd4bEtHVnNaVzFsYm5RcE8xeHVYSFJjZEhaaGNpQnZabVp6WlhRZ1BTQXdPMXh1WEc1Y2RGeDBhV1lnS0NGbGJHVnRaVzUwTG5aaGJIVmxJQ1ltSUdWc1pXMWxiblF1Y0d4aFkyVm9iMnhrWlhJcElIdGNibHgwWEhSY2RIWmhjaUJsYlhCMGVTQTlJSFJ5ZFdVN1hHNWNkRngwWEhSbGJHVnRaVzUwTG5aaGJIVmxJRDBnWld4bGJXVnVkQzV3YkdGalpXaHZiR1JsY2p0Y2JseDBYSFI5WEc1Y2JseDBYSFIyWVhJZ2RIbHdaU0E5SUdWc1pXMWxiblF1Ym05a1pVNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1WEhSY2RHbG1JQ2gwZVhCbElEMDlJRndpZEdWNGRHRnlaV0ZjSWlrZ2UxeHVYSFJjZEZ4MFpXeGxiV1Z1ZEM1emRIbHNaUzVvWldsbmFIUWdQU0JjSWpCY0lqdGNibHh1WEhSY2RGeDBhV1lnS0dOekxtSnZlRk5wZW1sdVp5QTlQU0JjSW1KdmNtUmxjaTFpYjNoY0lpa2dlMXh1WEhSY2RGeDBYSFJ2Wm1aelpYUWdQU0JsYkdWdFpXNTBMbTltWm5ObGRFaGxhV2RvZER0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdWc2MyVWdhV1lnS0dOekxtSnZlRk5wZW1sdVp5QTlQU0JjSW1OdmJuUmxiblF0WW05NFhDSXBJSHRjYmx4MFhIUmNkRngwYjJabWMyVjBJRDBnTFdWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoME8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmxiR1Z0Wlc1MExuTjBlV3hsTG1obGFXZG9kQ0E5SUdWc1pXMWxiblF1YzJOeWIyeHNTR1ZwWjJoMElDc2diMlptYzJWMElDc2dYQ0p3ZUZ3aU8xeHVYSFJjZEgxY2JseDBYSFJsYkhObElHbG1LSFI1Y0dVZ1BUMGdYQ0pwYm5CMWRGd2lLU0I3WEc1Y2RGeDBYSFJsYkdWdFpXNTBMbk4wZVd4bExuZHBaSFJvSUQwZ1hDSXdYQ0k3WEc1Y2JseDBYSFJjZEdsbUlDaGpjeTVpYjNoVGFYcHBibWNnUFQwZ1hDSmliM0prWlhJdFltOTRYQ0lwSUh0Y2JseDBYSFJjZEZ4MGIyWm1jMlYwSUQwZ1pXeGxiV1Z1ZEM1dlptWnpaWFJYYVdSMGFEdGNibHgwWEhSY2RIMWNibHgwWEhSY2RHVnNjMlVnYVdZZ0tHTnpMbUp2ZUZOcGVtbHVaeUE5UFNCY0luQmhaR1JwYm1jdFltOTRYQ0lwSUh0Y2JseDBYSFJjZEZ4MGIyWm1jMlYwSUQwZ1pXeGxiV1Z1ZEM1amJHbGxiblJYYVdSMGFEdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnVTJGbVlYSnBJRzFwYzNKbGNHOXlkSE1nYzJOeWIyeHNWMmxrZEdnc0lITnZJSGRsSUhkcGJHd2dhVzV6ZEdWaFpDQnpaWFFnYzJOeWIyeHNUR1ZtZENCMGJ5QmhYRzVjZEZ4MFhIUXZMeUJvZFdkbElHNTFiV0psY2l3Z1lXNWtJSEpsWVdRZ2RHaGhkQ0JpWVdOcklIUnZJSE5sWlNCM2FHRjBJR2wwSUhkaGN5QmpiR2x3Y0dWa0lIUnZYRzVjZEZ4MFhIUmxiR1Z0Wlc1MExuTmpjbTlzYkV4bFpuUWdQU0F4WlNzeE1EdGNibHh1WEhSY2RGeDBkbUZ5SUhkcFpIUm9JRDBnVFdGMGFDNXRZWGdvWld4bGJXVnVkQzV6WTNKdmJHeE1aV1owSUNzZ2IyWm1jMlYwTENCbGJHVnRaVzUwTG5OamNtOXNiRmRwWkhSb0lDMGdaV3hsYldWdWRDNWpiR2xsYm5SWGFXUjBhQ2s3WEc1Y2JseDBYSFJjZEdWc1pXMWxiblF1YzNSNWJHVXVkMmxrZEdnZ1BTQjNhV1IwYUNBcklGd2ljSGhjSWp0Y2JseDBYSFI5WEc1Y2RGeDBaV3h6WlNCcFppQW9kSGx3WlNBOVBTQmNJbk5sYkdWamRGd2lLU0I3WEc1Y2RGeDBYSFF2THlCT1pXVmtJSFJ2SUhWelpTQmtkVzF0ZVNCbGJHVnRaVzUwSUhSdklHMWxZWE4xY21VZ09paGNibHgwWEhSY2RIWmhjaUJ2Y0hScGIyNGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lYMXdpS1R0Y2JseDBYSFJjZEc5d2RHbHZiaTUwWlhoMFEyOXVkR1Z1ZENBOUlHVnNaVzFsYm5RdWIzQjBhVzl1YzF0bGJHVnRaVzUwTG5ObGJHVmpkR1ZrU1c1a1pYaGRMblJsZUhSRGIyNTBaVzUwTzF4dVhIUmNkRngwWld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsTG1sdWMyVnlkRUpsWm05eVpTaHZjSFJwYjI0c0lHVnNaVzFsYm5RdWJtVjRkRk5wWW14cGJtY3BPMXh1WEc1Y2RGeDBYSFF2THlCVWFHVWdibUZ0WlNCdlppQjBhR1VnWVhCd1pXRnlZVzVqWlNCd2NtOXdaWEowZVN3Z1lYTWdhWFFnYldsbmFIUWdZbVVnY0hKbFptbDRaV1JjYmx4MFhIUmNkSFpoY2lCaGNIQmxZWEpoYm1ObE8xeHVYRzVjZEZ4MFhIUm1iM0lnS0haaGNpQndjbTl3WlhKMGVTQnBiaUJqY3lrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvSVM5ZUtIZHBaSFJvZkhkbFltdHBkRXh2WjJsallXeFhhV1IwYUNra0x5NTBaWE4wS0hCeWIzQmxjblI1S1NrZ2UxeHVYSFJjZEZ4MFhIUmNkQzh2WTI5dWMyOXNaUzVzYjJjb2NISnZjR1Z5ZEhrc0lHOXdkR2x2Ymk1dlptWnpaWFJYYVdSMGFDd2dZM05iY0hKdmNHVnlkSGxkS1R0Y2JseDBYSFJjZEZ4MFhIUnZjSFJwYjI0dWMzUjViR1ZiY0hKdmNHVnlkSGxkSUQwZ1kzTmJjSEp2Y0dWeWRIbGRPMXh1WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLQzloY0hCbFlYSmhibU5sSkM5cExuUmxjM1FvY0hKdmNHVnlkSGtwS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJoY0hCbFlYSmhibU5sSUQwZ2NISnZjR1Z5ZEhrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEc5d2RHbHZiaTV6ZEhsc1pTNTNhV1IwYUNBOUlGd2lYQ0k3WEc1Y2JseDBYSFJjZEdsbUlDaHZjSFJwYjI0dWIyWm1jMlYwVjJsa2RHZ2dQaUF3S1NCN1hHNWNkRngwWEhSY2RHVnNaVzFsYm5RdWMzUjViR1V1ZDJsa2RHZ2dQU0J2Y0hScGIyNHViMlptYzJWMFYybGtkR2dnS3lCY0luQjRYQ0k3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLQ0ZqYzF0aGNIQmxZWEpoYm1ObFhTQjhmQ0JqYzF0aGNIQmxZWEpoYm1ObFhTQWhQVDBnWENKdWIyNWxYQ0lwSUh0Y2JseDBYSFJjZEZ4MFhIUXZMeUJCWTJOdmRXNTBJR1p2Y2lCaGNuSnZkMXh1WEhSY2RGeDBYSFJjZEdWc1pXMWxiblF1YzNSNWJHVXVkMmxrZEdnZ1BTQmNJbU5oYkdNb1hDSWdLeUJsYkdWdFpXNTBMbk4wZVd4bExuZHBaSFJvSUNzZ1hDSWdLeUF5WlcwcFhDSTdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYjNCMGFXOXVMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2IzQjBhVzl1S1R0Y2JseDBYSFJjZEc5d2RHbHZiaUE5SUc1MWJHdzdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLR1Z0Y0hSNUtTQjdYRzVjZEZ4MFhIUmxiR1Z0Wlc1MExuWmhiSFZsSUQwZ1hDSmNJanRjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwTHk4Z1FYVjBiM05wZW1VZ2JYVnNkR2x3YkdVZ1pXeGxiV1Z1ZEhOY2JseDBjbVZ6YVhwbFFXeHNPaUJtZFc1amRHbHZiaWhsYkdWdFpXNTBjeWtnZTF4dVhIUmNkQ1FrS0dWc1pXMWxiblJ6SUh4OElGOHVjMlZzWldOMGIzSnpMbUpoYzJVcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHVnNaVzFsYm5RcElIdGNibHgwWEhSY2RGOHVjbVZ6YVhwbEtHVnNaVzFsYm5RcE8xeHVYSFJjZEgwcE8xeHVYSFI5TEZ4dVhHNWNkR0ZqZEdsMlpUb2dkSEoxWlN4Y2JseHVYSFF2THlCWGFXeHNJSE4wY21WMFkyaDVJR1J2SUdGdWVYUm9hVzVuSUdadmNpQjBhR2x6SUdWc1pXMWxiblEvWEc1Y2RISmxjMmw2WlhNNklHWjFibU4wYVc5dUtHVnNaVzFsYm5RcElIdGNibHgwWEhSeVpYUjFjbTRnWld4bGJXVnVkQ0FtSmx4dVhIUmNkQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExuQmhjbVZ1ZEU1dlpHVWdKaVpjYmx4MFhIUWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1dFlYUmphR1Z6SUNZbVhHNWNkRngwSUNBZ0lDQWdJR1ZzWlcxbGJuUXViV0YwWTJobGN5aGZMbk5sYkdWamRHOXljeTVpWVhObEtTQW1KbHh1WEhSY2RDQWdJQ0FnSUNCbGJHVnRaVzUwTG0xaGRHTm9aWE1vWHk1elpXeGxZM1J2Y25NdVptbHNkR1Z5S1R0Y2JseDBmU3hjYmx4dVhIUnBibWwwT2lCbWRXNWpkR2x2YmlncGUxeHVYSFJjZEY4dWMyVnNaV04wYjNKekxtWnBiSFJsY2lBOUlGOHVjMk55YVhCMExtZGxkRUYwZEhKcFluVjBaU2hjSW1SaGRHRXRabWxzZEdWeVhDSXBJSHg4WEc1Y2RGeDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NRa0tGd2lXMlJoZEdFdGMzUnlaWFJqYUhrdFptbHNkR1Z5WFZ3aUtTNXdiM0FvS1NCOGZDQmtiMk4xYldWdWRDNWliMlI1S1M1blpYUkJkSFJ5YVdKMWRHVW9YQ0prWVhSaExYTjBjbVYwWTJoNUxXWnBiSFJsY2x3aUtTQjhmQ0JUZEhKbGRHTm9lUzV6Wld4bFkzUnZjbk11Wm1sc2RHVnlJSHg4SUZ3aUtsd2lPMXh1WEc1Y2RGeDBYeTV5WlhOcGVtVkJiR3dvS1R0Y2JseDBmU3hjYmx4dVhIUWtKRG9nSkNSY2JuMDdYRzVjYmk4dklFRjFkRzl6YVhwbElHRnNiQ0JsYkdWdFpXNTBjeUJ2Ym1ObElIUm9aU0JFVDAwZ2FYTWdiRzloWkdWa1hHNWNiaTh2SUVSUFRTQmhiSEpsWVdSNUlHeHZZV1JsWkQ5Y2JtbG1JQ2hrYjJOMWJXVnVkQzV5WldGa2VWTjBZWFJsSUNFOVBTQmNJbXh2WVdScGJtZGNJaWtnZTF4dVhIUmZMbWx1YVhRb0tUdGNibjFjYm1Wc2MyVWdlMXh1WEhRdkx5QlhZV2wwSUdadmNpQnBkRnh1WEhSa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVJFOU5RMjl1ZEdWdWRFeHZZV1JsWkZ3aUxDQmZMbWx1YVhRcE8xeHVmVnh1WEc0dkx5Qk1hWE4wWlc0Z1ptOXlJR05vWVc1blpYTmNiblpoY2lCc2FYTjBaVzVsY2lBOUlHWjFibU4wYVc5dUtHVjJkQ2tnZTF4dVhIUnBaaUFvWHk1aFkzUnBkbVVwSUh0Y2JseDBYSFJmTG5KbGMybDZaU2hsZG5RdWRHRnlaMlYwS1R0Y2JseDBmVnh1ZlR0Y2JseHVaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSnBibkIxZEZ3aUxDQnNhWE4wWlc1bGNpazdYRzVjYmk4dklFWnBjbVZtYjNnZ1ptbHlaWE1nWVNCamFHRnVaMlVnWlhabGJuUWdhVzV6ZEdWaFpDQnZaaUJoYmlCcGJuQjFkQ0JsZG1WdWRGeHVaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSmphR0Z1WjJWY0lpd2diR2x6ZEdWdVpYSXBPMXh1WEc0dkx5Qk1hWE4wWlc0Z1ptOXlJRzVsZHlCbGJHVnRaVzUwYzF4dWFXWWdLSE5sYkdZdVRYVjBZWFJwYjI1UFluTmxjblpsY2lrZ2UxeHVYSFFvYm1WM0lFMTFkR0YwYVc5dVQySnpaWEoyWlhJb1puVnVZM1JwYjI0b2JYVjBZWFJwYjI1ektTQjdYRzVjZEZ4MGFXWWdLRjh1WVdOMGFYWmxLU0I3WEc1Y2RGeDBYSFJ0ZFhSaGRHbHZibk11Wm05eVJXRmphQ2htZFc1amRHbHZiaWh0ZFhSaGRHbHZiaWtnZTF4dVhIUmNkRngwWEhScFppQW9iWFYwWVhScGIyNHVkSGx3WlNBOVBTQmNJbU5vYVd4a1RHbHpkRndpS1NCN1hHNWNkRngwWEhSY2RGeDBVM1J5WlhSamFIa3VjbVZ6YVhwbFFXeHNLRzExZEdGMGFXOXVMbUZrWkdWa1RtOWtaWE1wTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOUtUdGNibHgwWEhSOVhHNWNkSDBwS1M1dlluTmxjblpsS0dSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQ3dnZTF4dVhIUmNkR05vYVd4a1RHbHpkRG9nZEhKMVpTeGNibHgwWEhSemRXSjBjbVZsT2lCMGNuVmxYRzVjZEgwcE8xeHVmVnh1WEc1OUtTZ3BPMXh1SWl3aUtHWjFibU4wYVc5dUlDZ2tMQ0FrSkNrZ2UxeHVYRzVjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1ZG1GeUlGOGdQU0J6Wld4bUxsZDVjMmxsSUQwZ0pDNURiR0Z6Y3loN1hHNWNkR052Ym5OMGNuVmpkRzl5T2lCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZENrZ2UxeHVYSFJjZEY4dVlXeHNMbkIxYzJnb2RHaHBjeWs3WEc1Y2JseDBYSFF2THlCVVQwUlBJR1Z6WTJGd2FXNW5JRzltSUNNZ1lXNWtJRnhjWEc1Y2RGeDBkbUZ5SUdSaGRHRlRkRzl5WlNBOUlHVnNaVzFsYm5RdVoyVjBRWFIwY21saWRYUmxLRndpWkdGMFlTMXpkRzl5WlZ3aUtTQjhmQ0JjSW01dmJtVmNJanRjYmx4MFhIUjBhR2x6TG5OMGIzSmxJRDBnWkdGMFlWTjBiM0psSUQwOVBTQmNJbTV2Ym1WY0lqOGdiblZzYkNBNklHUmhkR0ZUZEc5eVpUdGNibHh1WEhSY2RDOHZJRUZ6YzJsbmJpQmhJSFZ1YVhGMVpTQW9abTl5SUhSb1pTQndZV2RsS1NCcFpDQjBieUIwYUdseklIZDVjMmxsSUdsdWMzUmhibU5sWEc1Y2RGeDBkR2hwY3k1cFpDQTlJRmQ1YzJsbExrNXZaR1V1Ym05eWJXRnNhWHBsVUhKdmNHVnlkSGtvWld4bGJXVnVkQ2tnZkh3Z1hDSjNlWE5wWlMxY0lpQXJJRjh1WVd4c0xteGxibWQwYUR0Y2JseHVYSFJjZEhSb2FYTXVZWFYwYjBWa2FYUWdQU0JmTG1oaGN5aGNJbUYxZEc5bFpHbDBYQ0lzSUdWc1pXMWxiblFwTzF4dVhHNWNkRngwZEdocGN5NWxiR1Z0Wlc1MElEMGdYeTVwY3loY0luTmpiM0JsWENJc0lHVnNaVzFsYm5RcFB5QmxiR1Z0Wlc1MElEb2dKQ2hmTG5ObGJHVmpkRzl5Y3k1eWIyOTBVMk52Y0dVc0lHVnNaVzFsYm5RcE8xeHVYRzVjZEZ4MGFXWWdLQ0YwYUdsekxtVnNaVzFsYm5RcElIdGNibHgwWEhSY2RHVnNaVzFsYm5RdWMyVjBRWFIwY21saWRYUmxLRndpZEhsd1pXOW1YQ0lzSUdWc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtGd2ljSEp2Y0dWeWRIbGNJaWtnZkh3Z1hDSmNJaWs3WEc1Y2RGeDBYSFJsYkdWdFpXNTBMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaGNJbkJ5YjNCbGNuUjVYQ0lwTzF4dVhIUmNkRngwZEdocGN5NWxiR1Z0Wlc1MElEMGdaV3hsYldWdWREdGNibHgwWEhSOVhHNWNibHgwWEhSMGFHbHpMbVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNoY0luZDVjMmxsTFhKdmIzUmNJaWs3WEc1Y2JseDBYSFF2THlCQmNIQnNlU0JvWlhWeWFYTjBhV01nWm05eUlHTnZiR3hsWTNScGIyNXpYRzVjZEZ4MEpDUW9YeTV6Wld4bFkzUnZjbk11Y0hKdmNHVnlkSGtnS3lCY0lpd2dYQ0lnS3lCZkxuTmxiR1ZqZEc5eWN5NXpZMjl3WlNrdVkyOXVZMkYwS0Z0MGFHbHpMbVZzWlcxbGJuUmRLUzVtYjNKRllXTm9LR1ZzWlcxbGJuUWdQVDRnZTF4dVhIUmNkRngwYVdZZ0tGOHVhWE1vWENKaGRYUnZUWFZzZEdsd2JHVmNJaXdnWld4bGJXVnVkQ2tnSmlZZ0lXVnNaVzFsYm5RdWFHRnpRWFIwY21saWRYUmxLRndpWkdGMFlTMXRkV3gwYVhCc1pWd2lLU2tnZTF4dVhIUmNkRngwWEhSbGJHVnRaVzUwTG5ObGRFRjBkSEpwWW5WMFpTaGNJbVJoZEdFdGJYVnNkR2x3YkdWY0lpd2dYQ0pjSWlrN1hHNWNkRngwWEhSOVhHNWNkRngwZlNrN1hHNWNibHgwWEhSMGFHbHpMbmR5WVhCd1pYSWdQU0JsYkdWdFpXNTBMbU5zYjNObGMzUW9YQ0l1ZDNsemFXVXRkM0poY0hCbGNsd2lLU0I4ZkNCbGJHVnRaVzUwTzF4dVhHNWNkRngwTHk4Z1FYQndiSGtnYUdWMWNtbHpkR2xqSUdadmNpQnpZMjl3WlhOY2JseDBYSFFrSkNoZkxuTmxiR1ZqZEc5eWN5NXdjbWx0YVhScGRtVXBMbVp2Y2tWaFkyZ29aV3hsYldWdWRDQTlQaUI3WEc1Y2RGeDBYSFIyWVhJZ2FYTlRZMjl3WlNBOUlDUW9WM2x6YVdVdWMyVnNaV04wYjNKekxuQnliM0JsY25SNUxDQmxiR1Z0Wlc1MEtTQW1KaUFvTHk4Z1EyOXVkR0ZwYm5NZ2IzUm9aWElnY0hKdmNHVnlkR2xsY3lCaGJtUXVMaTVjYmx4MFhIUmNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlhlWE5wWlM1cGN5aGNJbTExYkhScGNHeGxYQ0lzSUdWc1pXMWxiblFwSUh4OElDOHZJR2x6SUdFZ1kyOXNiR1ZqZEdsdmJpNHVMbHh1WEhSY2RGeDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGZDVjMmxsTGxCeWFXMXBkR2wyWlM1blpYUldZV3gxWlVGMGRISnBZblYwWlNobGJHVnRaVzUwS1NBOVBUMGdiblZzYkZ4dVhIUmNkRngwWEhSY2RDQWdJQ0FnSUNrN0lDOHZJQzR1TG05eUlHbDBjeUJqYjI1MFpXNTBJR2x6SUc1dmRDQnBiaUJoYmlCaGRIUnlhV0oxZEdWY2JseHVYSFJjZEZ4MGFXWWdLR2x6VTJOdmNHVXBJSHRjYmx4MFhIUmNkRngwWld4bGJXVnVkQzV6WlhSQmRIUnlhV0oxZEdVb1hDSjBlWEJsYjJaY0lpd2dYQ0pjSWlrN1hHNWNkRngwWEhSOVhHNWNkRngwZlNrN1hHNWNibHgwWEhScFppQW9kR2hwY3k1M2NtRndjR1Z5SUQwOVBTQjBhR2x6TG1Wc1pXMWxiblFnSmlZZ1h5NXBjeWhjSW0xMWJIUnBjR3hsWENJc0lHVnNaVzFsYm5RcEtTQjdYRzVjZEZ4MFhIUXZMeUJPWldWa0lIUnZJR055WldGMFpTQmhJSGR5WVhCd1pYSmNibHgwWEhSY2RIWmhjaUJoY205MWJtUWdQU0IwYUdsekxtVnNaVzFsYm5RN1hHNWNibHgwWEhSY2RDOHZJRUYyYjJsa0lIQnliMlIxWTJsdVp5QnBiblpoYkdsa0lFaFVUVXhjYmx4MFhIUmNkR2xtSUNoMGFHbHpMbVZzWlcxbGJuUXViV0YwWTJobGN5aGNJbXhwTENCdmNIUnBiMjVjSWlrcElIdGNibHgwWEhSY2RGeDBZWEp2ZFc1a0lEMGdZWEp2ZFc1a0xuQmhjbVZ1ZEU1dlpHVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUmxiSE5sSUdsbUlDaDBhR2x6TG1Wc1pXMWxiblF1YldGMFkyaGxjeWhjSW5Sa0xDQjBjaXdnZEdKdlpIa3NJSFJvWldGa0xDQjBabTl2ZEZ3aUtTa2dlMXh1WEhSY2RGeDBYSFJoY205MWJtUWdQU0JoY205MWJtUXVZMnh2YzJWemRDaGNJblJoWW14bFhDSXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFIwYUdsekxuZHlZWEJ3WlhJZ1BTQWtMbU55WldGMFpTaDdJR0Z5YjNWdVpDQjlLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUjBhR2x6TG5keVlYQndaWEl1WTJ4aGMzTk1hWE4wTG1Ga1pDaGNJbmQ1YzJsbExYZHlZWEJ3WlhKY0lpazdYRzVjYmx4MFhIUmxiR1Z0Wlc1MExuSmxiVzkyWlVGMGRISnBZblYwWlNoY0ltUmhkR0V0YzNSdmNtVmNJaWs3WEc1Y2JseDBYSFF2THlCT2IzSnRZV3hwZW1VZ2NISnZjR1Z5ZEhrZ2JtRnRaWE5jYmx4MFhIUjBhR2x6TG5CeWIzQmxjblI1VG1GdFpYTWdQU0FrSkNoZkxuTmxiR1ZqZEc5eWN5NXdjbTl3WlhKMGVTd2dkR2hwY3k1M2NtRndjR1Z5S1M1dFlYQW9aV3hsYldWdWRDQTlQaUI3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdWM2x6YVdVdVRtOWtaUzV1YjNKdFlXeHBlbVZRY205d1pYSjBlU2hsYkdWdFpXNTBLVHRjYmx4MFhIUjlLUzV6YjNKMEtDaGhMQ0JpS1NBOVBpQmlMbXhsYm1kMGFDQXRJR0V1YkdWdVozUm9LVHRjYmx4dVhIUmNkQzh2SUVseklIUm9aWEpsSUdGdWVTQmpiMjUwY205c0lIUm9ZWFFnY21WeGRXbHlaWE1nWVc0Z1pXUnBkQ0JpZFhSMGIyNC9YRzVjZEZ4MGRHaHBjeTV1WldWa2MwVmthWFFnUFNCbVlXeHpaVHRjYmx4dVhIUmNkQzh2SUVKMWFXeGtJSGQ1YzJsbElHOWlhbVZqZEhOY2JseDBYSFJYZVhOcFpTNW9iMjlyY3k1eWRXNG9YQ0pwYm1sMExYUnlaV1V0WW1WbWIzSmxYQ0lzSUhSb2FYTXBPMXh1WEhSY2RIUm9hWE11Y205dmRDQTlJRmQ1YzJsbExrNXZaR1V1WTNKbFlYUmxLSFJvYVhNdVpXeGxiV1Z1ZEN3Z2RHaHBjeWs3WEc1Y2RGeDBWM2x6YVdVdWFHOXZhM011Y25WdUtGd2lhVzVwZEMxMGNtVmxMV0ZtZEdWeVhDSXNJSFJvYVhNcE8xeHVYRzVjZEZ4MGRHaHBjeTV3WlhKdGFYTnphVzl1Y3lBOUlHNWxkeUJYZVhOcFpTNVFaWEp0YVhOemFXOXVjeWh1ZFd4c0xDQjBhR2x6S1R0Y2JseHVYSFJjZEhSb2FYTXVkV2tnUFNCN1hHNWNkRngwWEhSaVlYSTZJQ1FvWENJdWQzbHphV1V0WW1GeVhDSXNJSFJvYVhNdWQzSmhjSEJsY2lrZ2ZId2dKQzVqY21WaGRHVW9lMXh1WEhSY2RGeDBYSFJqYkdGemMwNWhiV1U2SUZ3aWQzbHphV1V0WW1GeUlIZDVjMmxsTFhWcFhDSXNYRzVjZEZ4MFhIUmNkSE4wWVhKME9pQjBhR2x6TG5keVlYQndaWElzWEc1Y2RGeDBYSFJjZEdOdmJuUmxiblJ6T2lCN1hHNWNkRngwWEhSY2RGeDBkR0ZuT2lCY0luTndZVzVjSWl4Y2JseDBYSFJjZEZ4MFhIUmpiR0Z6YzA1aGJXVTZJRndpYzNSaGRIVnpYQ0lzWEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwcFhHNWNkRngwZlR0Y2JseHVYSFJjZEhSb2FYTXVjR1Z5YldsemMybHZibk11WTJGdUtGdGNJbVZrYVhSY0lpd2dYQ0poWkdSY0lpd2dYQ0prWld4bGRHVmNJbDBzSUNncElEMCtJSHRjYmx4MFhIUmNkSFJvYVhNdWRXa3VaV1JwZENBOUlDUXVZM0psWVhSbEtGd2lZblYwZEc5dVhDSXNJSHRjYmx4MFhIUmNkRngwWTJ4aGMzTk9ZVzFsT2lCY0ltVmthWFJjSWl4Y2JseDBYSFJjZEZ4MGRHVjRkRU52Ym5SbGJuUTZJRndpUldScGRGd2lMRnh1WEhSY2RGeDBYSFJ2Ym1Oc2FXTnJPaUJsSUQwK0lIUm9hWE11WldScGRHbHVaejhnZEdocGN5NWtiMjVsS0NrZ09pQjBhR2x6TG1Wa2FYUW9LVnh1WEhSY2RGeDBmU2s3WEc1Y2JseDBYSFJjZEhSb2FYTXVkV2t1YzJGMlpTQTlJQ1F1WTNKbFlYUmxLRndpWW5WMGRHOXVYQ0lzSUh0Y2JseDBYSFJjZEZ4MFkyeGhjM05PWVcxbE9pQmNJbk5oZG1WY0lpeGNibHgwWEhSY2RGeDBkR1Y0ZEVOdmJuUmxiblE2SUZ3aVUyRjJaVndpTEZ4dVhIUmNkRngwWEhSbGRtVnVkSE02SUh0Y2JseDBYSFJjZEZ4MFhIUmpiR2xqYXpvZ1pTQTlQaUIwYUdsekxuTmhkbVVvS1N4Y2JseDBYSFJjZEZ4MFhIUmNJbTF2ZFhObFpXNTBaWElnWm05amRYTmNJam9nWlNBOVBpQjdYRzVjZEZ4MFhIUmNkRngwWEhSMGFHbHpMbmR5WVhCd1pYSXVZMnhoYzNOTWFYTjBMbUZrWkNoY0luTmhkbVV0YUc5MlpYSmxaRndpS1R0Y2JseDBYSFJjZEZ4MFhIUmNkSFJvYVhNdWRXNXpZWFpsWkVOb1lXNW5aWE1nUFNCMGFHbHpMbU5oYkdOMWJHRjBaVlZ1YzJGMlpXUkRhR0Z1WjJWektDazdYRzVjZEZ4MFhIUmNkRngwZlN4Y2JseDBYSFJjZEZ4MFhIUmNJbTF2ZFhObGJHVmhkbVVnWW14MWNsd2lPaUJsSUQwK0lIUm9hWE11ZDNKaGNIQmxjaTVqYkdGemMweHBjM1F1Y21WdGIzWmxLRndpYzJGMlpTMW9iM1psY21Wa1hDSXBYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBwTzF4dVhHNWNkRngwWEhSMGFHbHpMblZwTG5KbGRtVnlkQ0E5SUNRdVkzSmxZWFJsS0Z3aVluVjBkRzl1WENJc0lIdGNibHgwWEhSY2RGeDBZMnhoYzNOT1lXMWxPaUJjSW5KbGRtVnlkRndpTEZ4dVhIUmNkRngwWEhSMFpYaDBRMjl1ZEdWdWREb2dYQ0pTWlhabGNuUmNJaXhjYmx4MFhIUmNkRngwWkdsellXSnNaV1E2SUhSeWRXVXNYRzVjZEZ4MFhIUmNkR1YyWlc1MGN6b2dlMXh1WEhSY2RGeDBYSFJjZEdOc2FXTnJPaUJsSUQwK0lIUm9hWE11Y21WMlpYSjBLQ2tzWEc1Y2RGeDBYSFJjZEZ4MFhDSnRiM1Z6WldWdWRHVnlJR1p2WTNWelhDSTZJR1VnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tIUm9hWE11WlhabGNsTmhkbVZrS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhSb2FYTXVkM0poY0hCbGNpNWpiR0Z6YzB4cGMzUXVZV1JrS0Z3aWNtVjJaWEowTFdodmRtVnlaV1JjSWlrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhSb2FYTXVkVzV6WVhabFpFTm9ZVzVuWlhNZ1BTQjBhR2x6TG1OaGJHTjFiR0YwWlZWdWMyRjJaV1JEYUdGdVoyVnpLQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlN4Y2JseDBYSFJjZEZ4MFhIUmNJbTF2ZFhObGJHVmhkbVVnWW14MWNsd2lPaUJsSUQwK0lIUm9hWE11ZDNKaGNIQmxjaTVqYkdGemMweHBjM1F1Y21WdGIzWmxLRndpY21WMlpYSjBMV2h2ZG1WeVpXUmNJaWxjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlNrN1hHNWNibHgwWEhSY2RIUm9hWE11ZFdrdVpXUnBkRUoxZEhSdmJuTWdQU0JiZEdocGN5NTFhUzVsWkdsMExDQjBhR2x6TG5WcExuTmhkbVVzSUhSb2FYTXVkV2t1Y21WMlpYSjBYVHRjYmx4dVhIUmNkRngwSkM1amIyNTBaVzUwY3loMGFHbHpMblZwTG1KaGNpd2dkR2hwY3k1MWFTNWxaR2wwUW5WMGRHOXVjeWs3WEc1Y2JseDBYSFJjZEdsbUlDaDBhR2x6TG1GMWRHOUZaR2wwS1NCN1hHNWNkRngwWEhSY2RISmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU2dvS1NBOVBpQjBhR2x6TG5WcExtVmthWFF1WTJ4cFkyc29LU2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU3dnS0NrZ1BUNGdleUF2THlCallXNXViM1JjYmx4MFhIUmNkQ1F1Y21WdGIzWmxLSFJvYVhNdWRXa3VaV1JwZEVKMWRIUnZibk1wTzF4dVhHNWNkRngwWEhScFppQW9kR2hwY3k1bFpHbDBhVzVuS1NCN1hHNWNkRngwWEhSY2RIUm9hWE11Wkc5dVpTZ3BPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEc1Y2RGeDBkR2hwY3k1d1pYSnRhWE56YVc5dWN5NWpZVzRvVzF3aVpHVnNaWFJsWENKZExDQW9LU0E5UGlCN1hHNWNkRngwWEhSMGFHbHpMblZwTG1Oc1pXRnlJRDBnSkM1amNtVmhkR1VvWENKaWRYUjBiMjVjSWl3Z2UxeHVYSFJjZEZ4MFhIUmpiR0Z6YzA1aGJXVTZJRndpWTJ4bFlYSmNJaXhjYmx4MFhIUmNkRngwZEdWNGRFTnZiblJsYm5RNklGd2lRMnhsWVhKY0lpeGNibHgwWEhSY2RGeDBiMjVqYkdsamF6b2daU0E5UGlCMGFHbHpMbU5zWldGeUtDbGNibHgwWEhSY2RIMHBPMXh1WEc1Y2RGeDBYSFIwYUdsekxuVnBMbVZrYVhSQ2RYUjBiMjV6TG5CMWMyZ29kR2hwY3k1MWFTNWpiR1ZoY2lrN1hHNWNibHgwWEhSY2RIUm9hWE11ZFdrdVltRnlMbUZ3Y0dWdVpFTm9hV3hrS0hSb2FYTXVkV2t1WTJ4bFlYSXBPMXh1WEhSY2RIMHNJQ2dwSUQwK0lIc2dMeThnWTJGdWJtOTBYRzVjZEZ4MFhIUWtMbkpsYlc5MlpTaDBhR2x6TG5WcExtTnNaV0Z5S1R0Y2JseDBYSFI5S1R0Y2JseHVYSFJjZEM4dklFWmxkR05vSUdWNGFYTjBhVzVuSUdSaGRHRmNibHh1WEhSY2RHbG1JQ2gwYUdsekxuTjBiM0psS1NCN1hHNWNkRngwWEhSMGFHbHpMbk4wYjNKaFoyVWdQU0J1WlhjZ1h5NVRkRzl5WVdkbEtIUm9hWE1wTzF4dVhHNWNkRngwWEhSMGFHbHpMbkJsY20xcGMzTnBiMjV6TG1OaGJpaGNJbkpsWVdSY0lpd2dLQ2tnUFQ0Z2RHaHBjeTV6ZEc5eVlXZGxMbXh2WVdRb0tTazdYRzVjZEZ4MGZWeHVYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBMeThnVG04Z2MzUnZjbUZuWlZ4dVhIUmNkRngwZEdocGN5NXdaWEp0YVhOemFXOXVjeTV2YmloYlhDSnlaV0ZrWENJc0lGd2laV1JwZEZ3aVhTazdYRzVjYmx4MFhIUmNkSFJvYVhNdWNtOXZkQzVwYlhCdmNuUW9LVHRjYmx4dVhIUmNkRngwSkM1bWFYSmxLSFJvYVhNdWQzSmhjSEJsY2l3Z1hDSjNlWE5wWlRwc2IyRmtYQ0lwTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnaGRHaHBjeTV1WldWa2MwVmthWFFwSUh0Y2JseDBYSFJjZEhSb2FYTXVjR1Z5YldsemMybHZibk11YjJabUtGdGNJbVZrYVhSY0lpd2dYQ0poWkdSY0lpd2dYQ0prWld4bGRHVmNJbDBwTzF4dVhIUmNkSDFjYmx4dVhIUmNkRmQ1YzJsbExtaHZiMnR6TG5KMWJpaGNJbWx1YVhRdFpXNWtYQ0lzSUhSb2FYTXBPMXh1WEhSOUxGeHVYRzVjZEdkbGRDQmtZWFJoS0NrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtZGxkRVJoZEdFb0tUdGNibHgwZlN4Y2JseHVYSFJuWlhSRVlYUmhPaUJtZFc1amRHbHZiaWh2S1NCN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdWNtOXZkQzVuWlhSRVlYUmhLRzhwTzF4dVhIUjlMRnh1WEc1Y2RIUnZTbE5QVGpvZ1puVnVZM1JwYjI0b1pHRjBZU0E5SUhSb2FYTXVaR0YwWVNrZ2UxeHVYSFJjZEhKbGRIVnliaUJmTG5SdlNsTlBUaWhrWVhSaEtUdGNibHgwZlN4Y2JseHVYSFJ5Wlc1a1pYSTZJR1oxYm1OMGFXOXVLR1JoZEdFcElIdGNibHgwWEhSZkxtaHZiMnR6TG5KMWJpaGNJbkpsYm1SbGNpMXpkR0Z5ZEZ3aUxDQjdZMjl1ZEdWNGREb2dkR2hwY3l3Z1pHRjBZWDBwTzF4dVhHNWNkRngwYVdZZ0tDRmtZWFJoS1NCN1hHNWNkRngwWEhSMGFHbHpMbkp2YjNRdWFXMXdiM0owS0NrN1hHNWNkRngwZlZ4dVhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MGRHaHBjeTVsZG1WeVUyRjJaV1FnUFNCMGNuVmxPMXh1WEhSY2RGeDBkR2hwY3k1eWIyOTBMbkpsYm1SbGNpaGtZWFJoTG1SaGRHRWdmSHdnWkdGMFlTazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRHaHBjeTUxYm5OaGRtVmtRMmhoYm1kbGN5QTlJR1poYkhObE8xeHVYSFI5TEZ4dVhHNWNkR05zWldGeU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnBaaUFvWTI5dVptbHliU2hjSWxSb2FYTWdkMmxzYkNCa1pXeGxkR1VnWVd4c0lIbHZkWElnWkdGMFlTNGdRWEpsSUhsdmRTQnpkWEpsUDF3aUtTa2dlMXh1WEhSY2RGeDBkR2hwY3k1emRHOXlZV2RsSUNZbUlIUm9hWE11YzNSdmNtRm5aUzVqYkdWaGNpZ3BPMXh1WEhSY2RGeDBkR2hwY3k1eWIyOTBMbU5zWldGeUtDazdYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhHNWNkR1ZrYVhRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RIUm9hWE11WldScGRHbHVaeUE5SUhSeWRXVTdYRzVjYmx4MFhIUjBhR2x6TG5KdmIzUXVaV1JwZENncE8xeHVYRzVjZEZ4MEpDNWxkbVZ1ZEhNb2RHaHBjeTUzY21Gd2NHVnlMQ0JjSW0xdmRYTmxaVzUwWlhJdWQzbHphV1U2WldScGRDQnRiM1Z6Wld4bFlYWmxMbmQ1YzJsbE9tVmthWFJjSWl3Z1pYWjBJRDArSUh0Y2JseDBYSFJjZEdsbUlDaGxkblF1ZEdGeVoyVjBMbTFoZEdOb1pYTW9YQ0l1ZDNsemFXVXRhWFJsYlMxamIyNTBjbTlzY3lBdVpHVnNaWFJsWENJcEtTQjdYRzVjZEZ4MFhIUmNkSFpoY2lCcGRHVnRJRDBnWlhaMExuUmhjbWRsZEM1amJHOXpaWE4wS0Y4dWMyVnNaV04wYjNKekxtbDBaVzBwTzF4dVhIUmNkRngwWEhScGRHVnRMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9YQ0prWld4bGRHVXRhRzkyWlhKY0lpd2daWFowTG5SNWNHVWdQVDBnWENKdGIzVnpaV1Z1ZEdWeVhDSXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb1pYWjBMblJoY21kbGRDNXRZWFJqYUdWektGOHVjMlZzWldOMGIzSnpMbWwwWlcwcEtTQjdYRzVjZEZ4MFhIUmNkR1YyZEM1MFlYSm5aWFF1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hjSW1oaGN5MW9iM1psY21Wa0xXbDBaVzFjSWlrN1hHNWNibHgwWEhSY2RGeDBkbUZ5SUhCaGNtVnVkQ0E5SUdWMmRDNTBZWEpuWlhRdWNHRnlaVzUwVG05a1pTNWpiRzl6WlhOMEtGOHVjMlZzWldOMGIzSnpMbWwwWlcwcE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNod1lYSmxiblFwSUh0Y2JseDBYSFJjZEZ4MFhIUndZWEpsYm5RdVkyeGhjM05NYVhOMExuUnZaMmRzWlNoY0ltaGhjeTFvYjNabGNtVmtMV2wwWlcxY0lpd2daWFowTG5SNWNHVWdQVDBnWENKdGIzVnpaV1Z1ZEdWeVhDSXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU3dnZEhKMVpTazdYRzVjYmx4MFhIUjBhR2x6TG5WdWMyRjJaV1JEYUdGdVoyVnpJRDBnZEdocGN5NWpZV3hqZFd4aGRHVlZibk5oZG1Wa1EyaGhibWRsY3lncE8xeHVYSFI5TEZ4dVhHNWNkR05oYkdOMWJHRjBaVlZ1YzJGMlpXUkRhR0Z1WjJWek9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUjJZWElnZFc1ellYWmxaRU5vWVc1blpYTWdQU0JtWVd4elpUdGNibHh1WEhSY2RIUm9hWE11ZDJGc2F5aHZZbW9nUFQ0Z2UxeHVYSFJjZEZ4MGFXWWdLRzlpYWk1MWJuTmhkbVZrUTJoaGJtZGxjeWtnZTF4dVhIUmNkRngwWEhSMWJuTmhkbVZrUTJoaGJtZGxjeUE5SUhSeWRXVTdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseHVYSFJjZEhKbGRIVnliaUIxYm5OaGRtVmtRMmhoYm1kbGN6dGNibHgwZlN4Y2JseHVYSFF2THlCRGIyNWpiSFZrWlNCbFpHbDBhVzVuWEc1Y2RHUnZibVU2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhSb2FYTXVjbTl2ZEM1a2IyNWxLQ2s3WEc1Y2RGeDBKQzUxYm1KcGJtUW9kR2hwY3k1M2NtRndjR1Z5TENCY0lpNTNlWE5wWlRwbFpHbDBYQ0lwTzF4dVhIUmNkSFJvYVhNdVpXUnBkR2x1WnlBOUlHWmhiSE5sTzF4dVhIUmNkSFJvYVhNdWRXNXpZWFpsWkVOb1lXNW5aWE1nUFNCbVlXeHpaVHRjYmx4MGZTeGNibHh1WEhSellYWmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFIwYUdsekxuSnZiM1F1YzJGMlpTZ3BPMXh1WEc1Y2RGeDBhV1lnS0hSb2FYTXVjM1J2Y21GblpTa2dlMXh1WEhSY2RGeDBkR2hwY3k1emRHOXlZV2RsTG5OaGRtVW9LVHRjYmx4MFhIUjlYRzVjYmx4MFhIUjBhR2x6TG1WMlpYSlRZWFpsWkNBOUlIUnlkV1U3WEc1Y2RGeDBkR2hwY3k1MWJuTmhkbVZrUTJoaGJtZGxjeUE5SUdaaGJITmxPMXh1WEhSOUxGeHVYRzVjZEhKbGRtVnlkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwZEdocGN5NXliMjkwTG5KbGRtVnlkQ2dwTzF4dVhIUjlMRnh1WEc1Y2RIZGhiR3M2SUdaMWJtTjBhVzl1S0dOaGJHeGlZV05yS1NCN1hHNWNkRngwZEdocGN5NXliMjkwTG5kaGJHc29ZMkZzYkdKaFkyc3BPMXh1WEhSOUxGeHVYRzVjZEd4cGRtVTZJSHRjYmx4MFhIUmxaR2wwYVc1bk9pQjdYRzVjZEZ4MFhIUnpaWFE2SUdaMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVkM0poY0hCbGNpNWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtGd2laV1JwZEdsdVoxd2lMQ0IyWVd4MVpTazdYRzVjYmx4MFhIUmNkRngwYVdZZ0tIWmhiSFZsS1NCN1hHNWNkRngwWEhSY2RGeDBkR2hwY3k1M2NtRndjR1Z5TG5ObGRFRjBkSEpwWW5WMFpTaGNJbVJoZEdFdFpXUnBkR2x1WjF3aUxDQmNJbHdpS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFhIUjBhR2x6TG5keVlYQndaWEl1Y21WdGIzWmxRWFIwY21saWRYUmxLRndpWkdGMFlTMWxaR2wwYVc1blhDSXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU3hjYmx4dVhIUmNkSFZ1YzJGMlpXUkRhR0Z1WjJWek9pQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVYSFJjZEZ4MGRHaHBjeTUzY21Gd2NHVnlMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9YQ0oxYm5OaGRtVmtMV05vWVc1blpYTmNJaXdnZG1Gc2RXVXBPMXh1WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTUxYVNBbUppQjBhR2x6TG5WcExuTmhkbVVwSUh0Y2JseDBYSFJjZEZ4MGRHaHBjeTUxYVM1ellYWmxMbVJwYzJGaWJHVmtJRDBnSVhaaGJIVmxPMXh1WEhSY2RGeDBYSFIwYUdsekxuVnBMbkpsZG1WeWRDNWthWE5oWW14bFpDQTlJQ0YwYUdsekxtVjJaWEpUWVhabFpDQjhmQ0FoZG1Gc2RXVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTeGNibHh1WEhSY2RHVjJaWEpUWVhabFpEb2dablZ1WTNScGIyNG9kbUZzZFdVcElIdGNibHgwWEhSY2RHbG1JQ2gwYUdsekxuVnBJQ1ltSUhSb2FYTXVkV2t1Y21WMlpYSjBLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVkV2t1Y21WMlpYSjBMbVJwYzJGaWJHVmtJRDBnSVhaaGJIVmxPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFJ6ZEdGMGFXTTZJSHRjYmx4MFhIUmhiR3c2SUZ0ZExGeHVYRzVjZEZ4MGRHOUtVMDlPT2lCa1lYUmhJRDArSUh0Y2JseDBYSFJjZEdsbUlDaGtZWFJoSUQwOVBTQnVkV3hzS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCY0lsd2lPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb2RIbHdaVzltSUdSaGRHRWdQVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNibHgwWEhSY2RGeDBMeThnUkc4Z2JtOTBJSE4wY21sdVoybG1lU0IwZDJsalpTRmNibHgwWEhSY2RGeDBjbVYwZFhKdUlHUmhkR0U3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJLVTA5T0xuTjBjbWx1WjJsbWVTaGtZWFJoTENCdWRXeHNMQ0JjSWx4Y2RGd2lLVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBMeThnUTI5dWRtVnlkQ0JoYmlCcFpHVnVkR2xtYVdWeUlIUnZJSEpsWVdSaFlteGxJSFJsZUhRZ2RHaGhkQ0JqWVc0Z1ltVWdkWE5sWkNCaGN5QmhJR3hoWW1Wc1hHNWNkRngwY21WaFpHRmliR1U2SUdaMWJtTjBhVzl1SUNocFpHVnVkR2xtYVdWeUtTQjdYRzVjZEZ4MFhIUXZMeUJKY3lCcGRDQmpZVzFsYkVOaGMyVS9YRzVjZEZ4MFhIUnlaWFIxY200Z2FXUmxiblJwWm1sbGNpQW1KaUJwWkdWdWRHbG1hV1Z5WEc1Y2RGeDBYSFFnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2d2S0Z0aExYcGRLU2hiUVMxYVhTa29QejFiWVMxNlhTa3ZaeXdnS0NRd0xDQWtNU3dnSkRJcElEMCtJQ1F4SUNzZ1hDSWdYQ0lnS3lBa01pNTBiMHh2ZDJWeVEyRnpaU2dwS1NBdkx5QmpZVzFsYkVOaGMyVS9YRzVjZEZ4MFhIUWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZLRnRoTFhwZEtWdGZYRnd2TFYwb1B6MWJZUzE2WFNrdlp5d2dYQ0lrTVNCY0lpa2dMeThnU0hsd2FHVnVMWE5sY0dGeVlYUmxaQ0F2SUZWdVpHVnljMk52Y21WZmMyVndZWEpoZEdWa1AxeHVYSFJjZEZ4MElDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0wxNWJZUzE2WFM4c0lDUXdJRDArSUNRd0xuUnZWWEJ3WlhKRFlYTmxLQ2twT3lBdkx5QkRZWEJwZEdGc2FYcGxYRzVjZEZ4MGZTeGNibHh1WEhSY2RDOHZJRWx1ZG1WeWMyVWdiMllnWHk1eVpXRmtZV0pzWlNncE9pQlVZV3RsSUdFZ2NtVmhaR0ZpYkdVZ2MzUnlhVzVuSUdGdVpDQjBkWEp1SUdsMElHbHVkRzhnWVc0Z2FXUmxiblJwWm1sbGNseHVYSFJjZEdsa1pXNTBhV1pwWlhJNklHWjFibU4wYVc5dUlDaHlaV0ZrWVdKc1pTa2dlMXh1WEhSY2RGeDBjbVZoWkdGaWJHVWdQU0J5WldGa1lXSnNaU0FySUZ3aVhDSTdYRzVjZEZ4MFhIUnlaWFIxY200Z2NtVmhaR0ZpYkdVZ0ppWWdjbVZoWkdGaWJHVmNibHgwWEhSY2RDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDOWNYSE1yTDJjc0lGd2lMVndpS1NBdkx5QkRiMjUyWlhKMElIZG9hWFJsYzNCaFkyVWdkRzhnYUhsd2FHVnVjMXh1WEhSY2RGeDBJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MMXRlWEZ4M0xWMHZaeXdnWENKY0lpa2dMeThnVW1WdGIzWmxJSGRsYVhKa0lHTm9ZWEpoWTNSbGNuTmNibHgwWEhSY2RDQWdJQ0FnSUNBZ0lDNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJ4ZFdWeWVVcFRUMDQ2SUdaMWJtTjBhVzl1S0dSaGRHRXNJSEJoZEdncElIdGNibHgwWEhSY2RHbG1JQ2doY0dGMGFDQjhmQ0FoWkdGMFlTa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdaR0YwWVR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNtVjBkWEp1SUNRdWRtRnNkV1V1WVhCd2JIa29KQ3dnVzJSaGRHRmRMbU52Ym1OaGRDaHdZWFJvTG5Od2JHbDBLRndpTDF3aUtTa3BPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUnZZbk5sY25abE9pQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MExDQmhkSFJ5YVdKMWRHVXNJR05oYkd4aVlXTnJMQ0J2YkdSV1lXeDFaU2tnZTF4dVhIUmNkRngwZG1GeUlHOWljMlZ5ZG1WeUlEMGdKQzUwZVhCbEtHTmhiR3hpWVdOcktTQTlQU0JjSW1aMWJtTjBhVzl1WENJL0lHNWxkeUJOZFhSaGRHbHZiazlpYzJWeWRtVnlLR05oYkd4aVlXTnJLU0E2SUdOaGJHeGlZV05yTzF4dVhHNWNkRngwWEhSMllYSWdiM0IwYVc5dWN5QTlJR0YwZEhKcFluVjBaVDhnZTF4dVhIUmNkRngwWEhSY2RHRjBkSEpwWW5WMFpYTTZJSFJ5ZFdVc1hHNWNkRngwWEhSY2RGeDBZWFIwY21saWRYUmxSbWxzZEdWeU9pQmJZWFIwY21saWRYUmxYU3hjYmx4MFhIUmNkRngwWEhSaGRIUnlhV0oxZEdWUGJHUldZV3gxWlRvZ0lTRnZiR1JXWVd4MVpWeHVYSFJjZEZ4MFhIUjlJRG9nZTF4dVhIUmNkRngwWEhSY2RHTm9ZWEpoWTNSbGNrUmhkR0U2SUhSeWRXVXNYRzVjZEZ4MFhIUmNkRngwWTJocGJHUk1hWE4wT2lCMGNuVmxMRnh1WEhSY2RGeDBYSFJjZEhOMVluUnlaV1U2SUhSeWRXVXNYRzVjZEZ4MFhIUmNkRngwWTJoaGNtRmpkR1Z5UkdGMFlVOXNaRlpoYkhWbE9pQWhJVzlzWkZaaGJIVmxYRzVjZEZ4MFhIUmNkSDA3WEc1Y2JseDBYSFJjZEc5aWMyVnlkbVZ5TG05aWMyVnlkbVVvWld4bGJXVnVkQ3dnYjNCMGFXOXVjeWs3WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJ2WW5ObGNuWmxjanRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBMeThnU1dZZ2RHaGxJSEJoYzNObFpDQjJZV3gxWlNCcGN5QnViM1FnWVc0Z1lYSnlZWGtzSUdOdmJuWmxjblFnZEc4Z1lXNGdZWEp5WVhsY2JseDBYSFIwYjBGeWNtRjVPaUJoY25JZ1BUNGdlMXh1WEhSY2RGeDBjbVYwZFhKdUlFRnljbUY1TG1selFYSnlZWGtvWVhKeUtUOGdZWEp5SURvZ1cyRnljbDA3WEc1Y2RGeDBmU3hjYmx4dVhIUmNkQzh2SUZKbFkzVnljMmwyWld4NUlHWnNZWFIwWlc0Z1lTQnRkV3gwYVMxa2FXMWxibk5wYjI1aGJDQmhjbkpoZVZ4dVhIUmNkR1pzWVhSMFpXNDZJR0Z5Y2lBOVBpQjdYRzVjZEZ4MFhIUnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29ZWEp5S1NrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1cyRnljbDA3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJoY25JdWNtVmtkV05sS0Nod2NtVjJMQ0JqS1NBOVBpQmZMblJ2UVhKeVlYa29jSEpsZGlrdVkyOXVZMkYwS0Y4dVpteGhkSFJsYmloaktTa3NJRnRkS1R0Y2JseDBYSFI5TEZ4dVhHNWNkRngwYVhNNklHWjFibU4wYVc5dUtIUm9hVzVuTENCbGJHVnRaVzUwS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWld4bGJXVnVkQzV0WVhSamFHVnpJQ1ltSUdWc1pXMWxiblF1YldGMFkyaGxjeWhmTG5ObGJHVmpkRzl5YzF0MGFHbHVaMTBwTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJvWVhNNklHWjFibU4wYVc5dUtHOXdkR2x2Yml3Z1pXeGxiV1Z1ZENrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdWc1pXMWxiblF1YldGMFkyaGxjeUFtSmlCbGJHVnRaVzUwTG0xaGRHTm9aWE1vWHk1elpXeGxZM1J2Y25NdWIzQjBhVzl1S0c5d2RHbHZiaWtwTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJvYjI5cmN6b2dibVYzSUNRdVNHOXZhM01vS1Z4dVhIUjlYRzU5S1R0Y2JseHVlMXh1WEc1c1pYUWdjeUE5SUY4dWMyVnNaV04wYjNKeklEMGdlMXh1WEhSd2NtOXdaWEowZVRvZ1hDSmJjSEp2Y0dWeWRIbGRMQ0JiYVhSbGJYQnliM0JkWENJc1hHNWNkSE53WldOcFptbGpVSEp2Y0dWeWRIazZJRzVoYldVZ1BUNGdZRnR3Y205d1pYSjBlVDBrZTI1aGJXVjlYU3dnVzJsMFpXMXdjbTl3UFNSN2JtRnRaWDFkWUN4Y2JseDBjMk52Y0dVNklGd2lXM1I1Y0dWdlpsMHNJRnRwZEdWdGMyTnZjR1ZkTENCYmFYUmxiWFI1Y0dWZExDQXVjMk52Y0dWY0lpeGNibHgwYlhWc2RHbHdiR1U2SUZ3aVcyMTFiSFJwY0d4bFhTd2dXMlJoZEdFdGJYVnNkR2x3YkdWZExDQXViWFZzZEdsd2JHVmNJaXhjYmx4MGNtVnhkV2x5WldRNklGd2lXM0psY1hWcGNtVmtYU3dnVzJSaGRHRXRjbVZ4ZFdseVpXUmRMQ0F1Y21WeGRXbHlaV1JjSWl4Y2JseDBabTl5YlVOdmJuUnliMnc2SUZ3aWFXNXdkWFFzSUhObGJHVmpkQ3dnZEdWNGRHRnlaV0ZjSWl4Y2JseDBZMjl0Y0hWMFpXUTZJRndpTG1OdmJYQjFkR1ZrWENJc0lDOHZJRkJ5YjNCbGNuUnBaWE1nYjNJZ2MyTnZjR1Z6SUhkcGRHZ2dZMjl0Y0hWMFpXUWdjSEp2Y0dWeWRHbGxjeXdnZDJsc2JDQnViM1FnWW1VZ2MyRjJaV1JjYmx4MGFYUmxiVG9nWENJdWQzbHphV1V0YVhSbGJWd2lMRnh1WEhSMWFUb2dYQ0l1ZDNsemFXVXRkV2xjSWl4Y2JseDBiM0IwYVc5dU9pQnVZVzFsSUQwK0lHQmJKSHR1WVcxbGZWMHNJRnRrWVhSaExTUjdibUZ0WlgxZExDQmJaR0YwWVMxM2VYTnBaUzF2Y0hScGIyNXpmajBuSkh0dVlXMWxmU2RkTENBdUpIdHVZVzFsZldBc1hHNWNkR052Ym5SaGFXNWxjam9nZTF4dVhIUmNkRndpYkdsY0lqb2dYQ0oxYkN3Z2IyeGNJaXhjYmx4MFhIUmNJblJ5WENJNklGd2lkR0ZpYkdWY0lpeGNibHgwWEhSY0ltOXdkR2x2Ymx3aU9pQmNJbk5sYkdWamRGd2lMRnh1WEhSY2RGd2laSFJjSWpvZ1hDSmtiRndpTEZ4dVhIUmNkRndpWkdSY0lqb2dYQ0prYkZ3aVhHNWNkSDFjYm4wN1hHNWNibXhsZENCaGNuSWdQU0J6TG1GeWNpQTlJSE5sYkdWamRHOXlJRDArSUhObGJHVmpkRzl5TG5Od2JHbDBLQzljWEhNcUxGeGNjeW92WnlrN1hHNXNaWFFnYm05MElEMGdjeTV1YjNRZ1BTQnpaV3hsWTNSdmNpQTlQaUJoY25Jb2MyVnNaV04wYjNJcExtMWhjQ2h6SUQwK0lHQTZibTkwS0NSN2MzMHBZQ2t1YW05cGJpaGNJbHdpS1R0Y2JteGxkQ0J2Y2lBOUlITXViM0lnUFNBb2MyVnNaV04wYjNJeExDQnpaV3hsWTNSdmNqSXBJRDArSUhObGJHVmpkRzl5TVNBcklGd2lMQ0JjSWlBcklITmxiR1ZqZEc5eU1qdGNibXhsZENCaGJtUWdQU0J6TG1GdVpDQTlJQ2h6Wld4bFkzUnZjakVzSUhObGJHVmpkRzl5TWlrZ1BUNGdYeTVtYkdGMGRHVnVLRnh1WEhSY2RHRnljaWh6Wld4bFkzUnZjakVwTG0xaGNDaHpNU0E5UGlCaGNuSW9jMlZzWldOMGIzSXlLUzV0WVhBb2N6SWdQVDRnY3pFZ0t5QnpNaWtwWEc1Y2RDa3VhbTlwYmloY0lpd2dYQ0lwTzF4dWJHVjBJR0Z1WkU1dmRDQTlJSE11WVc1a1RtOTBJRDBnS0hObGJHVmpkRzl5TVN3Z2MyVnNaV04wYjNJeUtTQTlQaUJoYm1Rb2MyVnNaV04wYjNJeExDQnViM1FvYzJWc1pXTjBiM0l5S1NrN1hHNWNiaVF1WlhoMFpXNWtLRjh1YzJWc1pXTjBiM0p6TENCN1hHNWNkSEJ5YVcxcGRHbDJaVG9nWVc1a1RtOTBLSE11Y0hKdmNHVnlkSGtzSUhNdWMyTnZjR1VwTEZ4dVhIUnliMjkwVTJOdmNHVTZJR0Z1WkU1dmRDaHpMbk5qYjNCbExDQnpMbkJ5YjNCbGNuUjVLU3hjYmx4MGIzVjBjSFYwT2lCdmNpaHpMbk53WldOcFptbGpVSEp2Y0dWeWRIa29YQ0p2ZFhSd2RYUmNJaWtzSUZ3aUxtOTFkSEIxZEN3Z0xuWmhiSFZsWENJcExGeHVYSFJoZFhSdlRYVnNkR2x3YkdVNklHRnVaQ2hjSW14cExDQjBjaXdnYjNCMGFXOXVYQ0lzSUZ3aU9tOXViSGt0YjJZdGRIbHdaVndpS1Z4dWZTazdYRzVjYm4xY2JseHVMeThnUW14cGMzTWdjR3gxWjJsdWMxeHVYRzR2THlCUWNtOTJhV1JsSUhOb2IzSjBZM1YwY3lCMGJ5QnNiMjVuSUhCeWIzQmxjblI1SUdOb1lXbHVjMXh1SkM1d2NtOTRlU0E5SUNRdVkyeGhjM05RY205d2N5NXdjbTk0ZVNBOUlDUXViM1psY214dllXUW9ablZ1WTNScGIyNG9iMkpxTENCd2NtOXdaWEowZVN3Z2NISnZlSGtwSUh0Y2JseDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c5aWFpd2djSEp2Y0dWeWRIa3NJSHRjYmx4MFhIUm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTmJjSEp2ZUhsZFczQnliM0JsY25SNVhUdGNibHgwWEhSOUxGeHVYSFJjZEhObGREb2dablZ1WTNScGIyNG9kbUZzZFdVcElIdGNibHgwWEhSY2RIUm9hWE5iY0hKdmVIbGRXM0J5YjNCbGNuUjVYU0E5SUhaaGJIVmxPMXh1WEhSY2RIMHNYRzVjZEZ4MFkyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVYSFJjZEdWdWRXMWxjbUZpYkdVNklIUnlkV1ZjYmx4MGZTazdYRzVjYmx4MGNtVjBkWEp1SUc5aWFqdGNibjBwTzF4dVhHNGtMbU5zWVhOelVISnZjSE11Y0hKdmNHRm5ZWFJsWkNBOUlHWjFibU4wYVc5dUtIQnliM1J2TENCdVlXMWxjeWtnZTF4dVhIUlhlWE5wWlM1MGIwRnljbUY1S0c1aGJXVnpLUzVtYjNKRllXTm9LRzVoYldVZ1BUNGdlMXh1WEhSY2RIWmhjaUJsZUdsemRHbHVaeUE5SUhCeWIzUnZXMjVoYldWZE8xeHVYRzVjZEZ4MGNISnZkRzliYm1GdFpWMGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEhaaGNpQnlaWFFnUFNCbGVHbHpkR2x1WnlBbUppQmxlR2x6ZEdsdVp5NWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dVhHNWNkRngwWEhScFppQW9kR2hwY3k1d2NtOXdZV2RoZEdVZ0ppWWdjbVYwSUNFOVBTQm1ZV3h6WlNrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG5CeWIzQmhaMkYwWlNodVlXMWxLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlPMXh1WEhSOUtUdGNibjA3WEc1Y2JpOHZJRHBtYjJOMWN5MTNhWFJvYVc0Z2MyaHBiVnh1Wkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW1adlkzVnpYQ0lzSUdWMmRDQTlQaUI3WEc1Y2RDUWtLRndpTG1adlkzVnpMWGRwZEdocGJsd2lLUzVtYjNKRllXTm9LR1ZzSUQwK0lHVnNMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9YQ0ptYjJOMWN5MTNhWFJvYVc1Y0lpa3BPMXh1WEc1Y2RIWmhjaUJsYkdWdFpXNTBJRDBnWlhaMExuUmhjbWRsZER0Y2JseHVYSFIzYUdsc1pTQW9aV3hsYldWdWRDQTlJR1ZzWlcxbGJuUXVjR0Z5Wlc1MFRtOWtaU2tnZTF4dVhIUmNkR2xtSUNobGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZENrZ2UxeHVYSFJjZEZ4MFpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLRndpWm05amRYTXRkMmwwYUdsdVhDSXBPMXh1WEhSY2RIMWNibHgwZlZ4dWZTd2dkSEoxWlNrN1hHNWNiaTh2SUVsdWFYUWdkM2x6YVdWY2JsQnliMjFwYzJVdVlXeHNLRnRjYmx4MEpDNXlaV0ZrZVNncExGeHVYSFFrTG1sdVkyeDFaR1VvUVhKeVlYa3Vabkp2YlNBbUppQjNhVzVrYjNjdVNXNTBiQ0FtSmlCa2IyTjFiV1Z1ZEM1aWIyUjVMbU5zYjNObGMzUXNJRndpYUhSMGNITTZMeTlqWkc0dWNHOXNlV1pwYkd3dWFXOHZkakl2Y0c5c2VXWnBiR3d1YldsdUxtcHpQMlpsWVhSMWNtVnpQV0pzYVhOelpuVnNhbk1zU1c1MGJDNStiRzlqWVd4bExtVnVYQ0lwWEc1ZEtWeHVMblJvWlc0b0tDa2dQVDRnZTF4dVhHNWNkQ1FrS0Z3aVcyUmhkR0V0YzNSdmNtVmRYQ0lwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dWc1pXMWxiblFwSUh0Y2JseHVYSFJjZEc1bGR5QlhlWE5wWlNobGJHVnRaVzUwS1R0Y2JseDBmU2s3WEc1OUtWeHVMbU5oZEdOb0tHVnljaUE5UGlCamIyNXpiMnhsTG1WeWNtOXlLR1Z5Y2lrcE8xeHVYRzVUZEhKbGRHTm9lUzV6Wld4bFkzUnZjbk11Wm1sc2RHVnlJRDBnWENJdWQzbHphV1V0WldScGRHOXlPbTV2ZENoYmNISnZjR1Z5ZEhsZEtWd2lPMXh1WEc1OUtTaENiR2x6Y3l3Z1FteHBjM011SkNrN1hHNGlMQ0lvWm5WdVkzUnBiMjRvSkNrZ2UxeHVYRzUyWVhJZ1h5QTlJRmQ1YzJsbExsQmxjbTFwYzNOcGIyNXpJRDBnSkM1RGJHRnpjeWg3WEc1Y2RHTnZibk4wY25WamRHOXlPaUJtZFc1amRHbHZiaWh2TENCM2VYTnBaU2tnZTF4dVhIUmNkSFJvYVhNdWRISnBaMmRsY25NZ1BTQmJYVHRjYmx4MFhIUjBhR2x6TG5kNWMybGxJRDBnZDNsemFXVTdYRzVjYmx4MFhIUjBhR2x6TG5ObGRDaHZLVHRjYmx4MGZTeGNibHh1WEhRdkx5QlRaWFFnYlhWc2RHbHdiR1VnY0dWeWJXbHpjMmx2Ym5NZ1lYUWdiMjVqWlZ4dVhIUnpaWFE2SUdaMWJtTjBhVzl1S0c4cElIdGNibHgwWEhSbWIzSWdLSFpoY2lCaFkzUnBiMjRnYVc0Z2J5a2dlMXh1WEhSY2RGeDBkR2hwYzF0aFkzUnBiMjVkSUQwZ2IxdGhZM1JwYjI1ZE8xeHVYSFJjZEgxY2JseDBmU3hjYmx4dVhIUXZMeUJUWlhRZ1lTQmlkVzVqYUNCdlppQndaWEp0YVhOemFXOXVjeUIwYnlCMGNuVmxMaUJEYUdGcGJtRmliR1V1WEc1Y2RHOXVPaUJtZFc1amRHbHZiaWhoWTNScGIyNXpLU0I3WEc1Y2RGeDBWM2x6YVdVdWRHOUJjbkpoZVNoaFkzUnBiMjV6S1M1bWIzSkZZV05vS0dGamRHbHZiaUE5UGlCMGFHbHpXMkZqZEdsdmJsMGdQU0IwY25WbEtUdGNibHh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOUxGeHVYRzVjZEM4dklGTmxkQ0JoSUdKMWJtTm9JRzltSUhCbGNtMXBjM05wYjI1eklIUnZJR1poYkhObExpQkRhR0ZwYm1GaWJHVXVYRzVjZEc5bVpqb2dablZ1WTNScGIyNG9ZV04wYVc5dWN5a2dlMXh1WEhSY2RHRmpkR2x2Ym5NZ1BTQkJjbkpoZVM1cGMwRnljbUY1S0dGamRHbHZibk1wUHlCaFkzUnBiMjV6SURvZ1cyRmpkR2x2Ym5OZE8xeHVYRzVjZEZ4MFlXTjBhVzl1Y3k1bWIzSkZZV05vS0dGamRHbHZiaUE5UGlCMGFHbHpXMkZqZEdsdmJsMGdQU0JtWVd4elpTazdYRzVjYmx4MFhIUnlaWFIxY200Z2RHaHBjenRjYmx4MGZTeGNibHh1WEhRdkx5QkdhWEpsWkNCdmJtTmxJR0YwSUd4bFlYTjBJRzl1WlNCdlppQjBhR1VnWVdOMGFXOXVjeUJ3WVhOelpXUWdZMkZ1SUdKbElIQmxjbVp2Y20xbFpGeHVYSFF2THlCTGFXNWtJRzltSUd4cGEyVWdZU0JRY205dGFYTmxJSFJvWVhRZ1kyRnVJR0psSUhKbGMyOXNkbVZrSUcxMWJIUnBjR3hsSUhScGJXVnpMbHh1WEhSallXNDZJR1oxYm1OMGFXOXVLR0ZqZEdsdmJuTXNJR05oYkd4aVlXTnJMQ0JqWVc1dWIzUXBJSHRjYmx4MFhIUjBhR2x6TG05aWMyVnlkbVVvWVdOMGFXOXVjeXdnZEhKMVpTd2dZMkZzYkdKaFkyc3BPMXh1WEc1Y2RGeDBhV1lnS0dOaGJtNXZkQ2tnZTF4dVhIUmNkRngwTHk4Z1JtbHlaV1FnYjI1alpTQjBhR1VnWVdOMGFXOXVJR05oYm01dmRDQmlaU0JrYjI1bElHRnVlVzF2Y21Vc0lHVjJaVzRnZEdodmRXZG9JR2wwSUdOdmRXeGtJR0psSUdSdmJtVWdZbVZtYjNKbFhHNWNkRngwWEhSMGFHbHpMbTlpYzJWeWRtVW9ZV04wYVc5dWN5d2dabUZzYzJVc0lHTmhibTV2ZENrN1hHNWNkRngwZlZ4dVhIUjlMRnh1WEc1Y2RDOHZJRXhwYTJVZ2RHaHBjeTVqWVc0b0tTd2dZblYwSUhKbGRIVnlibk1nWVNCd2NtOXRhWE5sWEc1Y2RDOHZJRlZ6WldaMWJDQm1iM0lnZEdocGJtZHpJSFJvWVhRZ2VXOTFJSGRoYm5RZ2RHOGdaRzhnYjI1c2VTQnZibU5sWEc1Y2RIZG9aVzQ2SUdaMWJtTjBhVzl1S0dGamRHbHZibk1wSUh0Y2JseDBYSFJ5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVYSFJjZEZ4MGRHaHBjeTVqWVc0b1lXTjBhVzl1Y3l3Z2NtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JseDBYSFI5S1R0Y2JseDBmU3hjYmx4dVhIUXZMeUJUWTJobFpIVnNaU0JoSUdOaGJHeGlZV05ySUdadmNpQjNhR1Z1SUdFZ2MyVjBJRzltSUhCbGNtMXBjM05wYjI1eklHTm9ZVzVuWlhNZ2RtRnNkV1ZjYmx4MGIySnpaWEoyWlRvZ1puVnVZM1JwYjI0b1lXTjBhVzl1Y3l3Z2RtRnNkV1VzSUdOaGJHeGlZV05yS1NCN1hHNWNkRngwWVdOMGFXOXVjeUE5SUVGeWNtRjVMbWx6UVhKeVlYa29ZV04wYVc5dWN5ay9JR0ZqZEdsdmJuTWdPaUJiWVdOMGFXOXVjMTA3WEc1Y2JseDBYSFJwWmlBb2RHaHBjeTVwY3loaFkzUnBiMjV6TENCMllXeDFaU2twSUh0Y2JseDBYSFJjZEM4dklGTm9iM1ZzWkNCaVpTQm1hWEpsWkNCcGJXMWxaR2xoZEdWc2VWeHVYSFJjZEZ4MFkyRnNiR0poWTJzb0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QkdiM0lnWm5WMGRYSmxJSFJ5WVc1emFYUnBiMjV6WEc1Y2RGeDBkR2hwY3k1MGNtbG5aMlZ5Y3k1d2RYTm9LSHNnWVdOMGFXOXVjeXdnZG1Gc2RXVXNJR05oYkd4aVlXTnJMQ0JoWTNScGRtVTZJSFJ5ZFdVZ2ZTazdYRzVjZEgwc1hHNWNibHgwTHk4Z1EyOXRjR0Z5WlNCaElITmxkQ0J2WmlCd1pYSnRhWE56YVc5dWN5QjNhWFJvSUhSeWRXVWdiM0lnWm1Gc2MyVmNibHgwTHk4Z1NXWWdZMjl0Y0dGeWFXNW5JSGRwZEdnZ2RISjFaU3dnZDJVZ2QyRnVkQ0JoZENCc1pXRnpkQ0J2Ym1VZ2RHOGdZbVVnZEhKMVpTd2dhUzVsTGlCUFVseHVYSFF2THlCSlppQmpiMjF3WVhKcGJtY2dkMmwwYUNCbVlXeHpaU3dnZDJVZ2QyRnVkQ0JCVEV3Z2RHOGdZbVVnWm1Gc2MyVXNJR2t1WlM0Z1RrOVNYRzVjZEdsek9pQm1kVzVqZEdsdmJpaGhZM1JwYjI1ekxDQmhZbXhsS1NCN1hHNWNkRngwZG1GeUlHOXlJRDBnWVdOMGFXOXVjeTV0WVhBb1lXTjBhVzl1SUQwK0lDRWhkR2hwYzF0aFkzUnBiMjVkS1Z4dVhIUmNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZrZFdObEtDaHdjbVYyTENCamRYSnlaVzUwS1NBOVBpQndjbVYySUh4OElHTjFjbkpsYm5RcE8xeHVYRzVjZEZ4MGNtVjBkWEp1SUdGaWJHVS9JRzl5SURvZ0lXOXlPMXh1WEhSOUxGeHVYRzVjZEM4dklFRWdjMmx1WjJ4bElIQmxjbTFwYzNOcGIyNGdZMmhoYm1kbFpDQjJZV3gxWlZ4dVhIUmphR0Z1WjJWa09pQm1kVzVqZEdsdmJpaGhZM1JwYjI0c0lIWmhiSFZsTENCbWNtOXRLU0I3WEc1Y2RGeDBabkp2YlNBOUlDRWhabkp2YlR0Y2JseDBYSFIyWVd4MVpTQTlJQ0VoZG1Gc2RXVTdYRzVjYmx4MFhIUnBaaUFvZG1Gc2RXVWdQVDBnWm5KdmJTa2dlMXh1WEhSY2RGeDBMeThnVG05MGFHbHVaeUJqYUdGdVoyVmtYRzVjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tIUm9hWE11ZDNsemFXVXBJSHRjYmx4MFhIUmNkSFJvYVhNdWQzbHphV1V1ZDNKaGNIQmxjaTVqYkdGemMweHBjM1F1ZEc5bloyeGxLR0JqWVc0dEpIdGhZM1JwYjI1OVlDd2dkbUZzZFdVcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklDUXViR2wyWlNncElHTmhiR3h6SUhSb1pTQnpaWFIwWlhJZ1ltVm1iM0psSUhSb1pTQmhZM1IxWVd3Z2NISnZjR1Z5ZEhrZ2FYTWdjMlYwSUhOdklIZGxYRzVjZEZ4MEx5OGdibVZsWkNCMGJ5QnpaWFFnYVhRZ2JXRnVkV0ZzYkhrc0lHOTBhR1Z5ZDJselpTQnBkQ0J6ZEdsc2JDQm9ZWE1nYVhSeklIQnlaWFpwYjNWeklIWmhiSFZsWEc1Y2RGeDBkR2hwYzF0Y0lsOWNJaUFySUdGamRHbHZibDBnUFNCMllXeDFaVHRjYmx4dVhIUmNkQzh2SUZSUFJFOGdZV1JrSUdOc1lYTnpaWE1nZEc4Z2QzSmhjSEJsY2x4dVhIUmNkSFJvYVhNdWRISnBaMmRsY25NdVptOXlSV0ZqYUNoMGNtbG5aMlZ5SUQwK0lIdGNibHgwWEhSY2RIWmhjaUJ0WVhSamFDQTlJSFJvYVhNdWFYTW9kSEpwWjJkbGNpNWhZM1JwYjI1ekxDQjBjbWxuWjJWeUxuWmhiSFZsS1R0Y2JseHVYSFJjZEZ4MGFXWWdLSFJ5YVdkblpYSXVZV04wYVhabElDWW1JSFJ5YVdkblpYSXVZV04wYVc5dWN5NXBibVJsZUU5bUtHRmpkR2x2YmlrZ1BpQXRNU0FtSmlCdFlYUmphQ2tnZTF4dVhHNWNkRngwWEhSY2RIUnlhV2RuWlhJdVlXTjBhWFpsSUQwZ1ptRnNjMlU3WEc1Y2RGeDBYSFJjZEhSeWFXZG5aWEl1WTJGc2JHSmhZMnNvS1R0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdWc2MyVWdhV1lnS0NGdFlYUmphQ2tnZTF4dVhIUmNkRngwWEhRdkx5QlVhR2x6SUdseklITnZJSFJvWVhRZ2RISnBaMmRsY25NZ1kyRnVJRzl1YkhrZ1ltVWdaWGhsWTNWMFpXUWdhVzRnWVc0Z1lXTjBkV0ZzSUhSeVlXNXphWFJwYjI1Y2JseDBYSFJjZEZ4MEx5OGdRVzVrSUhSb1lYUWdhV1lnZEdobGNtVWdhWE1nWVNCMGNtbG5aMlZ5SUdadmNpQmJZU3hpWFNCcGRDQjNiMjRuZENCaVpTQmxlR1ZqZFhSbFpDQjBkMmxqWlZ4dVhIUmNkRngwWEhRdkx5QnBaaUJoSUdGdVpDQmlJR0Z5WlNCelpYUWdkRzhnZEhKMVpTQnZibVVnWVdaMFpYSWdkR2hsSUc5MGFHVnlYRzVjZEZ4MFhIUmNkSFJ5YVdkblpYSXVZV04wYVhabElEMGdkSEoxWlR0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseDBmU3hjYmx4dVhIUnZjam9nWm5WdVkzUnBiMjRvY0dWeWJXbHpjMmx2Ym5NcElIdGNibHgwWEhSZkxtRmpkR2x2Ym5NdVptOXlSV0ZqYUNoaFkzUnBiMjRnUFQ0Z2UxeHVYSFJjZEZ4MGRHaHBjMXRoWTNScGIyNWRJRDBnZEdocGMxdGhZM1JwYjI1ZElIeDhJSEJsY20xcGMzTnBiMjV6VzJGamRHbHZibDA3WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmU3hjYmx4dVhIUnpkR0YwYVdNNklIdGNibHgwWEhSaFkzUnBiMjV6T2lCYlhTeGNibHh1WEhSY2RDOHZJRkpsWjJsemRHVnlJR0VnYm1WM0lIQmxjbTFwYzNOcGIyNGdkSGx3WlZ4dVhIUmNkSEpsWjJsemRHVnlPaUJtZFc1amRHbHZiaWhoWTNScGIyNHNJSE5sZEhSbGNpa2dlMXh1WEhSY2RGeDBhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZV04wYVc5dUtTa2dlMXh1WEhSY2RGeDBYSFJoWTNScGIyNHVabTl5UldGamFDaGhZM1JwYjI0Z1BUNGdYeTV5WldkcGMzUmxjaWhoWTNScGIyNHNJSE5sZEhSbGNpa3BPMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQ1F1YkdsMlpTaGZMbkJ5YjNSdmRIbHdaU3dnWVdOMGFXOXVMQ0JtZFc1amRHbHZiaWhoWW14bExDQndjbVYyYVc5MWN5a2dlMXh1WEhSY2RGeDBYSFJwWmlBb2MyVjBkR1Z5S1NCN1hHNWNkRngwWEhSY2RGeDBjMlYwZEdWeUxtTmhiR3dvZEdocGN5d2dZV0pzWlN3Z2NISmxkbWx2ZFhNcE8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwZEdocGN5NWphR0Z1WjJWa0tHRmpkR2x2Yml3Z1lXSnNaU3dnY0hKbGRtbHZkWE1wTzF4dVhIUmNkRngwZlNrN1hHNWNibHgwWEhSY2RGOHVZV04wYVc5dWN5NXdkWE5vS0dGamRHbHZiaWs3WEc1Y2RGeDBmVnh1WEhSOVhHNTlLVHRjYmx4dVh5NXlaV2RwYzNSbGNpaGNJbkpsWVdSY0lpazdYRzVjYmw4dWNtVm5hWE4wWlhJb1hDSnNiMmRwYmx3aUxDQm1kVzVqZEdsdmJpaGpZVzRwSUh0Y2JseDBhV1lnS0dOaGJpQW1KaUIwYUdsekxteHZaMjkxZENrZ2UxeHVYSFJjZEhSb2FYTXViRzluYjNWMElEMGdabUZzYzJVN1hHNWNkSDFjYm4wcE8xeHVYRzVmTG5KbFoybHpkR1Z5S0Z3aWJHOW5iM1YwWENJc0lHWjFibU4wYVc5dUtHTmhiaWtnZTF4dVhIUnBaaUFvWTJGdUlDWW1JSFJvYVhNdWJHOW5hVzRwSUh0Y2JseDBYSFIwYUdsekxteHZaMmx1SUQwZ1ptRnNjMlU3WEc1Y2RIMWNibjBwTzF4dVhHNWZMbkpsWjJsemRHVnlLRndpWldScGRGd2lMQ0JtZFc1amRHbHZiaWhqWVc0cElIdGNibHgwYVdZZ0tHTmhiaWtnZTF4dVhIUmNkSFJvYVhNdVlXUmtJRDBnZEdocGN5NWtaV3hsZEdVZ1BTQjBjblZsTzF4dVhIUjlYRzU5S1R0Y2JseHVYeTV5WldkcGMzUmxjaWhiWENKaFpHUmNJaXdnWENKa1pXeGxkR1ZjSWwwc0lHWjFibU4wYVc5dUtHTmhiaWtnZTF4dVhIUnBaaUFvSVdOaGJpa2dlMXh1WEhSY2RIUm9hWE11WldScGRDQTlJR1poYkhObE8xeHVYSFI5WEc1OUtUdGNibHh1ZlNrb1FteHBjM01wTzF4dUlpd2lLR1oxYm1OMGFXOXVLQ1FwSUh0Y2JseHVkbUZ5SUY4Z1BTQlhlWE5wWlM1VGRHOXlZV2RsSUQwZ0pDNURiR0Z6Y3loN1hHNWNkR052Ym5OMGNuVmpkRzl5T2lCbWRXNWpkR2x2YmloM2VYTnBaU2tnZTF4dVhIUmNkSFJvYVhNdWQzbHphV1VnUFNCM2VYTnBaVHRjYmx4dVhIUmNkSFJvYVhNdWRYSnNjeUE5SUhkNWMybGxMbk4wYjNKbExuTndiR2wwS0M5Y1hITXJMeWt1YldGd0tIVnliQ0E5UGlCN1hHNWNkRngwWEhScFppQW9kWEpzSUQwOVBTQmNJbXh2WTJGc1hDSXBJSHRjYmx4MFhIUmNkRngwZFhKc0lEMGdZQ01rZTNSb2FYTXVkM2x6YVdVdWFXUjlMWE4wYjNKbFlEdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlHNWxkeUJWVWt3b2RYSnNMQ0JzYjJOaGRHbHZiaWs3WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFIwYUdsekxtSmhZMnRsYm1SeklEMGdWM2x6YVdVdVpteGhkSFJsYmloMGFHbHpMblZ5YkhNdWJXRndLSFZ5YkNBOVBpQmZMa0poWTJ0bGJtUXVZM0psWVhSbEtIVnliQ3dnZEdocGN5a3BLVHRjYmx4dVhIUmNkSFJvYVhNdVltRmphMlZ1WkhOYk1GMHVjR1Z5YldsemMybHZibk1nUFNCMGFHbHpMbmQ1YzJsbExuQmxjbTFwYzNOcGIyNXpMbTl5S0hSb2FYTXVZbUZqYTJWdVpITmJNRjB1Y0dWeWJXbHpjMmx2Ym5NcE8xeHVYRzVjZEZ4MGRHaHBjeTV5WldGa2VTQTlJRkJ5YjIxcGMyVXVZV3hzS0hSb2FYTXVZbUZqYTJWdVpITXViV0Z3S0dKaFkydGxibVFnUFQ0Z1ltRmphMlZ1WkM1eVpXRmtlU2twTzF4dVhHNWNkRngwZEdocGN5NXNiMkZrWldRZ1BTQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNWNkRngwWEhSMGFHbHpMbmQ1YzJsbExuZHlZWEJ3WlhJdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0luZDVjMmxsT214dllXUmNJaXdnY21WemIyeDJaU2s3WEc1Y2RGeDBmU2s3WEc1Y2JseDBYSFIwYUdsekxtRjFkR2hEYjI1MGNtOXNjeUE5SUh0OU8xeHVYRzVjZEZ4MGRHaHBjeTV3WlhKdGFYTnphVzl1Y3k1allXNG9YQ0pzYjJkcGJsd2lMQ0FvS1NBOVBpQjdYRzVjZEZ4MFhIUXZMeUFqYkc5bmFXNGdZWFYwYUdWdWRHbGpZWFJsY3lCcFppQnZibXg1SURFZ2QzbHphV1VnYjI0Z2RHaGxJSEJoWjJVc0lHOXlJR2xtSUhSb1pTQm1hWEp6ZEM1Y2JseDBYSFJjZEM4dklFOTBhR1Z5ZDJselpTd2dkMlVnYUdGMlpTQjBieUJuWlc1bGNtRjBaU0JoSUhOc2FXZG9kR3g1SUcxdmNtVWdZMjl0Y0d4bGVDQm9ZWE5vWEc1Y2RGeDBYSFIwYUdsekxteHZaMmx1U0dGemFDQTlJRndpSTJ4dloybHVYQ0lnS3lBb1YzbHphV1V1WVd4c1d6QmRJRDA5UFNCMGFHbHpMbmQ1YzJsbFB5QmNJbHdpSURvZ1hDSXRYQ0lnS3lCMGFHbHpMbmQ1YzJsbExtbGtLVHRjYmx4dVhIUmNkRngwZEdocGN5NWhkWFJvUTI5dWRISnZiSE11Ykc5bmFXNGdQU0FrTG1OeVpXRjBaU2g3WEc1Y2RGeDBYSFJjZEhSaFp6b2dYQ0poWENJc1hHNWNkRngwWEhSY2RHaHlaV1k2SUhSb2FYTXViRzluYVc1SVlYTm9MRnh1WEhSY2RGeDBYSFIwWlhoMFEyOXVkR1Z1ZERvZ1hDSk1iMmRwYmx3aUxGeHVYSFJjZEZ4MFhIUmpiR0Z6YzA1aGJXVTZJRndpYkc5bmFXNGdZblYwZEc5dVhDSXNYRzVjZEZ4MFhIUmNkR1YyWlc1MGN6b2dlMXh1WEhSY2RGeDBYSFJjZEdOc2FXTnJPaUJsZG5RZ1BUNGdlMXh1WEhSY2RGeDBYSFJjZEZ4MFpYWjBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzVjZEZ4MFhIUmNkRngwWEhSMGFHbHpMbXh2WjJsdUtDazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOUxGeHVYSFJjZEZ4MFhIUmhablJsY2pvZ0pDaGNJaTV6ZEdGMGRYTmNJaXdnZEdocGN5NTNlWE5wWlM1aVlYSXBYRzVjZEZ4MFhIUjlLVHRjYmx4dVhIUmNkRngwTHk4Z1YyVWdZV3h6YnlCemRYQndiM0owSUdFZ2FHRnphQ0IwYnlCMGNtbG5aMlZ5SUd4dloybHVMQ0JwYmlCallYTmxJSFJvWlNCMWMyVnlJR1J2WlhOdUozUWdkMkZ1ZENCMmFYTnBZbXhsSUd4dloybHVJRlZKWEc1Y2RGeDBYSFIyWVhJZ2JHOW5hVzQ3WEc1Y2RGeDBYSFFvYkc5bmFXNGdQU0FvS1NBOVBpQjdYRzVjZEZ4MFhIUmNkR2xtSUNoc2IyTmhkR2x2Ymk1b1lYTm9JRDA5UFNCMGFHbHpMbXh2WjJsdVNHRnphQ2tnZTF4dVhIUmNkRngwWEhSY2RDOHZJRlJvYVhNZ2FuVnpkQ0JrYjJWeklHeHZZMkYwYVc5dUxtaGhjMmdnUFNCY0lsd2lJSGRwZEdodmRYUWdaMlYwZEdsdVp5QmhJSEJ2YVc1MGJHVnpjeUFqSUdGMElIUm9aU0JsYm1RZ2IyWWdkR2hsSUZWU1RGeHVYSFJjZEZ4MFhIUmNkR2hwYzNSdmNua3VjbVZ3YkdGalpWTjBZWFJsS0c1MWJHd3NJR1J2WTNWdFpXNTBMblJwZEd4bExDQnVaWGNnVlZKTUtGd2lYQ0lzSUd4dlkyRjBhVzl1S1NBcklGd2lYQ0lwTzF4dVhIUmNkRngwWEhSY2RIUm9hWE11Ykc5bmFXNG9LVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlNrb0tUdGNibHgwWEhSY2RIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWFHRnphR05vWVc1blpTNTNlWE5wWlZ3aUxDQnNiMmRwYmlrN1hHNWNkRngwZlN3Z0tDa2dQVDRnZTF4dVhIUmNkRngwSkM1eVpXMXZkbVVvZEdocGN5NWhkWFJvUTI5dWRISnZiSE11Ykc5bmFXNHBPMXh1WEhSY2RGeDBkR2hwY3k1M2VYTnBaUzUzY21Gd2NHVnlMbDh1ZFc1aWFXNWtLRndpYUdGemFHTm9ZVzVuWlM1M2VYTnBaVndpS1R0Y2JseDBYSFI5S1R0Y2JseHVYSFJjZEM4dklGVndaR0YwWlNCc2IyZHBiaUJ6ZEdGMGRYTmNibHgwWEhSMGFHbHpMbmQ1YzJsbExuZHlZWEJ3WlhJdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0luZDVjMmxsT214dloybHVMbmQ1YzJsbFhDSXNJR1YyZENBOVBpQjdYRzVjZEZ4MFhIUjJZWElnYzNSaGRIVnpJRDBnSkNoY0lpNXpkR0YwZFhOY0lpd2dkR2hwY3k1M2VYTnBaUzVpWVhJcE8xeHVYSFJjZEZ4MGMzUmhkSFZ6TG1sdWJtVnlTRlJOVENBOUlGd2lYQ0k3WEc1Y2RGeDBYSFJ6ZEdGMGRYTXVYeTVqYjI1MFpXNTBjeWhiWEc1Y2RGeDBYSFJjZEZ3aVRHOW5aMlZrSUdsdUlIUnZJRndpSUNzZ1pYWjBMbUpoWTJ0bGJtUXVhV1FnS3lCY0lpQmhjeUJjSWl4Y2JseDBYSFJjZEZ4MGUzUmhaem9nWENKemRISnZibWRjSWl3Z2FXNXVaWEpJVkUxTU9pQmxkblF1Ym1GdFpYMHNYRzVjZEZ4MFhIUmNkSHRjYmx4MFhIUmNkRngwWEhSMFlXYzZJRndpWW5WMGRHOXVYQ0lzWEc1Y2RGeDBYSFJjZEZ4MGRHVjRkRU52Ym5SbGJuUTZJRndpVEc5bmIzVjBYQ0lzWEc1Y2RGeDBYSFJjZEZ4MFkyeGhjM05PWVcxbE9pQmNJbXh2WjI5MWRGd2lMRnh1WEhSY2RGeDBYSFJjZEdWMlpXNTBjem9nZTF4dVhIUmNkRngwWEhSY2RGeDBZMnhwWTJzNklHVWdQVDRnWlhaMExtSmhZMnRsYm1RdWJHOW5iM1YwS0NsY2JseDBYSFJjZEZ4MFhIUjlMRnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJkS1R0Y2JseDBYSFI5S1R0Y2JseHVYSFJjZEhSb2FYTXVkM2x6YVdVdWQzSmhjSEJsY2k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWQzbHphV1U2Ykc5bmIzVjBMbmQ1YzJsbFhDSXNJR1YyZENBOVBpQjdYRzVjZEZ4MFhIUWtLRndpTG5OMFlYUjFjMXdpTENCMGFHbHpMbmQ1YzJsbExtSmhjaWt1ZEdWNGRFTnZiblJsYm5RZ1BTQmNJbHdpTzF4dVhIUmNkSDBwTzF4dVhIUjlMRnh1WEc1Y2RHZGxkQ0JuWlhSQ1lXTnJaVzVrY3lBb0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVZbUZqYTJWdVpITXVabWxzZEdWeUtHSmhZMnRsYm1RZ1BUNGdJU0ZpWVdOclpXNWtMbWRsZENrN1hHNWNkSDBzWEc1Y2JseDBaMlYwSUhCMWRFSmhZMnRsYm1SeklDZ3BJSHRjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVpWVdOclpXNWtjeTVtYVd4MFpYSW9ZbUZqYTJWdVpDQTlQaUFoSVdKaFkydGxibVF1Y0hWMEtUdGNibHgwZlN4Y2JseHVYSFJuWlhRZ1lYVjBhRUpoWTJ0bGJtUnpJQ2dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1aVlXTnJaVzVrY3k1bWFXeDBaWElvWW1GamEyVnVaQ0E5UGlBaElXSmhZMnRsYm1RdWJHOW5hVzRwTzF4dVhIUjlMRnh1WEc1Y2RIQnliM2g1T2lCN1hHNWNkRngwY0dWeWJXbHpjMmx2Ym5NNklGd2lkM2x6YVdWY0lseHVYSFI5TEZ4dVhHNWNkQzhxS2x4dVhIUWdLaUJzYjJGa0lDMGdSbVYwWTJnZ1pHRjBZU0JtY205dElITnZkWEpqWlNCaGJtUWdjbVZ1WkdWeUlHbDBMbHh1WEhRZ0tseHVYSFFnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBZ1FTQndjbTl0YVhObElIUm9ZWFFnY21WemIyeDJaWE1nZDJobGJpQjBhR1VnWkdGMFlTQnBjeUJzYjJGa1pXUXVYRzVjZENBcUwxeHVYSFJzYjJGa09pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUjJZWElnY21WMElEMGdkR2hwY3k1eVpXRmtlVHRjYmx4dVhIUmNkSFJvYVhNdWFXNVFjbTluY21WemN5QTlJRndpVEc5aFpHbHVaMXdpTzF4dVhHNWNkRngwZG1GeUlHZGxkRUpoWTJ0bGJtUWdQU0IwYUdsekxtZGxkRUpoWTJ0bGJtUnpXekJkTzF4dVhHNWNkRngwYVdZZ0tHZGxkRUpoWTJ0bGJtUXBJSHRjYmx4MFhIUmNkR2RsZEVKaFkydGxibVF1Y21WaFpIa3VkR2hsYmlnb0tTQTlQaUI3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJuWlhSQ1lXTnJaVzVrTG1kbGRDZ3BPMXh1WEhSY2RGeDBmU2t1ZEdobGJpaHlaWE53YjI1elpTQTlQaUI3WEc1Y2RGeDBYSFJjZEhSb2FYTXVhVzVRY205bmNtVnpjeUE5SUdaaGJITmxPMXh1WEhSY2RGeDBYSFIwYUdsekxuZDVjMmxsTG5keVlYQndaWEl1WHk1bWFYSmxLRndpZDNsemFXVTZiRzloWkZ3aUtUdGNibHh1WEhSY2RGeDBYSFJwWmlBb2NtVnpjRzl1YzJVZ0ppWWdKQzUwZVhCbEtISmxjM0J2Ym5ObEtTQTlQU0JjSW5OMGNtbHVaMXdpS1NCN1hHNWNkRngwWEhSY2RGeDBjbVZ6Y0c5dWMyVWdQU0JLVTA5T0xuQmhjbk5sS0hKbGMzQnZibk5sS1R0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkSFpoY2lCa1lYUmhJRDBnVjNsemFXVXVjWFZsY25sS1UwOU9LSEpsYzNCdmJuTmxMQ0IwYUdsekxuQmhjbUZ0S0Z3aWNtOXZkRndpS1NrN1hHNWNkRngwWEhSY2RIUm9hWE11ZDNsemFXVXVjbVZ1WkdWeUtHUmhkR0VwTzF4dVhIUmNkRngwZlNrdVkyRjBZMmdvWlhKeUlEMCtJSHRjYmx4MFhIUmNkRngwTHk4Z1ZFOUVUeUIwY25rZ2JXOXlaU0JpWVdOclpXNWtjeUJwWmlCMGFHbHpJR1poYVd4elhHNWNkRngwWEhSY2RIUm9hWE11YVc1UWNtOW5jbVZ6Y3lBOUlHWmhiSE5sTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2hsY25JdWVHaHlJQ1ltSUdWeWNpNTRhSEl1YzNSaGRIVnpJRDA5SURRd05Da2dlMXh1WEhSY2RGeDBYSFJjZEhSb2FYTXVkM2x6YVdVdWNtVnVaR1Z5S0Z3aVhDSXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEdOdmJuTnZiR1V1WlhKeWIzSW9aWEp5S1R0Y2JseDBYSFJjZEZ4MFhIUmpiMjV6YjJ4bExteHZaeWhsY25JdWMzUmhZMnNwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBkR2hwY3k1M2VYTnBaUzUzY21Gd2NHVnlMbDh1Wm1seVpTaGNJbmQ1YzJsbE9teHZZV1JjSWlrN1hHNWNkRngwWEhSOUtUdGNibHgwWEhSOVhHNWNkSDBzWEc1Y2JseDBjMkYyWlRvZ1puVnVZM1JwYjI0b1pHRjBZU0E5SUhSb2FYTXVkM2x6YVdVdVpHRjBZU2tnZTF4dVhIUmNkSFJvYVhNdWFXNVFjbTluY21WemN5QTlJRndpVTJGMmFXNW5YQ0k3WEc1Y2JseDBYSFJRY205dGFYTmxMbUZzYkNoMGFHbHpMbkIxZEVKaFkydGxibVJ6TG0xaGNDaGlZV05yWlc1a0lEMCtJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmlZV05yWlc1a0xteHZaMmx1S0NrdWRHaGxiaWdvS1NBOVBpQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQmlZV05yWlc1a0xuQjFkQ2g3WEc1Y2RGeDBYSFJjZEZ4MGJtRnRaVG9nWW1GamEyVnVaQzVtYVd4bGJtRnRaU3hjYmx4MFhIUmNkRngwWEhSd1lYUm9PaUJpWVdOclpXNWtMbkJoZEdnc1hHNWNkRngwWEhSY2RGeDBaR0YwWVRvZ1pHRjBZVnh1WEhSY2RGeDBYSFI5S1R0Y2JseDBYSFJjZEgwcE8xeHVYSFJjZEgwcEtTNTBhR1Z1S0NncElEMCtJSHRjYmx4MFhIUmNkSFJvYVhNdWQzbHphV1V1ZDNKaGNIQmxjaTVmTG1acGNtVW9YQ0ozZVhOcFpUcHpZWFpsWENJcE8xeHVYRzVjZEZ4MFhIUjBhR2x6TG1sdVVISnZaM0psYzNNZ1BTQm1ZV3h6WlR0Y2JseDBYSFI5S1M1allYUmphQ2hsY25JZ1BUNGdlMXh1WEhSY2RGeDBkR2hwY3k1cGJsQnliMmR5WlhOeklEMGdabUZzYzJVN1hHNWNibHgwWEhSY2RHbG1JQ2hsY25JcElIdGNibHgwWEhSY2RGeDBZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSXBPMXh1WEhSY2RGeDBYSFJqYjI1emIyeGxMbXh2WnlobGNuSXVjM1JoWTJzcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcE8xeHVYSFI5TEZ4dVhHNWNkR3h2WjJsdU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTVoZFhSb1FtRmphMlZ1WkhOYk1GMGdKaVlnZEdocGN5NWhkWFJvUW1GamEyVnVaSE5iTUYwdWJHOW5hVzRvS1R0Y2JseDBmU3hjYmx4dVhIUnNiMmR2ZFhRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpMbUYxZEdoQ1lXTnJaVzVrYzFzd1hTQW1KaUIwYUdsekxtRjFkR2hDWVdOclpXNWtjMXN3WFM1c2IyZHZkWFFvS1R0Y2JseDBmU3hjYmx4dVhIUmpiR1ZoY2pvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MGRHaHBjeTV6WVhabEtHNTFiR3dwTzF4dVhIUjlMRnh1WEc1Y2RDOHZJRWRsZENCemRHOXlZV2RsSUhCaGNtRnRaWFJsY25NZ1puSnZiU0IwYUdVZ2JXRnBiaUJsYkdWdFpXNTBJR0Z1WkNCallXTm9aU0IwYUdWdExpQlZjMlZrSUdadmNpQkJVRWtnYTJWNWN5QmhibVFnZEdobElHeHBhMlV1WEc1Y2RIQmhjbUZ0T2lCbWRXNWpkR2x2YmlocFpDa2dlMXh1WEhSY2RDOHZJRlJQUkU4Z2RISmhkbVZ5YzJVZ1lXeHNJSEJ5YjNCbGNuUnBaWE1nWVc1a0lHTmhZMmhsSUhCaGNtRnRjeUJwYmlCamIyNXpkSEoxWTNSdmNpd2dkRzhnWVhadmFXUmNibHgwWEhRdkx5QmpiMnhzWldOMGFXOXVJR2wwWlcxeklHTmhjbko1YVc1bklHRnNiQ0J2WmlCMGFHVnpaVnh1WEhSY2RIUm9hWE11Y0dGeVlXMXpJRDBnZEdocGN5NXdZWEpoYlhNZ2ZId2dlMzA3WEc1Y2JseDBYSFJwWmlBb0lTaHBaQ0JwYmlCMGFHbHpMbkJoY21GdGN5a3BJSHRjYmx4MFhIUmNkSFpoY2lCaGRIUnlhV0oxZEdVZ1BTQmNJbVJoZEdFdGMzUnZjbVV0WENJZ0t5QnBaRHRjYmx4dVhIUmNkRngwZEdocGN5NXdZWEpoYlhOYmFXUmRJRDBnZEdocGN5NTNlWE5wWlM1M2NtRndjR1Z5TG1kbGRFRjBkSEpwWW5WMFpTaGhkSFJ5YVdKMWRHVXBJSHg4SUhSb2FYTXVkM2x6YVdVdVpXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVW9ZWFIwY21saWRYUmxLVHRjYmx4dVhIUmNkRngwZEdocGN5NTNlWE5wWlM1M2NtRndjR1Z5TG5KbGJXOTJaVUYwZEhKcFluVjBaU2hoZEhSeWFXSjFkR1VwTzF4dVhIUmNkRngwZEdocGN5NTNlWE5wWlM1bGJHVnRaVzUwTG5KbGJXOTJaVUYwZEhKcFluVjBaU2hoZEhSeWFXSjFkR1VwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG5CaGNtRnRjMXRwWkYwN1hHNWNkSDBzWEc1Y2JseDBiR2wyWlRvZ2UxeHVYSFJjZEdsdVVISnZaM0psYzNNNklHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNWNkRngwWEhScFppQW9kbUZzZFdVcElIdGNibHgwWEhSY2RGeDBkbUZ5SUhBZ1BTQWtMbU55WldGMFpTaGNJbVJwZGx3aUxDQjdYRzVjZEZ4MFhIUmNkRngwZEdWNGRFTnZiblJsYm5RNklIWmhiSFZsSUNzZ1hDTGlnS1pjSWl4Y2JseDBYSFJjZEZ4MFhIUmpiR0Z6YzA1aGJXVTZJRndpY0hKdlozSmxjM05jSWl4Y2JseDBYSFJjZEZ4MFhIUnBibk5wWkdVNklIUm9hWE11ZDNsemFXVXVkM0poY0hCbGNseHVYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUWtMbkpsYlc5MlpTZ2tLRndpTG5CeWIyZHlaWE56WENJc0lIUm9hWE11ZDNsemFXVXVkM0poY0hCbGNpa3BPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFJ6ZEdGMGFXTTZJSHRjYmx4MFhIUnBjMGhoYzJnNklIVnliQ0E5UGlBb2RYSnNMbTl5YVdkcGJpQTlQVDBnYkc5allYUnBiMjR1YjNKcFoybHVLU0FtSmlBb2RYSnNMbkJoZEdodVlXMWxJRDA5UFNCc2IyTmhkR2x2Ymk1d1lYUm9ibUZ0WlNrZ0ppWWdJU0YxY213dWFHRnphQ3hjYmx4MGZWeHVmU2s3WEc1Y2JpOHZJRUpoYzJVZ1kyeGhjM01nWm05eUlHRnNiQ0JpWVdOclpXNWtjMXh1WHk1Q1lXTnJaVzVrSUQwZ0pDNURiR0Z6Y3loN1hHNWNkR052Ym5OMGNuVmpkRzl5T2lCbWRXNWpkR2x2YmloMWNtd3NJSE4wYjNKaFoyVXBJSHRjYmx4MFhIUjBhR2x6TG5WeWJDQTlJSFZ5YkR0Y2JseDBYSFIwYUdsekxuTjBiM0poWjJVZ1BTQnpkRzl5WVdkbE8xeHVYSFJjZEhSb2FYTXVhV1FnUFNCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG1sa08xeHVYRzVjZEZ4MEx5OGdVR1Z5YldsemMybHZibk1nYjJZZ2RHaHBjeUJ3WVhKMGFXTjFiR0Z5SUdKaFkydGxibVF1WEc1Y2RGeDBMeThnUjJ4dlltRnNJSEJsY20xcGMzTnBiMjV6SUdGeVpTQlBVaWhoYkd3Z2NHVnliV2x6YzJsdmJuTXBYRzVjZEZ4MGRHaHBjeTV3WlhKdGFYTnphVzl1Y3lBOUlHNWxkeUJYZVhOcFpTNVFaWEp0YVhOemFXOXVjeWdwTzF4dVhHNWNkRngwVjNsemFXVXVVR1Z5YldsemMybHZibk11WVdOMGFXOXVjeTVtYjNKRllXTm9LR0ZqZEdsdmJpQTlQaUI3WEc1Y2RGeDBYSFIwYUdsekxuQmxjbTFwYzNOcGIyNXpMbU5oYmloaFkzUnBiMjRzSUNncElEMCtJSHRjYmx4MFhIUmNkRngwZEdocGN5NXpkRzl5WVdkbExuQmxjbTFwYzNOcGIyNXpMbTl1S0dGamRHbHZiaWs3WEc1Y2RGeDBYSFI5TENBb0tTQTlQaUI3WEc1Y2RGeDBYSFJjZEM4dklGUlBSRThnYjJabVhHNWNkRngwWEhSOUtUdGNibHgwWEhSOUtUdGNibHgwZlN4Y2JseHVYSFF2THlCVWJ5QmlaU0JpWlNCdmRtVnljbWxrWlc0Z1lua2djM1ZpWTJ4aGMzTmxjMXh1WEhSeVpXRmtlVG9nVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2tzWEc1Y2RHeHZaMmx1T2lBb0tTQTlQaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LU3hjYmx4MGJHOW5iM1YwT2lBb0tTQTlQaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LU3hjYmx4dVhIUndjbTk0ZVRvZ2UxeHVYSFJjZEhkNWMybGxPaUJjSW5OMGIzSmhaMlZjSWx4dVhIUjlMRnh1WEc1Y2RITjBZWFJwWXpvZ2UxeHVYSFJjZEM4dklGSmxkSFZ5YmlCMGFHVWdZWEJ3Y205d2NtbGhkR1VnWW1GamEyVnVaQ2h6S1NCbWIzSWdkR2hwY3lCMWNteGNibHgwWEhSamNtVmhkR1U2SUdaMWJtTjBhVzl1S0hWeWJDd2djM1J2Y21GblpTa2dlMXh1WEhSY2RGeDBkbUZ5SUhKbGRDQTlJRnRkTzF4dVhHNWNkRngwWEhSZkxrSmhZMnRsYm1RdVltRmphMlZ1WkhNdVptOXlSV0ZqYUNoQ1lXTnJaVzVrSUQwK0lIdGNibHgwWEhSY2RGeDBhV1lnS0VKaFkydGxibVFnSmlZZ1FtRmphMlZ1WkM1MFpYTjBLSFZ5YkNrcElIdGNibHgwWEhSY2RGeDBYSFIyWVhJZ1ltRmphMlZ1WkNBOUlHNWxkeUJDWVdOclpXNWtLSFZ5YkN3Z2MzUnZjbUZuWlNrN1hHNWNkRngwWEhSY2RGeDBZbUZqYTJWdVpDNXBaQ0E5SUVKaFkydGxibVF1YVdRN1hHNWNkRngwWEhSY2RGeDBjbVYwTG5CMWMyZ29ZbUZqYTJWdVpDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBwTzF4dVhHNWNkRngwWEhSeVpYUjFjbTRnY21WME8xeHVYSFJjZEgwc1hHNWNibHgwWEhSaVlXTnJaVzVrY3pvZ1cxMHNYRzVjYmx4MFhIUmhaR1E2SUdaMWJtTjBhVzl1S0c1aGJXVXNJRU5zWVhOekxDQm1hWEp6ZENrZ2UxeHVYSFJjZEZ4MFh5NUNZV05yWlc1a1cyNWhiV1ZkSUQwZ1EyeGhjM003WEc1Y2RGeDBYSFJmTGtKaFkydGxibVF1WW1GamEyVnVaSE5iWm1seWMzUS9JRndpZFc1emFHbG1kRndpSURvZ1hDSndkWE5vWENKZEtFTnNZWE56S1R0Y2JseDBYSFJjZEVOc1lYTnpMbWxrSUQwZ2JtRnRaVHRjYmx4MFhIUjlYRzVjZEgxY2JuMHBPMXh1WEc0dkx5QlRZWFpsSUdsdUlHRnVJR1ZzWlcxbGJuUmNibDh1UW1GamEyVnVaQzVoWkdRb1hDSkZiR1Z0Wlc1MFhDSXNJQ1F1UTJ4aGMzTW9leUJsZUhSbGJtUnpPaUJmTGtKaFkydGxibVFzWEc1Y2RHTnZibk4wY25WamRHOXlPaUJtZFc1amRHbHZiaUFvS1NCN1hHNWNkRngwZEdocGN5NXdaWEp0YVhOemFXOXVjeTV2YmloYlhDSnlaV0ZrWENJc0lGd2laV1JwZEZ3aUxDQmNJbk5oZG1WY0lsMHBPMXh1WEc1Y2RGeDBkR2hwY3k1bGJHVnRaVzUwSUQwZ0pDaDBhR2x6TG5WeWJDNW9ZWE5vS1R0Y2JseDBmU3hjYmx4dVhIUm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kR2hwY3k1bGJHVnRaVzUwTG5SbGVIUkRiMjUwWlc1MEtUdGNibHgwZlN4Y2JseHVYSFJ3ZFhRNklHWjFibU4wYVc5dUtIdGtZWFJoSUQwZ1hDSmNJbjBwSUh0Y2JseDBYSFIwYUdsekxtVnNaVzFsYm5RdWRHVjRkRU52Ym5SbGJuUWdQU0IwYUdsekxuZDVjMmxsTG5SdlNsTlBUaWhrWVhSaEtUdGNibHgwWEhSeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2s3WEc1Y2RIMHNYRzVjYmx4MGMzUmhkR2xqT2lCN1hHNWNkRngwZEdWemREb2dLSFZ5YkNrZ1BUNGdlMXh1WEhSY2RGeDBhV1lnS0Y4dWFYTklZWE5vS0hWeWJDa3BJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJQ0VoSkNoMWNtd3VhR0Z6YUNrN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzU5S1NrN1hHNWNiaTh2SUV4dllXUWdabkp2YlNCaElISmxiVzkwWlNCVlVrd3NJRzV2SUhOaGRtVmNibDh1UW1GamEyVnVaQzVoWkdRb1hDSlNaVzF2ZEdWY0lpd2dKQzVEYkdGemN5aDdJR1Y0ZEdWdVpITTZJRjh1UW1GamEyVnVaQ3hjYmx4MFkyOXVjM1J5ZFdOMGIzSTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSFJvYVhNdWNHVnliV2x6YzJsdmJuTXViMjRvVzF3aWNtVmhaRndpWFNrN1hHNWNkSDBzWEc1Y2JseDBaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSeVpYUjFjbTRnSkM1bVpYUmphQ2gwYUdsekxuVnliQzVvY21WbUxDQjdYRzVjZEZ4MFhIUnlaWE53YjI1elpWUjVjR1U2SUZ3aWFuTnZibHdpWEc1Y2RGeDBmU2t1ZEdobGJpaDRhSElnUFQ0Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hob2NpNXlaWE53YjI1elpTa3BPMXh1WEhSOUxGeHVYRzVjZEhOMFlYUnBZem9nZTF4dVhIUmNkSFJsYzNRNklIVnliQ0E5UGlBaFh5NXBjMGhoYzJnb2RYSnNLVnh1WEhSOVhHNTlLU2s3WEc1Y2JpOHZJRk5oZG1VZ2FXNGdiRzlqWVd4VGRHOXlZV2RsWEc1ZkxrSmhZMnRsYm1RdVlXUmtLRndpVEc5allXeGNJaXdnSkM1RGJHRnpjeWg3SUdWNGRHVnVaSE02SUY4dVFtRmphMlZ1WkN4Y2JseDBZMjl1YzNSeWRXTjBiM0k2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhSb2FYTXVjR1Z5YldsemMybHZibk11YjI0b1cxd2ljbVZoWkZ3aUxDQmNJbVZrYVhSY0lpd2dYQ0p6WVhabFhDSmRLVHRjYmx4MFhIUjBhR2x6TG10bGVTQTlJSFJvYVhNdWRYSnNJQ3NnWENKY0lqdGNibHgwZlN4Y2JseHVYSFJuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvYkc5allXeFRkRzl5WVdkbFczUm9hWE11YTJWNVhTazdYRzVjZEgwc1hHNWNibHgwY0hWME9pQm1kVzVqZEdsdmJpaDdaR0YwWVNBOUlGd2lYQ0o5S1NCN1hHNWNkRngwYkc5allXeFRkRzl5WVdkbFczUm9hWE11YTJWNVhTQTlJSFJvYVhNdWQzbHphV1V1ZEc5S1UwOU9LR1JoZEdFcE8xeHVYSFJjZEhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LVHRjYmx4MGZTeGNibHh1WEhSemRHRjBhV002SUh0Y2JseDBYSFIwWlhOME9pQW9kWEpzS1NBOVBpQjdYRzVjZEZ4MFhIUnBaaUFvWHk1cGMwaGhjMmdvZFhKc0tTa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdJU1FvZFhKc0xtaGhjMmdwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVmU2twTzF4dVhHNTlLU2hDYkdsemN5azdYRzRpTENJb1puVnVZM1JwYjI0b0pDd2dKQ1FwSUh0Y2JseHVkbUZ5SUY4Z1BTQlhlWE5wWlM1T2IyUmxJRDBnSkM1RGJHRnpjeWg3WEc1Y2RHRmljM1J5WVdOME9pQjBjblZsTEZ4dVhIUmpiMjV6ZEhKMVkzUnZjam9nWm5WdVkzUnBiMjRnS0dWc1pXMWxiblFzSUhkNWMybGxLU0I3WEc1Y2RGeDBhV1lnS0NGbGJHVnRaVzUwSUh4OElDRjNlWE5wWlNrZ2UxeHVYSFJjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVYzbHphV1V1VG05a1pTQmpiMjV6ZEhKMVkzUnZjaUJ5WlhGMWFYSmxjeUJoYmlCbGJHVnRaVzUwSUdGeVozVnRaVzUwSUdGdVpDQmhJSGQ1YzJsbElHOWlhbVZqZEZ3aUtUdGNibHgwWEhSOVhHNWNibHgwWEhSMGFHbHpMbVZzWlcxbGJuUWdQU0JsYkdWdFpXNTBPMXh1WEc1Y2RGeDBkR2hwY3k1M2VYTnBaU0E5SUhkNWMybGxPMXh1WEhSY2RIUm9hWE11Y0hKdmNHVnlkSGtnUFNCbGJHVnRaVzUwTG1kbGRFRjBkSEpwWW5WMFpTaGNJbkJ5YjNCbGNuUjVYQ0lwTzF4dVhIUmNkSFJvYVhNdWRIbHdaU0E5SUZkNWMybGxMbE5qYjNCbExtNXZjbTFoYkdsNlpTaGxiR1Z0Wlc1MEtUdGNibHh1WEhSY2RGZDVjMmxsTG1odmIydHpMbkoxYmloY0ltNXZaR1V0YVc1cGRDMWxibVJjSWl3Z2RHaHBjeWs3WEc1Y2RIMHNYRzVjYmx4MFoyVjBJR2x6VW05dmRDZ3BJSHRjYmx4MFhIUnlaWFIxY200Z0lYUm9hWE11Y0hKdmNHVnlkSGs3WEc1Y2RIMHNYRzVjYmx4MFoyVjBJRzVoYldVb0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUZkNWMybGxMbkpsWVdSaFlteGxLSFJvYVhNdWNISnZjR1Z5ZEhrZ2ZId2dkR2hwY3k1MGVYQmxLUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVYSFI5TEZ4dVhHNWNkR2RsZENCa1lYUmhLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1kbGRFUmhkR0VvS1R0Y2JseDBmU3hjYmx4dVhIUm5aWFJTWld4aGRHbDJaVVJoZEdFNklHWjFibU4wYVc5dUtHOGdQU0I3SUdScGNuUjVPaUIwY25WbExDQmpiMjF3ZFhSbFpEb2dkSEoxWlN3Z2JuVnNiRG9nZEhKMVpTQjlLU0I3WEc1Y2RGeDBkbUZ5SUhKbGRDQTlJSFJvYVhNdVoyVjBSR0YwWVNodktUdGNibHh1WEhSY2RHbG1JQ2h6Wld4bUxsQnliM2g1SUNZbUlISmxkQ0FtSmlCMGVYQmxiMllnY21WMElEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNWNkRngwWEhSeVpYUWdQU0J1WlhjZ1VISnZlSGtvY21WMExDQjdYRzVjZEZ4MFhIUmNkR2RsZERvZ0tHUmhkR0VzSUhCeWIzQmxjblI1S1NBOVBpQjdYRzVjZEZ4MFhIUmNkRngwYVdZZ0tIQnliM0JsY25SNUlHbHVJR1JoZEdFcElIdGNibHgwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJrWVhSaFczQnliM0JsY25SNVhUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUXZMeUJNYjI5cklHbHVJR0Z1WTJWemRHOXljMXh1WEhSY2RGeDBYSFJjZEhaaGNpQnlaWFFnUFNCMGFHbHpMbmRoYkd0VmNDaHpZMjl3WlNBOVBpQjdYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9jSEp2Y0dWeWRIa2dhVzRnYzJOdmNHVXVjSEp2Y0dWeWRHbGxjeWtnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFF2THlCVVQwUlBJR1JsWTI5MWNHeGxYRzVjZEZ4MFhIUmNkRngwWEhSY2RITmpiM0JsTG1WNGNISmxjM05wYjI1ekxuVndaR0YwWlVGc2MyOHVZV1JrS0hSb2FYTXVaWGh3Y21WemMybHZibk1wTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJ6WTI5d1pTNXdjbTl3WlhKMGFXVnpXM0J5YjNCbGNuUjVYUzVuWlhSU1pXeGhkR2wyWlVSaGRHRW9ieWs3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlPMXh1WEhSY2RGeDBYSFJjZEgwcE8xeHVYRzVjZEZ4MFhIUmNkRngwYVdZZ0tISmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnY21WME8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlN4Y2JseHVYSFJjZEZ4MFhIUm9ZWE02SUNoa1lYUmhMQ0J3Y205d1pYSjBlU2tnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkR2xtSUNod2NtOXdaWEowZVNCcGJpQmtZWFJoS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkSEoxWlR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhRdkx5QlFjbTl3WlhKMGVTQmtiMlZ6SUc1dmRDQmxlR2x6ZEN3Z2JHOXZheUJtYjNJZ2FYUWdaV3h6Wlhkb1pYSmxYRzVjYmx4MFhIUmNkRngwWEhRdkx5QkdhWEp6ZENCc2IyOXJJR2x1SUdGdVkyVnpkRzl5YzF4dVhIUmNkRngwWEhSY2RIWmhjaUJ5WlhRZ1BTQjBhR2x6TG5kaGJHdFZjQ2h6WTI5d1pTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvY0hKdmNHVnlkSGtnYVc0Z2MyTnZjR1V1Y0hKdmNHVnlkR2xsY3lrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZEhKMVpUdGNibHgwWEhSY2RGeDBYSFJjZEgwN1hHNWNkRngwWEhSY2RGeDBmU2s3WEc1Y2JseDBYSFJjZEZ4MFhIUnBaaUFvY21WMElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1UzUnBiR3dnYm05MElHWnZkVzVrTENCc2IyOXJJR2x1SUdSbGMyTmxibVJoYm5SelhHNWNkRngwWEhSY2RGeDBjbVYwSUQwZ2RHaHBjeTVtYVc1a0tIQnliM0JsY25SNUtUdGNibHh1WEhSY2RGeDBYSFJjZEdsbUlDaHlaWFFnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2NtVjBLU2tnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJ5WlhRZ1BTQnlaWFF1YldGd0tHbDBaVzBnUFQ0Z2FYUmxiUzVuWlhSRVlYUmhLRzhwS1Z4dVhIUmNkRngwWEhSY2RGeDBYSFFnSUNBZ0lDQWdJQ0F1Wm1sc2RHVnlLR2wwWlcwZ1BUNGdhWFJsYlNBaFBUMGdiblZzYkNrN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwY21WMElEMGdjbVYwTG1kbGRFUmhkR0VvYnlrN1hHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFhIUmNkR1JoZEdGYmNISnZjR1Z5ZEhsZElEMGdjbVYwTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdkSEoxWlR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDBzWEc1Y2JseDBYSFJjZEZ4MGMyVjBPaUJtZFc1amRHbHZiaWhrWVhSaExDQndjbTl3WlhKMGVTd2dkbUZzZFdVcElIdGNibHgwWEhSY2RGeDBYSFIwYUhKdmR5QkZjbkp2Y2loY0lsbHZkU0JqWVc3aWdKbDBJSE5sZENCa1lYUmhJSFpwWVNCbGVIQnlaWE56YVc5dWN5NWNJaWs3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUJ5WlhRN1hHNWNkSDBzWEc1Y2JseDBkMkZzYXpvZ1puVnVZM1JwYjI0b1kyRnNiR0poWTJzcElIdGNibHgwWEhSMllYSWdkMkZzYTJWeUlEMGdiMkpxSUQwK0lIdGNibHgwWEhSY2RIWmhjaUJ5WlhRZ1BTQmpZV3hzWW1GamF5aHZZbW9wTzF4dVhHNWNkRngwWEhScFppQW9jbVYwSUNFOVBTQm1ZV3h6WlNrZ2UxeHVYSFJjZEZ4MFhIUnZZbW91Y0hKdmNHRm5ZWFJsSUNZbUlHOWlhaTV3Y205d1lXZGhkR1VvZDJGc2EyVnlLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlPMXh1WEc1Y2RGeDBkMkZzYTJWeUtIUm9hWE1wTzF4dVhIUjlMRnh1WEc1Y2RIZGhiR3RWY0RvZ1puVnVZM1JwYjI0b1kyRnNiR0poWTJzcElIdGNibHgwWEhSMllYSWdjMk52Y0dVZ1BTQjBhR2x6TzF4dVhHNWNkRngwZDJocGJHVWdLSE5qYjNCbElEMGdjMk52Y0dVdWNHRnlaVzUwVTJOdmNHVXBJSHRjYmx4MFhIUmNkSFpoY2lCeVpYUWdQU0JqWVd4c1ltRmpheWh6WTI5d1pTazdYRzVjYmx4MFhIUmNkR2xtSUNoeVpYUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2NtVjBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFJqWVd4c09pQm1kVzVqZEdsdmJpaGpZV3hzWW1GamF5d2dMaTR1WVhKbmN5a2dlMXh1WEhSY2RHRnlaM01nUFNCaGNtZHpJSHg4SUZ0ZE8xeHVYRzVjZEZ4MGFXWWdLSFI1Y0dWdlppQmpZV3hzWW1GamF5QTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhSb2FYTmJZMkZzYkdKaFkydGRLQzR1TG1GeVozTXBPMXh1WEhSY2RIMWNibHgwWEhSbGJITmxJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmpZV3hzWW1GamF5NWhjSEJzZVNoMGFHbHpMQ0JiZEdocGN5d2dMaTR1WVhKbmMxMHBPMXh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFJsWkdsME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUjBhR2x6TG5CeWIzQmhaMkYwWlNodlltb2dQVDRnYjJKcVcyOWlhaTV3Y21WRlpHbDBQeUJjSW5CeVpVVmthWFJjSWlBNklGd2laV1JwZEZ3aVhTZ3BLVHRjYmx4MGZTeGNibHh1WEhSd2NtOXdZV2RoZEdWa09pQmJYQ0p6WVhabFhDSXNJRndpY21WMlpYSjBYQ0lzSUZ3aVpHOXVaVndpTENCY0ltbHRjRzl5ZEZ3aVhTeGNibHh1WEhSMGIwcFRUMDQ2SUZkNWMybGxMbkJ5YjNSdmRIbHdaUzUwYjBwVFQwNHNYRzVjYmx4MGMzUmhkR2xqT2lCN1hHNWNkRngwWTNKbFlYUmxPaUJtZFc1amRHbHZiaWhsYkdWdFpXNTBMQ0IzZVhOcFpTd2dZMjlzYkdWamRHbHZiaWtnZTF4dVhIUmNkRngwYVdZZ0tGZDVjMmxsTG1sektGd2liWFZzZEdsd2JHVmNJaXdnWld4bGJXVnVkQ2tnSmlZZ0lXTnZiR3hsWTNScGIyNHBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJRzVsZHlCWGVYTnBaUzVEYjJ4c1pXTjBhVzl1S0dWc1pXMWxiblFzSUhkNWMybGxLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJRmQ1YzJsbExsVnVhWFF1WTNKbFlYUmxLQzR1TG1GeVozVnRaVzUwY3lrN1hHNWNkRngwZlN4Y2JseHVYSFJjZEc1dmNtMWhiR2w2WlZCeWIzQmxjblI1T2lCbWRXNWpkR2x2YmlobGJHVnRaVzUwS1NCN1hHNWNkRngwWEhRdkx5QkhaWFFnSmlCdWIzSnRZV3hwZW1VZ2NISnZjR1Z5ZEhrZ2JtRnRaU3dnYVdZZ1pYaHBjM1J6WEc1Y2RGeDBYSFIyWVhJZ2NISnZjR1Z5ZEhrZ1BTQmxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2hjSW5CeWIzQmxjblI1WENJcElIeDhJR1ZzWlcxbGJuUXVaMlYwUVhSMGNtbGlkWFJsS0Z3aWFYUmxiWEJ5YjNCY0lpazdYRzVjYmx4MFhIUmNkR2xtSUNnaGNISnZjR1Z5ZEhrZ0ppWWdaV3hsYldWdWRDNW9ZWE5CZEhSeWFXSjFkR1VvWENKd2NtOXdaWEowZVZ3aUtTa2dlMXh1WEhSY2RGeDBYSFJ3Y205d1pYSjBlU0E5SUdWc1pXMWxiblF1Ym1GdFpTQjhmQ0JsYkdWdFpXNTBMbWxrSUh4OElHVnNaVzFsYm5RdVkyeGhjM05NYVhOMFd6QmRPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb2NISnZjR1Z5ZEhrcElIdGNibHgwWEhSY2RGeDBaV3hsYldWdWRDNXpaWFJCZEhSeWFXSjFkR1VvWENKd2NtOXdaWEowZVZ3aUxDQndjbTl3WlhKMGVTazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQndjbTl3WlhKMGVUdGNibHgwWEhSOVhHNWNkSDFjYm4wcE8xeHVYRzU5S1NoQ2JHbHpjeXdnUW14cGMzTXVKQ2s3WEc0aUxDSXZLbHh1SUNvZ1YzbHphV1VnVlc1cGREb2dVM1Z3WlhJZ1kyeGhjM01nZEdoaGRDQlRZMjl3WlNCaGJtUWdVSEpwYldsMGFYWmxJR2x1YUdWeWFYUWdabkp2YlZ4dUlDb3ZYRzRvWm5WdVkzUnBiMjRvSkN3Z0pDUXBJSHRjYmx4dWRtRnlJRjhnUFNCWGVYTnBaUzVWYm1sMElEMGdKQzVEYkdGemN5aDdYRzVjZEdGaWMzUnlZV04wT2lCMGNuVmxMRnh1WEhSbGVIUmxibVJ6T2lCWGVYTnBaUzVPYjJSbExGeHVYSFJqYjI1emRISjFZM1J2Y2pvZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z2QzbHphV1VzSUdOdmJHeGxZM1JwYjI0cElIdGNibHgwWEhSMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG1Gc2JDNXpaWFFvZEdocGN5NWxiR1Z0Wlc1MExDQjBhR2x6S1R0Y2JseHVYSFJjZEhSb2FYTXVZMjlzYkdWamRHbHZiaUE5SUdOdmJHeGxZM1JwYjI0N1hHNWNibHgwWEhScFppQW9kR2hwY3k1amIyeHNaV04wYVc5dUtTQjdYRzVjZEZ4MFhIUXZMeUJVYUdseklHbHpJR0VnWTI5c2JHVmpkR2x2YmlCcGRHVnRYRzVjZEZ4MFhIUjBhR2x6TG5OamIzQmxJRDBnZEdocGN5NXdZWEpsYm5SVFkyOXdaU0E5SUhSb2FYTXVZMjlzYkdWamRHbHZiaTV3WVhKbGJuUlRZMjl3WlR0Y2JseDBYSFI5WEc1Y2JseDBYSFIwYUdsekxtTnZiWEIxZEdWa0lEMGdWM2x6YVdVdWFYTW9YQ0pqYjIxd2RYUmxaRndpTENCMGFHbHpMbVZzWlcxbGJuUXBPMXh1WEhSY2RIUm9hWE11Y21WeGRXbHlaV1FnUFNCWGVYTnBaUzVwY3loY0luSmxjWFZwY21Wa1hDSXNJSFJvYVhNdVpXeGxiV1Z1ZENrN1hHNWNibHgwWEhSWGVYTnBaUzVvYjI5cmN5NXlkVzRvWENKMWJtbDBMV2x1YVhRdFpXNWtYQ0lzSUhSb2FYTXBPMXh1WEhSOUxGeHVYRzVjZEdkbGRDQmpiRzl6WlhOMFEyOXNiR1ZqZEdsdmJpZ3BJSHRjYmx4MFhIUnBaaUFvZEdocGN5NWpiMnhzWldOMGFXOXVLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1amIyeHNaV04wYVc5dU8xeHVYSFJjZEgxY2JseHVYSFJjZEhKbGRIVnliaUIwYUdsekxuZGhiR3RWY0NoelkyOXdaU0E5UGlCN1hHNWNkRngwWEhScFppQW9jMk52Y0dVdVkyOXNiR1ZqZEdsdmJpa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdjMk52Y0dVdVkyOXNiR1ZqZEdsdmJqdGNibHgwWEhSY2RIMWNibHgwWEhSOUtTQjhmQ0J1ZFd4c08xeHVYSFI5TEZ4dVhHNWNkQzhxS2x4dVhIUWdLaUJEYUdWamF5QnBaaUIwYUdseklIVnVhWFFnYVhNZ1pXbDBhR1Z5SUdSbGJHVjBaV1FnYjNJZ2FXNXphV1JsSUdFZ1pHVnNaWFJsWkNCelkyOXdaVnh1WEhRZ0tpOWNibHgwYVhORVpXeGxkR1ZrT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSMllYSWdjbVYwSUQwZ2RHaHBjeTVrWld4bGRHVmtPMXh1WEc1Y2RGeDBhV1lnS0hSb2FYTXVaR1ZzWlhSbFpDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlIUnlkV1U3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlDRWhkR2hwY3k1d1lYSmxiblJUWTI5d1pTQW1KaUIwYUdsekxuQmhjbVZ1ZEZOamIzQmxMbWx6UkdWc1pYUmxaQ2dwTzF4dVhIUjlMRnh1WEc1Y2RHZGxkRVJoZEdFNklHWjFibU4wYVc5dUtHOHBJSHRjYmx4MFhIUnZJRDBnYnlCOGZDQjdmVHRjYmx4dVhIUmNkSFpoY2lCcGMwNTFiR3dnUFNCMWJtbDBJRDArSUNGMWJtbDBMbVYyWlhKVFlYWmxaQ0FtSmlBaGJ5NWthWEowZVNCOGZGeHVYSFJjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFibWwwTG1SbGJHVjBaV1FnSmlZZ2J5NWthWEowZVNCOGZGeHVYSFJjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFibWwwTG1OdmJYQjFkR1ZrSUNZbUlDRnZMbU52YlhCMWRHVmtJSHg4WEc1Y2RGeDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWdWFYUXVjR3hoWTJWb2IyeGtaWEk3WEc1Y2JseDBYSFJwWmlBb2FYTk9kV3hzS0hSb2FYTXBLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdiblZzYkR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCRGFHVmpheUJwWmlCaGJua2diMllnZEdobElIQmhjbVZ1ZENCelkyOXdaWE1nWkc5bGMyNG5kQ0J5WlhSMWNtNGdaR0YwWVZ4dVhIUmNkSFJvYVhNdWQyRnNhMVZ3S0hOamIzQmxJRDArSUh0Y2JseDBYSFJjZEdsbUlDaHBjMDUxYkd3b2MyTnZjR1VwS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCdWRXeHNPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEhSOUxGeHVYRzVjZEd4cGRtVTZJSHRjYmx4MFhIUmtaV3hsZEdWa09pQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVYSFJjZEZ4MGRHaHBjeTVsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9YQ0prWld4bGRHVmtYQ0lzSUhaaGJIVmxLVHRjYmx4dVhIUmNkRngwYVdZZ0tIWmhiSFZsS1NCN1hHNWNkRngwWEhSY2RDOHZJRk52Wm5RZ1pHVnNaWFJsTENCemRHOXlaU0JsYkdWdFpXNTBJR052Ym5SbGJuUnpJR2x1SUdFZ1puSmhaMjFsYm5SY2JseDBYSFJjZEZ4MEx5OGdZVzVrSUhKbGNHeGhZMlVnZEdobGJTQjNhWFJvSUdGdUlIVnVaRzhnY0hKdmJYQjBMbHh1WEhSY2RGeDBYSFIwYUdsekxtVnNaVzFsYm5SRGIyNTBaVzUwY3lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVSdlkzVnRaVzUwUm5KaFoyMWxiblFvS1R0Y2JseDBYSFJjZEZ4MEpDUW9kR2hwY3k1bGJHVnRaVzUwTG1Ob2FXeGtUbTlrWlhNcExtWnZja1ZoWTJnb2JtOWtaU0E5UGlCN1hHNWNkRngwWEhSY2RGeDBkR2hwY3k1bGJHVnRaVzUwUTI5dWRHVnVkSE11WVhCd1pXNWtRMmhwYkdRb2JtOWtaU2s3WEc1Y2RGeDBYSFJjZEgwcE8xeHVYRzVjZEZ4MFhIUmNkQ1F1WTI5dWRHVnVkSE1vZEdocGN5NWxiR1Z0Wlc1MExDQmJYRzVjZEZ4MFhIUmNkRngwWENKRVpXeGxkR1ZrSUZ3aUlDc2dkR2hwY3k1dVlXMWxMRnh1WEhSY2RGeDBYSFJjZEh0Y2JseDBYSFJjZEZ4MFhIUmNkSFJoWnpvZ1hDSmlkWFIwYjI1Y0lpeGNibHgwWEhSY2RGeDBYSFJjZEhSbGVIUkRiMjUwWlc1ME9pQmNJbFZ1Wkc5Y0lpeGNibHgwWEhSY2RGeDBYSFJjZEdWMlpXNTBjem9nZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjSW1Oc2FXTnJYQ0k2SUdWMmRDQTlQaUIwYUdsekxtUmxiR1YwWldRZ1BTQm1ZV3h6WlZ4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhTazdYRzVjYmx4MFhIUmNkRngwZEdocGN5NWxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb1hDSmtaV3hsZEdVdGFHOTJaWEpjSWlrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSbGJITmxJR2xtSUNoMGFHbHpMbVJsYkdWMFpXUXBJSHRjYmx4MFhIUmNkRngwTHk4Z1ZXNWtaV3hsZEdWY2JseDBYSFJjZEZ4MGRHaHBjeTVsYkdWdFpXNTBMblJsZUhSRGIyNTBaVzUwSUQwZ1hDSmNJanRjYmx4MFhIUmNkRngwZEdocGN5NWxiR1Z0Wlc1MExtRndjR1Z1WkVOb2FXeGtLSFJvYVhNdVpXeGxiV1Z1ZEVOdmJuUmxiblJ6S1R0Y2JseHVYSFJjZEZ4MFhIUXZMeUJ2ZEdobGNuZHBjMlVnWlhod2NtVnpjMmx2Ym5NZ2QyOXVKM1FnZFhCa1lYUmxJR0psWTJGMWMyVWdkR2hwY3lCM2FXeHNJSE4wYVd4c0lITmxaVzBnWVhNZ1pHVnNaWFJsWkZ4dVhIUmNkRngwWEhRdkx5QkJiSFJsY201aGRHbDJaV3g1TENCM1pTQmpiM1ZzWkNCbWFYSmxJR1JoZEdGamFHRnVaMlVnZDJsMGFDQmhJSFJwYldWdmRYUXVYRzVjZEZ4MFhIUmNkSFJvYVhNdVgyUmxiR1YwWldRZ1BTQm1ZV3h6WlR0Y2JseHVYSFJjZEZ4MFhIUWtMbVpwY21Vb2RHaHBjeTVsYkdWdFpXNTBMQ0JjSW5kNWMybGxPbVJoZEdGamFHRnVaMlZjSWl3Z2UxeHVYSFJjZEZ4MFhIUmNkSFZ1YVhRNklIUm9hWE11WTI5c2JHVmpkR2x2Yml4Y2JseDBYSFJjZEZ4MFhIUjNlWE5wWlRvZ2RHaHBjeTUzZVhOcFpTeGNibHgwWEhSY2RGeDBYSFJoWTNScGIyNDZJRndpZFc1a1pXeGxkR1ZjSWl4Y2JseDBYSFJjZEZ4MFhIUnBkR1Z0T2lCMGFHbHpYRzVjZEZ4MFhIUmNkSDBwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBzWEc1Y2JseDBYSFIxYm5OaGRtVmtRMmhoYm1kbGN6b2dablZ1WTNScGIyNG9kbUZzZFdVcElIdGNibHgwWEhSY2RHbG1JQ2gwYUdsekxuQnNZV05sYUc5c1pHVnlLU0I3WEc1Y2RGeDBYSFJjZEhaaGJIVmxJRDBnWm1Gc2MyVTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSFJvYVhNdVpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdWRHOW5aMnhsS0Z3aWRXNXpZWFpsWkMxamFHRnVaMlZ6WENJc0lIWmhiSFZsS1R0Y2JseHVYSFJjZEZ4MGNtVjBkWEp1SUhaaGJIVmxPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUndiR0ZqWldodmJHUmxjam9nWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmx4MFhIUmNkSFJvYVhNdVpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdWRHOW5aMnhsS0Z3aWNHeGhZMlZvYjJ4a1pYSmNJaXdnZG1Gc2RXVXBPMXh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFJ6ZEdGMGFXTTZJSHRjYmx4MFhIUm5aWFE2SUdaMWJtTjBhVzl1S0dWc1pXMWxiblFzSUhCeWFXOXlhWFJwZW1WUWNtbHRhWFJwZG1VcElIdGNibHgwWEhSY2RIWmhjaUJ6WTI5d1pTQTlJRmQ1YzJsbExsTmpiM0JsTG1Gc2JDNW5aWFFvWld4bGJXVnVkQ2s3WEc1Y2JseDBYSFJjZEhKbGRIVnliaUFvY0hKcGIzSnBkR2w2WlZCeWFXMXBkR2wyWlNCOGZDQWhjMk52Y0dVcFB5QlhlWE5wWlM1UWNtbHRhWFJwZG1VdVlXeHNMbWRsZENobGJHVnRaVzUwS1NBNklITmpiM0JsTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJqY21WaGRHVTZJR1oxYm1OMGFXOXVLR1ZzWlcxbGJuUXNJSGQ1YzJsbExDQmpiMnhzWldOMGFXOXVLU0I3WEc1Y2RGeDBYSFJwWmlBb0lXVnNaVzFsYm5RZ2ZId2dJWGQ1YzJsbEtTQjdYRzVjZEZ4MFhIUmNkSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKWGVYTnBaUzVWYm1sMExtTnlaV0YwWlNncElISmxjWFZwY21WeklHRnVJR1ZzWlcxbGJuUWdZWEpuZFcxbGJuUWdZVzVrSUdFZ2QzbHphV1VnYjJKcVpXTjBYQ0lwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSeVpYUjFjbTRnYm1WM0lGZDVjMmxsVzFkNWMybGxMbWx6S0Z3aWMyTnZjR1ZjSWl3Z1pXeGxiV1Z1ZENrL0lGd2lVMk52Y0dWY0lpQTZJRndpVUhKcGJXbDBhWFpsWENKZEtHVnNaVzFsYm5Rc0lIZDVjMmxsTENCamIyeHNaV04wYVc5dUtUdGNibHgwWEhSOVhHNWNkSDFjYm4wcE8xeHVYRzU5S1NoQ2JHbHpjeXdnUW14cGMzTXVKQ2s3WEc0aUxDSW9ablZ1WTNScGIyNG9KQ3dnSkNRcElIdGNibHh1ZG1GeUlGOGdQU0JYZVhOcFpTNUZlSEJ5WlhOemFXOXVJRDBnSkM1RGJHRnpjeWg3WEc1Y2RHTnZibk4wY25WamRHOXlPaUJtZFc1amRHbHZiaWhsZUhCeVpYTnphVzl1S1NCN1hHNWNkRngwZEdocGN5NWxlSEJ5WlhOemFXOXVJRDBnWlhod2NtVnpjMmx2Ymp0Y2JseDBmU3hjYmx4dVhIUmxkbUZzT2lCbWRXNWpkR2x2Ymloa1lYUmhLU0I3WEc1Y2RGeDBkR2hwY3k1dmJHUldZV3gxWlNBOUlIUm9hWE11ZG1Gc2RXVTdYRzVjYmx4MFhIUXZMeUJVVDBSUElHTnZiblpsY25RZ2RHOGdibVYzSUVaMWJtTjBhVzl1S0NrZ2QyaHBZMmdnYVhNZ2JXOXlaU0J2Y0hScGJXbDZZV0pzWlNCaWVTQktVeUJsYm1kcGJtVnpMbHh1WEhSY2RDOHZJRUZzYzI4c0lHTmhZMmhsSUhSb1pTQm1kVzVqZEdsdmJpd2djMmx1WTJVZ2IyNXNlU0JrWVhSaElHTm9ZVzVuWlhNZ1lXTnliM056SUdsdWRtOWpZWFJwYjI1ekxseHVYSFJjZEZkNWMybGxMbWh2YjJ0ekxuSjFiaWhjSW1WNGNISmxjM05wYjI0dFpYWmhiQzFpWldadmNtVmxkbUZzWENJc0lIUm9hWE1wTzF4dVhHNWNkRngwZEhKNUlIdGNibHgwWEhSY2RHbG1JQ2doZEdocGN5NW1kVzVqZEdsdmJpa2dlMXh1WEhSY2RGeDBYSFIwYUdsekxtWjFibU4wYVc5dUlEMGdkR2hwY3k1amNtVmhkR1ZHZFc1amRHbHZiaWdwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSMGFHbHpMblpoYkhWbElEMGdkR2hwY3k1bWRXNWpkR2x2Ymloa1lYUmhLVHRjYmx4MFhIUjlYRzVjZEZ4MFkyRjBZMmdnS0dWNFkyVndkR2x2YmlrZ2UxeHVYSFJjZEZ4MFYzbHphV1V1YUc5dmEzTXVjblZ1S0Z3aVpYaHdjbVZ6YzJsdmJpMWxkbUZzTFdWeWNtOXlYQ0lzSUh0amIyNTBaWGgwT2lCMGFHbHpMQ0JsZUdObGNIUnBiMjU5S1R0Y2JseHVYSFJjZEZ4MGRHaHBjeTUyWVd4MVpTQTlJRjh1UlZKU1QxSTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVkbUZzZFdVN1hHNWNkSDBzWEc1Y2JseDBkRzlUZEhKcGJtY29LU0I3WEc1Y2RGeDBjbVYwZFhKdUlHQTlLQ1I3ZEdocGN5NWxlSEJ5WlhOemFXOXVmU2xnTzF4dVhIUjlMRnh1WEc1Y2RHTnlaV0YwWlVaMWJtTjBhVzl1T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSMllYSWdZMjlrWlNBOUlIUm9hWE11Wlhod2NtVnpjMmx2Ymp0Y2JseHVYSFJjZEdsbUlDZ3ZYbWxtWEZ3b1cxeGNVMXhjYzEwclhGd3BKQzlwTG5SbGMzUW9ZMjlrWlNrcElIdGNibHgwWEhSY2RHTnZaR1VnUFNCamIyUmxMbkpsY0d4aFkyVW9MMTVwWmx4Y0tDOHNJRndpYVdabUtGd2lLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJVY21GdWMyWnZjbTBnYzJsdGNHeGxJRzl3WlhKaGRHOXljeUIwYnlCaGNuSmhlUzFtY21sbGJtUnNlU0J0WVhSb0lHWjFibU4wYVc5dWMxeHVYSFJjZEdOdlpHVWdQU0JqYjJSbExuSmxjR3hoWTJVb1h5NXphVzF3YkdWUGNHVnlZWFJwYjI0c0lDaGxlSEJ5TENCdmNHVnlZVzVrTVN3Z2IzQmxjbUYwYjNJc0lHOXdaWEpoYm1ReUtTQTlQaUI3WEc1Y2RGeDBYSFIyWVhJZ2NtVjBJRDBnWUNna2UxZDVjMmxsTGtaMWJtTjBhVzl1Y3k1dmNHVnlZWFJ2Y25OYmIzQmxjbUYwYjNKZGZTZ2tlMjl3WlhKaGJtUXhmU3dnSkh0dmNHVnlZVzVrTW4wcEtXQTdYRzVjZEZ4MFhIUnlaWFIxY200Z2NtVjBPMXh1WEhSY2RIMHBPMXh1WEc1Y2RGeDBYeTV6YVcxd2JHVlBjR1Z5WVhScGIyNHViR0Z6ZEVsdVpHVjRJRDBnTUR0Y2JseHVYSFJjZEhKbGRIVnliaUJ1WlhjZ1JuVnVZM1JwYjI0b1hDSmtZWFJoWENJc0lHQjNhWFJvS0ZkNWMybGxMa1oxYm1OMGFXOXVjeTVmVkhKaGNDbGNibHgwWEhSY2RGeDBkMmwwYUNoa1lYUmhLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUNSN1kyOWtaWDA3WEc1Y2RGeDBYSFJjZEgxZ0tUdGNibHgwZlN4Y2JseHVYSFJzYVhabE9pQjdYRzVjZEZ4MFpYaHdjbVZ6YzJsdmJqb2dablZ1WTNScGIyNG9kbUZzZFdVcElIdGNibHgwWEhSY2RIWmhjaUJqYjJSbElEMGdkbUZzZFdVZ1BTQjJZV3gxWlM1MGNtbHRLQ2s3WEc1Y2JseDBYSFJjZEhSb2FYTXVablZ1WTNScGIyNGdQU0J1ZFd4c08xeHVYSFJjZEgxY2JseDBmU3hjYmx4dVhIUnpkR0YwYVdNNklIdGNibHgwWEhSRlVsSlBVam9nWENKT0wwRmNJaXhjYmx4dVhIUmNkR3hoZW5rNklIdGNibHgwWEhSY2RITnBiWEJzWlU5d1pYSmhkR2x2YmpvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkSFpoY2lCdmNHVnlZWFJ2Y2lBOUlFOWlhbVZqZEM1clpYbHpLRmQ1YzJsbExrWjFibU4wYVc5dWN5NXZjR1Z5WVhSdmNuTXBMbTFoY0NodklEMCtJRzh1Y21Wd2JHRmpaU2d2VzN3cUsxMHZaeXdnWENKY1hGeGNKQ1pjSWlrcExtcHZhVzRvWENKOFhDSXBPMXh1WEhSY2RGeDBYSFIyWVhJZ2IzQmxjbUZ1WkNBOUlGd2lYRnhjWEhNcUtGeGNYRnhpVzF4Y1hGeDNMbDByWEZ4Y1hHSXBYRnhjWEhNcVhDSTdYRzVjYmx4MFhIUmNkRngwY21WMGRYSnVJRkpsWjBWNGNDaGdLRDg2WG54Y1hGeGNLQ2trZTI5d1pYSmhibVI5S0NSN2IzQmxjbUYwYjNKOUtTUjdiM0JsY21GdVpIMG9Qem9rZkZ4Y1hGd3BLV0FzSUZ3aVoxd2lLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgxY2JuMHBPMXh1WEc0b1puVnVZM1JwYjI0b0tTQjdYRzVjYm5aaGNpQmZJRDBnVjNsemFXVXVSWGh3Y21WemMybHZiaTVVWlhoMElEMGdKQzVEYkdGemN5aDdYRzVjZEdOdmJuTjBjblZqZEc5eU9pQm1kVzVqZEdsdmJpaHZLU0I3WEc1Y2RGeDBkR2hwY3k1dWIyUmxJRDBnZEdocGN5NWxiR1Z0Wlc1MElEMGdieTV1YjJSbE8xeHVYRzVjZEZ4MGFXWWdLSFJvYVhNdWJtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ015a2dlMXh1WEhSY2RGeDBkR2hwY3k1bGJHVnRaVzUwSUQwZ2RHaHBjeTV1YjJSbExuQmhjbVZ1ZEU1dlpHVTdYRzVjYmx4MFhIUmNkR2xtSUNnaGRHaHBjeTV1YjJSbExuQnlaWFpwYjNWelJXeGxiV1Z1ZEZOcFlteHBibWNnSmlZZ0lYUm9hWE11Ym05a1pTNXVaWGgwUld4bGJXVnVkRk5wWW14cGJtY3BJSHRjYmx4MFhIUmNkRngwZEdocGN5NXViMlJsSUQwZ2RHaHBjeTVsYkdWdFpXNTBPMXh1WEhSY2RGeDBYSFIwYUdsekxtVnNaVzFsYm5RdWJtOXliV0ZzYVhwbEtDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRHaHBjeTVoZEhSeWFXSjFkR1VnUFNCdkxtRjBkSEpwWW5WMFpTQjhmQ0J1ZFd4c08xeHVYSFJjZEhSb2FYTXVZV3hzSUQwZ2J5NWhiR3c3SUM4dklIUm9aU0JYZVhOcFpTNUZlSEJ5WlhOemFXOXVjeUJ2WW1wbFkzUWdkR2hoZENCMGFHbHpJR0psYkc5dVozTWdkRzljYmx4MFhIUjBhR2x6TG1WNGNISmxjM05wYjI0Z1BTQjBhR2x6TG5SbGVIUXVkSEpwYlNncE8xeHVYSFJjZEhSb2FYTXVkR1Z0Y0d4aGRHVWdQU0IwYUdsekxuUnZhMlZ1YVhwbEtIUm9hWE11Wlhod2NtVnpjMmx2YmlrN1hHNWNibHgwWEhSWGVYTnBaUzVvYjI5cmN5NXlkVzRvWENKbGVIQnlaWE56YVc5dWRHVjRkQzFwYm1sMExXVnVaRndpTENCMGFHbHpLVHRjYmx4dVhIUmNkRjh1Wld4bGJXVnVkSE11YzJWMEtIUm9hWE11Wld4bGJXVnVkQ3dnV3k0dUxpaGZMbVZzWlcxbGJuUnpMbWRsZENoMGFHbHpMbVZzWlcxbGJuUXBJSHg4SUZ0ZEtTd2dkR2hwYzEwcE8xeHVYSFI5TEZ4dVhHNWNkR2RsZENCMFpYaDBLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBhR2x6TG1GMGRISnBZblYwWlQ4Z2RHaHBjeTV1YjJSbExtZGxkRUYwZEhKcFluVjBaU2gwYUdsekxtRjBkSEpwWW5WMFpTa2dPaUIwYUdsekxtNXZaR1V1ZEdWNGRFTnZiblJsYm5RN1hHNWNkSDBzWEc1Y2JseDBjMlYwSUhSbGVIUW9kbUZzZFdVcElIdGNibHgwWEhSMGFHbHpMbTlzWkZSbGVIUWdQU0IwYUdsekxuUmxlSFE3WEc1Y2RGeDBhV1lnS0hSb2FYTXVjSEpwYldsMGFYWmxJQ1ltSUhSb2FYTXVjSEpwYldsMGFYWmxMbkJ5YjNCbGNuUjVJRDA5SUZ3aWJXRnlaMmx1WVd4ZlkyOXpkRndpS1NCN1hHNWNibHh1WEhSY2RIMWNibHgwWEhSWGVYTnBaUzVRY21sdGFYUnBkbVV1YzJWMFZtRnNkV1VvZEdocGN5NXViMlJsTENCMllXeDFaU3dnZEdocGN5NWhkSFJ5YVdKMWRHVXBPMXh1WEhSOUxGeHVYRzVjZEhWd1pHRjBaVG9nWm5WdVkzUnBiMjRvWkdGMFlTa2dlMXh1WEhSY2RIUm9hWE11ZG1Gc2RXVWdQU0JiWFR0Y2JseDBYSFIwYUdsekxtUmhkR0VnUFNCa1lYUmhPMXh1WEc1Y2RGeDBkR2hwY3k1MFpYaDBJRDBnZEdocGN5NTBaVzF3YkdGMFpTNXRZWEFvWlhod2NpQTlQaUI3WEc1Y2RGeDBYSFJwWmlBb1pYaHdjaUJwYm5OMFlXNWpaVzltSUZkNWMybGxMa1Y0Y0hKbGMzTnBiMjRwSUh0Y2JseDBYSFJjZEZ4MGRtRnlJR1Z1ZGlBOUlIdGpiMjUwWlhoME9pQjBhR2x6TENCbGVIQnlmVHRjYmx4dVhIUmNkRngwWEhSWGVYTnBaUzVvYjI5cmN5NXlkVzRvWENKbGVIQnlaWE56YVc5dWRHVjRkQzExY0dSaGRHVXRZbVZtYjNKbFpYWmhiRndpTENCbGJuWXBPMXh1WEc1Y2RGeDBYSFJjZEdWdWRpNTJZV3gxWlNBOUlHVnVkaTVsZUhCeUxtVjJZV3dvWkdGMFlTazdYRzVjYmx4MFhIUmNkRngwVjNsemFXVXVhRzl2YTNNdWNuVnVLRndpWlhod2NtVnpjMmx2Ym5SbGVIUXRkWEJrWVhSbExXRm1kR1Z5WlhaaGJGd2lMQ0JsYm5ZcE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNobGJuWXVkbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCbGJuWXVkbUZzZFdVZ1BUMDlJRzUxYkd3cElIdGNibHgwWEhSY2RGeDBYSFF2THlCRWIyN2lnSmwwSUhCeWFXNTBJSFJvYVc1bmN5QnNhV3RsSUZ3aWRXNWtaV1pwYm1Wa1hDSWdiM0lnWENKdWRXeHNYQ0pjYmx4MFhIUmNkRngwWEhSMGFHbHpMblpoYkhWbExuQjFjMmdvWENKY0lpazdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJRndpWENJN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFIwYUdsekxuWmhiSFZsTG5CMWMyZ29aVzUyTG5aaGJIVmxLVHRjYmx4dVhIUmNkRngwWEhScFppQW9kSGx3Wlc5bUlHVnVkaTUyWVd4MVpTQTlQVDBnWENKdWRXMWlaWEpjSWlBbUppQWhkR2hwY3k1aGRIUnlhV0oxZEdVcElIdGNibHgwWEhSY2RGeDBYSFJsYm5ZdWRtRnNkV1VnUFNCZkxtWnZjbTFoZEU1MWJXSmxjaWhsYm5ZdWRtRnNkV1VwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RHVnNjMlVnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWlc1MkxuWmhiSFZsS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkR1Z1ZGk1MllXeDFaU0E5SUdWdWRpNTJZV3gxWlM1cWIybHVLRndpTENCY0lpazdYRzVjZEZ4MFhIUmNkSDA3WEc1Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUdWdWRpNTJZV3gxWlR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGRHaHBjeTUyWVd4MVpTNXdkWE5vS0dWNGNISXBPMXh1WEhSY2RGeDBjbVYwZFhKdUlHVjRjSEk3WEc1Y2RGeDBmU2t1YW05cGJpaGNJbHdpS1R0Y2JseHVYSFJjZEdsbUlDaDBhR2x6TG5CeWFXMXBkR2wyWlNrZ2UxeHVYSFJjZEZ4MGFXWWdLSFJvYVhNdWRHVnRjR3hoZEdVdWJHVnVaM1JvSUQwOVBTQXhJQ1ltSUhSNWNHVnZaaUIwYUdsekxuWmhiSFZsV3pCZElEMDlQU0JjSW01MWJXSmxjbHdpS1NCN1hHNWNkRngwWEhSY2RIUm9hWE11Y0hKcGJXbDBhWFpsTG1SaGRHRjBlWEJsSUQwZ1hDSnVkVzFpWlhKY0lqdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhSMGFHbHpMblpoYkhWbElEMGdkR2hwY3k1MllXeDFaUzVxYjJsdUtGd2lYQ0lwTzF4dVhHNWNkRngwYVdZZ0tIUm9hWE11Y0hKcGJXbDBhWFpsS1NCN1hHNWNkRngwWEhScFppQW9JWFJvYVhNdVlYUjBjbWxpZFhSbEtTQjdYRzVjZEZ4MFhIUmNkRmQ1YzJsbExsQnlhVzFwZEdsMlpTNXpaWFJXWVd4MVpTaDBhR2x6TG1Wc1pXMWxiblFzSUhSb2FYTXVkbUZzZFdVc0lGd2lZMjl1ZEdWdWRGd2lLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwZEc5clpXNXBlbVU2SUdaMWJtTjBhVzl1S0hSbGJYQnNZWFJsS1NCN1hHNWNkRngwZG1GeUlISmxaMlY0SUQwZ2RHaHBjeTVsZUhCeVpYTnphVzl1VW1WblpYZzdYRzVjZEZ4MGRtRnlJRzFoZEdOb0xDQnlaWFFnUFNCYlhTd2diR0Z6ZEVsdVpHVjRJRDBnTUR0Y2JseHVYSFJjZEhKbFoyVjRMbXhoYzNSSmJtUmxlQ0E5SURBN1hHNWNibHgwWEhSM2FHbHNaU0FvS0cxaGRHTm9JRDBnY21WblpYZ3VaWGhsWXloMFpXMXdiR0YwWlNrcElDRTlQU0J1ZFd4c0tTQjdYRzVjZEZ4MFhIUXZMeUJNYVhSbGNtRnNJR0psWm05eVpTQjBhR1VnWlhod2NtVnpjMmx2Ymx4dVhIUmNkRngwYVdZZ0tHMWhkR05vTG1sdVpHVjRJRDRnYkdGemRFbHVaR1Y0S1NCN1hHNWNkRngwWEhSY2RISmxkQzV3ZFhOb0tIUmxiWEJzWVhSbExuTjFZbk4wY21sdVp5aHNZWE4wU1c1a1pYZ3NJRzFoZEdOb0xtbHVaR1Y0S1NrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RHeGhjM1JKYm1SbGVDQTlJSEpsWjJWNExteGhjM1JKYm1SbGVDQTlJRjh1Wm1sdVpFVnVaQ2gwWlcxd2JHRjBaUzV6YkdsalpTaHRZWFJqYUM1cGJtUmxlQ2twSUNzZ2JXRjBZMmd1YVc1a1pYZ2dLeUF4TzF4dVhIUmNkRngwZG1GeUlHVjRjSEpsYzNOcGIyNGdQU0IwWlcxd2JHRjBaUzV6YkdsalpTaHRZWFJqYUM1cGJtUmxlQ0FySURFc0lHeGhjM1JKYm1SbGVDQXRJREVwTzF4dVhHNWNkRngwWEhSeVpYUXVjSFZ6YUNodVpYY2dWM2x6YVdVdVJYaHdjbVZ6YzJsdmJpaGxlSEJ5WlhOemFXOXVLU2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVEdsMFpYSmhiQ0JoZENCMGFHVWdaVzVrWEc1Y2RGeDBhV1lnS0d4aGMzUkpibVJsZUNBOElIUmxiWEJzWVhSbExteGxibWQwYUNrZ2UxeHVYSFJjZEZ4MGNtVjBMbkIxYzJnb2RHVnRjR3hoZEdVdWMzVmljM1J5YVc1bktHeGhjM1JKYm1SbGVDa3BPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCeVpYUTdYRzVjZEgwc1hHNWNibHgwYkdGNmVUb2dlMzBzWEc1Y2JseDBjSEp2ZUhrNklIdGNibHgwWEhSelkyOXdaVG9nWENKaGJHeGNJaXhjYmx4MFhIUmxlSEJ5WlhOemFXOXVVbVZuWlhnNklGd2lZV3hzWENKY2JseDBmU3hjYmx4dVhIUnpkR0YwYVdNNklIdGNibHgwWEhSbGJHVnRaVzUwY3pvZ2JtVjNJRmRsWVd0TllYQW9LU3hjYmx4dVhIUmNkQzh2SUVacGJtUWdkMmhsY21VZ1lTQW9JRzl5SUZzZ2IzSWdleUJsYm1SekxseHVYSFJjZEdacGJtUkZibVE2SUdaMWJtTjBhVzl1S0dWNGNISXBJSHRjYmx4MFhIUmNkSFpoY2lCemRHRmpheUE5SUZ0ZE8xeHVYSFJjZEZ4MGRtRnlJR2x1YzJsa1pTd2dhVzV6YVdSbGN5QTlJRndpWEZ4Y0lpZGdYQ0k3WEc1Y2RGeDBYSFIyWVhJZ2IzQmxiaUE5SUZ3aUtGdDdYQ0lzSUdOc2IzTmxJRDBnWENJcFhYMWNJanRjYmx4MFhIUmNkSFpoY2lCcGMwVnpZMkZ3WlR0Y2JseHVYSFJjZEZ4MFptOXlJQ2gyWVhJZ2FUMHdPeUJsZUhCeVcybGRPeUJwS3lzcElIdGNibHgwWEhSY2RGeDBkbUZ5SUdOb1lYSWdQU0JsZUhCeVcybGRPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDaHBibk5wWkdVcElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb1kyaGhjaUE5UFQwZ2FXNXphV1JsSUNZbUlDRnBjMFZ6WTJGd1pTa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGFXNXphV1JsSUQwZ1hDSmNJanRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBaV3h6WlNCcFppQW9JV2x6UlhOallYQmxJQ1ltSUdsdWMybGtaWE11YVc1a1pYaFBaaWhqYUdGeUtTQStJQzB4S1NCN1hHNWNkRngwWEhSY2RGeDBhVzV6YVdSbElEMGdZMmhoY2p0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmxiSE5sSUdsbUlDaHZjR1Z1TG1sdVpHVjRUMllvWTJoaGNpa2dQaUF0TVNrZ2UxeHVYSFJjZEZ4MFhIUmNkSE4wWVdOckxuQjFjMmdvWTJoaGNpazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwZG1GeUlIQmxaV3NnUFNCemRHRmphMXR6ZEdGamF5NXNaVzVuZEdnZ0xTQXhYVHRjYmx4dVhIUmNkRngwWEhSY2RHbG1JQ2hqYUdGeUlEMDlQU0JqYkc5elpWdHZjR1Z1TG1sdVpHVjRUMllvY0dWbGF5bGRLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUnpkR0ZqYXk1d2IzQW9LVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJwWmlBb2MzUmhZMnN1YkdWdVozUm9JRDA5UFNBd0tTQjdYRzVjZEZ4MFhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJwYzBWelkyRndaU0E5SUdOb1lYSWdQVDBnWENKY1hGeGNYQ0k3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJwTzF4dVhIUmNkSDBzWEc1Y2JseDBYSFJzWVhwNU9pQjdYRzVjZEZ4MFhIUm1iM0p0WVhST2RXMWlaWEk2SUNncElEMCtJSHRjYmx4MFhIUmNkRngwZG1GeUlHNTFiV0psY2tadmNtMWhkQ0E5SUc1bGR5QkpiblJzTGs1MWJXSmxja1p2Y20xaGRDaGNJbVZ1TFZWVFhDSXNJSHR0WVhocGJYVnRSbkpoWTNScGIyNUVhV2RwZEhNNk1uMHBPMXh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDaDJZV3gxWlNBOVBUMGdTVzVtYVc1cGRIa2dmSHdnZG1Gc2RXVWdQVDA5SUMxSmJtWnBibWwwZVNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwTHk4Z1VISmxkSFI1SUhCeWFXNTBJR2x1Wm1sdWFYUjVYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVWdQQ0F3UHlCY0lpM2lpSjVjSWlBNklGd2k0b2llWENJN1hHNWNkRngwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUc1MWJXSmxja1p2Y20xaGRDNW1iM0p0WVhRb2RtRnNkV1VwTzF4dVhIUmNkRngwWEhSOU8xeHVYSFJjZEZ4MGZTeGNibHh1WEhSY2RGeDBjbTl2ZEVaMWJtTjBhVzl1VW1WblJYaHdPaUFvS1NBOVBpQlNaV2RGZUhBb1hDSmVQVnhjWEZ4ektpZy9PbHdpSUNzZ1YzbHphV1V1Ulhod2NtVnpjMmx2Ym5NdWNtOXZkRVoxYm1OMGFXOXVjeTVxYjJsdUtGd2lmRndpS1NBcklGd2lLVnhjWEZ3b0pGd2lMQ0JjSW1sY0lpbGNibHgwWEhSOVhHNWNkSDFjYm4wcE8xeHVYRzU5S1NncE8xeHVYRzRvWm5WdVkzUnBiMjRvS1NCN1hHNWNiblpoY2lCZklEMGdWM2x6YVdVdVJYaHdjbVZ6YzJsdmJuTWdQU0FrTGtOc1lYTnpLSHRjYmx4MFkyOXVjM1J5ZFdOMGIzSTZJR1oxYm1OMGFXOXVLSE5qYjNCbEtTQjdYRzVjZEZ4MGRHaHBjeTV6WTI5d1pTQTlJSE5qYjNCbE8xeHVYSFJjZEhSb2FYTXVjMk52Y0dVdVpYaHdjbVZ6YzJsdmJuTWdQU0IwYUdsek8xeHVYSFJjZEhSb2FYTXVZV3hzSUQwZ1cxMDdJQzh2SUdGc2JDQkZlSEJ5WlhOemFXOXVMbFJsZUhRZ2IySnFaV04wY3lCcGJpQjBhR2x6SUhOamIzQmxYRzVjYmx4MFhIUlhlWE5wWlM1b2IyOXJjeTV5ZFc0b1hDSmxlSEJ5WlhOemFXOXVjeTFwYm1sMExYTjBZWEowWENJc0lIUm9hWE1wTzF4dVhHNWNkRngwZEdocGN5NTBjbUYyWlhKelpTZ3BPMXh1WEc1Y2RGeDBMeThnVkU5RVR5QnNaWE56SUhOMGRYQnBaQ0J1WVcxbFAxeHVYSFJjZEhSb2FYTXVkWEJrWVhSbFFXeHpieUE5SUc1bGR5QlRaWFFvS1R0Y2JseDBmU3hjYmx4dVhIUnBibWwwT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhScFppQW9kR2hwY3k1aGJHd3ViR1Z1WjNSb0lENGdNQ2tnZTF4dVhIUmNkRngwZEdocGN5NXNZWE4wVlhCa1lYUmxaQ0E5SURBN1hHNWNibHgwWEhSY2RIUm9hWE11ZFhCa1lYUmxLQ2s3WEc1Y2JseDBYSFJjZEM4dklGZGhkR05vSUdOb1lXNW5aWE1nWVc1a0lIVndaR0YwWlNCMllXeDFaVnh1WEhSY2RGeDBkR2hwY3k1elkyOXdaUzVsYkdWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0ozZVhOcFpUcGtZWFJoWTJoaGJtZGxYQ0lzSUdWMmRDQTlQaUIwYUdsekxuVndaR0YwWlNncEtUdGNibHh1WEhSY2RGeDBMeThnUlc1aFlteGxJSFJvY205MGRHeHBibWNnYjI1c2VTQmhablJsY2lCaElIZG9hV3hsSUhSdklHVnVjM1Z5WlNCbGRtVnllWFJvYVc1bklHaGhjeUJwYm1sMGFXRnNiSGtnY25WdVhHNWNkRngwWEhSMGFHbHpMbFJJVWs5VVZFeEZJRDBnTUR0Y2JseHVYSFJjZEZ4MGRHaHBjeTV6WTI5d1pTNTNlWE5wWlM1M2NtRndjR1Z5TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKM2VYTnBaVHBzYjJGa1hDSXNJR1YyZENBOVBpQjdYRzVjZEZ4MFhIUmNkSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdkR2hwY3k1VVNGSlBWRlJNUlNBOUlESTFMQ0F4TURBcE8xeHVYSFJjZEZ4MGZTazdYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhHNWNkQzhxS2x4dVhIUWdLaUJWY0dSaGRHVWdZV3hzSUdWNGNISmxjM05wYjI1eklHbHVJSFJvYVhNZ2MyTnZjR1ZjYmx4MElDb3ZYRzVjZEhWd1pHRjBaVG9nWm5WdVkzUnBiMjRnWTJGc2JHVmxLQ2tnZTF4dVhIUmNkR2xtSUNoMGFHbHpMbk5qYjNCbExtbHpSR1ZzWlhSbFpDZ3BLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLSFJvYVhNdVZFaFNUMVJVVEVVZ1BpQXdLU0I3WEc1Y2RGeDBYSFIyWVhJZ1pXeGhjSE5sWkZScGJXVWdQU0J3WlhKbWIzSnRZVzVqWlM1dWIzY29LU0F0SUhSb2FYTXViR0Z6ZEZWd1pHRjBaV1E3WEc1Y2JseDBYSFJjZEdOc1pXRnlWR2x0Wlc5MWRDaGpZV3hzWldVdWRHbHRaVzkxZENrN1hHNWNibHgwWEhSY2RHbG1JQ2gwYUdsekxteGhjM1JWY0dSaGRHVmtJQ1ltSUNobGJHRndjMlZrVkdsdFpTQThJSFJvYVhNdVZFaFNUMVJVVEVVcEtTQjdYRzVjZEZ4MFhIUmNkQzh2SUZSb2NtOTBkR3hsWEc1Y2RGeDBYSFJjZEdOaGJHeGxaUzUwYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUIwYUdsekxuVndaR0YwWlNncExDQjBhR2x6TGxSSVVrOVVWRXhGSUMwZ1pXeGhjSE5sWkZScGJXVXBPMXh1WEc1Y2RGeDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUjJZWElnWlc1MklEMGdleUJqYjI1MFpYaDBPaUIwYUdsekxDQmtZWFJoT2lCMGFHbHpMbk5qYjNCbExtZGxkRkpsYkdGMGFYWmxSR0YwWVNncElIMDdYRzVjYmx4MFhIUlhlWE5wWlM1b2IyOXJjeTV5ZFc0b1hDSmxlSEJ5WlhOemFXOXVjeTExY0dSaGRHVXRjM1JoY25SY0lpd2daVzUyS1R0Y2JseHVYSFJjZENRa0tIUm9hWE11WVd4c0tTNW1iM0pGWVdOb0tISmxaaUE5UGlCeVpXWXVkWEJrWVhSbEtHVnVkaTVrWVhSaEtTazdYRzVjYmx4MFhIUnBaaUFvZEdocGN5NVVTRkpQVkZSTVJTQStJREFwSUh0Y2JseDBYSFJjZEhSb2FYTXViR0Z6ZEZWd1pHRjBaV1FnUFNCd1pYSm1iM0p0WVc1alpTNXViM2NvS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFIwYUdsekxuVndaR0YwWlVGc2MyOHVabTl5UldGamFDaGxlSEFnUFQ0Z1pYaHdMblZ3WkdGMFpTZ3BLVHRjYmx4MGZTeGNibHh1WEhSbGVIUnlZV04wT2lCbWRXNWpkR2x2YmlodWIyUmxMQ0JoZEhSeWFXSjFkR1VwSUh0Y2JseDBYSFIwYUdsekxtVjRjSEpsYzNOcGIyNVNaV2RsZUM1c1lYTjBTVzVrWlhnZ1BTQXdPMXh1WEc1Y2RGeDBhV1lnS0hSb2FYTXVaWGh3Y21WemMybHZibEpsWjJWNExuUmxjM1FvWVhSMGNtbGlkWFJsUHlCaGRIUnlhV0oxZEdVdWRtRnNkV1VnT2lCdWIyUmxMblJsZUhSRGIyNTBaVzUwS1NrZ2UxeHVYSFJjZEZ4MGRHaHBjeTVoYkd3dWNIVnphQ2h1WlhjZ1YzbHphV1V1Ulhod2NtVnpjMmx2Ymk1VVpYaDBLSHRjYmx4MFhIUmNkRngwYm05a1pTeGNibHgwWEhSY2RGeDBZWFIwY21saWRYUmxPaUJoZEhSeWFXSjFkR1VnSmlZZ1lYUjBjbWxpZFhSbExtNWhiV1VzWEc1Y2RGeDBYSFJjZEdGc2JEb2dkR2hwYzF4dVhIUmNkRngwZlNrcE8xeHVYSFJjZEgxY2JseDBmU3hjYmx4dVhIUXZMeUJVY21GMlpYSnpaU0JoYmlCbGJHVnRaVzUwTENCcGJtTnNkV1JwYm1jZ1lYUjBjbWxpZFhSbElHNXZaR1Z6TENCMFpYaDBJRzV2WkdWeklHRnVaQ0JoYkd3Z1pHVnpZMlZ1WkdGdWRITmNibHgwZEhKaGRtVnljMlU2SUdaMWJtTjBhVzl1S0c1dlpHVXBJSHRjYmx4MFhIUnViMlJsSUQwZ2JtOWtaU0I4ZkNCMGFHbHpMbk5qYjNCbExtVnNaVzFsYm5RN1hHNWNibHgwWEhScFppQW9ibTlrWlM1dFlYUmphR1Z6SUNZbUlHNXZaR1V1YldGMFkyaGxjeWhmTG1WelkyRndaU2twSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvYm05a1pTNXViMlJsVkhsd1pTQTlQVDBnTXlrZ2V5QXZMeUJVWlhoMElHNXZaR1ZjYmx4MFhIUmNkQzh2SUV4bFlXWWdibTlrWlN3Z1pYaDBjbUZqZENCeVpXWmxjbVZ1WTJWeklHWnliMjBnWTI5dWRHVnVkRnh1WEhSY2RGeDBkR2hwY3k1bGVIUnlZV04wS0c1dlpHVXNJRzUxYkd3cE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklGUnlZWFpsY25ObElHTm9hV3hrY21WdUlHRnVaQ0JoZEhSeWFXSjFkR1Z6SUdGeklHeHZibWNnWVhNZ2RHaHBjeUJwY3lCT1QxUWdkR2hsSUhKdmIzUWdiMllnWVNCamFHbHNaQ0J6WTI5d1pWeHVYSFJjZEM4dklDaHZkR2hsY25kcGMyVXNJR2wwSUhkcGJHd2dZbVVnZEdGclpXNGdZMkZ5WlNCdlppQnBkSE1nYjNkdUlFVjRjSEpsYzNOcGIyNXpJRzlpYW1WamRDbGNibHgwWEhScFppQW9ibTlrWlNBOVBTQjBhR2x6TG5OamIzQmxMbVZzWlcxbGJuUWdmSHdnSVZkNWMybGxMbWx6S0Z3aWMyTnZjR1ZjSWl3Z2JtOWtaU2twSUh0Y2JseDBYSFJjZENRa0tHNXZaR1V1WVhSMGNtbGlkWFJsY3lrdVptOXlSV0ZqYUNoaGRIUnlhV0oxZEdVZ1BUNGdkR2hwY3k1bGVIUnlZV04wS0c1dlpHVXNJR0YwZEhKcFluVjBaU2twTzF4dVhIUmNkRngwSkNRb2JtOWtaUzVqYUdsc1pFNXZaR1Z6S1M1bWIzSkZZV05vS0dOb2FXeGtJRDArSUhSb2FYTXVkSEpoZG1WeWMyVW9ZMmhwYkdRcEtUdGNibHgwWEhSOVhHNWNkSDBzWEc1Y2JseDBiR0Y2ZVRvZ2UxeHVYSFJjZEM4dklGSmxaMlY0SUhSb1lYUWdiRzl2YzJWc2VTQnRZWFJqYUdWeklHRnNiQ0J3YjNOemFXSnNaU0JsZUhCeVpYTnphVzl1YzF4dVhIUmNkQzh2SUVaaGJITmxJSEJ2YzJsMGFYWmxjeUJoY21VZ2Iyc3NJR0oxZENCbVlXeHpaU0J1WldkaGRHbDJaWE1nWVhKbElHNXZkQzVjYmx4MFhIUmxlSEJ5WlhOemFXOXVVbVZuWlhnNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBkbUZ5SUhCeWIzQmxjblI1VW1WblpYZ2dQU0JjSWlnL09sd2lJQ3NnZEdocGN5NXpZMjl3WlM1M2VYTnBaUzV3Y205d1pYSjBlVTVoYldWekxtcHZhVzRvWENKOFhDSXBJQ3NnWENJcFhDSTdYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQlNaV2RGZUhBb1cxeHVYSFJjZEZ4MFhIUmNkRndpWEZ4Y1hGdGJYRnhjWEZOY1hGeGNjMTBxUDF3aUlDc2djSEp2Y0dWeWRIbFNaV2RsZUNBcklGd2lXMXhjWEZ4VFhGeGNYSE5kS2o5Y1hGeGNYVndpTEZ4dVhIUmNkRngwWEhSY2RGd2llMXhjWEZ4ektsd2lJQ3NnY0hKdmNHVnlkSGxTWldkbGVDQXJJRndpWEZ4Y1hITXFmVndpTEZ4dVhIUmNkRngwWEhSY2RGd2lYRnhjWENSN1cxeGNYRnhUWEZ4Y1hITmRLejk5WENKY2JseDBYSFJjZEZ4MFhTNXFiMmx1S0Z3aWZGd2lLU3dnWENKbmFWd2lLVHRjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwYzNSaGRHbGpPaUI3WEc1Y2RGeDBWRWhTVDFSVVRFVTZJREFzWEc1Y2JseDBYSFJsYzJOaGNHVTZJRndpTG1sbmJtOXlaUzFsZUhCeVpYTnphVzl1YzF3aUxGeHVYRzVjZEZ4MGJHRjZlVG9nZTF4dVhIUmNkRngwY205dmRFWjFibU4wYVc5dWN6b2dLQ2tnUFQ0Z1cxeHVYSFJjZEZ4MFhIUXVMaTVQWW1wbFkzUXVhMlY1Y3loWGVYTnBaUzVHZFc1amRHbHZibk1wTEZ4dVhIUmNkRngwWEhRdUxpNVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aE5ZWFJvS1N4Y2JseDBYSFJjZEZ4MFhDSnBabHdpTENCY0lsd2lYRzVjZEZ4MFhIUmRYRzVjZEZ4MGZWeHVYSFI5WEc1OUtUdGNibHh1ZlNrb0tUdGNibHh1VjNsemFXVXVhRzl2YTNNdVlXUmtLRndpYzJOdmNHVXRhVzVwZEMxemRHRnlkRndpTENCbWRXNWpkR2x2YmlncElIdGNibHgwYm1WM0lGZDVjMmxsTGtWNGNISmxjM05wYjI1ektIUm9hWE1wTzF4dWZTazdYRzVjYmxkNWMybGxMbWh2YjJ0ekxtRmtaQ2hjSW5OamIzQmxMV2x1YVhRdFpXNWtYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFIwYUdsekxtVjRjSEpsYzNOcGIyNXpMbWx1YVhRb0tUdGNibjBwTzF4dVhHNTlLU2hDYkdsemN5d2dRbXhwYzNNdUpDazdYRzRpTENJdktpcGNiaUFxSUVaMWJtTjBhVzl1Y3lCaGRtRnBiR0ZpYkdVZ2FXNXphV1JsSUZkNWMybGxJR1Y0Y0hKbGMzTnBiMjV6WEc0Z0tpOWNibHh1S0daMWJtTjBhVzl1S0NrZ2UxeHVYRzUyWVhJZ1h5QTlJRmQ1YzJsbExrWjFibU4wYVc5dWN5QTlJSHRjYmx4MGIzQmxjbUYwYjNKek9pQjdmU3hjYmx4dVhIUXZLaXBjYmx4MElDb2dRV2RuY21WbllYUmxJSE4xYlZ4dVhIUWdLaTljYmx4MGMzVnRPaUJtZFc1amRHbHZiaWhoY25KaGVTa2dlMXh1WEhSY2RISmxkSFZ5YmlCdWRXMWlaWEp6S0dGeWNtRjVMQ0JoY21kMWJXVnVkSE1wTG5KbFpIVmpaU2dvY0hKbGRpd2dZM1Z5Y21WdWRDa2dQVDRnZTF4dVhIUmNkRngwY21WMGRYSnVJQ3R3Y21WMklDc2dLQ3RqZFhKeVpXNTBJSHg4SURBcE8xeHVYSFJjZEgwc0lEQXBPMXh1WEhSOUxGeHVYRzVjZEM4cUtseHVYSFFnS2lCQmRtVnlZV2RsSUc5bUlHRnVJR0Z5Y21GNUlHOW1JRzUxYldKbGNuTmNibHgwSUNvdlhHNWNkR0YyWlhKaFoyVTZJR1oxYm1OMGFXOXVLR0Z5Y21GNUtTQjdYRzVjZEZ4MFlYSnlZWGtnUFNCdWRXMWlaWEp6S0dGeWNtRjVMQ0JoY21kMWJXVnVkSE1wTzF4dVhHNWNkRngwY21WMGRYSnVJR0Z5Y21GNUxteGxibWQwYUNBbUppQmZMbk4xYlNoaGNuSmhlU2tnTHlCaGNuSmhlUzVzWlc1bmRHZzdYRzVjZEgwc1hHNWNibHgwTHlvcVhHNWNkQ0FxSUUxcGJpQnZaaUJoYmlCaGNuSmhlU0J2WmlCdWRXMWlaWEp6WEc1Y2RDQXFMMXh1WEhSdGFXNDZJR1oxYm1OMGFXOXVLR0Z5Y21GNUtTQjdYRzVjZEZ4MGNtVjBkWEp1SUUxaGRHZ3ViV2x1S0M0dUxtNTFiV0psY25Nb1lYSnlZWGtzSUdGeVozVnRaVzUwY3lrcE8xeHVYSFI5TEZ4dVhHNWNkQzhxS2x4dVhIUWdLaUJOWVhnZ2IyWWdZVzRnWVhKeVlYa2diMllnYm5WdFltVnljMXh1WEhRZ0tpOWNibHgwYldGNE9pQm1kVzVqZEdsdmJpaGhjbkpoZVNrZ2UxeHVYSFJjZEhKbGRIVnliaUJOWVhSb0xtMWhlQ2d1TGk1dWRXMWlaWEp6S0dGeWNtRjVMQ0JoY21kMWJXVnVkSE1wS1R0Y2JseDBmU3hjYmx4dVhIUmpiM1Z1ZERvZ1puVnVZM1JwYjI0b1lYSnlZWGtwSUh0Y2JseDBYSFJ5WlhSMWNtNGdWM2x6YVdVdWRHOUJjbkpoZVNoaGNuSmhlU2t1Wm1sc2RHVnlLR0VnUFQ0Z1lTQWhQVDBnYm5Wc2JDQW1KaUJoSUNFOVBTQm1ZV3h6WlNrdWJHVnVaM1JvTzF4dVhIUjlMRnh1WEc1Y2RISnZkVzVrT2lCbWRXNWpkR2x2YmlodWRXMHNJR1JsWTJsdFlXeHpLU0I3WEc1Y2RGeDBhV1lnS0NGdWRXMGdmSHdnSVdSbFkybHRZV3h6SUh4OElDRnBjMFpwYm1sMFpTaHVkVzBwS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnVFdGMGFDNXliM1Z1WkNodWRXMHBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlBcmJuVnRMblJ2VEc5allXeGxVM1J5YVc1bktGd2laVzR0VlZOY0lpd2dlMXh1WEhSY2RGeDBkWE5sUjNKdmRYQnBibWM2SUdaaGJITmxMRnh1WEhSY2RGeDBiV0Y0YVcxMWJVWnlZV04wYVc5dVJHbG5hWFJ6T2lCa1pXTnBiV0ZzYzF4dVhIUmNkSDBwTzF4dVhIUjlMRnh1WEc1Y2RHbG1aam9nWm5WdVkzUnBiMjRvWTI5dVpHbDBhVzl1TENCcFpuUnlkV1VzSUdsbVptRnNjMlU5WENKY0lpa2dlMXh1WEhSY2RISmxkSFZ5YmlCamIyNWthWFJwYjI0L0lHbG1kSEoxWlNBNklHbG1abUZzYzJVN1hHNWNkSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dRV1JrYVhScGIyNGdabTl5SUdWc1pXMWxiblJ6SUdGdVpDQnpZMkZzWVhKekxseHVJQ29nUVdSa2FYUnBiMjRnWW1WMGQyVmxiaUJoY25KaGVYTWdhR0Z3Y0dWdWN5QmxiR1Z0Wlc1MExYZHBjMlV1WEc0Z0tpQkJaR1JwZEdsdmJpQmlaWFIzWldWdUlITmpZV3hoY25NZ2NtVjBkWEp1Y3lCMGFHVnBjaUJ6WTJGc1lYSWdjM1Z0SUNoellXMWxJR0Z6SUNzcFhHNGdLaUJCWkdScGRHbHZiaUJpWlhSM1pXVnVJR0VnYzJOaGJHRnlJR0Z1WkNCaGJpQmhjbkpoZVNCM2FXeHNJSEpsYzNWc2RDQnBiaUIwYUdVZ2MyTmhiR0Z5SUdKbGFXNW5JR0ZrWkdWa0lIUnZJR1YyWlhKNUlHRnljbUY1SUdWc1pXMWxiblF1WEc0Z0tpQlBjbVJsY21Wa0lHSjVJSEJ5WldObFpHVnVZMlVnS0docFoyaGxjaUIwYnlCc2IzZGxjaWxjYmlBcUwxeHViM0JsY21GMGIzSW9YQ0p1YjNSY0lpd2dZU0E5UGlCaElEMCtJQ0ZoS1R0Y2JtOXdaWEpoZEc5eUtGd2liWFZzZEdsd2JIbGNJaXdnS0dFc0lHSXBJRDArSUdFZ0tpQmlMQ0I3YVdSbGJuUnBkSGs2SURFc0lITjViV0p2YkRvZ1hDSXFYQ0o5S1R0Y2JtOXdaWEpoZEc5eUtGd2laR2wyYVdSbFhDSXNJQ2hoTENCaUtTQTlQaUJoSUM4Z1lpd2dlMmxrWlc1MGFYUjVPaUF4TENCemVXMWliMnc2SUZ3aUwxd2lmU2s3WEc1dmNHVnlZWFJ2Y2loY0ltRmtaRndpTENBb1lTd2dZaWtnUFQ0Z0syRWdLeUFyWWl3Z2UzTjViV0p2YkRvZ1hDSXJYQ0o5S1R0Y2JtOXdaWEpoZEc5eUtGd2ljM1ZpZEhKaFkzUmNJaXdnS0dFc0lHSXBJRDArSUdFZ0xTQmlMQ0I3YzNsdFltOXNPaUJjSWkxY0luMHBPMXh1YjNCbGNtRjBiM0lvWENKc2RHVmNJaXdnS0dFc0lHSXBJRDArSUdFZ1BEMGdZaXdnZTNONWJXSnZiRG9nWENJOFBWd2lmU2s3WEc1dmNHVnlZWFJ2Y2loY0lteDBYQ0lzSUNoaExDQmlLU0E5UGlCaElEd2dZaXdnZTNONWJXSnZiRG9nWENJOFhDSjlLVHRjYm05d1pYSmhkRzl5S0Z3aVozUmxYQ0lzSUNoaExDQmlLU0E5UGlCaElENDlJR0lzSUh0emVXMWliMnc2SUZ3aVBqMWNJbjBwTzF4dWIzQmxjbUYwYjNJb1hDSm5kRndpTENBb1lTd2dZaWtnUFQ0Z1lTQStJR0lzSUh0emVXMWliMnc2SUZ3aVBsd2lmU2s3WEc1dmNHVnlZWFJ2Y2loY0ltVnhYQ0lzSUNoaExDQmlLU0E5UGlCaElEMDlJR0lzSUh0emVXMWliMnc2SUZ3aVBUMWNJbjBwTzF4dWIzQmxjbUYwYjNJb1hDSmhibVJjSWl3Z0tHRXNJR0lwSUQwK0lDRWhZU0FtSmlBaElXSXNJSHNnYVdSbGJuUnBkSGs2SUhSeWRXVXNJSE41YldKdmJEb2dYQ0ltSmx3aUlIMHBPMXh1YjNCbGNtRjBiM0lvWENKdmNsd2lMQ0FvWVN3Z1lpa2dQVDRnSVNGaElIeDhJQ0VoWWl3Z2V5QnBaR1Z1ZEdsMGVUb2dabUZzYzJVc0lITjViV0p2YkRvZ1hDSjhmRndpSUgwZ0tUdGNibHh1ZG1GeUlHRnNhV0Z6WlhNZ1BTQjdYRzVjZEdGMlpYSmhaMlU2SUZ3aVlYWm5YQ0lzWEc1Y2RHbG1aam9nWENKcFptWWdTVVpjSWl4Y2JseDBjM1ZpZEhKaFkzUTZJRndpYldsdWRYTmNJaXhjYmx4MGJYVnNkR2x3YkhrNklGd2liWFZzZENCd2NtOWtkV04wWENJc1hHNWNkR1JwZG1sa1pUb2dYQ0prYVhaY0lpeGNibHgwYkhRNklGd2liR1Z6YzFSb1lXNGdjMjFoYkd4bGNsd2lMRnh1WEhSbmREb2dYQ0p0YjNKbFZHaGhiaUJuY21WaGRHVnlJR2R5WldGMFpYSlVhR0Z1SUdKcFoyZGxjbHdpTEZ4dVhIUmxjVG9nWENKbGNYVmhiQ0JsY1hWaGJHbDBlVndpWEc1OU8xeHVYRzVtYjNJZ0tHNWhiV1VnYVc0Z1lXeHBZWE5sY3lrZ2UxeHVYSFJoYkdsaGMyVnpXMjVoYldWZExuTndiR2wwS0M5Y1hITXJMMmNwTG1admNrVmhZMmdvWVd4cFlYTWdQVDRnWDF0aGJHbGhjMTBnUFNCZlcyNWhiV1ZkS1R0Y2JuMWNibHh1THk4Z1RXRnJaU0JtZFc1amRHbHZiaUJ1WVcxbGN5QmpZWE5sSUdsdWMyVnVjMmwwYVhabFhHNVhlWE5wWlM1R2RXNWpkR2x2Ym5NdVgxUnlZWEFnUFNCelpXeG1MbEJ5YjNoNVB5QnVaWGNnVUhKdmVIa29YeXdnZTF4dVhIUm5aWFE2SUNobWRXNWpkR2x2Ym5Nc0lIQnliM0JsY25SNUtTQTlQaUI3WEc1Y2RGeDBhV1lnS0hCeWIzQmxjblI1SUdsdUlHWjFibU4wYVc5dWN5a2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dWMxdHdjbTl3WlhKMGVWMDdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRtRnlJSEJ5YjNCbGNuUjVUQ0E5SUhCeWIzQmxjblI1TG5SdlRHOTNaWEpEWVhObElDWW1JSEJ5YjNCbGNuUjVMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNibHgwWEhScFppQW9jSEp2Y0dWeWRIbE1JQ1ltSUdaMWJtTjBhVzl1Y3k1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1pYSjBlVXdwS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWm5WdVkzUnBiMjV6VzNCeWIzQmxjblI1VEYwN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tIQnliM0JsY25SNUlHbHVJRTFoZEdnZ2ZId2djSEp2Y0dWeWRIbE1JR2x1SUUxaGRHZ3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQk5ZWFJvVzNCeWIzQmxjblI1WFNCOGZDQk5ZWFJvVzNCeWIzQmxjblI1VEYwN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tIQnliM0JsY25SNUlHbHVJSE5sYkdZcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCelpXeG1XM0J5YjNCbGNuUjVYVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZMeUJRY21WMlpXNTBJSFZ1WkdWbWFXNWxaQ0JoZENCaGJHd2dZMjl6ZEhOY2JseDBYSFJ5WlhSMWNtNGdjSEp2Y0dWeWRIazdYRzVjZEgwc1hHNWNibHgwTHk4Z1UzVndaWElnZFdkc2VTQm9ZV05yTENCaWRYUWdiM1JvWlhKM2FYTmxJR1JoZEdFZ2FYTWdibTkwWEc1Y2RDOHZJSFJvWlNCc2IyTmhiQ0IyWVhKcFlXSnNaU0JwZENCemFHOTFiR1FnWW1Vc0lHSjFkQ0IwYUdVZ2MzUnlhVzVuSUZ3aVpHRjBZVndpWEc1Y2RDOHZJSE52SUdGc2JDQndjbTl3WlhKMGVTQnNiMjlyZFhCeklHWmhhV3d1WEc1Y2RHaGhjem9nS0daMWJtTjBhVzl1Y3l3Z2NISnZjR1Z5ZEhrcElEMCtJSEJ5YjNCbGNuUjVJQ0U5SUZ3aVpHRjBZVndpWEc1OUtTQTZJRmQ1YzJsbExrWjFibU4wYVc5dWN6dGNibHh1THlvcVhHNGdLaUJRY21sMllYUmxJR2hsYkhCbGNpQnRaWFJvYjJSelhHNGdLaTljYm1aMWJtTjBhVzl1SUc1MWJXSmxjbk1vWVhKeVlYa3NJR0Z5WjNNcElIdGNibHgwWVhKeVlYa2dQU0JCY25KaGVTNXBjMEZ5Y21GNUtHRnljbUY1S1Q4Z1lYSnlZWGtnT2lBb1lYSm5jejhnSkNRb1lYSm5jeWtnT2lCYllYSnlZWGxkS1R0Y2JseHVYSFJ5WlhSMWNtNGdZWEp5WVhrdVptbHNkR1Z5S0c1MWJXSmxjaUE5UGlBaGFYTk9ZVTRvYm5WdFltVnlLU2t1YldGd0tHNGdQVDRnSzI0cE8xeHVmVnh1WEc0dktpcGNiaUFxSUVWNGRHVnVaQ0JoSUhOallXeGhjaUJ2Y0dWeVlYUnZjaUIwYnlCaGNuSmhlWE1zSUc5eUlHRnljbUY1Y3lCaGJtUWdjMk5oYkdGeWMxeHVJQ29nVkdobElHOXdaWEpoZEdsdmJpQmlaWFIzWldWdUlHRnljbUY1Y3lCcGN5QmhjSEJzYVdWa0lHVnNaVzFsYm5RdGQybHpaUzVjYmlBcUlGUm9aU0J2Y0dWeVlYUnBiMjRnYjNCbGNtRjBhVzl1SUdKbGRIZGxaVzRnWVNCelkyRnNZWElnWVc1a0lHRnVJR0Z5Y21GNUlIZHBiR3dnY21WemRXeDBJR2x1WEc0Z0tpQjBhR1VnYjNCbGNtRjBhVzl1SUdKbGFXNW5JR0Z3Y0d4cFpXUWdZbVYwZDJWbGJpQjBhR1VnYzJOaGJHRnlJR0Z1WkNCbGRtVnllU0JoY25KaGVTQmxiR1Z0Wlc1MExseHVJQ29nUUhCaGNtRnRJRzl3SUh0R2RXNWpkR2x2Ym4wZ1ZHaGxJRzl3WlhKaGRHbHZiaUJpWlhSM1pXVnVJSFIzYnlCelkyRnNZWEp6WEc0Z0tpQkFjR0Z5WVcwZ2FXUmxiblJwZEhrZ1ZHaGxJRzl3WlhKaGRHbHZidUtBbVhNZ2FXUmxiblJwZEhrZ1pXeGxiV1Z1ZEM0Z1JHVm1ZWFZzZEhNZ2RHOGdNQzVjYmlBcUwxeHVablZ1WTNScGIyNGdiM0JsY21GMGIzSW9ibUZ0WlN3Z2IzQXNJRzhnUFNCN2ZTa2dlMXh1WEhScFppQW9iM0F1YkdWdVozUm9JRHdnTWlrZ2UxeHVYSFJjZEM4dklGVnVZWEo1SUc5d1pYSmhkRzl5WEc1Y2RGeDBjbVYwZFhKdUlHOXdaWEpoYm1RZ1BUNGdRWEp5WVhrdWFYTkJjbkpoZVNodmNHVnlZVzVrS1Q4Z2IzQmxjbUZ1WkM1dFlYQW9iM0FwSURvZ2IzQW9iM0JsY21GdVpDazdYRzVjZEgxY2JseHVYSFJwWmlBb2J5NXplVzFpYjJ3cElIdGNibHgwWEhSZkxtOXdaWEpoZEc5eWMxdHZMbk41YldKdmJGMGdQU0J1WVcxbE8xeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlGOWJibUZ0WlYwZ1BTQm1kVzVqZEdsdmJpZ3VMaTV2Y0dWeVlXNWtjeWtnZTF4dVhIUmNkR2xtSUNodmNHVnlZVzVrY3k1c1pXNW5kR2dnUFQwOUlERXBJSHRjYmx4MFhIUmNkRzl3WlhKaGJtUnpJRDBnV3k0dUxtOXdaWEpoYm1SekxDQnZMbWxrWlc1MGFYUjVYVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2IzQmxjbUZ1WkhNdWNtVmtkV05sS0NoaExDQmlLU0E5UGlCN1hHNWNkRngwWEhScFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoaUtTa2dlMXh1WEhSY2RGeDBYSFJwWmlBb2RIbHdaVzltSUc4dWFXUmxiblJwZEhrZ1BUMGdYQ0p1ZFcxaVpYSmNJaWtnZTF4dVhIUmNkRngwWEhSY2RHSWdQU0J1ZFcxaVpYSnpLR0lwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZU2twSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1cxeHVYSFJjZEZ4MFhIUmNkRngwTGk0dVlpNXRZWEFvS0c0c0lHa3BJRDArSUc5d0tHRmJhVjBnUFQwOUlIVnVaR1ZtYVc1bFpEOGdieTVwWkdWdWRHbDBlU0E2SUdGYmFWMHNJRzRwS1N4Y2JseDBYSFJjZEZ4MFhIUmNkQzR1TG1FdWMyeHBZMlVvWWk1c1pXNW5kR2dwWEc1Y2RGeDBYSFJjZEZ4MFhUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdZaTV0WVhBb2JpQTlQaUJ2Y0NoaExDQnVLU2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgxY2JseDBYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBYSFF2THlCUGNHVnlZVzVrSUdseklITmpZV3hoY2x4dVhIUmNkRngwWEhScFppQW9kSGx3Wlc5bUlHOHVhV1JsYm5ScGRIa2dQVDBnWENKdWRXMWlaWEpjSWlrZ2UxeHVYSFJjZEZ4MFhIUmNkR0lnUFNBcllqdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dFcEtTQjdYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJR0V1YldGd0tHNGdQVDRnYjNBb2Jpd2dZaWtwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCdmNDaGhMQ0JpS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcE8xeHVYSFI5TzF4dWZWeHVYRzU5S1NncE8xeHVJaXdpS0daMWJtTjBhVzl1S0NRc0lDUWtLU0I3WEc1Y2JuWmhjaUJmSUQwZ1YzbHphV1V1VTJOdmNHVWdQU0FrTGtOc1lYTnpLSHRjYmx4MFpYaDBaVzVrY3pvZ1YzbHphV1V1Vlc1cGRDeGNibHgwWTI5dWMzUnlkV04wYjNJNklHWjFibU4wYVc5dUlDaGxiR1Z0Wlc1MExDQjNlWE5wWlN3Z1kyOXNiR1ZqZEdsdmJpa2dlMXh1WEhSY2RIUm9hWE11Y0hKdmNHVnlkR2xsY3lBOUlIdDlPMXh1WEc1Y2RGeDBkR2hwY3k1elkyOXdaU0E5SUhSb2FYTTdYRzVjYmx4MFhIUlhlWE5wWlM1b2IyOXJjeTV5ZFc0b1hDSnpZMjl3WlMxcGJtbDBMWE4wWVhKMFhDSXNJSFJvYVhNcE8xeHVYRzVjZEZ4MEx5OGdVMmh2ZFd4a0lIUm9hWE1nWld4bGJXVnVkQ0JoYkhOdklHTnlaV0YwWlNCaElIQnlhVzFwZEdsMlpUOWNibHgwWEhScFppQW9WM2x6YVdVdVVISnBiV2wwYVhabExtZGxkRlpoYkhWbFFYUjBjbWxpZFhSbEtIUm9hWE11Wld4bGJXVnVkQ2twSUh0Y2JseDBYSFJjZEhaaGNpQnZZbW9nUFNCMGFHbHpMbkJ5YjNCbGNuUnBaWE5iZEdocGN5NXdjbTl3WlhKMGVWMGdQU0J1WlhjZ1YzbHphV1V1VUhKcGJXbDBhWFpsS0hSb2FYTXVaV3hsYldWdWRDd2dkR2hwY3k1M2VYTnBaU2s3WEc1Y2RGeDBYSFJ2WW1vdWMyTnZjR1VnUFNCdlltb3VjR0Z5Wlc1MFUyTnZjR1VnUFNCMGFHbHpPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU55WldGMFpTQlhlWE5wWlNCdlltcGxZM1J6SUdadmNpQmhiR3dnY0hKdmNHVnlkR2xsY3lCcGJpQjBhR2x6SUhOamIzQmxJQ2h3Y21sdGFYUnBkbVZ6SUc5eUlITmpiM0JsY3lrc1hHNWNkRngwTHk4Z1luVjBJRzV2ZENCd2NtOXdaWEowYVdWeklHbHVJR1JsYzJObGJtUmhiblFnYzJOdmNHVnpJQ2gwYUdWNUlIZHBiR3dnWW1VZ2FHRnVaR3hsWkNCaWVTQjBhR1ZwY2lCelkyOXdaU2xjYmx4MFhIUWtKQ2hYZVhOcFpTNXpaV3hsWTNSdmNuTXVjSEp2Y0dWeWRIa3NJSFJvYVhNdVpXeGxiV1Z1ZENrdVptOXlSV0ZqYUNobGJHVnRaVzUwSUQwK0lIdGNibHgwWEhSY2RIWmhjaUJ3Y205d1pYSjBlU0E5SUdWc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtGd2ljSEp2Y0dWeWRIbGNJaWs3WEc1Y2JseDBYSFJjZEdsbUlDaDBhR2x6TG1OdmJuUmhhVzV6S0dWc1pXMWxiblFwS1NCN1hHNWNkRngwWEhSY2RIWmhjaUJsZUdsemRHbHVaeUE5SUhSb2FYTXVjSEp2Y0dWeWRHbGxjMXR3Y205d1pYSjBlVjA3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLR1Y0YVhOMGFXNW5LU0I3WEc1Y2RGeDBYSFJjZEZ4MEx5OGdWSGR2SUhOamIzQmxjeUIzYVhSb0lIUm9aU0J6WVcxbElIQnliM0JsY25SNUxDQmpiMjUyWlhKMElIUnZJSE4wWVhScFl5QmpiMnhzWldOMGFXOXVYRzVjZEZ4MFhIUmNkRngwZG1GeUlHTnZiR3hsWTNScGIyNGdQU0JsZUdsemRHbHVaenRjYmx4dVhIUmNkRngwWEhSY2RHbG1JQ2doS0dWNGFYTjBhVzVuSUdsdWMzUmhibU5sYjJZZ1YzbHphV1V1UTI5c2JHVmpkR2x2YmlrcElIdGNibHgwWEhSY2RGeDBYSFJjZEdOdmJHeGxZM1JwYjI0Z1BTQnVaWGNnVjNsemFXVXVRMjlzYkdWamRHbHZiaWhsZUdsemRHbHVaeTVsYkdWdFpXNTBMQ0IwYUdsekxuZDVjMmxsS1R0Y2JseDBYSFJjZEZ4MFhIUmNkR052Ykd4bFkzUnBiMjR1Y0dGeVpXNTBVMk52Y0dVZ1BTQjBhR2x6TzF4dVhIUmNkRngwWEhSY2RGeDBkR2hwY3k1d2NtOXdaWEowYVdWelczQnliM0JsY25SNVhTQTlJR1Y0YVhOMGFXNW5MbU52Ykd4bFkzUnBiMjRnUFNCamIyeHNaV04wYVc5dU8xeHVYSFJjZEZ4MFhIUmNkRngwWTI5c2JHVmpkR2x2Ymk1aFpHUW9aWGhwYzNScGJtY3BPMXh1WEhSY2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmNkR2xtSUNnaFkyOXNiR1ZqZEdsdmJpNXRkWFJoWW14bElDWW1JRmQ1YzJsbExtbHpLRndpYlhWc2RHbHdiR1ZjSWl3Z1pXeGxiV1Z1ZENrcElIdGNibHgwWEhSY2RGeDBYSFJjZEdOdmJHeGxZM1JwYjI0dWJYVjBZV0pzWlNBOUlIUnlkV1U3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwWTI5c2JHVmpkR2x2Ymk1aFpHUW9aV3hsYldWdWRDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwTHk4Z1RtOGdaWGhwYzNScGJtY2djSEp2Y0dWeWRHbGxjeUIzYVhSb0lIUm9hWE1nYVdRc0lHNXZjbTFoYkNCallYTmxYRzVjZEZ4MFhIUmNkRngwZG1GeUlHOWlhaUE5SUZkNWMybGxMazV2WkdVdVkzSmxZWFJsS0dWc1pXMWxiblFzSUhSb2FYTXVkM2x6YVdVcE8xeHVYSFJjZEZ4MFhIUmNkRzlpYWk1elkyOXdaU0E5SUc5aWFpQnBibk4wWVc1alpXOW1JRjgvSUc5aWFpQTZJSFJvYVhNN1hHNWNibHgwWEhSY2RGeDBYSFJ2WW1vdWNHRnlaVzUwVTJOdmNHVWdQU0IwYUdsek8xeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdWNISnZjR1Z5ZEdsbGMxdHdjbTl3WlhKMGVWMGdQU0J2WW1vN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHh1WEhSY2RGZDVjMmxsTG1odmIydHpMbkoxYmloY0luTmpiM0JsTFdsdWFYUXRaVzVrWENJc0lIUm9hWE1wTzF4dVhIUjlMRnh1WEc1Y2RHZGxkQ0J3Y205d1pYSjBlVTVoYldWeklDZ3BJSHRjYmx4MFhIUnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9kR2hwY3k1d2NtOXdaWEowYVdWektUdGNibHgwZlN4Y2JseHVYSFJuWlhSRVlYUmhPaUJtZFc1amRHbHZiaWh2S1NCN1hHNWNkRngwYnlBOUlHOGdmSHdnZTMwN1hHNWNibHgwWEhSMllYSWdjbVYwSUQwZ2RHaHBjeTV6ZFhCbGNpNW5aWFJFWVhSaExtTmhiR3dvZEdocGN5d2dieWs3WEc1Y2JseDBYSFJwWmlBb2NtVjBJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCeVpYUTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBJRDBnZTMwN1hHNWNibHgwWEhSMGFHbHpMbkJ5YjNCaFoyRjBaU2h2WW1vZ1BUNGdlMXh1WEhSY2RGeDBhV1lnS0NnaGIySnFMbU52YlhCMWRHVmtJSHg4SUc4dVkyOXRjSFYwWldRcElDWW1JQ0VvYjJKcUxuQnliM0JsY25SNUlHbHVJSEpsZENrcElIdGNibHgwWEhSY2RGeDBkbUZ5SUdSaGRHRWdQU0J2WW1vdVoyVjBSR0YwWVNodktUdGNibHh1WEhSY2RGeDBYSFJwWmlBb1pHRjBZU0FoUFQwZ2JuVnNiQ0I4ZkNCdkxtNTFiR3dwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFJiYjJKcUxuQnliM0JsY25SNVhTQTlJR1JoZEdFN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHh1WEhSY2RHbG1JQ2doYnk1a2FYSjBlU2tnZTF4dVhIUmNkRngwSkM1bGVIUmxibVFvY21WMExDQjBhR2x6TG5WdWFHRnVaR3hsWkNrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJSEpsZER0Y2JseDBmU3hjYmx4dVhIUXZLaXBjYmx4MElDb2dVMlZoY21Ob0lHVnVkR2x5WlNCemRXSjBjbVZsSUdadmNpQndjbTl3WlhKMGVTd2djbVYwZFhKdUlISmxiR0YwYVhabElIWmhiSFZsWEc1Y2RDQXFJRUJ5WlhSMWNtNGdlMWQ1YzJsbExsVnVhWFI5WEc1Y2RDQXFMMXh1WEhSbWFXNWtPaUJtZFc1amRHbHZiaWh3Y205d1pYSjBlU2tnZTF4dVhIUmNkR2xtSUNoMGFHbHpMbkJ5YjNCbGNuUjVJRDA5SUhCeWIzQmxjblI1S1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9jSEp2Y0dWeWRIa2dhVzRnZEdocGN5NXdjbTl3WlhKMGFXVnpLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1d2NtOXdaWEowYVdWelczQnliM0JsY25SNVhTNW1hVzVrS0hCeWIzQmxjblI1S1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJtYjNJZ0tIWmhjaUJ3Y205d0lHbHVJSFJvYVhNdWNISnZjR1Z5ZEdsbGN5a2dlMXh1WEhSY2RGeDBkbUZ5SUhKbGRDQTlJSFJvYVhNdWNISnZjR1Z5ZEdsbGMxdHdjbTl3WFM1bWFXNWtLSEJ5YjNCbGNuUjVLVHRjYmx4dVhIUmNkRngwYVdZZ0tISmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEhCeWIzQmhaMkYwWlRvZ1puVnVZM1JwYjI0b1kyRnNiR0poWTJzcElIdGNibHgwWEhRa0xtVmhZMmdvZEdocGN5NXdjbTl3WlhKMGFXVnpMQ0FvY0hKdmNHVnlkSGtzSUc5aWFpa2dQVDRnZTF4dVhIUmNkRngwYjJKcUxtTmhiR3dvTGk0dVlYSm5kVzFsYm5SektUdGNibHgwWEhSOUtUdGNibHgwZlN4Y2JseHVYSFJ6WVhabE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnBaaUFvZEdocGN5NXdiR0ZqWldodmJHUmxjaWtnZTF4dVhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEgxY2JseHVYSFJjZEhSb2FYTXVaWFpsY2xOaGRtVmtJRDBnZEhKMVpUdGNibHgwWEhSMGFHbHpMblZ1YzJGMlpXUkRhR0Z1WjJWeklEMGdabUZzYzJVN1hHNWNkSDBzWEc1Y2JseDBaRzl1WlRvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MEpDNTFibUpwYm1Rb2RHaHBjeTVsYkdWdFpXNTBMQ0JjSWk1M2VYTnBaVHBsWkdsMFhDSXBPMXh1WEhSOUxGeHVYRzVjZEdsdGNHOXlkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwZEdocGN5NWxkbVZ5VTJGMlpXUWdQU0IwY25WbE8xeHVYSFI5TEZ4dVhHNWNkSEJ5YjNCaFoyRjBaV1E2SUZ0Y0luTmhkbVZjSWl3Z1hDSmtiMjVsWENJc0lGd2lhVzF3YjNKMFhDSXNJRndpWTJ4bFlYSmNJbDBzWEc1Y2JseDBMeThnU1c1cVpXTjBJR1JoZEdFZ2FXNGdkR2hwY3lCbGJHVnRaVzUwWEc1Y2RISmxibVJsY2pvZ1puVnVZM1JwYjI0b1pHRjBZU2tnZTF4dVhIUmNkR2xtSUNnaFpHRjBZU2tnZTF4dVhIUmNkRngwZEdocGN5NWpiR1ZoY2lncE8xeHVYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkSDFjYmx4dVhIUmNkR1JoZEdFZ1BTQmtZWFJoTG1selFYSnlZWGsvSUdSaGRHRmJNRjBnT2lCa1lYUmhPMXh1WEc1Y2RGeDBMeThnVkU5RVR5QjNhR0YwSUdsbUlHbDBJSGRoY3lCaElIQnlhVzFwZEdsMlpTQmhibVFnYm05M0lHbDBKM01nWVNCelkyOXdaVDljYmx4MFhIUXZMeUJKYmlCMGFHRjBJR05oYzJVc0lISmxibVJsY2lCMGFHVWdkR2hwY3k1d2NtOXdaWEowYVdWelczUm9hWE11Y0hKdmNHVnlkSGxkSUhkcGRHZ2dhWFJjYmx4dVhIUmNkSFJvYVhNdWRXNW9ZVzVrYkdWa0lEMGdKQzVsZUhSbGJtUW9lMzBzSUdSaGRHRXNJSEJ5YjNCbGNuUjVJRDArSUh0Y2JseDBYSFJjZEhKbGRIVnliaUFoS0hCeWIzQmxjblI1SUdsdUlIUm9hWE11Y0hKdmNHVnlkR2xsY3lrN1hHNWNkRngwZlNrN1hHNWNibHgwWEhSMGFHbHpMbkJ5YjNCaFoyRjBaU2h2WW1vZ1BUNGdlMXh1WEhSY2RGeDBiMkpxTG5KbGJtUmxjaWhrWVhSaFcyOWlhaTV3Y205d1pYSjBlVjBwTzF4dVhIUmNkSDBwTzF4dVhHNWNkRngwZEdocGN5NXpZWFpsS0NrN1hHNWNkSDBzWEc1Y2JseDBMeThnUTJobFkyc2dhV1lnZEdocGN5QnpZMjl3WlNCamIyNTBZV2x1Y3lCaElIQnliM0JsY25SNVhHNWNkQzh2SUhCeWIzQmxjblI1SUdOaGJpQmlaU0JsYVhSb1pYSWdZU0JYZVhOcFpTNVZibWwwSUc5eUlHRWdUbTlrWlZ4dVhIUmpiMjUwWVdsdWN6b2dablZ1WTNScGIyNG9jSEp2Y0dWeWRIa3BJSHRjYmx4MFhIUnBaaUFvY0hKdmNHVnlkSGtnYVc1emRHRnVZMlZ2WmlCWGVYTnBaUzVWYm1sMEtTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2NISnZjR1Z5ZEhrdWNHRnlaVzUwVTJOdmNHVWdQVDA5SUhSb2FYTTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUhCeWIzQmxjblI1TG5CaGNtVnVkRTV2WkdVZ0ppWWdLSFJvYVhNdVpXeGxiV1Z1ZENBOVBUMGdjSEp2Y0dWeWRIa3VjR0Z5Wlc1MFRtOWtaUzVqYkc5elpYTjBLRmQ1YzJsbExuTmxiR1ZqZEc5eWN5NXpZMjl3WlNrcE8xeHVYSFI5TEZ4dVhHNWNkSE4wWVhScFl6b2dlMXh1WEhSY2RHRnNiRG9nYm1WM0lGZGxZV3ROWVhBb0tTeGNibHh1WEhSY2RHNXZjbTFoYkdsNlpUb2dablZ1WTNScGIyNG9aV3hsYldWdWRDa2dlMXh1WEhSY2RGeDBMeThnUjJWMElDWWdibTl5YldGc2FYcGxJSFI1Y0dWdlppQnVZVzFsTENCcFppQmxlR2x6ZEhOY2JseDBYSFJjZEdsbUlDaFhlWE5wWlM1cGN5aGNJbk5qYjNCbFhDSXNJR1ZzWlcxbGJuUXBLU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQjBlWEJsSUQwZ1pXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVW9YQ0owZVhCbGIyWmNJaWtnZkh3Z1pXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVW9YQ0pwZEdWdGRIbHdaVndpS1NCOGZDQmNJa2wwWlcxY0lqdGNibHh1WEhSY2RGeDBYSFJsYkdWdFpXNTBMbk5sZEVGMGRISnBZblYwWlNoY0luUjVjR1Z2Wmx3aUxDQjBlWEJsS1R0Y2JseHVYSFJjZEZ4MFhIUnlaWFIxY200Z2RIbHdaVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJRzUxYkd3N1hHNWNkRngwZlZ4dVhIUjlYRzU5S1R0Y2JseHVmU2tvUW14cGMzTXNJRUpzYVhOekxpUXBPMXh1SWl3aUtHWjFibU4wYVc5dUtDUXNJQ1FrS1NCN1hHNWNibU52Ym5OMElFUkpVMEZDVEVWZlEwRkRTRVVnUFNCbVlXeHpaVHRjYmx4dWRtRnlJRjhnUFNCWGVYTnBaUzVRY21sdGFYUnBkbVVnUFNBa0xrTnNZWE56S0h0Y2JseDBaWGgwWlc1a2N6b2dWM2x6YVdVdVZXNXBkQ3hjYmx4MFkyOXVjM1J5ZFdOMGIzSTZJR1oxYm1OMGFXOXVJQ2hsYkdWdFpXNTBMQ0IzZVhOcFpTd2dZMjlzYkdWamRHbHZiaWtnZTF4dVhIUmNkQzh2SUZkb2FXTm9JR0YwZEhKcFluVjBaU0JvYjJ4a2N5QjBhR1VnWkdGMFlTd2dhV1lnWVc1NVAxeHVYSFJjZEM4dklGd2liblZzYkZ3aUlHOXlJRzUxYkd3Z1ptOXlJRzV2Ym1VZ0tHa3VaUzRnWkdGMFlTQnBjeUJwYmlCamIyNTBaVzUwS1M1Y2JseDBYSFIwYUdsekxtRjBkSEpwWW5WMFpTQTlJRjh1WjJWMFZtRnNkV1ZCZEhSeWFXSjFkR1VvZEdocGN5NWxiR1Z0Wlc1MEtUdGNibHh1WEhSY2RHbG1JQ2doZEdocGN5NWhkSFJ5YVdKMWRHVXBJSHRjYmx4MFhIUmNkSFJvYVhNdVpXeGxiV1Z1ZEM1dWIzSnRZV3hwZW1Vb0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdkx5QlhhR0YwSUdseklIUm9aU0JrWVhSaGRIbHdaVDljYmx4MFhIUjBhR2x6TG1SaGRHRjBlWEJsSUQwZ1h5NW5aWFJFWVhSaGRIbHdaU2gwYUdsekxtVnNaVzFsYm5Rc0lIUm9hWE11WVhSMGNtbGlkWFJsS1R0Y2JseHVYSFJjZEM4dklGQnlhVzFwZEdsMlpYTWdZMjl1ZEdGcGJtbHVaeUJoYmlCbGVIQnlaWE56YVc5dUlHRnpJSFJvWldseUlIWmhiSFZsSUdGeVpTQnBiWEJzYVdOcGRHeDVJR052YlhCMWRHVmtYRzVjZEZ4MGRtRnlJR1Y0Y0hKbGMzTnBiMjV6SUQwZ1YzbHphV1V1Ulhod2NtVnpjMmx2Ymk1VVpYaDBMbVZzWlcxbGJuUnpMbWRsZENoMGFHbHpMbVZzWlcxbGJuUXBPMXh1WEhSY2RIWmhjaUJsZUhCeVpYTnphVzl1VkdWNGRDQTlJR1Y0Y0hKbGMzTnBiMjV6SUNZbUlHVjRjSEpsYzNOcGIyNXpMbVpwYkhSbGNpaGxJRDArSUdVdVlYUjBjbWxpZFhSbElEMDlJSFJvYVhNdVlYUjBjbWxpZFhSbEtWc3dYVHRjYmx4dVhIUmNkR2xtSUNobGVIQnlaWE56YVc5dVZHVjRkQ2tnZTF4dVhIUmNkRngwWlhod2NtVnpjMmx2YmxSbGVIUXVjSEpwYldsMGFYWmxJRDBnZEdocGN6dGNibHgwWEhSY2RIUm9hWE11WTI5dGNIVjBaV1FnUFNCMGNuVmxPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHFLbHh1WEhSY2RDQXFJRk5sZENCMWNDQnBibkIxZENCM2FXUm5aWFJjYmx4MFhIUWdLaTljYmx4dVhIUmNkQzh2SUVWNGNHOXpaV1FnZDJsa1oyVjBjeUFvZG1semFXSnNaU0JoYkhkaGVYTXBYRzVjZEZ4MGFXWWdLRmQ1YzJsbExtbHpLRndpWm05eWJVTnZiblJ5YjJ4Y0lpd2dkR2hwY3k1bGJHVnRaVzUwS1NrZ2UxeHVYSFJjZEZ4MGRHaHBjeTVsWkdsMGIzSWdQU0IwYUdsekxtVnNaVzFsYm5RN1hHNWNibHgwWEhSY2RIUm9hWE11WldScGRDZ3BPMXh1WEhSY2RIMWNibHgwWEhRdkx5Qk9aWE4wWldRZ2QybGtaMlYwYzF4dVhIUmNkR1ZzYzJVZ2FXWWdLQ0YwYUdsekxtVmthWFJ2Y2lrZ2UxeHVYSFJjZEZ4MGRHaHBjeTVsWkdsMGIzSWdQU0FrSkNoMGFHbHpMbVZzWlcxbGJuUXVZMmhwYkdSeVpXNHBMbVpwYkhSbGNpaG1kVzVqZEdsdmJpQW9aV3dwSUh0Y2JseDBYSFJjZENBZ0lDQnlaWFIxY200Z1pXd3ViV0YwWTJobGN5aFhlWE5wWlM1elpXeGxZM1J2Y25NdVptOXliVU52Ym5SeWIyd3BJQ1ltSUNGbGJDNXRZWFJqYUdWektGZDVjMmxsTG5ObGJHVmpkRzl5Y3k1d2NtOXdaWEowZVNrN1hHNWNkRngwWEhSOUtWc3dYVHRjYmx4dVhIUmNkRngwSkM1eVpXMXZkbVVvZEdocGN5NWxaR2wwYjNJcE8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDZ2hkR2hwY3k1bGVIQnZjMlZrSUNZbUlDRjBhR2x6TG1OdmJYQjFkR1ZrS1NCN1hHNWNkRngwWEhSMGFHbHpMbmQ1YzJsbExtNWxaV1J6UldScGRDQTlJSFJ5ZFdVN1hHNWNkRngwZlZ4dVhHNWNkRngwZEdocGN5NTBaVzF3YkdGMFpWWmhiSFZsSUQwZ2RHaHBjeTUyWVd4MVpUdGNibHh1WEhSY2RIUm9hWE11WkdWbVlYVnNkQ0E5SUhSb2FYTXVaV3hsYldWdWRDNW5aWFJCZEhSeWFXSjFkR1VvWENKa1lYUmhMV1JsWm1GMWJIUmNJaWs3WEc1Y2JseDBYSFF2THlCUFluTmxjblpsSUdaMWRIVnlaU0J0ZFhSaGRHbHZibk1nZEc4Z2RHaHBjeUJ3Y205d1pYSjBlU3dnYVdZZ2NHOXpjMmxpYkdWY2JseDBYSFF2THlCUWNtOXdaWEowYVdWeklHeHBhMlVnYVc1d2RYUXVZMmhsWTJ0bFpDQnZjaUJwYm5CMWRDNTJZV3gxWlNCallXNXViM1FnWW1VZ2IySnpaWEoyWldRZ2RHaGhkQ0IzWVhsY2JseDBYSFF2THlCemJ5QjNaU0JqWVc1dWIzUWdaR1Z3Wlc1a0lHOXVJRzExZEdGMGFXOXVJRzlpYzJWeWRtVnljeUJtYjNJZ1pYWmxjbmwwYUdsdVp5QTZLRnh1WEhSY2RIUm9hWE11YjJKelpYSjJaWElnUFNCWGVYTnBaUzV2WW5ObGNuWmxLSFJvYVhNdVpXeGxiV1Z1ZEN3Z2RHaHBjeTVoZEhSeWFXSjFkR1VzSUhKbFkyOXlaQ0E5UGlCN1hHNWNkRngwWEhScFppQW9kR2hwY3k1aGRIUnlhV0oxZEdVcElIdGNibHgwWEhSY2RGeDBkbUZ5SUhaaGJIVmxJRDBnZEdocGN5NTJZV3gxWlR0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvY21WamIzSmtXM0psWTI5eVpDNXNaVzVuZEdnZ0xTQXhYUzV2YkdSV1lXeDFaU0FoUFNCMllXeDFaU2tnZTF4dVhIUmNkRngwWEhSY2RIUm9hWE11ZFhCa1lYUmxLSFpoYkhWbEtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RGeDBaV3h6WlNCcFppQW9JWFJvYVhNdWQzbHphV1V1WldScGRHbHVaeUI4ZkNCMGFHbHpMbU52YlhCMWRHVmtLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDaDBhR2x6TG05c1pGWmhiSFZsSUNFOUlIUm9hWE11ZG1Gc2RXVXBJSHRjYmx4MFhIUmNkRngwWEhSMGFHbHpMblZ3WkdGMFpTaDBhR2x6TG5aaGJIVmxLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSOVhHNWNkRngwZlN3Z2RISjFaU2s3WEc1Y2JseDBYSFJwWmlBb2RHaHBjeTVqYjIxd2RYUmxaQ0I4ZkNCMGFHbHpMbVJsWm1GMWJIUWdQVDA5SUZ3aVhDSXBJSHNnTHk4Z1lYUjBjbWxpZFhSbElHVjRhWE4wY3l3Z2JtOGdkbUZzZFdVc0lHUmxabUYxYkhRZ2FYTWdkR1Z0Y0d4aGRHVWdkbUZzZFdWY2JseDBYSFJjZEhSb2FYTXVaR1ZtWVhWc2RDQTlJSFJvYVhNdWRHVnRjR3hoZEdWV1lXeDFaVHRjYmx4MFhIUjlYRzVjZEZ4MFpXeHpaU0I3WEc1Y2RGeDBYSFJwWmlBb2RHaHBjeTVrWldaaGRXeDBJRDA5UFNCdWRXeHNLU0I3SUM4dklHRjBkSEpwWW5WMFpTQmtiMlZ6SUc1dmRDQmxlR2x6ZEZ4dVhIUmNkRngwWEhSMGFHbHpMbVJsWm1GMWJIUWdQU0IwYUdsekxtVmthWFJ2Y2o4Z2RHaHBjeTVsWkdsMGIzSldZV3gxWlNBNklIUm9hWE11Wlcxd2RIbFdZV3gxWlR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGRHaHBjeTUyWVd4MVpTQTlJSFJvYVhNdVpHVm1ZWFZzZER0Y2JseDBYSFI5WEc1Y2JseDBYSFIwYUdsekxuVndaR0YwWlNoMGFHbHpMblpoYkhWbEtUdGNibHh1WEhSY2RHbG1JQ2gwYUdsekxtTnZiR3hsWTNScGIyNHBJSHRjYmx4MFhIUmNkQzh2SUVOdmJHeGxZM1JwYjI0Z2IyWWdjSEpwYldsMGFYWmxjeXdnWkdWaGJDQjNhWFJvSUhObGRIUnBibWNnZEdWNGRFTnZiblJsYm5RZ1pYUmpJSGRwZEdodmRYUWdkR2hsSUZWSklHbHVkR1Z5Wm1WeWFXNW5MbHh1WEhSY2RGeDBkbUZ5SUhOM1lYQlZTU0E5SUdOaGJHeGlZV05ySUQwK0lIdGNibHgwWEhSY2RGeDBkR2hwY3k1MWJtOWljMlZ5ZG1Vb0tUdGNibHgwWEhSY2RGeDBkbUZ5SUhWcElEMGdKQzV5WlcxdmRtVW9KQ2hYZVhOcFpTNXpaV3hsWTNSdmNuTXVkV2tzSUhSb2FYTXVaV3hsYldWdWRDa3BPMXh1WEc1Y2RGeDBYSFJjZEhaaGNpQnlaWFFnUFNCallXeHNZbUZqYXlncE8xeHVYRzVjZEZ4MFhIUmNkQ1F1YVc1emFXUmxLSFZwTENCMGFHbHpMbVZzWlcxbGJuUXBPMXh1WEhSY2RGeDBYSFIwYUdsekxtOWljMlZ5ZG1Vb0tUdGNibHh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdjbVYwTzF4dVhIUmNkRngwZlR0Y2JseHVYSFJjZEZ4MEx5OGdTVzUwWlhKalpYQjBJR05sY25SaGFXNGdjSEp2Y0dWeWRHbGxjeUJ6YnlCMGFHRjBJR0Z1ZVNCWGVYTnBaU0JWU1NCcGJuTnBaR1VnZEdocGN5QndjbWx0YVhScGRtVWdkMmxzYkNCdWIzUWdZbVVnWkdWemRISnZlV1ZrWEc1Y2RGeDBYSFJiWENKMFpYaDBRMjl1ZEdWdWRGd2lMQ0JjSW1sdWJtVnlTRlJOVEZ3aVhTNW1iM0pGWVdOb0tIQnliM0JsY25SNUlEMCtJSHRjYmx4MFhIUmNkRngwZG1GeUlHUmxjMk55YVhCMGIzSWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtFNXZaR1V1Y0hKdmRHOTBlWEJsTENCd2NtOXdaWEowZVNrN1hHNWNibHgwWEhSY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXVaV3hsYldWdWRDd2djSEp2Y0dWeWRIa3NJSHRjYmx4MFhIUmNkRngwWEhSblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdUlITjNZWEJWU1Nnb0tTQTlQaUJrWlhOamNtbHdkRzl5TG1kbGRDNWpZV3hzS0hSb2FYTXBLVHRjYmx4MFhIUmNkRngwWEhSOUxGeHVYRzVjZEZ4MFhIUmNkRngwYzJWME9pQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwYzNkaGNGVkpLQ2dwSUQwK0lHUmxjMk55YVhCMGIzSXVjMlYwTG1OaGJHd29kR2hwY3l3Z2RtRnNkV1VwS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDBwTzF4dVhIUmNkRngwZlNrN1hHNWNkRngwZlZ4dVhHNWNkRngwZEdocGN5NXBibWwwYVdGc2FYcGxaQ0E5SUhSeWRXVTdYRzVjZEgwc1hHNWNibHgwWjJWMElIWmhiSFZsS0NrZ2UxeHVYSFJjZEdsbUlDaDBhR2x6TG1Wa2FYUnBibWNwSUh0Y2JseDBYSFJjZEhaaGNpQnlaWFFnUFNCMGFHbHpMbVZrYVhSdmNsWmhiSFZsTzF4dVhIUmNkRngwY21WMGRYSnVJSEpsZENBOVBUMGdYQ0pjSWo4Z2JuVnNiQ0E2SUhKbGREdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnWHk1blpYUldZV3gxWlNoMGFHbHpMbVZzWlcxbGJuUXNJSFJvYVhNdVlYUjBjbWxpZFhSbExDQjBhR2x6TG1SaGRHRjBlWEJsS1R0Y2JseDBmU3hjYmx4dVhIUnpaWFFnZG1Gc2RXVW9kbUZzZFdVcElIdGNibHgwWEhScFppQW9kR2hwY3k1bFpHbDBhVzVuSUNZbUlHUnZZM1Z0Wlc1MExtRmpkR2wyWlVWc1pXMWxiblFnSVQwZ2RHaHBjeTVsWkdsMGIzSXBJSHRjYmx4MFhIUmNkSFJvYVhNdVpXUnBkRzl5Vm1Gc2RXVWdQU0IyWVd4MVpUdGNibHgwWEhSOVhHNWNibHgwWEhSMGFHbHpMbTlzWkZaaGJIVmxJRDBnZEdocGN5NTJZV3gxWlR0Y2JseHVYSFJjZEdsbUlDZ2hkR2hwY3k1bFpHbDBhVzVuSUh4OElIUm9hWE11WVhSMGNtbGlkWFJsS1NCN1hHNWNkRngwWEhScFppQW9kR2hwY3k1a1lYUmhkSGx3WlNBOVBTQmNJbTUxYldKbGNsd2lJQ1ltSUNGMGFHbHpMbUYwZEhKcFluVjBaU2tnZTF4dVhIUmNkRngwWEhSZkxuTmxkRlpoYkhWbEtIUm9hWE11Wld4bGJXVnVkQ3dnZG1Gc2RXVXNJRndpWTI5dWRHVnVkRndpTENCMGFHbHpMbVJoZEdGMGVYQmxLVHRjYmx4MFhIUmNkRngwWHk1elpYUldZV3gxWlNoMGFHbHpMbVZzWlcxbGJuUXNJRmQ1YzJsbExrVjRjSEpsYzNOcGIyNHVWR1Y0ZEM1bWIzSnRZWFJPZFcxaVpYSW9kbUZzZFdVcExDQnVkV3hzTENCMGFHbHpMbVJoZEdGMGVYQmxLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmZMbk5sZEZaaGJIVmxLSFJvYVhNdVpXeGxiV1Z1ZEN3Z2RtRnNkV1VzSUhSb2FYTXVZWFIwY21saWRYUmxMQ0IwYUdsekxtUmhkR0YwZVhCbEtUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhScFppQW9WM2x6YVdVdWFYTW9YQ0ptYjNKdFEyOXVkSEp2YkZ3aUxDQjBhR2x6TG1Wc1pXMWxiblFwSUh4OElDRjBhR2x6TG1GMGRISnBZblYwWlNrZ2UxeHVYSFJjZEZ4MEx5OGdUWFYwWVhScGIyNGdiMkp6WlhKMlpYSWdkMjl1SjNRZ1kyRjBZMmdnZEdocGN5d2djMjhnZDJVZ2FHRjJaU0IwYnlCallXeHNJSFZ3WkdGMFpTQnRZVzUxWVd4c2VWeHVYSFJjZEZ4MGRHaHBjeTUxY0dSaGRHVW9kbUZzZFdVcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhSb2FYTXVkVzV6WVhabFpFTm9ZVzVuWlhNZ1BTQjBhR2x6TG5kNWMybGxMblZ1YzJGMlpXUkRhR0Z1WjJWeklEMGdkSEoxWlR0Y2JseDBmU3hjYmx4dVhIUm5aWFFnWldScGRHOXlWbUZzZFdVb0tTQjdYRzVjZEZ4MGFXWWdLSFJvYVhNdVpXUnBkRzl5S1NCN1hHNWNkRngwWEhScFppQW9kR2hwY3k1bFpHbDBiM0l1YldGMFkyaGxjeWhYZVhOcFpTNXpaV3hsWTNSdmNuTXVabTl5YlVOdmJuUnliMndwS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCZkxtZGxkRlpoYkhWbEtIUm9hWE11WldScGRHOXlMQ0IxYm1SbFptbHVaV1FzSUhSb2FYTXVaR0YwWVhSNWNHVXBPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFF2THlCcFppQjNaU2R5WlNCb1pYSmxMQ0IwYUdsekxtVmthWFJ2Y2lCcGN5QmhiaUJsYm5ScGNtVWdTRlJOVENCemRISjFZM1IxY21WY2JseDBYSFJjZEhaaGNpQnZkWFJ3ZFhRZ1BTQWtLRmQ1YzJsbExuTmxiR1ZqZEc5eWN5NXZkWFJ3ZFhRZ0t5QmNJaXdnWENJZ0t5QlhlWE5wWlM1elpXeGxZM1J2Y25NdVptOXliVU52Ym5SeWIyd3NJSFJvYVhNdVpXUnBkRzl5S1R0Y2JseHVYSFJjZEZ4MGFXWWdLRzkxZEhCMWRDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdYeTVoYkd3dWFHRnpLRzkxZEhCMWRDay9JRjh1WVd4c0xtZGxkQ2h2ZFhSd2RYUXBMblpoYkhWbElEb2dYeTVuWlhSV1lXeDFaU2h2ZFhSd2RYUXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlN4Y2JseHVYSFJ6WlhRZ1pXUnBkRzl5Vm1Gc2RXVW9kbUZzZFdVcElIdGNibHgwWEhScFppQW9kR2hwY3k1bFpHbDBiM0lwSUh0Y2JseDBYSFJjZEdsbUlDaDBhR2x6TG1Wa2FYUnZjaTV0WVhSamFHVnpLRmQ1YzJsbExuTmxiR1ZqZEc5eWN5NW1iM0p0UTI5dWRISnZiQ2twSUh0Y2JseDBYSFJjZEZ4MFh5NXpaWFJXWVd4MVpTaDBhR2x6TG1Wa2FYUnZjaXdnZG1Gc2RXVXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RDOHZJR2xtSUhkbEozSmxJR2hsY21Vc0lIUm9hWE11WldScGRHOXlJR2x6SUdGdUlHVnVkR2x5WlNCSVZFMU1JSE4wY25WamRIVnlaVnh1WEhSY2RGeDBYSFIyWVhJZ2IzVjBjSFYwSUQwZ0pDaFhlWE5wWlM1elpXeGxZM1J2Y25NdWIzVjBjSFYwSUNzZ1hDSXNJRndpSUNzZ1YzbHphV1V1YzJWc1pXTjBiM0p6TG1admNtMURiMjUwY205c0xDQjBhR2x6TG1Wa2FYUnZjaWs3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLRzkxZEhCMWRDa2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDaGZMbUZzYkM1b1lYTW9iM1YwY0hWMEtTa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFh5NWhiR3d1WjJWMEtHOTFkSEIxZENrdWRtRnNkV1VnUFNCMllXeDFaVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFJmTG5ObGRGWmhiSFZsS0c5MWRIQjFkQ3dnZG1Gc2RXVXBPMXh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseDBmU3hjYmx4dVhIUm5aWFFnWlhod2IzTmxaQ2dwSUh0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1bFpHbDBiM0lnUFQwOUlIUm9hWE11Wld4bGJXVnVkRHRjYmx4MGZTeGNibHh1WEhSblpYUkVZWFJoT2lCbWRXNWpkR2x2YmlodktTQjdYRzVjZEZ4MGJ5QTlJRzhnZkh3Z2UzMDdYRzVjYmx4MFhIUjJZWElnY21WMElEMGdkR2hwY3k1emRYQmxjaTVuWlhSRVlYUmhMbU5oYkd3b2RHaHBjeXdnYnlrN1hHNWNibHgwWEhScFppQW9jbVYwSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnlaWFE3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBkbUZ5SUhKbGRDQTlJQ0Z2TG1ScGNuUjVJQ1ltSUNGMGFHbHpMbVY0Y0c5elpXUS9JSFJvYVhNdWMyRjJaV1JXWVd4MVpTQTZJSFJvYVhNdWRtRnNkV1U3WEc1Y2JseDBYSFJwWmlBb0lXOHVaR2x5ZEhrZ0ppWWdjbVYwSUQwOVBTQmNJbHdpS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnYm5Wc2JEdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnY21WME8xeHVYSFI5TEZ4dVhHNWNkSFZ3WkdGMFpUb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzVjZEZ4MGRtRnNkV1VnUFNCMllXeDFaU0I4ZkNCMllXeDFaU0E5UFQwZ01EOGdkbUZzZFdVZ09pQmNJbHdpTzF4dVhHNWNkRngwZEdocGN5NWxiWEIwZVNBOUlIWmhiSFZsSUQwOVBTQmNJbHdpTzF4dVhHNWNkRngwYVdZZ0tIUm9hWE11YUhWdFlXNVNaV0ZrWVdKc1pTQW1KaUIwYUdsekxtRjBkSEpwWW5WMFpTa2dlMXh1WEhSY2RGeDBkR2hwY3k1bGJHVnRaVzUwTG5SbGVIUkRiMjUwWlc1MElEMGdkR2hwY3k1b2RXMWhibEpsWVdSaFlteGxLSFpoYkhWbEtUdGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9kR2hwY3k1cGJtbDBhV0ZzYVhwbFpDa2dlMXh1WEhSY2RGeDBkR2hwY3k1dmJHUldZV3gxWlNBOUlIUm9hWE11ZG1Gc2RXVTdYRzVjYmx4MFhIUmNkQ1F1Wm1seVpTaDBhR2x6TG1Wc1pXMWxiblFzSUZ3aWQzbHphV1U2WkdGMFlXTm9ZVzVuWlZ3aUxDQjdYRzVjZEZ4MFhIUmNkSEJ5YjNCbGNuUjVPaUIwYUdsekxuQnliM0JsY25SNUxGeHVYSFJjZEZ4MFhIUjJZV3gxWlRvZ2RtRnNkV1VzWEc1Y2RGeDBYSFJjZEhkNWMybGxPaUIwYUdsekxuZDVjMmxsTEZ4dVhIUmNkRngwWEhSdWIyUmxPaUIwYUdsekxGeHVYSFJjZEZ4MFhIUmthWEowZVRvZ2RHaHBjeTVsWkdsMGFXNW5MRnh1WEhSY2RGeDBYSFJoWTNScGIyNDZJRndpY0hKdmNHVnlkSGxqYUdGdVoyVmNJbHh1WEhSY2RGeDBmU2s3WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEhOaGRtVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkR2xtSUNoMGFHbHpMbkJzWVdObGFHOXNaR1Z5S1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGRHaHBjeTV6WVhabFpGWmhiSFZsSUQwZ2RHaHBjeTUyWVd4MVpUdGNibHgwWEhSMGFHbHpMbVYyWlhKVFlYWmxaQ0E5SUhSeWRXVTdYRzVjZEZ4MGRHaHBjeTUxYm5OaGRtVmtRMmhoYm1kbGN5QTlJR1poYkhObE8xeHVYSFI5TEZ4dVhHNWNkR1J2Ym1VNklHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjBhR2x6TG5WdWIySnpaWEoyWlNncE8xeHVYRzVjZEZ4MGFXWWdLSFJvYVhNdWNHOXdkWEFwSUh0Y2JseDBYSFJjZEhSb2FYTXVhR2xrWlZCdmNIVndLQ2s3WEc1Y2RGeDBmVnh1WEhSY2RHVnNjMlVnYVdZZ0tDRjBhR2x6TG1GMGRISnBZblYwWlNBbUppQWhkR2hwY3k1bGVIQnZjMlZrSUNZbUlIUm9hWE11WldScGRHbHVaeWtnZTF4dVhIUmNkRngwSkM1eVpXMXZkbVVvZEdocGN5NWxaR2wwYjNJcE8xeHVYSFJjZEZ4MGRHaHBjeTVsYkdWdFpXNTBMblJsZUhSRGIyNTBaVzUwSUQwZ2RHaHBjeTVsWkdsMGIzSldZV3gxWlR0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb0lYUm9hWE11Wlhod2IzTmxaQ2tnZTF4dVhIUmNkRngwZEdocGN5NWxaR2wwYVc1bklEMGdabUZzYzJVN1hHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1VtVjJaWEowSUhSaFlrbHVaR1Y0WEc1Y2RGeDBhV1lnS0hSb2FYTXVaV3hsYldWdWRDNWZMbVJoZEdFdWNISmxkbFJoWW1sdVpHVjRJQ0U5UFNCdWRXeHNLU0I3WEc1Y2RGeDBYSFIwYUdsekxtVnNaVzFsYm5RdWRHRmlTVzVrWlhnZ1BTQjBhR2x6TG1Wc1pXMWxiblF1WHk1a1lYUmhMbkJ5WlhaVVlXSnBibVJsZUR0Y2JseDBYSFI5WEc1Y2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSMGFHbHpMbVZzWlcxbGJuUXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtGd2lkR0ZpYVc1a1pYaGNJaWs3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBkR2hwY3k1bGJHVnRaVzUwTGw4dWRXNWlhVzVrS0Z3aUxuZDVjMmxsT21Wa2FYUWdMbmQ1YzJsbE9uQnlaV1ZrYVhRZ0xuZDVjMmxsT25Ob2IzZHdiM0IxY0Z3aUtUdGNibHh1WEhSY2RIUm9hWE11YjJKelpYSjJaU2dwTzF4dVhIUjlMRnh1WEc1Y2RISmxkbVZ5ZERvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MGFXWWdLSFJvYVhNdWRXNXpZWFpsWkVOb1lXNW5aWE1nSmlZZ2RHaHBjeTV6WVhabFpGWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MFhIUmNkQzh2SUVaSldFMUZJR2xtSUhkbElHaGhkbVVnWVNCamIyeHNaV04wYVc5dUlHOW1JSEJ5YjNCbGNuUnBaWE1nS0c1dmRDQnpZMjl3WlhNcExDQjBhR2x6SUhkcGJHd2dZMkYxYzJWY2JseDBYSFJjZEM4dklHTmhibU5sYkNCMGJ5QnViM1FnY21WdGIzWmxJRzVsZHlCMWJuTmhkbVZrSUdsMFpXMXpYRzVjZEZ4MFhIUXZMeUJVYUdseklITm9iM1ZzWkNCaVpTQm1hWGhsWkNCaWVTQm9ZVzVrYkdsdVp5QjBhR2x6SUc5dUlIUm9aU0JqYjJ4c1pXTjBhVzl1SUd4bGRtVnNMbHh1WEhSY2RGeDBkR2hwY3k1MllXeDFaU0E5SUhSb2FYTXVjMkYyWldSV1lXeDFaVHRjYmx4MFhIUmNkSFJvYVhNdWRXNXpZWFpsWkVOb1lXNW5aWE1nUFNCbVlXeHpaVHRjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwTHk4Z1VISmxjR0Z5WlNCMGJ5QmlaU0JsWkdsMFpXUmNibHgwTHk4Z1EyRnNiR1ZrSUhkb1pXNGdjbTl2ZENCbFpHbDBJR0oxZEhSdmJpQnBjeUJ3Y21WemMyVmtYRzVjZEhCeVpVVmthWFE2SUdaMWJtTjBhVzl1SUNncElIdGNibHgwWEhScFppQW9kR2hwY3k1amIyMXdkWFJsWkNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVWdGNIUjVJSEJ5YjNCbGNuUnBaWE1nYzJodmRXeGtJR0psWTI5dFpTQmxaR2wwWVdKc1pTQnBiVzFsWkdsaGRHVnNlVnh1WEhSY2RDOHZJRzkwYUdWeWQybHpaU0IwYUdWNUlHTnZkV3hrSUdKbElHbHVkbWx6YVdKc1pTRmNibHgwWEhScFppQW9kR2hwY3k1bGJYQjBlU0FtSmlBaGRHaHBjeTVoZEhSeWFXSjFkR1VwSUh0Y2JseDBYSFJjZEhSb2FYTXVaV1JwZENncE8xeHVYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkSDFjYmx4dVhIUmNkSFpoY2lCMGFXMWxjanRjYmx4dVhIUmNkSFJvYVhNdVpXeGxiV1Z1ZEM1ZkxtVjJaVzUwY3loN1hHNWNkRngwWEhRdkx5QmpiR2xqYXlCcGN5QnVaV1ZrWldRZ2RHOXZJR0psWTJGMWMyVWdhWFFnZDI5eWEzTWdkMmwwYUNCMGFHVWdhMlY1WW05aGNtUWdZWE1nZDJWc2JGeHVYSFJjZEZ4MFhDSmpiR2xqYXk1M2VYTnBaVHB3Y21WbFpHbDBYQ0k2SUdVZ1BUNGdkR2hwY3k1bFpHbDBLQ2tzWEc1Y2RGeDBYSFJjSW1adlkzVnpMbmQ1YzJsbE9uQnlaV1ZrYVhSY0lqb2daU0E5UGlCN1hHNWNkRngwWEhSY2RIUm9hWE11WldScGRDZ3BPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2hkR2hwY3k1d2IzQjFjQ2tnZTF4dVhIUmNkRngwWEhSY2RIUm9hWE11WldScGRHOXlMbVp2WTNWektDazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjSW1Oc2FXTnJMbmQ1YzJsbE9tVmthWFJjSWpvZ1pYWjBJRDArSUh0Y2JseDBYSFJjZEZ4MEx5OGdVSEpsZG1WdWRDQmtaV1poZFd4MElHRmpkR2x2Ym5NZ2QyaHBiR1VnWldScGRHbHVaMXh1WEhSY2RGeDBYSFF2THlCbExtY3VJR1p2Ykd4dmQybHVaeUJzYVc1cmN5QmxkR05jYmx4MFhIUmNkRngwYVdZZ0tDRjBhR2x6TG1WNGNHOXpaV1FwSUh0Y2JseDBYSFJjZEZ4MFhIUmxkblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDBwTzF4dVhHNWNkRngwYVdZZ0tDRjBhR2x6TG1GMGRISnBZblYwWlNrZ2UxeHVYSFJjZEZ4MGRHaHBjeTVsYkdWdFpXNTBMbDh1WlhabGJuUnpLSHRjYmx4MFhIUmNkRngwWENKdGIzVnpaV1Z1ZEdWeUxuZDVjMmxsT25CeVpXVmthWFJjSWpvZ1pTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFkyeGxZWEpVYVcxbGIzVjBLSFJwYldWeUtUdGNibHgwWEhSY2RGeDBYSFIwYVcxbGNpQTlJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdkR2hwY3k1bFpHbDBLQ2tzSURFMU1DazdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjZEZ3aWJXOTFjMlZzWldGMlpTNTNlWE5wWlRwd2NtVmxaR2wwWENJNklHVWdQVDRnZTF4dVhIUmNkRngwWEhSY2RHTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGNpazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUUxaGEyVWdaV3hsYldWdWRDQm1iMk4xYzJGaWJHVXNJSE52SUdsMElHTmhiaUJoWTNSMVlXeHNlU0J5WldObGFYWmxJR1p2WTNWelhHNWNkRngwZEdocGN5NWxiR1Z0Wlc1MExsOHVaR0YwWVM1d2NtVjJWR0ZpYVc1a1pYZ2dQU0IwYUdsekxtVnNaVzFsYm5RdVoyVjBRWFIwY21saWRYUmxLRndpZEdGaWFXNWtaWGhjSWlrN1hHNWNkRngwZEdocGN5NWxiR1Z0Wlc1MExuUmhZa2x1WkdWNElEMGdNRHRjYmx4MGZTeGNibHh1WEhRdkx5QkRZV3hzWldRZ2IyNXNlU0IwYUdVZ1ptbHljM1FnZEdsdFpTQjBhR2x6SUhCeWFXMXBkR2wyWlNCcGN5QmxaR2wwWldSY2JseDBhVzVwZEVWa2FYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFF2THlCTWFXNXJaV1FnZDJsa1oyVjBjMXh1WEhSY2RHbG1JQ2gwYUdsekxtVnNaVzFsYm5RdWFHRnpRWFIwY21saWRYUmxLRndpWkdGMFlTMXBibkIxZEZ3aUtTa2dlMXh1WEhSY2RGeDBkbUZ5SUhObGJHVmpkRzl5SUQwZ2RHaHBjeTVsYkdWdFpXNTBMbWRsZEVGMGRISnBZblYwWlNoY0ltUmhkR0V0YVc1d2RYUmNJaWs3WEc1Y2JseDBYSFJjZEdsbUlDaHpaV3hsWTNSdmNpa2dlMXh1WEhSY2RGeDBYSFIwYUdsekxtVmthWFJ2Y2lBOUlDUXVZMnh2Ym1Vb0pDaHpaV3hsWTNSdmNpa3BPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDZ2hWM2x6YVdVdWFYTW9YQ0ptYjNKdFEyOXVkSEp2YkZ3aUxDQjBhR2x6TG1Wa2FYUnZjaWtwSUh0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvSkNoWGVYTnBaUzV6Wld4bFkzUnZjbk11YjNWMGNIVjBMQ0IwYUdsekxtVmthWFJ2Y2lrcElIc2dMeThnYUdGeklHOTFkSEIxZENCbGJHVnRaVzUwUDF4dVhIUmNkRngwWEhSY2RGeDBMeThnVUhKdlkyVnpjeUJwZENCaGN5QmhJSGQ1YzJsbElHbHVjM1JoYm1ObExDQnpieUJ3Wlc5d2JHVWdZMkZ1SUhWelpTQnlaV1psY21WdVkyVnpYRzVjZEZ4MFhIUmNkRngwWEhSMGFHbHpMbVZrYVhSdmNpNXpaWFJCZEhSeWFXSjFkR1VvWENKa1lYUmhMWE4wYjNKbFhDSXNJRndpYm05dVpWd2lLVHRjYmx4MFhIUmNkRngwWEhSY2RHNWxkeUJYZVhOcFpTaDBhR2x6TG1Wa2FYUnZjaWs3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZEdocGN5NWxaR2wwYjNJZ1BTQnVkV3hzT3lBdkx5QkRZVzV1YjNRZ2RYTmxJSFJvYVhNc0lITnZjbko1SUdKeWIxeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkR2xtSUNnaGRHaHBjeTVsWkdsMGIzSXBJSHRjYmx4MFhIUmNkQzh2SUU1dklHVmthWFJ2Y2lCd2NtOTJhV1JsWkN3Z2RYTmxJR1JsWm1GMWJIUWdabTl5SUdWc1pXMWxiblFnZEhsd1pWeHVYSFJjZEZ4MEx5OGdSbWx1WkNCa1pXWmhkV3gwSUdWa2FYUnZjaUJtYjNJZ1pHRjBZWFI1Y0dWY2JseDBYSFJjZEhaaGNpQmxaR2wwYjNJZ1BTQmZMbWRsZEUxaGRHTm9LSFJvYVhNdVpXeGxiV1Z1ZEN3Z1h5NWxaR2wwYjNKektUdGNibHh1WEhSY2RGeDBhV1lnS0dWa2FYUnZjaTVqY21WaGRHVXBJSHRjYmx4MFhIUmNkRngwSkM1bGVIUmxibVFvZEdocGN5d2daV1JwZEc5eUxDQndjbTl3WlhKMGVTQTlQaUJ3Y205d1pYSjBlU0FoUFNCY0ltTnlaV0YwWlZ3aUtUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBkbUZ5SUdOeVpXRjBaU0E5SUdWa2FYUnZjaTVqY21WaGRHVWdmSHdnWldScGRHOXlPMXh1WEhSY2RGeDBkR2hwY3k1bFpHbDBiM0lnUFNBa0xtTnlaV0YwWlNna0xuUjVjR1VvWTNKbFlYUmxLU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lQeUJqY21WaGRHVXVZMkZzYkNoMGFHbHpLU0E2SUdOeVpXRjBaU2s3WEc1Y2RGeDBYSFIwYUdsekxtVmthWFJ2Y2xaaGJIVmxJRDBnZEdocGN5NTJZV3gxWlR0Y2JseDBYSFI5WEc1Y2JseDBYSFIwYUdsekxtVmthWFJ2Y2k1ZkxtVjJaVzUwY3loN1hHNWNkRngwWEhSY0ltbHVjSFYwSUdOb1lXNW5aVndpT2lCbGRuUWdQVDRnZTF4dVhIUmNkRngwWEhSMllYSWdkVzV6WVhabFpFTm9ZVzVuWlhNZ1BTQjBhR2x6TG5kNWMybGxMblZ1YzJGMlpXUkRhR0Z1WjJWek8xeHVYRzVjZEZ4MFhIUmNkSFJvYVhNdWRtRnNkV1VnUFNCMGFHbHpMbVZrYVhSdmNsWmhiSFZsTzF4dVhHNWNkRngwWEhSY2RDOHZJRVZrYVhScGJtY2daWGh3YjNObFpDQmxiR1Z0Wlc1MGN5QnZkWFJ6YVdSbElHVmthWFFnYlc5a1pTQnBjeUJwYm5OMFlXNTBiSGtnYzJGMlpXUmNibHgwWEhSY2RGeDBhV1lnS0Z4dVhIUmNkRngwWEhSY2RIUm9hWE11Wlhod2IzTmxaQ0FtSmx4dVhIUmNkRngwWEhSY2RDRjBhR2x6TG5kNWMybGxMbVZrYVhScGJtY2dKaVlnTHk4Z2JYVnpkQ0J1YjNRZ1ltVWdhVzRnWldScGRDQnRiMlJsWEc1Y2RGeDBYSFJjZENBZ0lDQjBhR2x6TG5kNWMybGxMbkJsY20xcGMzTnBiMjV6TG5OaGRtVWdKaVlnTHk4Z2JYVnpkQ0JpWlNCaFlteGxJSFJ2SUhOaGRtVmNibHgwWEhSY2RGeDBJQ0FnSUhSb2FYTXVjMk52Y0dVdVpYWmxjbE5oZG1Wa0lDOHZJRzExYzNRZ2JtOTBJR05oZFhObElIVnVjMkYyWldRZ2FYUmxiWE1nZEc4Z1ltVWdjMkYyWldSY2JseDBYSFJjZEZ4MEtTQjdYRzVjZEZ4MFhIUmNkRngwTHk4Z1ZFOUVUeUIzYUdGMElHbG1JR05vWVc1blpTQmxkbVZ1ZENCdVpYWmxjaUJtYVhKbGN6OGdWMmhoZENCcFppQjFjMlZ5WEc1Y2RGeDBYSFJjZEZ4MGRHaHBjeTUxYm5OaGRtVmtRMmhoYm1kbGN5QTlJR1poYkhObE8xeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdWQzbHphV1V1ZFc1ellYWmxaRU5vWVc1blpYTWdQU0IxYm5OaGRtVmtRMmhoYm1kbGN6dGNibHh1WEhSY2RGeDBYSFJjZEM4dklFMTFjM1FnYm05MElITmhkbVVnZEc5dklHMWhibmtnZEdsdFpYTWdLR1V1Wnk0Z2JtOTBJSGRvYVd4bElHUnlZV2RuYVc1bklHRWdjMnhwWkdWeUtWeHVYSFJjZEZ4MFhIUmNkR2xtSUNobGRuUXVkSGx3WlNBOVBTQmNJbU5vWVc1blpWd2lLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUjBhR2x6TG5OaGRtVW9LVHNnTHk4Z1UyRjJaU0JqZFhKeVpXNTBJR1ZzWlcxbGJuUmNibHh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdSRzl1NG9DWmRDQmpZV3hzSUhSb2FYTXVkM2x6YVdVdWMyRjJaU2dwSUdGeklHbDBJSGRwYkd3Z2MyRjJaU0J2ZEdobGNpQm1hV1ZzWkhNZ2RHOXZYRzVjZEZ4MFhIUmNkRngwWEhRdkx5QlhaU0J2Ym14NUlIZGhiblFnZEc4Z2MyRjJaU0JsZUhCdmMyVmtJR052Ym5SeWIyeHpMQ0J6YnlCellYWmxJR04xY25KbGJuUWdjM1JoZEhWelhHNWNkRngwWEhSY2RGeDBYSFIwYUdsekxuZDVjMmxsTG5OMGIzSmhaMlV1YzJGMlpTZ3BPMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUXZMeUJCY21VZ2RHaGxjbVVnWVc1NUlIVnVjMkYyWldRZ1kyaGhibWRsY3lCbWNtOXRJRzkwYUdWeUlIQnliM0JsY25ScFpYTS9YRzVjZEZ4MFhIUmNkRngwWEhSMGFHbHpMbmQ1YzJsbExuVnVjMkYyWldSRGFHRnVaMlZ6SUQwZ2RHaHBjeTUzZVhOcFpTNWpZV3hqZFd4aGRHVlZibk5oZG1Wa1EyaGhibWRsY3lncE8xeHVYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlN4Y2JseDBYSFJjZEZ3aVptOWpkWE5jSWpvZ1pYWjBJRDArSUh0Y2JseDBYSFJjZEZ4MGRHaHBjeTVsWkdsMGIzSXVjMlZzWldOMElDWW1JSFJvYVhNdVpXUnBkRzl5TG5ObGJHVmpkQ2dwTzF4dVhIUmNkRngwZlN4Y2JseDBYSFJjZEZ3aWEyVjVkWEJjSWpvZ1pYWjBJRDArSUh0Y2JseDBYSFJjZEZ4MGFXWWdLSFJvYVhNdWNHOXdkWEFnSmlZZ1pYWjBMbXRsZVVOdlpHVWdQVDBnTVRNZ2ZId2daWFowTG10bGVVTnZaR1VnUFQwZ01qY3BJSHRjYmx4MFhIUmNkRngwWEhScFppQW9kR2hwY3k1d2IzQjFjQzVqYjI1MFlXbHVjeWhrYjJOMWJXVnVkQzVoWTNScGRtVkZiR1Z0Wlc1MEtTa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHaHBjeTVsYkdWdFpXNTBMbVp2WTNWektDazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBaWFowTG5OMGIzQlFjbTl3WVdkaGRHbHZiaWdwTzF4dVhIUmNkRngwWEhSY2RIUm9hWE11YUdsa1pWQnZjSFZ3S0NrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMHNYRzVjZEZ4MFhIUmNJbmQ1YzJsbE9tUmhkR0ZqYUdGdVoyVmNJam9nWlhaMElEMCtJSHRjYmx4MFhIUmNkRngwYVdZZ0tHVjJkQzV3Y205d1pYSjBlU0E5UFQwZ1hDSnZkWFJ3ZFhSY0lpa2dlMXh1WEhSY2RGeDBYSFJjZEdWMmRDNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNibHgwWEhSY2RGeDBYSFFrTG1acGNtVW9kR2hwY3k1bFpHbDBiM0lzSUZ3aWFXNXdkWFJjSWlrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHgwWEhSOUtUdGNibHh1WEhSY2RHbG1JQ2hjSW5Cc1lXTmxhRzlzWkdWeVhDSWdhVzRnZEdocGN5NWxaR2wwYjNJcElIdGNibHgwWEhSY2RIUm9hWE11WldScGRHOXlMbkJzWVdObGFHOXNaR1Z5SUQwZ1hDSW9YQ0lnS3lCMGFHbHpMbXhoWW1Wc0lDc2dYQ0lwWENJN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tDRjBhR2x6TG1WNGNHOXpaV1FwSUh0Y2JseDBYSFJjZEM4dklFTnZjSGtnWVc1NUlHUmhkR0V0YVc1d2RYUXRLaUJoZEhSeWFXSjFkR1Z6SUdaeWIyMGdkR2hsSUdWc1pXMWxiblFnZEc4Z2RHaGxJR1ZrYVhSdmNseHVYSFJjZEZ4MGRtRnlJR1JoZEdGSmJuQjFkQ0E5SUM5ZVpHRjBZUzFwYm5CMWRDMHZhVHRjYmx4MFhIUmNkQ1FrS0hSb2FYTXVaV3hsYldWdWRDNWhkSFJ5YVdKMWRHVnpLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hoZEhSeWFXSjFkR1VwSUh0Y2JseDBYSFJjZEZ4MGFXWWdLR1JoZEdGSmJuQjFkQzUwWlhOMEtHRjBkSEpwWW5WMFpTNXVZVzFsS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdVpXUnBkRzl5TG5ObGRFRjBkSEpwWW5WMFpTaGhkSFJ5YVdKMWRHVXVibUZ0WlM1eVpYQnNZV05sS0dSaGRHRkpibkIxZEN3Z1hDSmNJaWtzSUdGMGRISnBZblYwWlM1MllXeDFaU2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEgwc0lIUm9hWE1wTzF4dVhHNWNkRngwWEhScFppQW9kR2hwY3k1aGRIUnlhV0oxZEdVcElIdGNibHgwWEhSY2RGeDBMeThnVTJWMElIVndJSEJ2Y0hWd1hHNWNkRngwWEhSY2RIUm9hWE11Wld4bGJXVnVkQzVqYkdGemMweHBjM1F1WVdSa0tGd2lkWE5wYm1jdGNHOXdkWEJjSWlrN1hHNWNibHgwWEhSY2RGeDBkR2hwY3k1d2IzQjFjQ0E5SUhSb2FYTXVjRzl3ZFhBZ2ZId2dKQzVqY21WaGRHVW9YQ0prYVhaY0lpd2dlMXh1WEhSY2RGeDBYSFJjZEdOc1lYTnpUbUZ0WlRvZ1hDSjNlWE5wWlMxd2IzQjFjRndpTEZ4dVhIUmNkRngwWEhSY2RHaHBaR1JsYmpvZ2RISjFaU3hjYmx4MFhIUmNkRngwWEhSamIyNTBaVzUwY3pvZ1cxeHVYSFJjZEZ4MFhIUmNkRngwZEdocGN5NXNZV0psYkNBcklGd2lPbHdpTEZ4dVhIUmNkRngwWEhSY2RGeDBkR2hwY3k1bFpHbDBiM0pjYmx4MFhIUmNkRngwWEhSZFhHNWNkRngwWEhSY2RIMHBPMXh1WEc1Y2RGeDBYSFJjZEM4dklFNXZJSEJ2YVc1MElHbHVJR2hoZG1sdVp5QmhJR1J5YjNCa2IzZHVJR2x1SUdFZ2NHOXdkWEJjYmx4MFhIUmNkRngwYVdZZ0tIUm9hWE11WldScGRHOXlMbTFoZEdOb1pYTW9YQ0p6Wld4bFkzUmNJaWtwSUh0Y2JseDBYSFJjZEZ4MFhIUjBhR2x6TG1Wa2FYUnZjaTV6YVhwbElEMGdUV0YwYUM1dGFXNG9NVEFzSUhSb2FYTXVaV1JwZEc5eUxtTm9hV3hrY21WdUxteGxibWQwYUNrN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2THlCVWIyZG5iR1VnY0c5d2RYQWdaWFpsYm5SeklDWWdiV1YwYUc5a2MxeHVYSFJjZEZ4MFhIUjJZWElnYUdsa1pVTmhiR3hpWVdOcklEMGdaWFowSUQwK0lIdGNibHgwWEhSY2RGeDBYSFJwWmlBb0lYUm9hWE11Y0c5d2RYQXVZMjl1ZEdGcGJuTW9aWFowTG5SaGNtZGxkQ2tnSmlZZ0lYUm9hWE11Wld4bGJXVnVkQzVqYjI1MFlXbHVjeWhsZG5RdWRHRnlaMlYwS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZEdocGN5NW9hV1JsVUc5d2RYQW9LVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMDdYRzVjYmx4MFhIUmNkRngwZEdocGN5NXphRzkzVUc5d2RYQWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUWtMblZ1WW1sdVpDaGJkR2hwY3k1bGJHVnRaVzUwTENCMGFHbHpMbkJ2Y0hWd1hTd2dYQ0l1ZDNsemFXVTZjMmh2ZDNCdmNIVndYQ0lwTzF4dVhIUmNkRngwWEhSY2RIUm9hWE11Y0c5d2RYQXVYeTVoWm5SbGNpaDBhR2x6TG1Wc1pXMWxiblFwTzF4dVhHNWNkRngwWEhSY2RGeDBkbUZ5SUhnZ1BTQjBhR2x6TG1Wc1pXMWxiblF1YjJabWMyVjBUR1ZtZER0Y2JseDBYSFJjZEZ4MFhIUjJZWElnZVNBOUlIUm9hWE11Wld4bGJXVnVkQzV2Wm1aelpYUlViM0FnS3lCMGFHbHpMbVZzWlcxbGJuUXViMlptYzJWMFNHVnBaMmgwTzF4dVhHNWNkRngwWEhSY2RGeDBJQzh2SUZSUFJFOGdkMmhoZENCcFppQnBkQ0JrYjJWemJ1S0FtWFFnWm1sMFAxeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdWNHOXdkWEF1WHk1emRIbHNaU2g3SUhSdmNEb2dJR0FrZTNsOWNIaGdMQ0JzWldaME9pQmdKSHQ0ZlhCNFlDQjlLVHRjYmx4dVhIUmNkRngwWEhSY2RIUm9hWE11Y0c5d2RYQXVYeTV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9YQ0pvYVdSa1pXNWNJaWs3SUM4dklIUnlhV2RuWlhJZ2RISmhibk5wZEdsdmJseHVYRzVjZEZ4MFhIUmNkRngwSkM1bGRtVnVkSE1vWkc5amRXMWxiblFzSUZ3aVptOWpkWE1nWTJ4cFkydGNJaXdnYUdsa1pVTmhiR3hpWVdOckxDQjBjblZsS1R0Y2JseDBYSFJjZEZ4MGZUdGNibHh1WEhSY2RGeDBYSFIwYUdsekxtaHBaR1ZRYjNCMWNDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RDUXVkVzVpYVc1a0tHUnZZM1Z0Wlc1MExDQmNJbVp2WTNWeklHTnNhV05yWENJc0lHaHBaR1ZEWVd4c1ltRmpheXdnZEhKMVpTazdYRzVjYmx4MFhIUmNkRngwWEhSMGFHbHpMbkJ2Y0hWd0xuTmxkRUYwZEhKcFluVjBaU2hjSW1ocFpHUmxibHdpTENCY0lsd2lLVHNnTHk4Z2RISnBaMmRsY2lCMGNtRnVjMmwwYVc5dVhHNWNibHgwWEhSY2RGeDBYSFJ6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjYmx4MFhIUmNkRngwWEhSY2RDUXVjbVZ0YjNabEtIUm9hWE11Y0c5d2RYQXBPMXh1WEhSY2RGeDBYSFJjZEgwc0lEUXdNQ2s3SUM4dklGUlBSRThnZEhKaGJuTnBkR2x2Ymkxa2RYSmhkR2x2YmlCamIzVnNaQ0J2ZG1WeWNtbGtaU0IwYUdselhHNWNibHgwWEhSY2RGeDBYSFFrTG1WMlpXNTBjeWgwYUdsekxtVnNaVzFsYm5Rc0lGd2labTlqZFhNdWQzbHphV1U2YzJodmQzQnZjSFZ3SUdOc2FXTnJMbmQ1YzJsbE9uTm9iM2R3YjNCMWNGd2lMQ0JsZG5RZ1BUNGdlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHaHBjeTV6YUc5M1VHOXdkWEFvS1R0Y2JseDBYSFJjZEZ4MFhIUjlMQ0IwY25WbEtUdGNibHgwWEhSY2RGeDBmVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvSVhSb2FYTXVjRzl3ZFhBcElIdGNibHgwWEhSY2RIUm9hWE11WldScGRHOXlMbU5zWVhOelRHbHpkQzVoWkdRb1hDSjNlWE5wWlMxbFpHbDBiM0pjSWlrN1hHNWNkRngwZlZ4dVhHNWNkRngwZEdocGN5NXBibWwwUldScGRDQTlJRzUxYkd3N1hHNWNkSDBzWEc1Y2JseDBaV1JwZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RHbG1JQ2gwYUdsekxtTnZiWEIxZEdWa0lIeDhJSFJvYVhNdVpXUnBkR2x1WnlrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkSDFjYmx4dVhIUmNkSFJvYVhNdVpXeGxiV1Z1ZEM1ZkxuVnVZbWx1WkNoY0lpNTNlWE5wWlRwd2NtVmxaR2wwWENJcE8xeHVYRzVjZEZ4MGFXWWdLSFJvYVhNdWFXNXBkRVZrYVhRcElIdGNibHgwWEhSY2RIUm9hWE11YVc1cGRFVmthWFFvS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb2RHaHBjeTV3YjNCMWNDa2dlMXh1WEhSY2RGeDBkR2hwY3k1emFHOTNVRzl3ZFhBb0tUdGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9JWFJvYVhNdVlYUjBjbWxpZFhSbEtTQjdYRzVjZEZ4MFhIUnBaaUFvZEdocGN5NWxaR2wwYjNJdWNHRnlaVzUwVG05a1pTQWhQU0IwYUdsekxtVnNaVzFsYm5RZ0ppWWdJWFJvYVhNdVpYaHdiM05sWkNrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG1Wa2FYUnZjbFpoYkhWbElEMGdkR2hwY3k1MllXeDFaVHRjYmx4MFhIUmNkRngwZEdocGN5NWxiR1Z0Wlc1MExuUmxlSFJEYjI1MFpXNTBJRDBnWENKY0lqdGNibHh1WEhSY2RGeDBYSFJwWmlBb0lYUm9hWE11Wlhod2IzTmxaQ2tnZTF4dVhIUmNkRngwWEhSY2RIUm9hWE11Wld4bGJXVnVkQzVoY0hCbGJtUkRhR2xzWkNoMGFHbHpMbVZrYVhSdmNpazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUjBhR2x6TG1Wa2FYUnBibWNnUFNCMGNuVmxPMXh1WEhSOUxDQXZMeUJsWkdsMFhHNWNibHgwWTJ4bFlYSTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSFJvYVhNdWRtRnNkV1VnUFNCMGFHbHpMbVZ0Y0hSNVZtRnNkV1U3WEc1Y2RIMHNYRzVjYmx4MGFXMXdiM0owT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhScFppQW9JWFJvYVhNdVkyOXRjSFYwWldRcElIdGNibHgwWEhSY2RIUm9hWE11ZG1Gc2RXVWdQU0IwYUdsekxuUmxiWEJzWVhSbFZtRnNkV1U3WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEhKbGJtUmxjam9nWm5WdVkzUnBiMjRvWkdGMFlTa2dlMXh1WEhSY2RHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHUmhkR0VwS1NCN1hHNWNkRngwWEhSa1lYUmhJRDBnWkdGMFlWc3dYVHNnTHk4Z1ZFOUVUeUIzYUdGMElHbHpJR2R2Ym01aElHaGhjSEJsYmlCMGJ5QjBhR1VnY21WemREOGdURzl6ZEQ5Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb2RIbHdaVzltSUdSaGRHRWdQVDA5SUZ3aWIySnFaV04wWENJcElIdGNibHgwWEhSY2RHUmhkR0VnUFNCa1lYUmhXM1JvYVhNdWNISnZjR1Z5ZEhsZE8xeHVYSFJjZEgxY2JseHVYSFJjZEhSb2FYTXVkbUZzZFdVZ1BTQmtZWFJoSUQwOVBTQjFibVJsWm1sdVpXUS9JSFJvYVhNdVpXMXdkSGxXWVd4MVpTQTZJR1JoZEdFN1hHNWNibHgwWEhSMGFHbHpMbk5oZG1Vb0tUdGNibHgwZlN4Y2JseHVYSFJtYVc1a09pQm1kVzVqZEdsdmJpaHdjbTl3WlhKMGVTa2dlMXh1WEhSY2RHbG1JQ2gwYUdsekxuQnliM0JsY25SNUlEMDlJSEJ5YjNCbGNuUjVLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBYSFI5WEc1Y2RIMHNYRzVjYmx4MGIySnpaWEoyWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFYzbHphV1V1YjJKelpYSjJaU2gwYUdsekxtVnNaVzFsYm5Rc0lIUm9hWE11WVhSMGNtbGlkWFJsTENCMGFHbHpMbTlpYzJWeWRtVnlLVHRjYmx4MGZTeGNibHh1WEhSMWJtOWljMlZ5ZG1VNklHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MFhIUjBhR2x6TG05aWMyVnlkbVZ5TG1ScGMyTnZibTVsWTNRb0tUdGNibHgwZlN4Y2JseHVYSFJzWVhwNU9pQjdYRzVjZEZ4MGJHRmlaV3c2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUZkNWMybGxMbkpsWVdSaFlteGxLSFJvYVhNdWNISnZjR1Z5ZEhrcE8xeHVYSFJjZEgwc1hHNWNibHgwWEhSbGJYQjBlVlpoYkhWbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkSE4zYVhSamFDQW9kR2hwY3k1a1lYUmhkSGx3WlNrZ2UxeHVYSFJjZEZ4MFhIUmpZWE5sSUZ3aVltOXZiR1ZoYmx3aU9seHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBYSFJjZEZ4MFkyRnpaU0JjSW01MWJXSmxjbHdpT2x4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlBd08xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnlaWFIxY200Z1hDSmNJanRjYmx4MFhIUjlYRzVjZEgwc1hHNWNibHgwYkdsMlpUb2dlMXh1WEhSY2RHVnRjSFI1T2lCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dVhIUmNkRngwZG1GeUlHaHBaR1VnUFNBb2RtRnNkV1VnUFQwOUlGd2lYQ0lnZkh3Z2RtRnNkV1VnUFQwOUlHNTFiR3dwSUNZbUlDRW9kR2hwY3k1aGRIUnlhV0oxZEdVZ0ppWWdKQ2hYZVhOcFpTNXpaV3hsWTNSdmNuTXVjSEp2Y0dWeWRIa3NJSFJvYVhNdVpXeGxiV1Z1ZENrcE8xeHVYSFJjZEZ4MGRHaHBjeTVsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9YQ0psYlhCMGVWd2lMQ0JvYVdSbEtUdGNibHgwWEhSOUxGeHVYRzVjZEZ4MFpXUnBkR2x1WnpvZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNWNkRngwWEhSMGFHbHpMbVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMblJ2WjJkc1pTaGNJbVZrYVhScGJtZGNJaXdnZG1Gc2RXVXBPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUmpiMjF3ZFhSbFpEb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzVjZEZ4MFhIUjBhR2x6TG1Wc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2hjSW1OdmJYQjFkR1ZrWENJc0lIWmhiSFZsS1R0Y2JseDBYSFI5TEZ4dVhHNWNkRngwWkdGMFlYUjVjR1U2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dVhIUmNkRngwTHk4Z1VIVnlaMlVnWTJGamFHVnpJR2xtSUdSaGRHRjBlWEJsSUdOb1lXNW5aWE5jYmx4MFhIUmNkR2xtSUNoZkxtZGxkRlpoYkhWbExtTmhZMmhsS1NCN1hHNWNkRngwWEhSY2RGOHVaMlYwVm1Gc2RXVXVZMkZqYUdVdVpHVnNaWFJsS0hSb2FYTXVaV3hsYldWdWRDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhHNWNkSE4wWVhScFl6b2dlMXh1WEhSY2RHRnNiRG9nYm1WM0lGZGxZV3ROWVhBb0tTeGNibHh1WEhSY2RHZGxkRTFoZEdOb09pQm1kVzVqZEdsdmJpQW9aV3hsYldWdWRDd2dZV3hzS1NCN1hHNWNkRngwWEhRdkx5QlVUMFJQSUhOd1pXTnBabWxqYVhSNVhHNWNkRngwWEhSMllYSWdjbVYwSUQwZ2JuVnNiRHRjYmx4dVhIUmNkRngwWm05eUlDaDJZWElnYzJWc1pXTjBiM0lnYVc0Z1lXeHNLU0I3WEc1Y2RGeDBYSFJjZEdsbUlDaGxiR1Z0Wlc1MExtMWhkR05vWlhNb2MyVnNaV04wYjNJcEtTQjdYRzVjZEZ4MFhIUmNkRngwY21WMElEMGdZV3hzVzNObGJHVmpkRzl5WFR0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnlaWFIxY200Z2NtVjBPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUm5aWFJXWVd4MVpVRjBkSEpwWW5WMFpUb2dablZ1WTNScGIyNGdZMkZzYkdWbEtHVnNaVzFsYm5RcElIdGNibHgwWEhSY2RIWmhjaUJ5WlhRZ1BTQW9ZMkZzYkdWbExtTmhZMmhsSUQwZ1kyRnNiR1ZsTG1OaFkyaGxJSHg4SUc1bGR5QlhaV0ZyVFdGd0tDa3BMbWRsZENobGJHVnRaVzUwS1R0Y2JseHVYSFJjZEZ4MGFXWWdLSEpsZENBOVBUMGdkVzVrWldacGJtVmtJSHg4SUVSSlUwRkNURVZmUTBGRFNFVXBJSHRjYmx4MFhIUmNkRngwY21WMElEMGdaV3hsYldWdWRDNW5aWFJCZEhSeWFXSjFkR1VvWENKa1lYUmhMV0YwZEhKcFluVjBaVndpS1NCOGZDQmZMbWRsZEUxaGRHTm9LR1ZzWlcxbGJuUXNJRjh1WVhSMGNtbGlkWFJsY3lrN1hHNWNibHgwWEhSY2RGeDBMeThnVkU5RVR5QnlaV1poWTNSdmNpQjBhR2x6WEc1Y2RGeDBYSFJjZEdsbUlDaHlaWFFwSUh0Y2JseDBYSFJjZEZ4MFhIUnBaaUFvY21WMExtaDFiV0Z1VW1WaFpHRmliR1VnSmlZZ1h5NWhiR3d1YUdGektHVnNaVzFsYm5RcEtTQjdYRzVjZEZ4MFhIUmNkRngwWEhSZkxtRnNiQzVuWlhRb1pXeGxiV1Z1ZENrdWFIVnRZVzVTWldGa1lXSnNaU0E5SUhKbGRDNW9kVzFoYmxKbFlXUmhZbXhsTzF4dVhIUmNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJjZEhKbGRDQTlJSEpsZEM1MllXeDFaU0I4ZkNCeVpYUTdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhScFppQW9JWEpsZENCOGZDQnlaWFFnUFQwOUlGd2liblZzYkZ3aUtTQjdYRzVjZEZ4MFhIUmNkRngwY21WMElEMGdiblZzYkR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkR05oYkd4bFpTNWpZV05vWlM1elpYUW9aV3hsYldWdWRDd2djbVYwS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGNtVjBkWEp1SUhKbGREdGNibHgwWEhSOUxGeHVYRzVjZEZ4MFoyVjBSR0YwWVhSNWNHVTZJR1oxYm1OMGFXOXVJR05oYkd4bFpTQW9aV3hsYldWdWRDd2dZWFIwY21saWRYUmxLU0I3WEc1Y2RGeDBYSFIyWVhJZ2NtVjBJRDBnS0dOaGJHeGxaUzVqWVdOb1pTQTlJR05oYkd4bFpTNWpZV05vWlNCOGZDQnVaWGNnVjJWaGEwMWhjQ2dwS1M1blpYUW9aV3hsYldWdWRDazdYRzVjYmx4MFhIUmNkR2xtSUNoeVpYUWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQkVTVk5CUWt4RlgwTkJRMGhGS1NCN1hHNWNkRngwWEhSY2RISmxkQ0E5SUdWc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtGd2laR0YwWVhSNWNHVmNJaWs3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLQ0Z5WlhRcElIdGNibHgwWEhSY2RGeDBYSFJtYjNJZ0tIWmhjaUJ6Wld4bFkzUnZjaUJwYmlCZkxtUmhkR0YwZVhCbGN5a2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGFXWWdLR1ZzWlcxbGJuUXViV0YwWTJobGN5aHpaV3hsWTNSdmNpa3BJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBjbVYwSUQwZ1h5NWtZWFJoZEhsd1pYTmJjMlZzWldOMGIzSmRXMkYwZEhKcFluVjBaVjA3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBjbVYwSUQwZ2NtVjBJSHg4SUZ3aWMzUnlhVzVuWENJN1hHNWNibHgwWEhSY2RGeDBZMkZzYkdWbExtTmhZMmhsTG5ObGRDaGxiR1Z0Wlc1MExDQnlaWFFwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSeVpYUjFjbTRnY21WME8xeHVYSFJjZEgwc1hHNWNibHgwWEhSblpYUldZV3gxWlRvZ1puVnVZM1JwYjI0Z1kyRnNiR1ZsS0dWc1pXMWxiblFzSUdGMGRISnBZblYwWlN3Z1pHRjBZWFI1Y0dVcElIdGNibHgwWEhSY2RIWmhjaUJuWlhSMFpYSWdQU0FvWTJGc2JHVmxMbU5oWTJobElEMGdZMkZzYkdWbExtTmhZMmhsSUh4OElHNWxkeUJYWldGclRXRndLQ2twTG1kbGRDaGxiR1Z0Wlc1MEtUdGNibHh1WEhSY2RGeDBhV1lnS0NGblpYUjBaWElnZkh3Z1JFbFRRVUpNUlY5RFFVTklSU2tnZTF4dVhIUmNkRngwWEhSaGRIUnlhV0oxZEdVZ1BTQmhkSFJ5YVdKMWRHVWdmSHdnWVhSMGNtbGlkWFJsSUQwOVBTQnVkV3hzUHlCaGRIUnlhV0oxZEdVZ09pQmZMbWRsZEZaaGJIVmxRWFIwY21saWRYUmxLR1ZzWlcxbGJuUXBPMXh1WEhSY2RGeDBYSFJrWVhSaGRIbHdaU0E5SUdSaGRHRjBlWEJsSUh4OElGOHVaMlYwUkdGMFlYUjVjR1VvWld4bGJXVnVkQ3dnWVhSMGNtbGlkWFJsS1R0Y2JseHVYSFJjZEZ4MFhIUm5aWFIwWlhJZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwWEhSMllYSWdjbVYwTzF4dVhHNWNkRngwWEhSY2RGeDBhV1lnS0dGMGRISnBZblYwWlNCcGJpQmxiR1Z0Wlc1MElDWW1JRjh1ZFhObFVISnZjR1Z5ZEhrb1pXeGxiV1Z1ZEN3Z1lYUjBjbWxpZFhSbEtTa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MEx5OGdVbVYwZFhKdWFXNW5JSEJ5YjNCbGNuUnBaWE1nS0dsbUlIUm9aWGtnWlhocGMzUXBJR2x1YzNSbFlXUWdiMllnWVhSMGNtbGlkWFJsYzF4dVhIUmNkRngwWEhSY2RGeDBMeThnYVhNZ2JtVmxaR1ZrSUdadmNpQmtlVzVoYldsaklHVnNaVzFsYm5SeklITjFZMmdnWVhNZ1kyaGxZMnRpYjNobGN5d2djMnhwWkdWeWN5QmxkR05jYmx4MFhIUmNkRngwWEhSY2RISmxkQ0E5SUdWc1pXMWxiblJiWVhSMGNtbGlkWFJsWFR0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwWld4elpTQnBaaUFvWVhSMGNtbGlkWFJsS1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ5WlhRZ1BTQmxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2hoZEhSeWFXSjFkR1VwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBYSFJjZEhKbGRDQTlJR1ZzWlcxbGJuUXVaMlYwUVhSMGNtbGlkWFJsS0Z3aVkyOXVkR1Z1ZEZ3aUtTQjhmQ0JsYkdWdFpXNTBMblJsZUhSRGIyNTBaVzUwSUh4OElHNTFiR3c3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkRngwYzNkcGRHTm9JQ2hrWVhSaGRIbHdaU2tnZTF4dVhIUmNkRngwWEhSY2RGeDBZMkZ6WlNCY0ltNTFiV0psY2x3aU9pQnlaWFIxY200Z0szSmxkRHRjYmx4MFhIUmNkRngwWEhSY2RHTmhjMlVnWENKaWIyOXNaV0Z1WENJNklISmxkSFZ5YmlBaElYSmxkRHRjYmx4MFhIUmNkRngwWEhSY2RHUmxabUYxYkhRNklISmxkSFZ5YmlCeVpYUTdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOU8xeHVYRzVjZEZ4MFhIUmNkR05oYkd4bFpTNWpZV05vWlM1elpYUW9aV3hsYldWdWRDd2daMlYwZEdWeUtUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlHZGxkSFJsY2lncE8xeHVYSFJjZEgwc1hHNWNibHgwWEhSelpYUldZV3gxWlRvZ1puVnVZM1JwYjI0Z1kyRnNiR1ZsS0dWc1pXMWxiblFzSUhaaGJIVmxMQ0JoZEhSeWFXSjFkR1VwSUh0Y2JseDBYSFJjZEdsbUlDaGhkSFJ5YVdKMWRHVWdJVDA5SUc1MWJHd3BJSHRjYmx4MFhIUmNkRngwWVhSMGNtbGlkWFJsSUQwZ1lYUjBjbWxpZFhSbElIeDhJQ0JmTG1kbGRGWmhiSFZsUVhSMGNtbGlkWFJsS0dWc1pXMWxiblFwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhScFppQW9ZWFIwY21saWRYUmxJR2x1SUdWc1pXMWxiblFnSmlZZ1h5NTFjMlZRY205d1pYSjBlU2hsYkdWdFpXNTBMQ0JoZEhSeWFXSjFkR1VwSUNZbUlHVnNaVzFsYm5SYllYUjBjbWxpZFhSbFhTQWhQU0IyWVd4MVpTa2dlMXh1WEhSY2RGeDBYSFF2THlCVFpYUjBhVzVuSUhCeWIzQmxjblJwWlhNZ0tHbG1JSFJvWlhrZ1pYaHBjM1FwSUdsdWMzUmxZV1FnYjJZZ1lYUjBjbWxpZFhSbGMxeHVYSFJjZEZ4MFhIUXZMeUJwY3lCdVpXVmtaV1FnWm05eUlHUjVibUZ0YVdNZ1pXeGxiV1Z1ZEhNZ2MzVmphQ0JoY3lCamFHVmphMkp2ZUdWekxDQnpiR2xrWlhKeklHVjBZMXh1WEhSY2RGeDBYSFIwY25rZ2UxeHVYSFJjZEZ4MFhIUmNkR1ZzWlcxbGJuUmJZWFIwY21saWRYUmxYU0E5SUhaaGJIVmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEdOaGRHTm9JQ2hsS1NCN2ZWeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJUWlhRZ1lYUjBjbWxpZFhSbElHRnVlWGRoZVN3Z1pYWmxiaUJwWmlCM1pTQnpaWFFnWVNCd2NtOXdaWEowZVNCaVpXTmhkWE5sSUhkb1pXNWNibHgwWEhSY2RDOHZJSFJvWlhrbmNtVWdibTkwSUdsdUlITjVibU1nYVhRZ1oyVjBjeUJ5WldGc2JIa2dablZqYTJsdVp5QmpiMjVtZFhOcGJtY3VYRzVjZEZ4MFhIUnBaaUFvWVhSMGNtbGlkWFJsS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2hsYkdWdFpXNTBMbWRsZEVGMGRISnBZblYwWlNoaGRIUnlhV0oxZEdVcElDRTlJSFpoYkhWbEtTQjdJQzh2SUdsdWRHVnVkR2x2Ym1Gc2JIa2dibTl1TFhOMGNtbGpkQ3dnWlM1bkxpQmNJak11WENJZ0lUMDlJRE5jYmx4MFhIUmNkRngwWEhSbGJHVnRaVzUwTG5ObGRFRjBkSEpwWW5WMFpTaGhkSFJ5YVdKMWRHVXNJSFpoYkhWbEtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RHVnNaVzFsYm5RdWRHVjRkRU52Ym5SbGJuUWdQU0IyWVd4MVpUdGNibHgwWEhSY2RIMWNibHgwWEhSOUxGeHVYRzVjZEZ4MEx5b3FYRzVjZEZ4MElDb2dJRk5sZEM5blpYUWdZU0J3Y205d1pYSjBlU0J2Y2lCaGJpQmhkSFJ5YVdKMWRHVS9YRzVjZEZ4MElDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMGdkSEoxWlNCMGJ5QjFjMlVnWVNCd2NtOXdaWEowZVN3Z1ptRnNjMlVnZEc4Z2RYTmxJSFJvWlNCaGRIUnlhV0oxZEdWY2JseDBYSFFnS2k5Y2JseDBYSFIxYzJWUWNtOXdaWEowZVRvZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z1lYUjBjbWxpZFhSbEtTQjdYRzVjZEZ4MFhIUnBaaUFvVzF3aWFISmxabHdpTENCY0luTnlZMXdpWFM1cGJtUmxlRTltS0dGMGRISnBZblYwWlNrZ1BpQXRNU2tnZTF4dVhIUmNkRngwWEhRdkx5QlZVa3dnY0hKdmNHVnlkR2xsY3lCeVpYTnZiSFpsSUZ3aVhDSWdZWE1nYkc5allYUnBiMjR1YUhKbFppd2dablZqYTJsdVp5QjFjQ0JsYlhCMGFXNWxjM01nWTJobFkydHpYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGFXWWdLR1ZzWlcxbGJuUXVibUZ0WlhOd1lXTmxWVkpKSUQwOUlGd2lhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtZGNJaWtnZTF4dVhIUmNkRngwWEhRdkx5QlRWa2NnYUdGeklHRWdablZqYTJWa0lIVndJRVJQVFN3Z1pHOGdibTkwSUhWelpTQjBhR1Z6WlNCd2NtOXdaWEowYVdWelhHNWNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJSFJ5ZFdVN1hHNWNkRngwZlZ4dVhIUjlYRzU5S1R0Y2JseHVMeThnUkdWbWFXNWxJR1JsWm1GMWJIUWdZWFIwY21saWRYUmxjMXh1WHk1aGRIUnlhV0oxZEdWeklEMGdlMXh1WEhSY0ltbHRaeXdnZG1sa1pXOHNJR0YxWkdsdlhDSTZJRndpYzNKalhDSXNYRzVjZEZ3aVlTd2diR2x1YTF3aU9pQmNJbWh5WldaY0lpeGNibHgwWENKelpXeGxZM1FzSUdsdWNIVjBMQ0IwWlhoMFlYSmxZU3dnYldWMFpYSXNJSEJ5YjJkeVpYTnpYQ0k2SUZ3aWRtRnNkV1ZjSWl4Y2JseDBYQ0pwYm5CMWRGdDBlWEJsUFdOb1pXTnJZbTk0WFZ3aU9pQmNJbU5vWldOclpXUmNJaXhjYmx4MFhDSjBhVzFsWENJNklIdGNibHgwWEhSMllXeDFaVG9nWENKa1lYUmxkR2x0WlZ3aUxGeHVYSFJjZEdoMWJXRnVVbVZoWkdGaWJHVTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1WEhSY2RGeDBkbUZ5SUdSaGRHVWdQU0J1WlhjZ1JHRjBaU2gyWVd4MVpTazdYRzVjYmx4MFhIUmNkR2xtSUNnaGRtRnNkV1VnZkh3Z2FYTk9ZVTRvWkdGMFpTa3BJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJRndpS0U1dklGd2lJQ3NnZEdocGN5NXNZV0psYkNBcklGd2lLVndpTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QlVUMFJQSUdSdklIUm9hWE1nY0hKdmNHVnliSGtnS0dGalkyOTFiblFnWm05eUlHOTBhR1Z5SUdSaGRHVjBhVzFsSUdSaGRHRjBlWEJsY3lCaGJtUWdaR2xtWm1WeVpXNTBJR1p2Y20xaGRITXBYRzVjZEZ4MFhIUjJZWElnYjNCMGFXOXVjeUE5SUh0Y2JseDBYSFJjZEZ4MFhDSmtZWFJsWENJNklIdGtZWGs2SUZ3aWJuVnRaWEpwWTF3aUxDQnRiMjUwYURvZ1hDSnphRzl5ZEZ3aUxDQjVaV0Z5T2lCY0ltNTFiV1Z5YVdOY0luMHNYRzVjZEZ4MFhIUmNkRndpYlc5dWRHaGNJam9nZTIxdmJuUm9PaUJjSW14dmJtZGNJbjBzWEc1Y2RGeDBYSFJjZEZ3aWRHbHRaVndpT2lCN2FHOTFjam9nWENKdWRXMWxjbWxqWENJc0lHMXBiblYwWlRvZ1hDSnVkVzFsY21salhDSjlMRnh1WEhSY2RGeDBYSFJjSW1SaGRHVjBhVzFsTFd4dlkyRnNYQ0k2SUh0a1lYazZJRndpYm5WdFpYSnBZMXdpTENCdGIyNTBhRG9nWENKemFHOXlkRndpTENCNVpXRnlPaUJjSW01MWJXVnlhV05jSWl3Z2FHOTFjam9nWENKdWRXMWxjbWxqWENJc0lHMXBiblYwWlRvZ1hDSnVkVzFsY21salhDSjlYRzVjZEZ4MFhIUjlPMXh1WEc1Y2RGeDBYSFIyWVhJZ1ptOXliV0YwSUQwZ2IzQjBhVzl1YzF0MGFHbHpMbVZrYVhSdmNpQW1KaUIwYUdsekxtVmthWFJ2Y2k1MGVYQmxYU0I4ZkNCdmNIUnBiMjV6TG1SaGRHVTdYRzVjZEZ4MFhIUm1iM0p0WVhRdWRHbHRaVnB2Ym1VZ1BTQmNJbFZVUTF3aU8xeHVYRzVjZEZ4MFhIUnlaWFIxY200Z1pHRjBaUzUwYjB4dlkyRnNaVk4wY21sdVp5aGNJbVZ1TFVkQ1hDSXNJR1p2Y20xaGRDazdYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhIUmNJbTFsZEdGY0lqb2dYQ0pqYjI1MFpXNTBYQ0pjYm4wN1hHNWNiaTh2SUVKaGMybGpJR1JoZEdGMGVYQmxjeUJ3WlhJZ1lYUjBjbWxpZFhSbFhHNHZMeUJQYm14NUlHNTFiV0psY2l3Z1ltOXZiR1ZoYmx4dVh5NWtZWFJoZEhsd1pYTWdQU0I3WEc1Y2RGd2lhVzV3ZFhSYmRIbHdaVDFqYUdWamEySnZlRjFjSWpvZ2UxeHVYSFJjZEZ3aVkyaGxZMnRsWkZ3aU9pQmNJbUp2YjJ4bFlXNWNJbHh1WEhSOUxGeHVYSFJjSW1sdWNIVjBXM1I1Y0dVOWNtRnVaMlZkTENCcGJuQjFkRnQwZVhCbFBXNTFiV0psY2wwc0lHMWxkR1Z5TENCd2NtOW5jbVZ6YzF3aU9pQjdYRzVjZEZ4MFhDSjJZV3gxWlZ3aU9pQmNJbTUxYldKbGNsd2lYRzVjZEgxY2JuMDdYRzVjYmw4dVpXUnBkRzl5Y3lBOUlIdGNibHgwWENJcVhDSTZJSHRjSW5SaFoxd2lPaUJjSW1sdWNIVjBYQ0o5TEZ4dVhHNWNkRndpTG01MWJXSmxjbHdpT2lCN1hHNWNkRngwWENKMFlXZGNJam9nWENKcGJuQjFkRndpTEZ4dVhIUmNkRndpZEhsd1pWd2lPaUJjSW01MWJXSmxjbHdpWEc1Y2RIMHNYRzVjYmx4MFhDSXVZbTl2YkdWaGJsd2lPaUI3WEc1Y2RGeDBYQ0owWVdkY0lqb2dYQ0pwYm5CMWRGd2lMRnh1WEhSY2RGd2lkSGx3WlZ3aU9pQmNJbU5vWldOclltOTRYQ0pjYmx4MGZTeGNibHh1WEhSY0ltRXNJR2x0Wnl3Z2RtbGtaVzhzSUdGMVpHbHZMQ0F1ZFhKc1hDSTZJSHRjYmx4MFhIUmNJblJoWjF3aU9pQmNJbWx1Y0hWMFhDSXNYRzVjZEZ4MFhDSjBlWEJsWENJNklGd2lkWEpzWENJc1hHNWNkRngwWENKd2JHRmpaV2h2YkdSbGNsd2lPaUJjSW1oMGRIQTZMeTljSWx4dVhIUjlMRnh1WEc1Y2RDOHZJRUpzYjJOcklHVnNaVzFsYm5SelhHNWNkRndpY0N3Z1pHbDJMQ0JzYVN3Z1pIUXNJR1JrTENCb01Td2dhRElzSUdnekxDQm9OQ3dnYURVc0lHZzJMQ0JoY25ScFkyeGxMQ0J6WldOMGFXOXVMQ0F1YlhWc2RHbHNhVzVsWENJNklIdGNibHgwWEhSamNtVmhkR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGRtRnlJR1JwYzNCc1lYa2dQU0JuWlhSRGIyMXdkWFJsWkZOMGVXeGxLSFJvYVhNdVpXeGxiV1Z1ZENrdVpHbHpjR3hoZVR0Y2JseDBYSFJjZEhaaGNpQjBZV2NnUFNCa2FYTndiR0Y1TG1sdVpHVjRUMllvWENKcGJteHBibVZjSWlrZ1BUMDlJREEvSUZ3aWFXNXdkWFJjSWlBNklGd2lkR1Y0ZEdGeVpXRmNJanRjYmx4MFhIUmNkSFpoY2lCbFpHbDBiM0lnUFNBa0xtTnlaV0YwWlNoMFlXY3BPMXh1WEc1Y2RGeDBYSFJwWmlBb2RHRm5JRDA5SUZ3aWRHVjRkR0Z5WldGY0lpa2dlMXh1WEhSY2RGeDBYSFIyWVhJZ2QybGtkR2dnUFNCMGFHbHpMbVZzWlcxbGJuUXViMlptYzJWMFYybGtkR2c3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLSGRwWkhSb0tTQjdYRzVjZEZ4MFhIUmNkRngwWldScGRHOXlMbmRwWkhSb0lEMGdkMmxrZEdnN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlHVmthWFJ2Y2p0Y2JseDBYSFI5TEZ4dVhHNWNkRngwWjJWMElHVmthWFJ2Y2xaaGJIVmxJQ2dwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUIwYUdsekxtVmthWFJ2Y2lBbUppQjBhR2x6TG1Wa2FYUnZjaTUyWVd4MVpUdGNibHgwWEhSOUxGeHVYRzVjZEZ4MGMyVjBJR1ZrYVhSdmNsWmhiSFZsSUNoMllXeDFaU2tnZTF4dVhIUmNkRngwYVdZZ0tIUm9hWE11WldScGRHOXlLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVaV1JwZEc5eUxuWmhiSFZsSUQwZ2RtRnNkV1VnUHlCMllXeDFaUzV5WlhCc1lXTmxLQzljWEhJL1hGeHVMMmNzSUZ3aVhDSXBJRG9nWENKY0lqdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDBzWEc1Y2JseDBYQ0p0WlhSbGNpd2djSEp2WjNKbGMzTmNJam9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwY21WMGRYSnVJQ1F1WTNKbFlYUmxLSHRjYmx4MFhIUmNkSFJoWnpvZ1hDSnBibkIxZEZ3aUxGeHVYSFJjZEZ4MGRIbHdaVG9nWENKeVlXNW5aVndpTEZ4dVhIUmNkRngwYldsdU9pQjBhR2x6TG1Wc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtGd2liV2x1WENJcElIeDhJREFzWEc1Y2RGeDBYSFJ0WVhnNklIUm9hWE11Wld4bGJXVnVkQzVuWlhSQmRIUnlhV0oxZEdVb1hDSnRZWGhjSWlrZ2ZId2dNVEF3WEc1Y2RGeDBmU2s3WEc1Y2RIMHNYRzVjYmx4MFhDSjBhVzFsTENBdVpHRjBaVndpT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSMllYSWdkSGx3WlhNZ1BTQjdYRzVjZEZ4MFhIUmNJbVJoZEdWY0lqb2dMMTViV1Z4Y1pGMTdOSDB0VzAxY1hHUmRleko5TFZ0RVhGeGtYWHN5ZlNRdmFTeGNibHgwWEhSY2RGd2liVzl1ZEdoY0lqb2dMMTViV1Z4Y1pGMTdOSDB0VzAxY1hHUmRleko5SkM5cExGeHVYSFJjZEZ4MFhDSjBhVzFsWENJNklDOWVXMGhjWEdSZGV6SjlPbHROWEZ4a1hYc3lmUzlwTEZ4dVhIUmNkRngwWENKM1pXVnJYQ0k2SUM5YldWeGNaRjE3TkgwdFYxdFhYRnhrWFhzeWZTUXZhU3hjYmx4MFhIUmNkRndpWkdGMFpYUnBiV1V0Ykc5allXeGNJam9nTDE1YldWeGNaRjE3TkgwdFcwMWNYR1JkZXpKOUxWdEVYRnhrWFhzeWZTQmJTRnhjWkYxN01uMDZXMDFjWEdSZGV6SjlMMmxjYmx4MFhIUjlPMXh1WEc1Y2RGeDBkbUZ5SUdSaGRHVjBhVzFsSUQwZ2RHaHBjeTVsYkdWdFpXNTBMbWRsZEVGMGRISnBZblYwWlNoY0ltUmhkR1YwYVcxbFhDSXBJSHg4SUZ3aVdWbFpXUzFOVFMxRVJGd2lPMXh1WEc1Y2RGeDBabTl5SUNoMllYSWdkSGx3WlNCcGJpQjBlWEJsY3lrZ2UxeHVYSFJjZEZ4MGFXWWdLSFI1Y0dWelczUjVjR1ZkTG5SbGMzUW9aR0YwWlhScGJXVXBLU0I3WEc1Y2RGeDBYSFJjZEdKeVpXRnJPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlBa0xtTnlaV0YwWlNoY0ltbHVjSFYwWENJc0lIdDBlWEJsT2lCMGVYQmxmU2s3WEc1Y2RIMWNibjA3WEc1Y2JuMHBLRUpzYVhOekxDQkNiR2x6Y3k0a0tUdGNiaUlzSWk4dklFbHRZV2RsSUhWd2JHOWhaQ0IzYVdSblpYUWdkbWxoSUdsdFozVnlYRzVYZVhOcFpTNVFjbWx0YVhScGRtVXVaV1JwZEc5eWN5NXBiV2NnUFNCN1hHNWNkR055WldGMFpUb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBkbUZ5SUhKdmIzUWdQU0FrTG1OeVpXRjBaU2hjSW1ScGRsd2lMQ0I3WEc1Y2RGeDBYSFJqYkdGemMwNWhiV1U2SUZ3aWFXMWhaMlV0Y0c5d2RYQmNJaXhjYmx4MFhIUmNkR1YyWlc1MGN6b2dlMXh1WEhSY2RGeDBYSFJjSW1SeVlXZGxiblJsY2lCa2NtRm5iM1psY2lCa2NtOXdYQ0k2SUdaMWJtTjBhVzl1S0dWMmRDa2dlMXh1WEhSY2RGeDBYSFJjZEdWMmRDNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNibHgwWEhSY2RGeDBYSFJsZG5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JseDBYSFJjZEZ4MGZTeGNibHh1WEhSY2RGeDBYSFJrY205d09pQm1kVzVqZEdsdmJpaGxkblFwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnWm1sc1pTQTlJQ1F1ZG1Gc2RXVW9aWFowTG1SaGRHRlVjbUZ1YzJabGNpd2dYQ0ptYVd4bGMxd2lMQ0F3S1R0Y2JseHVYSFJjZEZ4MFhIUmNkQzh2SUVSdklIVndiRzloWkNCemRIVm1abHh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5TEZ4dVhIUmNkRngwWTI5dWRHVnVkSE02SUZ0Y2JseDBYSFJjZEh0Y2JseDBYSFJjZEZ4MGRHRm5PaUJjSW1sdWNIVjBYQ0lzWEc1Y2RGeDBYSFJjZEhSNWNHVTZJRndpZFhKc1hDSXNYRzVjZEZ4MFhIUmNkR05zWVhOelRtRnRaVG9nWENKMllXeDFaVndpWEc1Y2RGeDBYSFI5TENCN1hHNWNkRngwWEhSY2RIUmhaem9nWENKc1lXSmxiRndpTEZ4dVhIUmNkRngwWEhSamJHRnpjMDVoYldVNklGd2lkWEJzYjJGa1hDSXNYRzVjZEZ4MFhIUmNkR052Ym5SbGJuUnpPaUJiWENKVmNHeHZZV1E2SUZ3aUxDQjdYRzVjZEZ4MFhIUmNkRngwZEdGbk9pQmNJbWx1Y0hWMFhDSXNYRzVjZEZ4MFhIUmNkRngwZEhsd1pUb2dYQ0ptYVd4bFhDSXNYRzVjZEZ4MFhIUmNkRngwWVdOalpYQjBPaUJjSW1sdFlXZGxMeXBjSWl4Y2JseDBYSFJjZEZ4MFhIUmxkbVZ1ZEhNNklIdGNibHgwWEhSY2RGeDBYSFJjZEdOb1lXNW5aVG9nWm5WdVkzUnBiMjRnS0dWMmRDa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUjJZWElnWm1sc1pTQTlJSFJvYVhNdVptbHNaWE5iTUYwN1hHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0ZtYVd4bEtTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdVMmh2ZHlCcGJXRm5aU0JzYjJOaGJHeDVYRzVjZEZ4MFhIUmNkRngwWEhSY2RDUW9YQ0pwYldkY0lpd2djbTl2ZENrdVptbHNaU0E5SUdacGJHVTdYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnVlhCc2IyRmtYRzVjYmx4MFhIUmNkRngwWEhSY2RGeDBMeThnVDI1alpTQjFjR3h2WVdSbFpDd2djMmhoY21VZ1lXNWtJR2RsZENCd2RXSnNhV01nVlZKTVhHNWNibHgwWEhSY2RGeDBYSFJjZEZ4MEx5OGdVMlYwSUhCMVlteHBZeUJWVWt3Z1lYTWdkR2hsSUhaaGJIVmxJRzltSUhSb1pTQlZVa3dnYVc1d2RYUmNibHgwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFkWEc1Y2RGeDBYSFI5TENCN1hHNWNkRngwWEhSY2RHTnNZWE56VG1GdFpUb2dYQ0pwYldGblpTMXdjbVYyYVdWM1hDSXNYRzVjZEZ4MFhIUmNkR052Ym5SbGJuUnpPaUJiZTF4dVhIUmNkRngwWEhSY2RGeDBkR0ZuT2lCY0luQnliMmR5WlhOelhDSXNYRzVjZEZ4MFhIUmNkRngwWEhSMllXeDFaVG9nWENJd1hDSXNYRzVjZEZ4MFhIUmNkRngwWEhSdFlYZzZJRndpTVRBd1hDSmNibHgwWEhSY2RGeDBYSFI5TENCN1hHNWNkRngwWEhSY2RGeDBYSFIwWVdjNklGd2lhVzFuWENKY2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRjFjYmx4MFhIUmNkSDBzSUh0Y2JseDBYSFJjZEZ4MFkyeGhjM05PWVcxbE9pQmNJblJwY0Z3aUxGeHVYSFJjZEZ4MFhIUnBibTVsY2toVVRVdzZJRndpUEhOMGNtOXVaejVVYVhBNlBDOXpkSEp2Ym1jK0lGbHZkU0JqWVc0Z1lXeHpieUJrY21GbklDWWdaSEp2Y0NCdmNpQndZWE4wWlNCMGFHVWdhVzFoWjJVZ2RHOGdZbVVnZFhCc2IyRmtaV1FoWENKY2JseDBYSFJjZEgxY2JseDBYSFJkZlNrN1hHNWNibHgwWEhSeVpYUjFjbTRnY205dmREdGNibHgwZlZ4dWZUdGNiaUlzSWlobWRXNWpkR2x2Ymlna0xDQWtKQ2tnZTF4dVhHNTJZWElnWHlBOUlGZDVjMmxsTGtOdmJHeGxZM1JwYjI0Z1BTQWtMa05zWVhOektIdGNibHgwWlhoMFpXNWtjem9nVjNsemFXVXVUbTlrWlN4Y2JseDBZMjl1YzNSeWRXTjBiM0k2SUdaMWJtTjBhVzl1SUNobGJHVnRaVzUwTENCM2VYTnBaU2tnZTF4dVhIUmNkQzhxWEc1Y2RGeDBJQ29nUTNKbFlYUmxJSFJvWlNCMFpXMXdiR0YwWlN3Z2NtVnRiM1psSUdsMElHWnliMjBnZEdobElFUlBUU0JoYm1RZ2MzUnZjbVVnYVhSY2JseDBYSFFnS2k5Y2JseDBYSFIwYUdsekxuUmxiWEJzWVhSbElEMGdaV3hsYldWdWREdGNibHh1WEhSY2RIUm9hWE11YVhSbGJYTWdQU0JiWFR0Y2JseHVYSFJjZEM4dklFRk1UQ0JrWlhOalpXNWtZVzUwSUhCeWIzQmxjblI1SUc1aGJXVnpJR0Z6SUdGdUlHRnljbUY1WEc1Y2RGeDBkR2hwY3k1d2NtOXdaWEowYVdWeklEMGdKQ1FvVjNsemFXVXVjMlZzWldOMGIzSnpMbkJ5YjNCbGNuUjVMQ0IwYUdsekxuUmxiWEJzWVhSbEtTNWZMbWRsZEVGMGRISnBZblYwWlNoY0luQnliM0JsY25SNVhDSXBPMXh1WEc1Y2RGeDBkR2hwY3k1dGRYUmhZbXhsSUQwZ2RHaHBjeTUwWlcxd2JHRjBaUzV0WVhSamFHVnpLRmQ1YzJsbExuTmxiR1ZqZEc5eWN5NXRkV3gwYVhCc1pTazdYRzVjYmx4MFhIUlhlWE5wWlM1b2IyOXJjeTV5ZFc0b1hDSmpiMnhzWldOMGFXOXVMV2x1YVhRdFpXNWtYQ0lzSUhSb2FYTXBPMXh1WEhSOUxGeHVYRzVjZEdkbGRDQnNaVzVuZEdnb0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTXVhWFJsYlhNdWJHVnVaM1JvTzF4dVhIUjlMRnh1WEc1Y2RDOHZJRU52Ykd4bFkzUnBiMjRnYzNScGJHd2dZMjl1ZEdGcGJuTWdhWFJ6SUhSbGJYQnNZWFJsSUdGeklHUmhkR0ZjYmx4MFoyVjBJR052Ym5SaGFXNXpWR1Z0Y0d4aGRHVW9LU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11YVhSbGJYTXViR1Z1WjNSb0lDWW1JSFJvYVhNdWFYUmxiWE5iTUYwdVpXeGxiV1Z1ZENBOVBUMGdkR2hwY3k1bGJHVnRaVzUwTzF4dVhIUjlMRnh1WEc1Y2RHZGxkRVJoZEdFNklHWjFibU4wYVc5dUtHOHBJSHRjYmx4MFhIUnZJRDBnYnlCOGZDQjdmVHRjYmx4dVhIUmNkSFpoY2lCa1lYUmhJRDBnVzEwN1hHNWNibHgwWEhSMGFHbHpMbWwwWlcxekxtWnZja1ZoWTJnb2FYUmxiU0E5UGlCN1hHNWNkRngwWEhScFppQW9JV2wwWlcwdVpHVnNaWFJsWkNrZ2UxeHVYSFJjZEZ4MFhIUjJZWElnYVhSbGJVUmhkR0VnUFNCcGRHVnRMbWRsZEVSaGRHRW9ieWs3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLR2wwWlcxRVlYUmhLU0I3WEc1Y2RGeDBYSFJjZEZ4MFpHRjBZUzV3ZFhOb0tHbDBaVzFFWVhSaEtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEc1Y2RGeDBhV1lnS0NGdkxtUnBjblI1SUNZbUlIUm9hWE11ZFc1b1lXNWtiR1ZrS1NCN1hHNWNkRngwWEhSa1lYUmhJRDBnZEdocGN5NTFibWhoYm1Sc1pXUXVZbVZtYjNKbExtTnZibU5oZENoa1lYUmhMQ0IwYUdsekxuVnVhR0Z1Wkd4bFpDNWhablJsY2lrN1hHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJR1JoZEdFN1hHNWNkSDBzWEc1Y2JseDBMeThnUTNKbFlYUmxJR2wwWlcwZ1luVjBJR1J2YmlkMElHbHVjMlZ5ZENCcGRDQmhibmwzYUdWeVpWeHVYSFF2THlCTmIzTjBiSGtnZFhObFpDQnBiblJsY201aGJHeDVYRzVjZEdOeVpXRjBaVWwwWlcwNklHWjFibU4wYVc5dUlDaGxiR1Z0Wlc1MEtTQjdYRzVjZEZ4MGRtRnlJR1ZzWlcxbGJuUWdQU0JsYkdWdFpXNTBJSHg4SUhSb2FYTXVkR1Z0Y0d4aGRHVXVZMnh2Ym1WT2IyUmxLSFJ5ZFdVcE8xeHVYRzVjZEZ4MGRtRnlJR2wwWlcwZ1BTQlhlWE5wWlM1VmJtbDBMbU55WldGMFpTaGxiR1Z0Wlc1MExDQjBhR2x6TG5kNWMybGxMQ0IwYUdsektUdGNibHh1WEhSY2RDOHZJRUZrWkNCa1pXeGxkR1VnSmlCaFpHUWdZblYwZEc5dWMxeHVYSFJjZEdsbUlDaDBhR2x6TG0xMWRHRmliR1VwSUh0Y2JseDBYSFJjZENRdVkzSmxZWFJsS0h0Y2JseDBYSFJjZEZ4MGRHRm5PaUJjSW0xbGJuVmNJaXhjYmx4MFhIUmNkRngwZEhsd1pUb2dYQ0owYjI5c1ltRnlYQ0lzWEc1Y2RGeDBYSFJjZEdOc1lYTnpUbUZ0WlRvZ1hDSjNlWE5wWlMxcGRHVnRMV052Ym5SeWIyeHpJSGQ1YzJsbExYVnBYQ0lzWEc1Y2RGeDBYSFJjZEdOdmJuUmxiblJ6T2lCYlhHNWNkRngwWEhSY2RGeDBlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHRm5PaUJjSW1KMWRIUnZibHdpTEZ4dVhIUmNkRngwWEhSY2RGeDBkR2wwYkdVNklGd2lSR1ZzWlhSbElIUm9hWE1nWENJZ0t5QjBhR2x6TG01aGJXVXNYRzVjZEZ4MFhIUmNkRngwWEhSamJHRnpjMDVoYldVNklGd2laR1ZzWlhSbFhDSXNYRzVjZEZ4MFhIUmNkRngwWEhSbGRtVnVkSE02SUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWENKamJHbGphMXdpT2lCbGRuUWdQVDRnZEdocGN5NWtaV3hsZEdVb2FYUmxiU2xjYmx4MFhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFI5TENCN1hHNWNkRngwWEhSY2RGeDBYSFIwWVdjNklGd2lZblYwZEc5dVhDSXNYRzVjZEZ4MFhIUmNkRngwWEhSMGFYUnNaVG9nWENKQlpHUWdibVYzSUZ3aUlDc2dkR2hwY3k1dVlXMWxMbkpsY0d4aFkyVW9MM01rTDJrc0lGd2lYQ0lwTEZ4dVhIUmNkRngwWEhSY2RGeDBZMnhoYzNOT1lXMWxPaUJjSW1Ga1pGd2lMRnh1WEhSY2RGeDBYSFJjZEZ4MFpYWmxiblJ6T2lCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ3aVkyeHBZMnRjSWpvZ1pYWjBJRDArSUhSb2FYTXVZV1JrS0c1MWJHd3NJSFJvYVhNdWFYUmxiWE11YVc1a1pYaFBaaWhwZEdWdEtTa3VaV1JwZENncFhHNWNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmRMRnh1WEhSY2RGeDBYSFJwYm5OcFpHVTZJR1ZzWlcxbGJuUmNibHgwWEhSY2RIMHBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCcGRHVnRPMXh1WEhSOUxGeHVYRzVjZEdGa1pEb2dablZ1WTNScGIyNG9hWFJsYlN3Z2FXNWtaWGdzSUhOcGJHVnVkQ2tnZTF4dVhIUmNkR2xtSUNocGRHVnRJR2x1YzNSaGJtTmxiMllnVG05a1pTa2dlMXh1WEhSY2RGeDBhWFJsYlNBOUlGZDVjMmxsTGxWdWFYUXVaMlYwS0dsMFpXMHBJSHg4SUhSb2FYTXVZM0psWVhSbFNYUmxiU2hwZEdWdEtUdGNibHgwWEhSOVhHNWNkRngwWld4elpTQjdYRzVjZEZ4MFhIUnBkR1Z0SUQwZ2FYUmxiU0I4ZkNCMGFHbHpMbU55WldGMFpVbDBaVzBvS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb2FXNWtaWGdnYVc0Z2RHaHBjeTVwZEdWdGN5a2dlMXh1WEhSY2RGeDBhWFJsYlM1bGJHVnRaVzUwTGw4dVlXWjBaWElvZEdocGN5NXBkR1Z0YzF0cGJtUmxlRjB1Wld4bGJXVnVkQ2s3WEc1Y2JseDBYSFJjZEhSb2FYTXVhWFJsYlhNdWMzQnNhV05sS0dsdVpHVjRMQ0F3TENCcGRHVnRLVHRjYmx4MFhIUjlYRzVjZEZ4MFpXeHpaU0I3WEc1Y2RGeDBYSFJwWmlBb0lXbDBaVzB1Wld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsS1NCN1hHNWNkRngwWEhSY2RHbG1JQ2gwYUdsekxtMTFkR0ZpYkdVcElIdGNibHgwWEhSY2RGeDBYSFIyWVhJZ2NISmxZMlZrYVc1bklEMGdkR2hwY3k1aWIzUjBiMjFWY0NBbUppQjBhR2x6TG1sMFpXMXpMbXhsYm1kMGFDQStJREEvSUhSb2FYTXVhWFJsYlhOYk1GMHVaV3hsYldWdWRDQTZJSFJvYVhNdWJXRnlhMlZ5TzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUJ3Y21WalpXUnBibWNnUFNCMGFHbHpMbWwwWlcxelczUm9hWE11YkdWdVozUm9JQzBnTVYwdVpXeGxiV1Z1ZER0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkR2wwWlcwdVpXeGxiV1Z1ZEM1ZkxtSmxabTl5WlNod2NtVmpaV1JwYm1jcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUjBhR2x6TG1sMFpXMXpMbkIxYzJnb2FYUmxiU2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhV1lnS0NGemFXeGxiblFwSUh0Y2JseDBYSFJjZEdsMFpXMHVaV3hsYldWdWRDNWZMbVpwY21Vb1hDSjNlWE5wWlRwa1lYUmhZMmhoYm1kbFhDSXNJSHRjYmx4MFhIUmNkRngwYm05a1pUb2dkR2hwY3l4Y2JseDBYSFJjZEZ4MGQzbHphV1U2SUhSb2FYTXVkM2x6YVdVc1hHNWNkRngwWEhSY2RHRmpkR2x2YmpvZ1hDSmhaR1JjSWl4Y2JseDBYSFJjZEZ4MGFYUmxiVnh1WEhSY2RGeDBmU2s3WEc1Y2JseDBYSFJjZEdsMFpXMHVkVzV6WVhabFpFTm9ZVzVuWlhNZ1BTQjBhR2x6TG5kNWMybGxMblZ1YzJGMlpXUkRhR0Z1WjJWeklEMGdkSEoxWlR0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdhWFJsYlR0Y2JseDBmU3hjYmx4dVhIUndjbTl3WVdkaGRHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSFJvYVhNdWFYUmxiWE11Wm05eVJXRmphQ2hwZEdWdElEMCtJR2wwWlcwdVkyRnNiQzVoY0hCc2VTaHBkR1Z0TENCaGNtZDFiV1Z1ZEhNcEtUdGNibHgwZlN4Y2JseHVYSFJrWld4bGRHVTZJR1oxYm1OMGFXOXVLR2wwWlcwc0lHaGhjbVFwSUh0Y2JseDBYSFJwWmlBb2FHRnlaQ2tnZTF4dVhIUmNkRngwTHk4Z1NHRnlaQ0JrWld4bGRHVmNibHgwWEhSY2RDUXVjbVZ0YjNabEtHbDBaVzB1Wld4bGJXVnVkQ2s3WEc1Y2RGeDBYSFIwYUdsekxtbDBaVzF6TG5Od2JHbGpaU2gwYUdsekxtbDBaVzF6TG1sdVpHVjRUMllvYVhSbGJTa3NJREVwTzF4dVhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlBa0xuUnlZVzV6YVhScGIyNG9hWFJsYlM1bGJHVnRaVzUwTENCN2IzQmhZMmwwZVRvZ01IMHBMblJvWlc0b0tDa2dQVDRnZTF4dVhIUmNkRngwYVhSbGJTNWtaV3hsZEdWa0lEMGdkSEoxWlRzZ0x5OGdjMk5vWldSMWJHVWdabTl5SUdSbGJHVjBhVzl1WEc1Y2RGeDBYSFJwZEdWdExtVnNaVzFsYm5RdWMzUjViR1V1YjNCaFkybDBlU0E5SUZ3aVhDSTdYRzVjYmx4MFhIUmNkR2wwWlcwdVpXeGxiV1Z1ZEM1ZkxtWnBjbVVvWENKM2VYTnBaVHBrWVhSaFkyaGhibWRsWENJc0lIdGNibHgwWEhSY2RGeDBibTlrWlRvZ2RHaHBjeXhjYmx4MFhIUmNkRngwZDNsemFXVTZJSFJvYVhNdWQzbHphV1VzWEc1Y2RGeDBYSFJjZEdGamRHbHZiam9nWENKa1pXeGxkR1ZjSWl4Y2JseDBYSFJjZEZ4MGFYUmxiVG9nYVhSbGJWeHVYSFJjZEZ4MGZTazdYRzVjYmx4MFhIUmNkR2wwWlcwdWRXNXpZWFpsWkVOb1lXNW5aWE1nUFNCMGFHbHpMbmQ1YzJsbExuVnVjMkYyWldSRGFHRnVaMlZ6SUQwZ2RISjFaVHRjYmx4MFhIUjlLVHRjYmx4MGZTeGNibHh1WEhSbFpHbDBPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdkR2hwY3k1eVpYRjFhWEpsWkNrZ2UxeHVYSFJjZEZ4MEx5OGdUbVZ6ZEdWa0lHTnZiR3hsWTNScGIyNGdkMmwwYUNCdWJ5QnBkR1Z0Y3l3Z1lXUmtJRzl1WlZ4dVhIUmNkRngwZG1GeUlHbDBaVzBnUFNCMGFHbHpMbUZrWkNodWRXeHNMQ0J1ZFd4c0xDQjBjblZsS1R0Y2JseHVYSFJjZEZ4MGFYUmxiUzV3YkdGalpXaHZiR1JsY2lBOUlIUnlkV1U3WEc1Y2RGeDBYSFJwZEdWdExuZGhiR3NvYjJKcUlEMCtJRzlpYWk1MWJuTmhkbVZrUTJoaGJtZGxjeUE5SUdaaGJITmxLVHRjYmx4dVhIUmNkRngwSkM1dmJtTmxLR2wwWlcwdVpXeGxiV1Z1ZEN3Z1hDSjNlWE5wWlRwa1lYUmhZMmhoYm1kbFhDSXNJR1YyZENBOVBpQjdYRzVjZEZ4MFhIUmNkR2wwWlcwdWRXNXpZWFpsWkVOb1lXNW5aWE1nUFNCMGNuVmxPMXh1WEhSY2RGeDBYSFJwZEdWdExuQnNZV05sYUc5c1pHVnlJRDBnWm1Gc2MyVTdYRzVjZEZ4MFhIUjlLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUjBhR2x6TG5CeWIzQmhaMkYwWlNodlltb2dQVDRnYjJKcVcyOWlhaTV3Y21WRlpHbDBQeUJjSW5CeVpVVmthWFJjSWlBNklGd2laV1JwZEZ3aVhTZ3BLVHRjYmx4MGZTeGNibHh1WEhRdktpcGNibHgwSUNvZ1JHVnNaWFJsSUdGc2JDQnBkR1Z0Y3lCcGJpQjBhR1VnWTI5c2JHVmpkR2x2Ymk1Y2JseDBJQ292WEc1Y2RHTnNaV0Z5T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhScFppQW9kR2hwY3k1dGRYUmhZbXhsS1NCN1hHNWNkRngwWEhSMGFHbHpMbkJ5YjNCaFoyRjBaU2hwZEdWdElEMCtJR2wwWlcwdVpXeGxiV1Z1ZEM1eVpXMXZkbVVvS1NrN1hHNWNibHgwWEhSY2RIUm9hWE11YVhSbGJYTWdQU0JiWFR0Y2JseHVYSFJjZEZ4MGRHaHBjeTV0WVhKclpYSXVYeTVtYVhKbEtGd2lkM2x6YVdVNlpHRjBZV05vWVc1blpWd2lMQ0I3WEc1Y2RGeDBYSFJjZEc1dlpHVTZJSFJvYVhNc1hHNWNkRngwWEhSY2RIZDVjMmxsT2lCMGFHbHpMbmQ1YzJsbExGeHVYSFJjZEZ4MFhIUmhZM1JwYjI0NklGd2lZMnhsWVhKY0lseHVYSFJjZEZ4MGZTazdYRzVjZEZ4MGZWeHVYSFI5TEZ4dVhHNWNkSE5oZG1VNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RIUm9hWE11YVhSbGJYTXVabTl5UldGamFDaHBkR1Z0SUQwK0lIdGNibHgwWEhSY2RHbG1JQ2hwZEdWdExtUmxiR1YwWldRcElIdGNibHgwWEhSY2RGeDBkR2hwY3k1a1pXeGxkR1VvYVhSbGJTd2dkSEoxWlNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSbGJITmxJSHRjYmx4MFhIUmNkRngwYVhSbGJTNTFibk5oZG1Wa1EyaGhibWRsY3lBOUlHWmhiSE5sTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBwTzF4dVhIUjlMRnh1WEc1Y2RHUnZibVU2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhSb2FYTXVhWFJsYlhNdVptOXlSV0ZqYUNocGRHVnRJRDArSUh0Y2JseDBYSFJjZEdsbUlDaHBkR1Z0TG5Cc1lXTmxhRzlzWkdWeUtTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdVpHVnNaWFJsS0dsMFpXMHNJSFJ5ZFdVcE8xeHVYSFJjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwWEhSOVhHNWNkRngwZlNrN1hHNWNkSDBzWEc1Y2JseDBjSEp2Y0dGbllYUmxaRG9nVzF3aWMyRjJaVndpTENCY0ltUnZibVZjSWwwc1hHNWNibHgwY21WMlpYSjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFIwYUdsekxtbDBaVzF6TG1admNrVmhZMmdvS0dsMFpXMHNJR2twSUQwK0lIdGNibHgwWEhSY2RDOHZJRVJsYkdWMFpTQmhaR1JsWkNCcGRHVnRjMXh1WEhSY2RGeDBhV1lnS0NGcGRHVnRMbVYyWlhKVFlYWmxaQ0FtSmlBaGFYUmxiUzV3YkdGalpXaHZiR1JsY2lrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG1SbGJHVjBaU2hwZEdWdExDQjBjblZsS1R0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBYSFF2THlCQ2NtbHVaeUJpWVdOcklHUmxiR1YwWldRZ2FYUmxiWE5jYmx4MFhIUmNkRngwYVdZZ0tHbDBaVzB1WkdWc1pYUmxaQ2tnZTF4dVhIUmNkRngwWEhSY2RHbDBaVzB1WkdWc1pYUmxaQ0E5SUdaaGJITmxPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MEx5OGdVbVYyWlhKMElHRnNiQ0J3Y205d1pYSjBhV1Z6WEc1Y2RGeDBYSFJjZEdsMFpXMHVjbVYyWlhKMEtDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTazdYRzVjZEgwc1hHNWNibHgwYVcxd2IzSjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJwWmlBb2RHaHBjeTV0ZFhSaFlteGxLU0I3WEc1Y2RGeDBYSFIwYUdsekxtRmtaQ2gwYUdsekxtVnNaVzFsYm5RcE8xeHVYSFJjZEgxY2JseHVYSFJjZEhSb2FYTXVhWFJsYlhNdVptOXlSV0ZqYUNocGRHVnRJRDArSUdsMFpXMHVhVzF3YjNKMEtDa3BPMXh1WEhSOUxGeHVYRzVjZEhKbGJtUmxjam9nWm5WdVkzUnBiMjRvWkdGMFlTa2dlMXh1WEhSY2RIUm9hWE11ZFc1b1lXNWtiR1ZrSUQwZ2UySmxabTl5WlRvZ1cxMHNJR0ZtZEdWeU9pQmJYWDA3WEc1Y2JseDBYSFJwWmlBb0lXUmhkR0VwSUh0Y2JseDBYSFJjZEdsbUlDaGtZWFJoSUQwOVBTQnVkV3hzSUh4OElHUmhkR0VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1WEhSY2RGeDBYSFJwWmlBb0lYUm9hWE11WTJ4dmMyVnpkRU52Ykd4bFkzUnBiMjRnZkh3Z2RHaHBjeTVqYkc5elpYTjBRMjlzYkdWamRHbHZiaTVqYjI1MFlXbHVjMVJsYlhCc1lYUmxLU0I3WEc1Y2RGeDBYSFJjZEZ4MEx5OGdWR2hwY3lCcGN5QnViM1FnWTI5dWRHRnBibVZrSUdsdUlHRnVlU0J2ZEdobGNpQmpiMnhzWldOMGFXOXVMQ0JrYVhOd2JHRjVJSFJsYlhCc1lYUmxJR1JoZEdGY2JseDBYSFJjZEZ4MFhIUjBhR2x6TG1Oc1pXRnlLQ2s3WEc1Y2RGeDBYSFJjZEZ4MGRHaHBjeTVwYlhCdmNuUW9LVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBaR0YwWVNBOUlHUmhkR0VnSmlZZ1YzbHphV1V1ZEc5QmNuSmhlU2hrWVhSaEtUdGNibHh1WEhSY2RHbG1JQ2doZEdocGN5NXRkWFJoWW14bEtTQjdYRzVjZEZ4MFhIUjBhR2x6TG1sMFpXMXpMbVp2Y2tWaFkyZ29LR2wwWlcwc0lHa3BJRDArSUdsMFpXMHVjbVZ1WkdWeUtHUmhkR0VnSmlZZ1pHRjBZVnRwWFNrcE8xeHVYRzVjZEZ4MFhIUnBaaUFvWkdGMFlTa2dlMXh1WEhSY2RGeDBYSFIwYUdsekxuVnVhR0Z1Wkd4bFpDNWhablJsY2lBOUlHUmhkR0V1YzJ4cFkyVW9kR2hwY3k1cGRHVnRjeTVzWlc1bmRHZ3BPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwWEhSbGJITmxJR2xtSUNoa1lYUmhJQ1ltSUdSaGRHRXViR1Z1WjNSb0lENGdNQ2tnZTF4dVhIUmNkRngwTHk4Z1ZYTnBibWNnWkc5amRXMWxiblFnWm5KaFoyMWxiblJ6SUdsdGNISnZkbVZrSUhKbGJtUmxjbWx1WnlCd1pYSm1iM0p0WVc1alpTQmllU0EyTUNWY2JseDBYSFJjZEhaaGNpQm1jbUZuYldWdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVUnZZM1Z0Wlc1MFJuSmhaMjFsYm5Rb0tUdGNibHh1WEhSY2RGeDBaR0YwWVM1bWIzSkZZV05vS0dSaGRIVnRJRDArSUh0Y2JseDBYSFJjZEZ4MGRtRnlJR2wwWlcwZ1BTQjBhR2x6TG1OeVpXRjBaVWwwWlcwb0tUdGNibHh1WEhSY2RGeDBYSFJwZEdWdExuSmxibVJsY2loa1lYUjFiU2s3WEc1Y2JseDBYSFJjZEZ4MGRHaHBjeTVwZEdWdGN5NXdkWE5vS0dsMFpXMHBPMXh1WEc1Y2RGeDBYSFJjZEdaeVlXZHRaVzUwTG1Gd2NHVnVaRU5vYVd4a0tHbDBaVzB1Wld4bGJXVnVkQ2s3WEc1Y2RGeDBYSFI5S1R0Y2JseHVYSFJjZEZ4MGRHaHBjeTV0WVhKclpYSXVjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb1puSmhaMjFsYm5Rc0lIUm9hWE11YldGeWEyVnlLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUjBhR2x6TG5OaGRtVW9LVHRjYmx4MGZTeGNibHh1WEhSbWFXNWtPaUJtZFc1amRHbHZiaWh3Y205d1pYSjBlU2tnZTF4dVhIUmNkSFpoY2lCcGRHVnRjeUE5SUhSb2FYTXVhWFJsYlhNdVptbHNkR1Z5S0dsMFpXMGdQVDRnSVdsMFpXMHVaR1ZzWlhSbFpDazdYRzVjYmx4MFhIUnBaaUFvZEdocGN5NXdjbTl3WlhKMGVTQTlQU0J3Y205d1pYSjBlU2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR2wwWlcxek8xeHVYSFJjZEgxY2JseHVYSFJjZEdsbUlDaDBhR2x6TG5CeWIzQmxjblJwWlhNdWFXNWtaWGhQWmlod2NtOXdaWEowZVNrZ1BpQXRNU2tnZTF4dVhIUmNkRngwZG1GeUlISmxkQ0E5SUdsMFpXMXpMbTFoY0NocGRHVnRJRDArSUdsMFpXMHVabWx1WkNod2NtOXdaWEowZVNrcE8xeHVYRzVjZEZ4MFhIUnlaWFIxY200Z1YzbHphV1V1Wm14aGRIUmxiaWh5WlhRcE8xeHVYSFJjZEgxY2JseDBmU3hjYmx4dVhIUnNhWFpsT2lCN1hHNWNkRngwYlhWMFlXSnNaVG9nWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmx4MFhIUmNkR2xtSUNoMllXeDFaU0FtSmlCMllXeDFaU0FoUFQwZ2RHaHBjeTV0ZFhSaFlteGxLU0I3WEc1Y2RGeDBYSFJjZEhSb2FYTXVkM2x6YVdVdWJtVmxaSE5GWkdsMElEMGdkSEoxWlR0Y2JseHVYSFJjZEZ4MFhIUjBhR2x6TG5KbGNYVnBjbVZrSUQwZ2RHaHBjeTUwWlcxd2JHRjBaUzV0WVhSamFHVnpLRmQ1YzJsbExuTmxiR1ZqZEc5eWN5NXlaWEYxYVhKbFpDazdYRzVjYmx4MFhIUmNkRngwTHk4Z1MyVmxjQ0J3YjNOcGRHbHZiaUJ2WmlCMGFHVWdkR1Z0Y0d4aGRHVWdhVzRnZEdobElFUlBUU3dnYzJsdVkyVWdkMlhpZ0pseVpTQm5iMjV1WVNCeVpXMXZkbVVnYVhSY2JseDBYSFJjZEZ4MGRHaHBjeTV0WVhKclpYSWdQU0FrTG1OeVpXRjBaU2hjSW1ScGRsd2lMQ0I3WEc1Y2RGeDBYSFJjZEZ4MGFHbGtaR1Z1T2lCMGNuVmxMRnh1WEhSY2RGeDBYSFJjZEdOc1lYTnpUbUZ0WlRvZ1hDSjNlWE5wWlMxdFlYSnJaWEpjSWl4Y2JseDBYSFJjZEZ4MFhIUmhablJsY2pvZ2RHaHBjeTUwWlcxd2JHRjBaVnh1WEhSY2RGeDBYSFI5S1R0Y2JseHVYSFJjZEZ4MFhIUjBhR2x6TG5SbGJYQnNZWFJsTG1Oc1lYTnpUR2x6ZEM1aFpHUW9YQ0ozZVhOcFpTMXBkR1Z0WENJcE8xeHVYRzVjZEZ4MFhIUmNkSFJvYVhNdWRHVnRjR3hoZEdVdWNtVnRiM1psS0NrN1hHNWNibHgwWEhSY2RGeDBMeThnU1c1elpYSjBJSFJvWlNCaFpHUWdZblYwZEc5dUlHbG1JR2wwSjNNZ2JtOTBJR0ZzY21WaFpIa2dhVzRnZEdobElFUlBUVnh1WEhSY2RGeDBYSFJwWmlBb0lYUm9hWE11WVdSa1FuVjBkRzl1TG5CaGNtVnVkRTV2WkdVcElIdGNibHgwWEhSY2RGeDBYSFJwWmlBb2RHaHBjeTVpYjNSMGIyMVZjQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBkR2hwY3k1aFpHUkNkWFIwYjI0dVh5NWlaV1p2Y21Vb0pDNTJZV3gxWlNoMGFHbHpMbWwwWlcxeld6QmRMQ0JjSW1Wc1pXMWxiblJjSWlrZ2ZId2dkR2hwY3k1dFlYSnJaWElwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBYSFJjZEhaaGNpQjBZV2NnUFNCMGFHbHpMbVZzWlcxbGJuUXVkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhIUmNkRngwWEhSY2RGeDBkbUZ5SUdOdmJuUmhhVzVsY2xObGJHVmpkRzl5SUQwZ1YzbHphV1V1YzJWc1pXTjBiM0p6TG1OdmJuUmhhVzVsY2x0MFlXZGRPMXh1WEc1Y2RGeDBYSFJjZEZ4MFhIUnBaaUFvWTI5dWRHRnBibVZ5VTJWc1pXTjBiM0lwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZG1GeUlHRm1kR1Z5SUQwZ2RHaHBjeTV0WVhKclpYSXVZMnh2YzJWemRDaGpiMjUwWVdsdVpYSlRaV3hsWTNSdmNpazdYRzVjZEZ4MFhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBYSFJjZEhSb2FYTXVZV1JrUW5WMGRHOXVMbDh1WVdaMFpYSW9ZV1owWlhJZ0ppWWdZV1owWlhJdWNHRnlaVzUwVG05a1pUOGdZV1owWlhJZ09pQjBhR2x6TG0xaGNtdGxjaWs3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwZEdocGN5NTBaVzF3YkdGMFpTQTlJSFJvYVhNdVpXeGxiV1Z1ZEM1amJHOXVaVTV2WkdVb2RISjFaU2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEd4aGVuazZJSHRjYmx4MFhIUmliM1IwYjIxVmNEb2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFF2S2x4dVhIUmNkRngwSUNvZ1FXUmtJRzVsZHlCcGRHVnRjeUJoZENCMGFHVWdkRzl3SUc5eUlHSnZkSFJ2YlQ5Y2JseDBYSFJjZENBcUwxeHVYSFJjZEZ4MGFXWWdLQ0YwYUdsekxtMTFkR0ZpYkdVcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhScFppQW9kR2hwY3k1MFpXMXdiR0YwWlM1b1lYTkJkSFJ5YVdKMWRHVW9YQ0prWVhSaExXSnZkSFJ2YlhWd1hDSXBLU0I3WEc1Y2RGeDBYSFJjZEM4dklFRjBkSEpwWW5WMFpTQmtZWFJoTFdKdmRIUnZiWFZ3SUdoaGN5QjBhR1VnYUdsbmFHVnpkQ0J3Y21sdmNtbDBlU0JoYm1RZ2IzWmxjbkpwWkdWeklHRnVlU0JvWlhWeWFYTjBhV056WEc1Y2RGeDBYSFJjZEM4dklGUlBSRThnZDJoaGRDQnBaaUIzWlNCM1lXNTBJSFJ2SUc5MlpYSnlhV1JsSUhSb1pTQm9aWFZ5YVhOMGFXTnpJR0Z1WkNCelpYUWdhWFFnZEc4Z1ptRnNjMlUvWEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUnBaaUFvSVhSb2FYTXVZV1JrUW5WMGRHOXVMbkJoY21WdWRFNXZaR1VwSUh0Y2JseDBYSFJjZEZ4MEx5OGdTV1lnWVdSa0lHSjFkSFJ2YmlCdWIzUWdhVzRnUkU5TkxDQmtieUIwYUdVZ1pHVm1ZWFZzZEZ4dVhIUmNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVsbUlHRmtaQ0JpZFhSMGIyNGdhWE1nWVd4eVpXRmtlU0JwYmlCMGFHVWdSRTlOSUdGdVpDQXFZbVZtYjNKbEtpQnZkWElnZEdWdGNHeGhkR1VzSUhSb1pXNGdkMlVnWkdWbVlYVnNkQ0IwYnlCd2NtVndaVzVrYVc1blhHNWNkRngwWEhSeVpYUjFjbTRnSVNFb2RHaHBjeTVoWkdSQ2RYUjBiMjR1WTI5dGNHRnlaVVJ2WTNWdFpXNTBVRzl6YVhScGIyNG9kR2hwY3k1MFpXMXdiR0YwWlNrZ0ppQk9iMlJsTGtSUFExVk5SVTVVWDFCUFUwbFVTVTlPWDBaUFRFeFBWMGxPUnlrN1hHNWNkRngwZlN4Y2JseHVYSFJjZEdOc2IzTmxjM1JEYjJ4c1pXTjBhVzl1T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RIWmhjaUJ3WVhKbGJuUWdQU0IwYUdsekxtMWhjbXRsY2o4Z2RHaHBjeTV0WVhKclpYSXVjR0Z5Wlc1MFRtOWtaU0E2SUhSb2FYTXVkR1Z0Y0d4aGRHVXVjR0Z5Wlc1MFRtOWtaVHRjYmx4dVhIUmNkRngwY21WMGRYSnVJSEJoY21WdWRDNWpiRzl6WlhOMEtGZDVjMmxsTG5ObGJHVmpkRzl5Y3k1cGRHVnRLVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBZV1JrUW5WMGRHOXVPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEM4dklFWnBibVFnWVdSa0lHSjFkSFJ2YmlCcFppQndjbTkyYVdSbFpDd2diM0lnWjJWdVpYSmhkR1VnYjI1bFhHNWNkRngwWEhSMllYSWdjMlZzWldOMGIzSWdQU0JnWW5WMGRHOXVMbUZrWkMwa2UzUm9hWE11Y0hKdmNHVnlkSGw5WUR0Y2JseDBYSFJjZEhaaGNpQnpZMjl3WlNBOUlIUm9hWE11WTJ4dmMyVnpkRU52Ykd4bFkzUnBiMjRnZkh3Z2RHaHBjeTV0WVhKclpYSXVZMnh2YzJWemRDaFhlWE5wWlM1elpXeGxZM1J2Y25NdWMyTnZjR1VwTzF4dVhHNWNkRngwWEhScFppQW9jMk52Y0dVcElIdGNibHgwWEhSY2RGeDBkbUZ5SUdKMWRIUnZiaUE5SUNRa0tITmxiR1ZqZEc5eUxDQnpZMjl3WlNrdVptbHNkR1Z5S0dKMWRIUnZiaUE5UGlCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlDRjBhR2x6TG5SbGJYQnNZWFJsTG1OdmJuUmhhVzV6S0dKMWRIUnZiaWs3WEc1Y2RGeDBYSFJjZEgwcFd6QmRPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJwWmlBb0lXSjFkSFJ2YmlrZ2UxeHVYSFJjZEZ4MFhIUmlkWFIwYjI0Z1BTQWtMbU55WldGMFpTaGNJbUoxZEhSdmJsd2lMQ0I3WEc1Y2RGeDBYSFJjZEZ4MFkyeGhjM05PWVcxbE9pQmNJbUZrWkZ3aUxGeHVYSFJjZEZ4MFhIUmNkSFJsZUhSRGIyNTBaVzUwT2lCY0lrRmtaQ0JjSWlBcklIUm9hWE11Ym1GdFpWeHVYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkSDA3WEc1Y2JseDBYSFJjZEdKMWRIUnZiaTVqYkdGemMweHBjM1F1WVdSa0tGd2lkM2x6YVdVdGRXbGNJaXdnWENKM2VYTnBaUzFoWkdSY0lpazdYRzVjYmx4MFhIUmNkR2xtSUNoMGFHbHpMbkJ5YjNCbGNuUjVLU0I3WEc1Y2RGeDBYSFJjZEdKMWRIUnZiaTVqYkdGemMweHBjM1F1WVdSa0tHQmhaR1F0Skh0MGFHbHpMbkJ5YjNCbGNuUjVmV0FwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSaWRYUjBiMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW1Oc2FXTnJYQ0lzSUdWMmRDQTlQaUI3WEc1Y2RGeDBYSFJjZEdWMmRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVYRzVjZEZ4MFhIUmNkSFJvYVhNdVlXUmtLQ2t1WldScGRDZ3BPMXh1WEhSY2RGeDBmU2s3WEc1Y2JseDBYSFJjZEhKbGRIVnliaUJpZFhSMGIyNDdYRzVjZEZ4MGZWeHVYSFI5WEc1OUtUdGNibHh1ZlNrb1FteHBjM01zSUVKc2FYTnpMaVFwTzF4dUlpd2lMeXBjYmtOdmNIbHlhV2RvZENBb1l5a2dNakF3T1NCS1lXMWxjeUJRWVdSdmJITmxlUzRnSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNWNibEpsWkdsemRISnBZblYwYVc5dUlHRnVaQ0IxYzJVZ2FXNGdjMjkxY21ObElHRnVaQ0JpYVc1aGNua2dabTl5YlhNc0lIZHBkR2dnYjNJZ2QybDBhRzkxZEZ4dWJXOWthV1pwWTJGMGFXOXVMQ0JoY21VZ2NHVnliV2wwZEdWa0lIQnliM1pwWkdWa0lIUm9ZWFFnZEdobElHWnZiR3h2ZDJsdVp5QmpiMjVrYVhScGIyNXpYRzVoY21VZ2JXVjBPbHh1WEc0Z0lDQXhMaUJTWldScGMzUnlhV0oxZEdsdmJuTWdiMllnYzI5MWNtTmxJR052WkdVZ2JYVnpkQ0J5WlhSaGFXNGdkR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kRnh1WEhRZ0lHNXZkR2xqWlN3Z2RHaHBjeUJzYVhOMElHOW1JR052Ym1ScGRHbHZibk1nWVc1a0lIUm9aU0JtYjJ4c2IzZHBibWNnWkdselkyeGhhVzFsY2k1Y2JseHVJQ0FnTWk0Z1VtVmthWE4wY21saWRYUnBiMjV6SUdsdUlHSnBibUZ5ZVNCbWIzSnRJRzExYzNRZ2NtVndjbTlrZFdObElIUm9aU0JoWW05MlpTQmpiM0I1Y21sbmFIUmNibHgwSUNCdWIzUnBZMlVzSUhSb2FYTWdiR2x6ZENCdlppQmpiMjVrYVhScGIyNXpJR0Z1WkNCMGFHVWdabTlzYkc5M2FXNW5JR1JwYzJOc1lXbHRaWElnYVc0Z2RHaGxYRzVjZENBZ1pHOWpkVzFsYm5SaGRHbHZiaUJoYm1RdmIzSWdiM1JvWlhJZ2JXRjBaWEpwWVd4eklIQnliM1pwWkdWa0lIZHBkR2dnZEdobElHUnBjM1J5YVdKMWRHbHZiaTVjYmx4dVZFaEpVeUJUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCQ1dTQktZVzFsY3lCUVlXUnZiSE5sZVNCZ1lFRlRJRWxUWENKY0lpQkJUa1JjYmtGT1dTQkZXRkJTUlZOVElFOVNJRWxOVUV4SlJVUWdWMEZTVWtGT1ZFbEZVeXdnU1U1RFRGVkVTVTVITENCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4c0lGUklSVnh1U1UxUVRFbEZSQ0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1NCQlRrUWdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBWY2JrRlNSU0JFU1ZORFRFRkpUVVZFTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCS1lXMWxjeUJRWVdSdmJITmxlU0JQVWlCRFQwNVVVa2xDVlZSUFVsTWdRa1VnVEVsQlFreEZYRzVHVDFJZ1FVNVpJRVJKVWtWRFZDd2dTVTVFU1ZKRlExUXNJRWxPUTBsRVJVNVVRVXdzSUZOUVJVTkpRVXdzSUVWWVJVMVFURUZTV1N3Z1QxSWdRMDlPVTBWUlZVVk9WRWxCVEZ4dVJFRk5RVWRGVXlBb1NVNURURlZFU1U1SExDQkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOHNJRkJTVDBOVlVrVk5SVTVVSUU5R0lGTlZRbE5VU1ZSVlZFVWdSMDlQUkZNZ1QxSmNibE5GVWxaSlEwVlRPeUJNVDFOVElFOUdJRlZUUlN3Z1JFRlVRU3dnVDFJZ1VGSlBSa2xVVXpzZ1QxSWdRbFZUU1U1RlUxTWdTVTVVUlZKU1ZWQlVTVTlPS1NCSVQxZEZWa1ZTWEc1RFFWVlRSVVFnUVU1RUlFOU9JRUZPV1NCVVNFVlBVbGtnVDBZZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRU5QVGxSU1FVTlVMQ0JUVkZKSlExUmNia3hKUVVKSlRFbFVXU3dnVDFJZ1ZFOVNWQ0FvU1U1RFRGVkVTVTVISUU1RlIweEpSMFZPUTBVZ1QxSWdUMVJJUlZKWFNWTkZLU0JCVWtsVFNVNUhJRWxPSUVGT1dTQlhRVmxjYms5VlZDQlBSaUJVU0VVZ1ZWTkZJRTlHSUZSSVNWTWdVMDlHVkZkQlVrVXNJRVZXUlU0Z1NVWWdRVVJXU1ZORlJDQlBSaUJVU0VVZ1VFOVRVMGxDU1V4SlZGa2dUMFpjYmxOVlEwZ2dSRUZOUVVkRkxseHVYRzVVYUdVZ2RtbGxkM01nWVc1a0lHTnZibU5zZFhOcGIyNXpJR052Ym5SaGFXNWxaQ0JwYmlCMGFHVWdjMjltZEhkaGNtVWdZVzVrSUdSdlkzVnRaVzUwWVhScGIyNGdZWEpsWEc1MGFHOXpaU0J2WmlCMGFHVWdZWFYwYUc5eWN5QmhibVFnYzJodmRXeGtJRzV2ZENCaVpTQnBiblJsY25CeVpYUmxaQ0JoY3lCeVpYQnlaWE5sYm5ScGJtY2diMlptYVdOcFlXeGNibkJ2YkdsamFXVnpMQ0JsYVhSb1pYSWdaWGh3Y21WemMyVmtJRzl5SUdsdGNHeHBaV1FzSUc5bUlFcGhiV1Z6SUZCaFpHOXNjMlY1TGx4dVhHNGdRVlZVU0U5U0lFcGhiV1Z6SUZCaFpHOXNjMlY1SUNob2RIUndPaTh2YW1GdFpYTXVjR0ZrYjJ4elpYa3VZMjl0S1Z4dUlGWkZVbE5KVDA0Z01TNHdNeTR3WEc0Z1ZWQkVRVlJGUkNBeU9TMHhNQzB5TURFeFhHNGdRMDlPVkZKSlFsVlVUMUpUWEc1Y2RFUmhkbWxrSUZkaGJHeGxjbHh1SUNBZ0lFSmxibXBoYldsdUlFUnlkV05yWlhKY2JseHVLaTljYmx4dWRtRnlJSEJ5WlhSMGVWQnlhVzUwSUQwZ0tHWjFibU4wYVc5dUtDa2dlMXh1WEc1Y2RDOHFJRlJvWlhObElGd2lkWFJwYkZ3aUlHWjFibU4wYVc5dWN5QmhjbVVnYm05MElIQmhjblFnYjJZZ2RHaGxJR052Y21WY2JseDBJQ0FnWm5WdVkzUnBiMjVoYkdsMGVTQmlkWFFnWVhKbElDQmhiR3dnYm1WalpYTnpZWEo1SUMwZ2JXOXpkR3g1SUVSUFRTQm9aV3h3WlhKeklDb3ZYRzVjYmx4MGRtRnlJSFYwYVd3Z1BTQjdYRzVjYmx4MFhIUjBlSFE2SUdaMWJtTjBhVzl1S0hRcElIdGNibHgwWEhSY2RDOHFJRU55WldGMFpTQjBaWGgwSUc1dlpHVWdLaTljYmx4MFhIUmNkSFFnUFNCMElDc2dYQ0pjSWp0Y2JseDBYSFJjZEhKbGRIVnliaUJrYjJOMWJXVnVkQzVqY21WaGRHVlVaWGgwVG05a1pTaDBLVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBjbTkzT2lCbWRXNWpkR2x2YmloalpXeHNjeXdnZEhsd1pTd2dZMlZzYkZSNWNHVXBJSHRjYmx4dVhIUmNkRngwTHlvZ1EzSmxZWFJsY3lCdVpYY2dQSFJ5UGlBcUwxeHVYSFJjZEZ4MFkyVnNiRlI1Y0dVZ1BTQmpaV3hzVkhsd1pTQjhmQ0JjSW5Sa1hDSTdYRzVjYmx4MFhIUmNkQzhxSUdOdmJGTndZVzRnYVhNZ1kyRnNZM1ZzWVhSbFpDQmllU0JzWlc1bmRHZ2diMllnYm5Wc2JDQnBkR1Z0Y3lCcGJpQmhjbkpoZVNBcUwxeHVYSFJjZEZ4MGRtRnlJR052YkZOd1lXNGdQU0IxZEdsc0xtTnZkVzUwS0dObGJHeHpMQ0J1ZFd4c0tTQXJJREVzWEc1Y2RGeDBYSFJjZEhSeUlEMGdKQzVqY21WaGRHVW9YQ0owY2x3aUtTd2dkR1FzWEc1Y2RGeDBYSFJjZEdGMGRISnpJRDBnZTF4dVhIUmNkRngwWEhSY2RHTnZiRk53WVc0NklHTnZiRk53WVc1Y2JseDBYSFJjZEZ4MGZUdGNibHh1WEhSY2RGeDBKQ1FvWTJWc2JITXBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9ZMlZzYkNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvWTJWc2JDQTlQVDBnYm5Wc2JDa2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RDOHFJRVJsWm1GMWJIUWdZMlZzYkNCMGVYQmxJR2x6SUR4MFpENGdLaTljYmx4MFhIUmNkRngwZEdRZ1BTQWtMbU55WldGMFpTaGpaV3hzVkhsd1pTd2dZWFIwY25NcE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNoalpXeHNMbTV2WkdWVWVYQmxLU0I3WEc1Y2RGeDBYSFJjZEZ4MEx5b2dTWE5FYjIxRmJHVnRaVzUwSUNvdlhHNWNkRngwWEhSY2RGeDBkR1F1WVhCd1pXNWtRMmhwYkdRb1kyVnNiQ2s3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFpXeHpaU0I3WEc1Y2RGeDBYSFJjZEZ4MEx5b2dTWE5UZEhKcGJtY2dLaTljYmx4MFhIUmNkRngwWEhSMFpDNXBibTVsY2toVVRVd2dQU0IxZEdsc0xuTm9iM0owWlc0b1kyVnNiQzUwYjFOMGNtbHVaeWdwS1R0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkSFJ5TG1Gd2NHVnVaRU5vYVd4a0tIUmtLVHRjYmx4MFhIUmNkSDBwTzF4dVhHNWNkRngwWEhSeVpYUjFjbTRnZEhJN1hHNWNkRngwZlN4Y2JseHVYSFJjZEdoU2IzYzZJR1oxYm1OMGFXOXVLR05sYkd4ekxDQjBlWEJsS1NCN1hHNWNkRngwWEhRdktpQlNaWFIxY200Z2JtVjNJRHgwYUQ0Z0tpOWNibHgwWEhSY2RISmxkSFZ5YmlCMWRHbHNMbkp2ZHloalpXeHNjeXdnZEhsd1pTd2dYQ0owYUZ3aUtUdGNibHgwWEhSOUxGeHVYRzVjZEZ4MGRHRmliR1U2SUdaMWJtTjBhVzl1S0dobFlXUnBibWR6TENCMGVYQmxLU0I3WEc1Y2JseDBYSFJjZEdobFlXUnBibWR6SUQwZ2FHVmhaR2x1WjNNZ2ZId2dXMTA3WEc1Y2JseDBYSFJjZEM4cUlFTnlaV0YwWlhNZ2JtVjNJSFJoWW14bE9pQXFMMXh1WEhSY2RGeDBkbUZ5SUhSaWJDQTlJQ1F1WTNKbFlYUmxLRndpZEdGaWJHVmNJaWs3WEc1Y2RGeDBYSFIyWVhJZ2RHaGxZV1FnUFNBa0xtTnlaV0YwWlNoY0luUm9aV0ZrWENJcE8xeHVYSFJjZEZ4MGRtRnlJSFJpYjJSNUlEMGdKQzVqY21WaGRHVW9YQ0owWW05a2VWd2lLVHRjYmx4dVhIUmNkRngwZEdKc0xtTnNZWE56VEdsemRDNWhaR1FvZEhsd1pTazdYRzVjYmx4MFhIUmNkR2xtSUNob1pXRmthVzVuY3k1c1pXNW5kR2dwSUh0Y2JseDBYSFJjZEZ4MGRHSnNMbUZ3Y0dWdVpFTm9hV3hrS0hSb1pXRmtLVHRjYmx4MFhIUmNkRngwZEdobFlXUXVZWEJ3Wlc1a1EyaHBiR1FvSUhWMGFXd3VhRkp2ZHlob1pXRmthVzVuY3l3Z2RIbHdaU2tnS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGRHSnNMbUZ3Y0dWdVpFTm9hV3hrS0hSaWIyUjVLVHRjYmx4dVhIUmNkRngwY21WMGRYSnVJSHRjYmx4MFhIUmNkRngwTHlvZ1JtRmpZV1JsSUdadmNpQmtaV0ZzYVc1bklIZHBkR2dnZEdGaWJHVXZkR0p2WkhsY2JseDBYSFJjZEZ4MElDQWdRV04wZFdGc0lIUmhZbXhsSUc1dlpHVWdhWE1nZEdocGN5NXViMlJsT2lBcUwxeHVYSFJjZEZ4MFhIUnViMlJsT2lCMFltd3NYRzVjZEZ4MFhIUmNkSFJpYjJSNU9pQjBZbTlrZVN4Y2JseDBYSFJjZEZ4MGRHaGxZV1E2SUhSb1pXRmtMRnh1WEhSY2RGeDBYSFJoY0hCbGJtUkRhR2xzWkRvZ1puVnVZM1JwYjI0b2JtOWtaU2tnZTF4dVhIUmNkRngwWEhSY2RIUm9hWE11ZEdKdlpIa3VZWEJ3Wlc1a1EyaHBiR1FvYm05a1pTazdYRzVjZEZ4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjZEdGa1pGSnZkem9nWm5WdVkzUnBiMjRvWTJWc2JITXNJRjkwZVhCbExDQmpaV3hzVkhsd1pTa2dlMXh1WEhSY2RGeDBYSFJjZEhSb2FYTXVZWEJ3Wlc1a1EyaHBiR1FvZFhScGJDNXliM2NvWTJWc2JITXNJQ2hmZEhsd1pTQjhmQ0IwZVhCbEtTd2dZMlZzYkZSNWNHVXBLVHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnZEdocGN6dGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVHRjYmx4MFhIUjlMRnh1WEc1Y2RGeDBjMmh2Y25SbGJqb2dablZ1WTNScGIyNG9jM1J5S1NCN1hHNWNkRngwWEhSMllYSWdiV0Y0SUQwZ05EQTdYRzVjZEZ4MFhIUnpkSElnUFNCemRISXVjbVZ3YkdGalpTZ3ZYbHhjYzF4Y2N5cDhYRnh6WEZ4ektpUjhYRnh1TDJjc0lGd2lYQ0lwTzF4dVhIUmNkRngwY21WMGRYSnVJSE4wY2k1c1pXNW5kR2dnUGlCdFlYZ2dQeUFvYzNSeUxuTjFZbk4wY21sdVp5Z3dMQ0J0WVhndE1Ta2dLeUJjSWk0dUxsd2lLU0E2SUhOMGNqdGNibHgwWEhSOUxGeHVYRzVjZEZ4MGFIUnRiR1Z1ZEdsMGFXVnpPaUJtZFc1amRHbHZiaWh6ZEhJcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCemRISXVjbVZ3YkdGalpTZ3ZKaTluTENCY0lpWmhiWEE3WENJcExuSmxjR3hoWTJVb0x6d3ZaeXdnWENJbWJIUTdYQ0lwTG5KbGNHeGhZMlVvTHo0dlp5d2dYQ0ltWjNRN1hDSXBPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUmpiM1Z1ZERvZ1puVnVZM1JwYjI0b1lYSnlMQ0JwZEdWdEtTQjdYRzVjZEZ4MFhIUjJZWElnWTI5MWJuUWdQU0F3TzF4dVhIUmNkRngwWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCaGNuSXViR1Z1WjNSb095QnBQQ0JzT3lCcEt5c3BJSHRjYmx4MFhIUmNkRngwYVdZZ0tHRnljbHRwWFNBOVBUMGdhWFJsYlNrZ2UxeHVYSFJjZEZ4MFhIUmNkR052ZFc1MEt5czdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDFjYmx4MFhIUmNkSEpsZEhWeWJpQmpiM1Z1ZER0Y2JseDBYSFI5TEZ4dVhHNWNkRngwZEdobFlXUTZJR1oxYm1OMGFXOXVLSFJpYkNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhSaWJDNW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU2hjSW5Sb1pXRmtYQ0lwV3pCZE8xeHVYSFJjZEgwc1hHNWNibHgwWEhSM2FYUm9hVzQ2SUdaMWJtTjBhVzl1S0hKbFppa2dlMXh1WEhSY2RGeDBMeW9nUTJobFkyc2daWGhwYzNSbGJtTmxJRzltSUdFZ2RtRnNJSGRwZEdocGJpQmhiaUJ2WW1wbFkzUmNibHgwWEhSY2RDQWdJRkpGVkZWU1RsTWdTMFZaSUNvdlhHNWNkRngwWEhSeVpYUjFjbTRnZTF4dVhIUmNkRngwWEhScGN6b2dablZ1WTNScGIyNG9ieWtnZTF4dVhIUmNkRngwWEhSY2RHWnZjaUFvZG1GeUlHa2dhVzRnY21WbUtTQjdYRzVjZEZ4MFhIUmNkRngwWEhScFppQW9jbVZtVzJsZElEMDlQU0J2S1NCN1hHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGRIVnliaUJwTzF4dVhIUmNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1hDSmNJanRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlR0Y2JseDBYSFI5TEZ4dVhHNWNkRngwWTI5dGJXOXVPaUI3WEc1Y2RGeDBYSFJqYVhKalVtVm1PaUJtZFc1amRHbHZiaWh2WW1vc0lHdGxlU3dnYzJWMGRHbHVaM01wSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhWMGFXd3VaWGh3WVc1a1pYSW9YRzVjZEZ4MFhIUmNkRngwWENKYlVFOUpUbFJUSUVKQlEwc2dWRThnUEhOMGNtOXVaejVjSWlBcklDaHJaWGtwSUNzZ1hDSThMM04wY205dVp6NWRYQ0lzWEc1Y2RGeDBYSFJjZEZ4MFhDSkRiR2xqYXlCMGJ5QnphRzkzSUhSb2FYTWdhWFJsYlNCaGJubDNZWGxjSWl4Y2JseDBYSFJjZEZ4MFhIUm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwWEhSY2RIUm9hWE11Y0dGeVpXNTBUbTlrWlM1aGNIQmxibVJEYUdsc1pDaHdjbVYwZEhsUWNtbHVkRlJvYVhNb2IySnFMQ0I3YldGNFJHVndkR2c2TVgwcEtUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZENrN1hHNWNkRngwWEhSOUxGeHVYSFJjZEZ4MFpHVndkR2hTWldGamFHVmtPaUJtZFc1amRHbHZiaWh2WW1vc0lITmxkSFJwYm1kektTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjFkR2xzTG1WNGNHRnVaR1Z5S0Z4dVhIUmNkRngwWEhSY2RGd2lXMFJGVUZSSUlGSkZRVU5JUlVSZFhDSXNYRzVjZEZ4MFhIUmNkRngwWENKRGJHbGpheUIwYnlCemFHOTNJSFJvYVhNZ2FYUmxiU0JoYm5sM1lYbGNJaXhjYmx4MFhIUmNkRngwWEhSbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFJjZEhSeWVTQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RIUm9hWE11Y0dGeVpXNTBUbTlrWlM1aGNIQmxibVJEYUdsc1pDZ2djSEpsZEhSNVVISnBiblJVYUdsektHOWlhaXdnZTIxaGVFUmxjSFJvT2pGOUtTQXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWTJGMFkyZ2dLR1VwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZEdocGN5NXdZWEpsYm5ST2IyUmxMbUZ3Y0dWdVpFTm9hV3hrS0Z4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEhWMGFXd3VkR0ZpYkdVb1cxd2lSVkpTVDFJZ1QwTkRWVkpGUkNCRVZWSkpUa2NnVDBKS1JVTlVJRkpGVkZKSlJWWkJURndpWFN3Z1hDSmxjbkp2Y2x3aUtTNWhaR1JTYjNjb1cyVXViV1Z6YzJGblpWMHBMbTV2WkdWY2JseDBYSFJjZEZ4MFhIUmNkRngwS1R0Y2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTeGNibHh1WEhSY2RHVjRjR0Z1WkdWeU9pQm1kVzVqZEdsdmJpaDBaWGgwTENCMGFYUnNaU3dnWTJ4cFkydEdiaWtnZTF4dVhIUmNkRngwY21WMGRYSnVJQ1F1WTNKbFlYUmxLRndpWVZ3aUxDQjdYRzVjZEZ4MFhIUmNkR2x1Ym1WeVNGUk5URG9nSUhWMGFXd3VjMmh2Y25SbGJpaDBaWGgwS1NBcklDY2dQR0lnYzNSNWJHVTlYQ0oyYVhOcFltbHNhWFI1T21ocFpHUmxianRjSWo1YksxMDhMMkkrSnl4Y2JseDBYSFJjZEZ4MGRHbDBiR1U2SUhScGRHeGxMRnh1WEhSY2RGeDBYSFJ2Ym0xdmRYTmxiM1psY2pvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUmNkRngwZEdocGN5NW5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU2hjSW1KY0lpbGJNRjB1YzNSNWJHVXVkbWx6YVdKcGJHbDBlU0E5SUZ3aWRtbHphV0pzWlZ3aU8xeHVYSFJjZEZ4MFhIUjlMRnh1WEhSY2RGeDBYSFJ2Ym0xdmRYTmxiM1YwT2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RGeDBYSFIwYUdsekxtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLRndpWWx3aUtWc3dYUzV6ZEhsc1pTNTJhWE5wWW1sc2FYUjVJRDBnWENKb2FXUmtaVzVjSWp0Y2JseDBYSFJjZEZ4MGZTeGNibHgwWEhSY2RGeDBiMjVqYkdsamF6b2dablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBYSFJjZEZ4MGRHaHBjeTV6ZEhsc1pTNWthWE53YkdGNUlEMGdYQ0p1YjI1bFhDSTdYRzVjZEZ4MFhIUmNkRngwWTJ4cFkydEdiaTVqWVd4c0tIUm9hWE1wTzF4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkRngwZlN4Y2JseDBYSFJjZEZ4MGMzUjViR1U2SUh0Y2JseDBYSFJjZEZ4MFhIUmpkWEp6YjNJNklGd2ljRzlwYm5SbGNsd2lYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDFjYmx4MGZUdGNibHh1WEhRdkx5Qk5ZV2x1TGk1Y2JseDBkbUZ5SUhCeVpYUjBlVkJ5YVc1MFZHaHBjeUE5SUdaMWJtTjBhVzl1S0c5aWFpd2diM0IwYVc5dWN5a2dlMXh1WEc1Y2RGeDBJQzhxWEc1Y2RGeDBJQ3BjZENBZ2IySnFJRG82SUU5aWFtVmpkQ0IwYnlCaVpTQndjbWx1ZEdWa1hHNWNkRngwSUNvZ0lHOXdkR2x2Ym5NZ09qb2dUM0IwYVc5dWN5QW9iV1Z5WjJWa0lIZHBkR2dnWTI5dVptbG5LVnh1WEhSY2RDQXFMMXh1WEc1Y2RGeDBiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN1hHNWNibHgwWEhSMllYSWdjMlYwZEdsdVozTWdQU0FrTG1WNGRHVnVaQ2dnZTMwc0lIQnlaWFIwZVZCeWFXNTBWR2hwY3k1amIyNW1hV2NzSUc5d2RHbHZibk1nS1N4Y2JseDBYSFJjZEdOdmJuUmhhVzVsY2lBOUlDUXVZM0psWVhSbEtGd2laR2wyWENJcExGeHVYSFJjZEZ4MFkyOXVabWxuSUQwZ2NISmxkSFI1VUhKcGJuUlVhR2x6TG1OdmJtWnBaeXhjYmx4MFhIUmNkR04xY25KbGJuUkVaWEIwYUNBOUlEQXNYRzVjZEZ4MFhIUnpkR0ZqYXlBOUlIdDlMRnh1WEhSY2RGeDBhR0Z6VW5WdVQyNWpaU0E5SUdaaGJITmxPMXh1WEc1Y2RGeDBMeW9nUlhod2IzTmxJSEJsY2kxallXeHNJSE5sZEhScGJtZHpMbHh1WEhSY2RDQWdJRTV2ZEdVNklGd2lZMjl1Wm1sblhDSWdhWE1nYjNabGNuZHlhWFIwWlc0Z0tIZG9aWEpsSUc1bFkyVnpjMkZ5ZVNrZ1lua2diM0IwYVc5dWN5OWNJbk5sZEhScGJtZHpYQ0pjYmx4MFhIUWdJQ0JUYnl3Z2FXWWdlVzkxSUc1bFpXUWdkRzhnWVdOalpYTnpMMk5vWVc1blpTQXFSRVZHUVZWTVZDb2djMlYwZEdsdVozTWdkR2hsYmlCbmJ5QjJhV0VnWENJdVkyOXVabWxuWENJZ0tpOWNibHgwWEhSd2NtVjBkSGxRY21sdWRGUm9hWE11YzJWMGRHbHVaM01nUFNCelpYUjBhVzVuY3p0Y2JseHVYSFJjZEhaaGNpQjBlWEJsUkdWaGJHVnlJRDBnZTF4dVhIUmNkRngwYzNSeWFXNW5JRG9nWm5WdVkzUnBiMjRvYVhSbGJTa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkWFJwYkM1MGVIUW9KMXdpSnlBcklIVjBhV3d1YzJodmNuUmxiaWhwZEdWdExuSmxjR3hoWTJVb0wxd2lMMmNzSUNkY1hGeGNYQ0luS1NrZ0t5QW5YQ0luS1R0Y2JseDBYSFJjZEgwc1hHNWNibHgwWEhSY2RHOWlhbVZqZENBNklHWjFibU4wYVc5dUtHOWlhaXdnWkdWd2RHZ3NJR3RsZVNrZ2UxeHVYRzVjZEZ4MFhIUmNkQzhxSUVOb1pXTnJhVzVuSUdSbGNIUm9JQ3NnWTJseVkzVnNZWElnY21WbWN5QXFMMXh1WEhSY2RGeDBYSFF2S2lCT2IzUmxMQ0JqYUdWamF5Qm1iM0lnWTJseVkzVnNZWElnY21WbWN5QmlaV1p2Y21VZ1pHVndkR2c3SUdwMWMzUWdiV0ZyWlhNZ2JXOXlaU0J6Wlc1elpTQXFMMXh1WEhSY2RGeDBYSFIyWVhJZ2MzUmhZMnRMWlhrZ1BTQjFkR2xzTG5kcGRHaHBiaWh6ZEdGamF5a3VhWE1vYjJKcUtUdGNibHh1WEhSY2RGeDBYSFJwWmlBb0lITjBZV05yUzJWNUlDa2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUIxZEdsc0xtTnZiVzF2Ymk1amFYSmpVbVZtS0c5aWFpd2djM1JoWTJ0TFpYa3NJSE5sZEhScGJtZHpLVHRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RITjBZV05yVzJ0bGVYeDhYQ0pVVDFCY0lsMGdQU0J2WW1vN1hHNWNibHgwWEhSY2RGeDBhV1lnS0dSbGNIUm9JRDA5UFNCelpYUjBhVzVuY3k1dFlYaEVaWEIwYUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQjFkR2xzTG1OdmJXMXZiaTVrWlhCMGFGSmxZV05vWldRb2IySnFMQ0J6WlhSMGFXNW5jeWs3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUjJZWElnZEdGaWJHVWdQU0IxZEdsc0xuUmhZbXhsS0Z0Y0lrZHliM1Z3WENJc0lHNTFiR3hkTENCY0ltOWlhbVZqZEZ3aUtTeGNibHgwWEhSY2RGeDBYSFJwYzBWdGNIUjVJRDBnZEhKMVpUdGNibHh1WEhSY2RGeDBYSFJtYjNJZ0tIWmhjaUJwSUdsdUlHOWlhaWtnZTF4dVhIUmNkRngwWEhSY2RHbG1JQ2doYjJKcUxtaGhjMDkzYmxCeWIzQmxjblI1SUh4OElHOWlhaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHBLU2tnZTF4dVhIUmNkRngwWEhSY2RGeDBkbUZ5SUdsMFpXMGdQU0J2WW1wYmFWMHNYRzVjZEZ4MFhIUmNkRngwWEhSY2RIUjVjR1VnUFNBa0xuUjVjR1VvYVhSbGJTazdYRzVjZEZ4MFhIUmNkRngwWEhScGMwVnRjSFI1SUQwZ1ptRnNjMlU3WEc1Y2RGeDBYSFJjZEZ4MFhIUjBjbmtnZTF4dVhIUmNkRngwWEhSY2RGeDBYSFIwWVdKc1pTNWhaR1JTYjNjb1cya3NJSFI1Y0dWRVpXRnNaWEpiSUhSNWNHVWdYU2hwZEdWdExDQmtaWEIwYUNzeExDQnBLVjBzSUhSNWNHVXBPMXh1WEhSY2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmNkRngwWTJGMFkyZ2dLR1VwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkRngwTHlvZ1UyVmpkWEpwZEhrZ1pYSnliM0p6SUdGeVpTQjBhSEp2ZDI0Z2IyNGdZMlZ5ZEdGcGJpQlhhVzVrYjNjdlJFOU5JSEJ5YjNCbGNuUnBaWE1nS2k5Y2JseDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tIZHBibVJ2ZHk1amIyNXpiMnhsSUNZbUlIZHBibVJ2ZHk1amIyNXpiMnhsTG14dlp5a2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkR052Ym5OdmJHVXViRzluS0dVdWJXVnpjMkZuWlNrN1hHNWNkRngwWEhSY2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFIyWVhJZ2NtVjBJRDBnS0hObGRIUnBibWR6TG1WNGNHRnVaR1ZrSUh4OElHaGhjMUoxYms5dVkyVXBJRDhnZEdGaWJHVXVibTlrWlNBNklIVjBhV3d1Wlhod1lXNWtaWElvWEc1Y2RGeDBYSFJjZEZ4MFNsTlBUaTV6ZEhKcGJtZHBabmtvYjJKcUtTeGNibHgwWEhSY2RGeDBYSFJjSWtOc2FXTnJJSFJ2SUhOb2IzY2diVzl5WlZ3aUxGeHVYSFJjZEZ4MFhIUmNkR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBkR2hwY3k1d1lYSmxiblJPYjJSbExtRndjR1Z1WkVOb2FXeGtLSFJoWW14bExtNXZaR1VwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBLVHRjYmx4dVhIUmNkRngwWEhSb1lYTlNkVzVQYm1ObElEMGdkSEoxWlR0Y2JseHVYSFJjZEZ4MFhIUnlaWFIxY200Z2NtVjBPMXh1WEc1Y2RGeDBYSFI5TEZ4dVhHNWNkRngwWEhSaGNuSmhlU0E2SUdaMWJtTjBhVzl1S0dGeWNpd2daR1Z3ZEdnc0lHdGxlU3dnYW5GMVpYSjVLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5b2dRMmhsWTJ0cGJtY2daR1Z3ZEdnZ0t5QmphWEpqZFd4aGNpQnlaV1p6SUNvdlhHNWNkRngwWEhSY2RDOHFJRTV2ZEdVc0lHTm9aV05ySUdadmNpQmphWEpqZFd4aGNpQnlaV1p6SUdKbFptOXlaU0JrWlhCMGFEc2dhblZ6ZENCdFlXdGxjeUJ0YjNKbElITmxibk5sSUNvdlhHNWNkRngwWEhSY2RIWmhjaUJ6ZEdGamEwdGxlU0E5SUhWMGFXd3VkMmwwYUdsdUtITjBZV05yS1M1cGN5aGhjbklwTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2dnYzNSaFkydExaWGtnS1NCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlIVjBhV3d1WTI5dGJXOXVMbU5wY21OU1pXWW9ZWEp5TENCemRHRmphMHRsZVNrN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFJ6ZEdGamExdHJaWGw4ZkZ3aVZFOVFYQ0pkSUQwZ1lYSnlPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDaGtaWEIwYUNBOVBUMGdjMlYwZEdsdVozTXViV0Y0UkdWd2RHZ3BJSHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnZFhScGJDNWpiMjF0YjI0dVpHVndkR2hTWldGamFHVmtLR0Z5Y2lrN1hHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFF2S2lCQlkyTmxjSFJ6SUdFZ2RHRmliR1VnWVc1a0lHMXZaR2xtYVdWeklHbDBJQ292WEc1Y2RGeDBYSFJjZEhaaGNpQjBZV0pzWlNBOUlIVjBhV3d1ZEdGaWJHVW9XMXdpVEdsemRDQW9YQ0lnS3lCaGNuSXViR1Z1WjNSb0lDc2dYQ0lnYVhSbGJYTXBYQ0lzSUc1MWJHeGRMQ0JjSW14cGMzUmNJaWs3WEc1Y2RGeDBYSFJjZEhaaGNpQnBjMFZ0Y0hSNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMjkxYm5RZ1BTQXdPMXh1WEc1Y2RGeDBYSFJjZENRa0tHRnljaWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYVhSbGJTd2dhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWMGRHbHVaM011YldGNFFYSnlZWGtnUGowZ01DQW1KaUFySzJOdmRXNTBJRDRnYzJWMGRHbHVaM011YldGNFFYSnlZWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaFlteGxMbUZrWkZKdmR5aGJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNBcklGd2lMaTVjSWlBcklDaGhjbkl1YkdWdVozUm9MVEVwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1ZFWldGc1pYSmJJQ1F1ZEhsd1pTaHBkR1Z0S1NCZEtGd2lMaTR1WENJc0lHUmxjSFJvS3pFc0lHa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhSY2RGeDBYSFJjZEdselJXMXdkSGtnUFNCbVlXeHpaVHRjYmx4MFhIUmNkRngwWEhSMFlXSnNaUzVoWkdSU2IzY29XMmtzSUhSNWNHVkVaV0ZzWlhKYklDUXVkSGx3WlNocGRHVnRLU0JkS0dsMFpXMHNJR1JsY0hSb0t6RXNJR2twWFNrN1hHNWNkRngwWEhSY2RIMHBPMXh1WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJ6WlhSMGFXNW5jeTVsZUhCaGJtUmxaQ0EvSUhSaFlteGxMbTV2WkdVZ09pQjFkR2xzTG1WNGNHRnVaR1Z5S0Z4dVhIUmNkRngwWEhSY2RFcFRUMDR1YzNSeWFXNW5hV1o1S0dGeWNpa3NYRzVjZEZ4MFhIUmNkRngwWENKRGJHbGpheUIwYnlCemFHOTNJRzF2Y21WY0lpeGNibHgwWEhSY2RGeDBYSFJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MFhIUmNkSFJvYVhNdWNHRnlaVzUwVG05a1pTNWhjSEJsYm1SRGFHbHNaQ2gwWVdKc1pTNXViMlJsS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkQ2s3WEc1Y2JseDBYSFJjZEgwc1hHNWNibHgwWEhSY2RGd2laR0YwWlZ3aUlEb2dablZ1WTNScGIyNG9aR0YwWlNrZ2UxeHVYRzVjZEZ4MFhIUmNkSFpoY2lCdGFXNXBWR0ZpYkdVZ1BTQjFkR2xzTG5SaFlteGxLRnRjSWtSaGRHVmNJaXdnYm5Wc2JGMHNJRndpWkdGMFpWd2lLU3hjYmx4MFhIUmNkRngwWEhSelJHRjBaU0E5SUdSaGRHVXVkRzlUZEhKcGJtY29LUzV6Y0d4cGRDZ3ZYRnh6THlrN1hHNWNibHgwWEhSY2RGeDBMeW9nVkU5RVR6b2dUV0ZyWlNCMGFHbHpJSGR2Y21zZ2QyVnNiQ0JwYmlCSlJTRWdLaTljYmx4MFhIUmNkRngwYldsdWFWUmhZbXhsWEc1Y2RGeDBYSFJjZEZ4MExtRmtaRkp2ZHloYlhDSlVhVzFsWENJc0lITkVZWFJsV3pSZFhTbGNibHgwWEhSY2RGeDBYSFF1WVdSa1VtOTNLRnRjSWtSaGRHVmNJaXdnYzBSaGRHVXVjMnhwWTJVb01Dd2dOQ2t1YW05cGJpaGNJaTFjSWlsZEtUdGNibHh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdjMlYwZEdsdVozTXVaWGh3WVc1a1pXUWdQeUJ0YVc1cFZHRmliR1V1Ym05a1pTQTZJSFYwYVd3dVpYaHdZVzVrWlhJb1hHNWNkRngwWEhSY2RGeDBYQ0pFWVhSbElDaDBhVzFsYzNSaGJYQXBPaUJjSWlBcklDZ3JaR0YwWlNrc1hHNWNkRngwWEhSY2RGeDBYQ0pEYkdsamF5QjBieUJ6WldVZ1lTQnNhWFIwYkdVZ2JXOXlaU0JwYm1adklHRmliM1YwSUhSb2FYTWdaR0YwWlZ3aUxGeHVYSFJjZEZ4MFhIUmNkR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBkR2hwY3k1d1lYSmxiblJPYjJSbExtRndjR1Z1WkVOb2FXeGtLRzFwYm1sVVlXSnNaUzV1YjJSbEtUdGNibHgwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZENrN1hHNWNibHgwWEhSY2RIMWNibHgwWEhSOU8xeHVYRzVjZEZ4MGRIbHdaVVJsWVd4bGNpNXVkVzFpWlhJZ1BWeHVYSFJjZEhSNWNHVkVaV0ZzWlhJdVltOXZiR1ZoYmlBOVhHNWNkRngwZEhsd1pVUmxZV3hsY2k1MWJtUmxabWx1WldRZ1BWeHVYSFJjZEhSNWNHVkVaV0ZzWlhJdWJuVnNiQ0E5WEc1Y2RGeDBkSGx3WlVSbFlXeGxjaTVrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQjFkR2xzTG5SNGRDaDJZV3gxWlNrN1hHNWNkRngwZlN4Y2JseHVYSFJjZEdOdmJuUmhhVzVsY2k1aGNIQmxibVJEYUdsc1pDaDBlWEJsUkdWaGJHVnlXeVF1ZEhsd1pTaHZZbW9wWFNodlltb3NJR04xY25KbGJuUkVaWEIwYUNrcE8xeHVYRzVjZEZ4MGNtVjBkWEp1SUdOdmJuUmhhVzVsY2p0Y2JseHVYSFI5TzF4dVhHNWNkQzhxSUVOdmJtWnBaM1Z5WVhScGIyNGdLaTljYmx4dVhIUXZLaUJCYkd3Z2FYUmxiWE1nWTJGdUlHSmxJRzkyWlhKM2NtbGtaR1Z1SUdKNUlIQmhjM05wYm1jZ1lXNWNibHgwSUNBZ1hDSnZjSFJwYjI1elhDSWdiMkpxWldOMElIZG9aVzRnWTJGc2JHbHVaeUJ3Y21WMGRIbFFjbWx1ZENBcUwxeHVYSFJ3Y21WMGRIbFFjbWx1ZEZSb2FYTXVZMjl1Wm1sbklEMGdlMXh1WEhSY2RDOHFJRlJ5ZVNCelpYUjBhVzVuSUhSb2FYTWdkRzhnWm1Gc2MyVWdkRzhnYzJGMlpTQnpjR0ZqWlNBcUwxeHVYSFJjZEdWNGNHRnVaR1ZrT2lCMGNuVmxMRnh1WEc1Y2RGeDBiV0Y0UkdWd2RHZzZJREV3TEZ4dVhIUmNkRzFoZUVGeWNtRjVPaUF0TVNBZ0x5OGdaR1ZtWVhWc2RDQnBjeUIxYm14cGJXbDBaV1JjYmx4MGZUdGNibHh1WEhSeVpYUjFjbTRnY0hKbGRIUjVVSEpwYm5SVWFHbHpPMXh1WEc1OUtTZ3BPMXh1SWl3aUtHWjFibU4wYVc5dUtDUXNJQ1FrS1NCN1hHNWNiblpoY2lCZklEMGdWM2x6YVdVdVJHVmlkV2NnUFNCN1hHNWNkR1p5YVdWdVpHeDVSWEp5YjNJNklDaGxMQ0JsZUhCeUtTQTlQaUI3WEc1Y2RGeDBkbUZ5SUhSNWNHVWdQU0JsTG1OdmJuTjBjblZqZEc5eUxtNWhiV1V1Y21Wd2JHRmpaU2d2UlhKeWIzSWtMeXdnWENKY0lpa3VkRzlNYjNkbGNrTmhjMlVvS1R0Y2JseDBYSFIyWVhJZ2JXVnpjMkZuWlNBOUlHVXViV1Z6YzJGblpUdGNibHh1WEhSY2RDOHZJRVp5YVdWdVpHeHBabmtnWTI5dGJXOXVJR1Z5Y205eWMxeHVYRzVjZEZ4MEx5OGdUbTl1TFdSbGRtVnNiM0JsY25NZ1pHOXVKM1FnYTI1dmR5QjNkR1lnWVNCMGIydGxiaUJwY3k1Y2JseDBYSFJ0WlhOellXZGxJRDBnYldWemMyRm5aUzV5WlhCc1lXTmxLQzljWEhNcmRHOXJaVzVjWEhNckwyY3NJRndpSUZ3aUtUdGNibHh1WEhSY2RHbG1JQ2h0WlhOellXZGxJRDA5SUZ3aVZXNWxlSEJsWTNSbFpDQjlYQ0lnSmlZZ0lTOWJlMzFkTHk1MFpYTjBLR1Y0Y0hJcEtTQjdYRzVjZEZ4MFhIUnRaWE56WVdkbElEMGdYQ0pOYVhOemFXNW5JR0VnS1Z3aU8xeHVYSFJjZEgxY2JseDBYSFJsYkhObElHbG1JQ2h0WlhOellXZGxJRDA5UFNCY0lsVnVaWGh3WldOMFpXUWdLVndpS1NCN1hHNWNkRngwWEhSdFpYTnpZV2RsSUQwZ1hDSk5hWE56YVc1bklHRWdLRndpTzF4dVhIUmNkSDFjYmx4MFhIUmxiSE5sSUdsbUlDaHRaWE56WVdkbElEMDlQU0JjSWtsdWRtRnNhV1FnYkdWbWRDMW9ZVzVrSUhOcFpHVWdhVzRnWVhOemFXZHViV1Z1ZEZ3aUtTQjdYRzVjZEZ4MFhIUnRaWE56WVdkbElEMGdYQ0pKYm5aaGJHbGtJR0Z6YzJsbmJtMWxiblF1SUUxaGVXSmxJSGx2ZFNCMGVYQmxaQ0E5SUdsdWMzUmxZV1FnYjJZZ1BUMGdQMXdpTzF4dVhIUmNkSDFjYmx4MFhIUmxiSE5sSUdsbUlDaHRaWE56WVdkbElEMDlJRndpVlc1bGVIQmxZM1JsWkNCSlRFeEZSMEZNWENJcElIdGNibHgwWEhSY2RHMWxjM05oWjJVZ1BTQmNJbFJvWlhKbElHbHpJR0Z1SUdsdWRtRnNhV1FnWTJoaGNtRmpkR1Z5SUhOdmJXVjNhR1Z5WlM1Y0lqdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnWUR4emNHRnVJR05zWVhOelBWd2lkSGx3WlZ3aVBrOW9JRzV2WlhNc0lHRWdKSHQwZVhCbGZTQmxjbkp2Y2lFOEwzTndZVzQrSUNSN2JXVnpjMkZuWlgxZ08xeHVYSFI5TEZ4dVhHNWNkR1ZzWlcxbGJuUk1ZV0psYkRvZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z1lYUjBjbWxpZFhSbEtTQjdYRzVjZEZ4MGRtRnlJSEpsZENBOUlHVnNaVzFsYm5RdWJtOWtaVTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmx4dVhIUmNkR2xtSUNobGJHVnRaVzUwTG1oaGMwRjBkSEpwWW5WMFpTaGNJbkJ5YjNCbGNuUjVYQ0lwS1NCN1hHNWNkRngwWEhSeVpYUWdLejBnWUZ0d2NtOXdaWEowZVQwa2UyVnNaVzFsYm5RdVoyVjBRWFIwY21saWRYUmxLRndpY0hKdmNHVnlkSGxjSWlsOVhXQTdYRzVjZEZ4MGZWeHVYSFJjZEdWc2MyVWdhV1lnS0dWc1pXMWxiblF1YVdRcElIdGNibHgwWEhSY2RISmxkQ0FyUFNCZ0l5UjdaV3hsYldWdWRDNXBaSDFnTzF4dVhIUmNkSDFjYmx4MFhIUmxiSE5sSUdsbUlDaGxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNXNaVzVuZEdncElIdGNibHgwWEhSY2RISmxkQ0FyUFNBa0pDaGxiR1Z0Wlc1MExtTnNZWE56VEdsemRDa3ViV0Z3S0dNZ1BUNGdZQzRrZTJOOVlDa3VhbTlwYmloY0lsd2lLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnBaaUFvWVhSMGNtbGlkWFJsS1NCN1hHNWNkRngwWEhSeVpYUWdLejBnWUVBa2UyRjBkSEpwWW5WMFpYMWdPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCeVpYUTdYRzVjZEgwc1hHNWNibHgwY0hKcGJuUldZV3gxWlRvZ1puVnVZM1JwYjI0b2IySnFLU0I3WEc1Y2RGeDBkbUZ5SUhKbGREdGNibHh1WEhSY2RHbG1JQ2gwZVhCbGIyWWdiMkpxSUNFOVBTQmNJbTlpYW1WamRGd2lJSHg4SUc5aWFpQTlQVDBnYm5Wc2JDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlIUjVjR1Z2WmlCdlltb2dQVDBnWENKemRISnBibWRjSWo4Z1lGd2lKSHR2WW1wOVhDSmdJRG9nYjJKcUlDc2dYQ0pjSWp0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2h2WW1vcEtTQjdYRzVjZEZ4MFhIUnBaaUFvYjJKcUxteGxibWQwYUNBK0lEQXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tIUjVjR1Z2WmlCdlltcGJNRjBnUFQwOUlGd2liMkpxWldOMFhDSXBJSHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTRnWUV4cGMzUTZJQ1I3YjJKcUxteGxibWQwYUgwZ1ozSnZkWEFvY3lsZ08xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQmNJa3hwYzNRNklGd2lJQ3NnYjJKcUxtMWhjQ2hmTG5CeWFXNTBWbUZzZFdVcExtcHZhVzRvWENJc0lGd2lLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQmNJa3hwYzNRNklDaEZiWEIwZVNsY0lqdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhScFppQW9iMkpxTG1OdmJuTjBjblZqZEc5eUlEMDlQU0JQWW1wbFkzUXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmdSM0p2ZFhBZ2QybDBhQ0FrZTA5aWFtVmpkQzVyWlhsektHOWlhaWt1YkdWdVozUm9mU0J3Y205d1pYSjBhV1Z6WUR0Y2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb2IySnFJR2x1YzNSaGJtTmxiMllnVjNsemFXVXVVSEpwYldsMGFYWmxLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdYeTV3Y21sdWRGWmhiSFZsS0c5aWFpNTJZV3gxWlNrN1hHNWNkRngwZlZ4dVhIUmNkR1ZzYzJVZ2FXWWdLRzlpYWlCcGJuTjBZVzVqWlc5bUlGZDVjMmxsTGtOdmJHeGxZM1JwYjI0cElIdGNibHgwWEhSY2RHbG1JQ2h2WW1vdWFYUmxiWE11YkdWdVozUm9JRDRnTUNrZ2UxeHVYSFJjZEZ4MFhIUnBaaUFvYjJKcUxtbDBaVzF6V3pCZElHbHVjM1JoYm1ObGIyWWdWM2x6YVdVdVUyTnZjR1VwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1lFeHBjM1E2SUNSN2IySnFMbWwwWlcxekxteGxibWQwYUgwZ1ozSnZkWEFvY3lsZ08xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQmNJa3hwYzNRNklGd2lJQ3NnYjJKcUxtbDBaVzF6TG0xaGNDaGZMbkJ5YVc1MFZtRnNkV1VwTG1wdmFXNG9YQ0lzSUZ3aUtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCZkxuQnlhVzUwVm1Gc2RXVW9XMTBwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MFhIUmxiSE5sSUdsbUlDaHZZbW9nYVc1emRHRnVZMlZ2WmlCWGVYTnBaUzVUWTI5d1pTa2dlMXh1WEhSY2RGeDBMeThnUjNKdmRYQmNibHgwWEhSY2RISmxkSFZ5YmlCZ1IzSnZkWEFnZDJsMGFDQWtlMjlpYWk1d2NtOXdaWEowZVU1aGJXVnpMbXhsYm1kMGFIMGdjSEp2Y0dWeWRHbGxjMkE3WEc1Y2RGeDBmVnh1WEhSOUxGeHVYRzVjZEhScGJXVmtPaUJtZFc1amRHbHZiaWhwWkN3Z1kyRnNiR0poWTJzcElIdGNibHgwWEhSeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSamIyNXpiMnhsTG5ScGJXVW9hV1FwTzF4dVhIUmNkRngwWTJGc2JHSmhZMnN1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNibHgwWEhSY2RHTnZibk52YkdVdWRHbHRaVVZ1WkNocFpDazdYRzVjZEZ4MGZUdGNibHgwZlN4Y2JseHVYSFJ5WlhObGNuWmxaRmR2Y21Sek9pQmNJbUZ6ZkdGemVXNWpmR0YzWVdsMGZHSnlaV0ZyZkdOaGMyVjhZMkYwWTJoOFkyeGhjM044WTI5dWMzUjhZMjl1ZEdsdWRXVjhaR1ZpZFdkblpYSjhaR1ZtWVhWc2RIeGtaV3hsZEdWOFpHOThaV3h6Wlh4bGJuVnRmR1Y0Y0c5eWRIeGxlSFJsYm1SemZHWnBibUZzYkhsOFptOXlmR1p5YjIxOFpuVnVZM1JwYjI1OFoyVjBmR2xtZkdsdGNHeGxiV1Z1ZEhOOGFXMXdiM0owZkdsdWZHbHVjM1JoYm1ObGIyWjhhVzUwWlhKbVlXTmxmR3hsZEh4dVpYZDhiblZzYkh4dlpueHdZV05yWVdkbGZIQnlhWFpoZEdWOGNISnZkR1ZqZEdWa2ZIQjFZbXhwWTN4eVpYUjFjbTU4YzJWMGZITjBZWFJwWTN4emRYQmxjbnh6ZDJsMFkyaDhkR2hwYzN4MGFISnZkM3gwY25sOGRIbHdaVzltZkhaaGNueDJiMmxrZkhkb2FXeGxmSGRwZEdoOGVXbGxiR1JjSWk1emNHeHBkQ2hjSW54Y0lpbGNibjA3WEc1Y2JsZDVjMmxsTG5CeWIzUnZkSGx3WlM1eVpXNWtaWElnUFNCZkxuUnBiV1ZrS0Z3aWNtVnVaR1Z5WENJc0lGZDVjMmxsTG5CeWIzUnZkSGx3WlM1eVpXNWtaWElwTzF4dVhHNVhlWE5wWlM1elpXeGxZM1J2Y25NdVpHVmlkV2NnUFNCY0lpNWtaV0oxWjF3aU8xeHVYRzUyWVhJZ2MyVnNaV04wYjNJZ1BTQmNJaXdnTG5kNWMybGxMV1JsWW5WbmFXNW1iMXdpTzF4dVYzbHphV1V1Ulhod2NtVnpjMmx2Ym5NdVpYTmpZWEJsSUNzOUlITmxiR1ZqZEc5eU8xeHVVM1J5WlhSamFIa3VjMlZzWldOMGIzSnpMbVpwYkhSbGNpQXJQU0J6Wld4bFkzUnZjanRjYmx4dUx5OGdRV1JrSUdWc1pXMWxiblFnZEc4Z2MyaHZkeUJ6WVhabFpDQmtZWFJoWEc1WGVYTnBaUzVvYjI5cmN5NWhaR1FvWENKcGJtbDBMWFJ5WldVdFlXWjBaWEpjSWl3Z1puVnVZM1JwYjI0b0tTQjdYRzVjZEdsbUlDaDBhR2x6TG5KdmIzUXVaR1ZpZFdjcElIdGNibHgwWEhSMGFHbHpMbmR5WVhCd1pYSXVZMnhoYzNOTWFYTjBMbUZrWkNoY0ltUmxZblZuTFhOaGRtbHVaMXdpS1R0Y2JseDBmVnh1WEc1Y2RHbG1JQ2gwYUdsekxuTjBiM0psSUNZbUlIUm9hWE11ZDNKaGNIQmxjaTVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vWENKa1pXSjFaeTF6WVhacGJtZGNJaWtwSUh0Y2JseDBYSFIyWVhJZ1pXeGxiV1Z1ZER0Y2JseHVYSFJjZEhaaGNpQmtaWFJoYVd4eklEMGdKQzVqY21WaGRHVW9YQ0prWlhSaGFXeHpYQ0lzSUh0Y2JseDBYSFJjZEdOc1lYTnpUbUZ0WlRvZ1hDSjNlWE5wWlMxa1pXSjFaeTF6ZEc5eVlXZGxYQ0lzWEc1Y2RGeDBYSFJqYjI1MFpXNTBjem9nVzF4dVhIUmNkRngwWEhSN2RHRm5PaUJjSWxOMWJXMWhjbmxjSWl3Z2RHVjRkRU52Ym5SbGJuUTZJRndpVTJGMlpXUWdaR0YwWVZ3aWZTeGNibHgwWEhSY2RGeDBaV3hsYldWdWRDQTlJQ1F1WTNKbFlYUmxLRndpY0hKbFhDSXNJSHRwWkRvZ2RHaHBjeTVwWkNBcklGd2lMV1JsWW5WbkxYTjBiM0poWjJWY0luMHBYRzVjZEZ4MFhIUmRMRnh1WEhSY2RGeDBZV1owWlhJNklIUm9hWE11ZDNKaGNIQmxjbHh1WEhSY2RIMHBPMXh1WEc1Y2RGeDBMeThnU1c1MFpYSmpaWEIwSUhSbGVIUkRiMjUwWlc1MFhHNWNibHgwWEhSMllYSWdaR1Z6WTNKcGNIUnZjaUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9UbTlrWlM1d2NtOTBiM1I1Y0dVc0lGd2lkR1Y0ZEVOdmJuUmxiblJjSWlrN1hHNWNibHgwWEhSUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aV3hsYldWdWRDd2dYQ0owWlhoMFEyOXVkR1Z1ZEZ3aUxDQjdYRzVjZEZ4MFhIUm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1pHVnpZM0pwY0hSdmNpNW5aWFF1WTJGc2JDaDBhR2x6S1R0Y2JseDBYSFJjZEgwc1hHNWNibHgwWEhSY2RITmxkRG9nWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmx4MFhIUmNkRngwZEdocGN5NXBibTVsY2toVVRVd2dQU0JjSWx3aU8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNoMllXeDFaU2tnZTF4dVhIUmNkRngwWEhSY2RIUm9hWE11WVhCd1pXNWtRMmhwYkdRb2NISmxkSFI1VUhKcGJuUW9TbE5QVGk1d1lYSnpaU2gyWVd4MVpTa3BLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkSDBwTzF4dVhHNWNkRngwZEdocGN5NXpkRzl5WlNBclBTQmNJaUFqWENJZ0t5QmxiR1Z0Wlc1MExtbGtPMXh1WEhSOVhHNTlLVHRjYmx4dVYzbHphV1V1YUc5dmEzTXVZV1JrS0Z3aWNtVnVaR1Z5TFhOMFlYSjBYQ0lzSUdaMWJtTjBhVzl1S0h0a1lYUmhmU2tnZTF4dVhIUnBaaUFvZEdocGN5NXpkRzl5WVdkbElDWW1JSFJvYVhNdWQzSmhjSEJsY2k1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb1hDSmtaV0oxWnkxellYWnBibWRjSWlrcElIdGNibHgwWEhSMllYSWdaV3hsYldWdWRDQTlJQ1FvWUNNa2UzUm9hWE11YVdSOUxXUmxZblZuTFhOMGIzSmhaMlZnS1R0Y2JseHVYSFJjZEdsbUlDaGxiR1Z0Wlc1MEtTQjdYRzVjZEZ4MFhIUmxiR1Z0Wlc1MExuUmxlSFJEYjI1MFpXNTBJRDBnWkdGMFlUOGdkR2hwY3k1MGIwcFRUMDRvWkdGMFlTa2dPaUJjSWx3aU8xeHVYSFJjZEgxY2JseDBmVnh1ZlNrN1hHNWNibGQ1YzJsbExtaHZiMnR6TG1Ga1pDaGNJbk5qYjNCbExXbHVhWFF0YzNSaGNuUmNJaXdnWm5WdVkzUnBiMjRvS1NCN1hHNWNkSFJvYVhNdVpHVmlkV2NnUFNCMGFHbHpMbVJsWW5WbklIeDhJSFJvYVhNdWQyRnNhMVZ3S0hOamIzQmxJRDArSUh0Y2JseDBYSFJwWmlBb2MyTnZjR1V1WkdWaWRXY3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUmNkSDFjYmx4MGZTazdYRzVjYmx4MGFXWWdLQ0YwYUdsekxtUmxZblZuSUNZbUlIUm9hWE11Wld4bGJXVnVkQzVqYkc5elpYTjBLRmQ1YzJsbExuTmxiR1ZqZEc5eWN5NWtaV0oxWnlrcElIdGNibHgwWEhSMGFHbHpMbVJsWW5WbklEMGdkSEoxWlR0Y2JseDBmVnh1WEc1Y2RHbG1JQ2gwYUdsekxtUmxZblZuS1NCN1hHNWNkRngwZEdocGN5NWtaV0oxWnlBOUlDUXVZM0psWVhSbEtGd2lkR0p2WkhsY0lpd2dlMXh1WEhSY2RGeDBhVzV6YVdSbE9pQWtMbU55WldGMFpTaGNJblJoWW14bFhDSXNJSHRjYmx4MFhIUmNkRngwWTJ4aGMzTk9ZVzFsT2lCY0luZDVjMmxsTFhWcElIZDVjMmxsTFdSbFluVm5hVzVtYjF3aUxGeHVYSFJjZEZ4MFhIUnBibTVsY2toVVRVdzZJR0E4ZEdobFlXUStQSFJ5UGx4dVhIUmNkRngwWEhSY2REeDBhRDQ4TDNSb1BseHVYSFJjZEZ4MFhIUmNkRHgwYUQ1RmVIQnlaWE56YVc5dVBDOTBhRDVjYmx4MFhIUmNkRngwWEhROGRHZytWbUZzZFdVOEwzUm9QbHh1WEhSY2RGeDBYSFJjZER4MGFENUZiR1Z0Wlc1MFBDOTBhRDVjYmx4MFhIUmNkRngwUEM5MGNqNDhMM1JvWldGa1BtQXNYRzVjZEZ4MFhIUmNkSE4wZVd4bE9pQjdYRzVjZEZ4MFhIUmNkRngwWkdsemNHeGhlVG9nWENKdWIyNWxYQ0pjYmx4MFhIUmNkRngwZlN4Y2JseDBYSFJjZEZ4MGFXNXphV1JsT2lCMGFHbHpMbVZzWlcxbGJuUmNibHgwWEhSY2RIMHBYRzVjZEZ4MGZTazdYRzVjZEgxY2JuMHNJSFJ5ZFdVcE8xeHVYRzVYZVhOcFpTNW9iMjlyY3k1aFpHUW9YQ0oxYm1sMExXbHVhWFF0Wlc1a1hDSXNJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUnBaaUFvZEdocGN5NWpiMnhzWldOMGFXOXVLU0I3WEc1Y2RGeDBkR2hwY3k1a1pXSjFaeUE5SUhSb2FYTXVZMjlzYkdWamRHbHZiaTVrWldKMVp6dGNibHgwZlZ4dWZTazdYRzVjYmxkNWMybGxMbWh2YjJ0ekxtRmtaQ2hjSW1WNGNISmxjM05wYjI1ekxXbHVhWFF0YzNSaGNuUmNJaXdnWm5WdVkzUnBiMjRvS1NCN1hHNWNkSFJvYVhNdVpHVmlkV2NnUFNCMGFHbHpMbk5qYjNCbExtUmxZblZuTzF4dWZTazdYRzVjYmxkNWMybGxMbWh2YjJ0ekxtRmtaQ2hjSW1WNGNISmxjM05wYjI0dFpYWmhiQzFpWldadmNtVmxkbUZzWENJc0lHWjFibU4wYVc5dUtDa2dlMXh1WEhScFppQW9kR2hwY3k1a1pXSjFaeWtnZTF4dVhIUmNkSFJvYVhNdVpHVmlkV2N1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hjSW1WeWNtOXlYQ0lwTzF4dVhIUjlYRzU5S1R0Y2JseHVWM2x6YVdVdWFHOXZhM011WVdSa0tGd2laWGh3Y21WemMybHZiaTFsZG1Gc0xXVnljbTl5WENJc0lHWjFibU4wYVc5dUtHVnVkaWtnZTF4dVhIUnBaaUFvZEdocGN5NWtaV0oxWnlrZ2UxeHVYSFJjZEhSb2FYTXVaR1ZpZFdjdWFXNXVaWEpJVkUxTUlEMGdYeTVtY21sbGJtUnNlVVZ5Y205eUtHVnVkaTVsZUdObGNIUnBiMjRzSUdWdWRpNWxlSEJ5WlhOemFXOXVLVHRjYmx4MFhIUjBhR2x6TG1SbFluVm5MbU5zWVhOelRHbHpkQzVoWkdRb1hDSmxjbkp2Y2x3aUtUdGNibHgwZlZ4dWZTazdYRzVjYmxkNWMybGxMbE5qYjNCbExuQnliM1J2ZEhsd1pTNWtaV0oxWjFKdmR5QTlJR1oxYm1OMGFXOXVLSHRsYkdWdFpXNTBMQ0JoZEhSeWFXSjFkR1VnUFNCdWRXeHNMQ0IwWkhNZ1BTQmJYWDBwSUh0Y2JseDBhV1lnS0NGMGFHbHpMbVJsWW5WbktTQjdYRzVjZEZ4MGNtVjBkWEp1TzF4dVhIUjlYRzVjYmx4MGRHaHBjeTVrWldKMVp5NXdZWEpsYm5ST2IyUmxMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmNJbHdpTzF4dVhHNWNkSFpoY2lCMGVYQmxJRDBnZEdSeld6QmRPMXh1WEc1Y2RIUmtjMXN3WFNBOUlDUXVZM0psWVhSbEtGd2lkR1JjSWl3Z2UxeHVYSFJjZEhScGRHeGxPaUIwZVhCbFhHNWNkSDBwTzF4dVhHNWNkR2xtSUNnaGRHUnpXek5kS1NCN1hHNWNkRngwZG1GeUlHVnNaVzFsYm5STVlXSmxiQ0E5SUY4dVpXeGxiV1Z1ZEV4aFltVnNLR1ZzWlcxbGJuUXNJR0YwZEhKcFluVjBaU2s3WEc1Y2JseDBYSFIwWkhOYk0xMGdQU0FrTG1OeVpXRjBaU2hjSW5Sa1hDSXNJSHRjYmx4MFhIUmNkSFJsZUhSRGIyNTBaVzUwT2lCbGJHVnRaVzUwVEdGaVpXd3NYRzVjZEZ4MFhIUjBhWFJzWlRvZ1pXeGxiV1Z1ZEV4aFltVnNMRnh1WEhSY2RGeDBaWFpsYm5Sek9pQjdYRzVjZEZ4MFhIUmNkRndpYlc5MWMyVmxiblJsY2lCdGIzVnpaV3hsWVhabFhDSTZJR1YyZENBOVBpQjdYRzVjZEZ4MFhIUmNkRngwWld4bGJXVnVkQzVqYkdGemMweHBjM1F1ZEc5bloyeGxLRndpZDNsemFXVXRhR2xuYUd4cFoyaDBYQ0lzSUdWMmRDNTBlWEJsSUQwOVBTQmNJbTF2ZFhObFpXNTBaWEpjSWlrN1hHNWNkRngwWEhSY2RIMHNYRzVjZEZ4MFhIUmNkRndpWTJ4cFkydGNJam9nWlhaMElEMCtJSHRjYmx4MFhIUmNkRngwWEhSbGJHVnRaVzUwTG5OamNtOXNiRWx1ZEc5V2FXVjNLSHRpWldoaGRtbHZjam9nWENKemJXOXZkR2hjSW4wcE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTazdYRzVjZEgxY2JseHVYSFIwWkhNZ1BTQjBaSE11YldGd0tIUmtJRDArSUh0Y2JseDBYSFJwWmlBb0lTaDBaQ0JwYm5OMFlXNWpaVzltSUU1dlpHVXBLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdKQzVqY21WaGRHVW9YQ0owWkZ3aUxDQjBlWEJsYjJZZ2RHUWdQVDBnWENKdlltcGxZM1JjSWo4Z2RHUWdPaUI3SUhSbGVIUkRiMjUwWlc1ME9pQjBaQ0I5S1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdkR1E3WEc1Y2RIMHBPMXh1WEc1Y2RHbG1JQ2gwZVhCbElEMDlJRndpVjJGeWJtbHVaMXdpS1NCN1hHNWNkRngwZEdSeld6RmRMbk5sZEVGMGRISnBZblYwWlNoY0ltTnZiSE53WVc1Y0lpd2dNaWs3WEc1Y2RIMWNibHh1WEhSMllYSWdkSElnUFNBa0xtTnlaV0YwWlNoY0luUnlYQ0lzSUh0Y2JseDBYSFJqYkdGemMwNWhiV1U2SUZ3aVpHVmlkV2N0WENJZ0t5QjBlWEJsTG5SdlRHOTNaWEpEWVhObEtDa3NYRzVjZEZ4MFkyOXVkR1Z1ZEhNNklIUmtjeXhjYmx4MFhIUnBibk5wWkdVNklIUm9hWE11WkdWaWRXZGNibHgwZlNrN1hHNTlPMXh1WEc1WGVYTnBaUzVvYjI5cmN5NWhaR1FvWENKbGVIQnlaWE56YVc5dWRHVjRkQzFwYm1sMExXVnVaRndpTENCbWRXNWpkR2x2YmlncElIdGNibHgwYVdZZ0tIUm9hWE11YzJOdmNHVXVaR1ZpZFdjcElIdGNibHgwWEhSMGFHbHpMbVJsWW5WbklEMGdlMzA3WEc1Y2JseDBYSFIwYUdsekxuUmxiWEJzWVhSbExtWnZja1ZoWTJnb1pYaHdjaUE5UGlCN1hHNWNkRngwWEhScFppQW9aWGh3Y2lCcGJuTjBZVzVqWlc5bUlGZDVjMmxsTGtWNGNISmxjM05wYjI0cElIdGNibHgwWEhSY2RGeDBkR2hwY3k1elkyOXdaUzVrWldKMVoxSnZkeWg3WEc1Y2RGeDBYSFJjZEZ4MFpXeGxiV1Z1ZERvZ2RHaHBjeTVsYkdWdFpXNTBMRnh1WEhSY2RGeDBYSFJjZEdGMGRISnBZblYwWlRvZ2RHaHBjeTVoZEhSeWFXSjFkR1VzWEc1Y2RGeDBYSFJjZEZ4MGRHUnpPaUJiWENKRmVIQnlaWE56YVc5dVhDSXNJSHRjYmx4MFhIUmNkRngwWEhSY2RGeDBkR0ZuT2lCY0luUmtYQ0lzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR052Ym5SbGJuUnpPaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwZEdGbk9pQmNJblJsZUhSaGNtVmhYQ0lzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRngwZG1Gc2RXVTZJR1Y0Y0hJdVpYaHdjbVZ6YzJsdmJpeGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmxkbVZ1ZEhNNklIdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR2x1Y0hWME9pQmxkblFnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJsZUhCeUxtVjRjSEpsYzNOcGIyNGdQU0JsZG5RdWRHRnlaMlYwTG5aaGJIVmxPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSMGFHbHpMblZ3WkdGMFpTaDBhR2x6TG1SaGRHRXBPMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEgwc1hHNWNkRngwWEhSY2RGeDBYSFJjZEZ4MGIyNWpaVG9nZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFptOWpkWE02SUdWMmRDQTlQaUJUZEhKbGRHTm9lUzV5WlhOcGVtVW9aWFowTG5SaGNtZGxkQ2xjYmx4MFhIUmNkRngwWEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkRngwWEhSY2RIMHNYRzVjZEZ4MFhIUmNkRngwWEhSbGVIQnlMbVJsWW5WbklEMGdKQzVqY21WaGRHVW9YQ0owWkZ3aUtWeHVYSFJjZEZ4MFhIUmNkRjFjYmx4MFhIUmNkRngwZlNrN1hHNWNkRngwWEhSOVhHNWNkRngwZlNrN1hHNWNkSDFjYm4wcE8xeHVYRzVYZVhOcFpTNW9iMjlyY3k1aFpHUW9YQ0p6WTI5d1pTMXBibWwwTFdWdVpGd2lMQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBMeThnVkU5RVR5QnRZV3RsSUhCeWIzQmxjblJwWlhNZ2RYQmtZWFJsTENCamIyeHNZWEJ6WlNCa2RYQnNhV05oZEdVZ1pYaHdjbVZ6YzJsdmJuTmNibHgwYVdZZ0tIUm9hWE11WkdWaWRXY2dhVzV6ZEdGdVkyVnZaaUJPYjJSbEtTQjdYRzVjZEZ4MEx5OGdWMlVnYUdGMlpTQmhJR1JsWW5WbklIUmhZbXhsTENCaFpHUWdjM1IxWm1ZZ2RHOGdhWFJjYmx4dVhIUmNkSFpoY2lCelpXeGxZM1J2Y2lBOUlGZDVjMmxsTG5ObGJHVmpkRzl5Y3k1aGJtUk9iM1FvVjNsemFXVXVjMlZzWldOMGIzSnpMbTExYkhScGNHeGxMQ0JYZVhOcFpTNXpaV3hsWTNSdmNuTXVjSEp2Y0dWeWRIa3BPMXh1WEhSY2RDUWtLSE5sYkdWamRHOXlMQ0IwYUdsekxtVnNaVzFsYm5RcExtWnZja1ZoWTJnb1pXeGxiV1Z1ZENBOVBpQjdYRzVjZEZ4MFhIUjBhR2x6TG1SbFluVm5VbTkzS0h0Y2JseDBYSFJjZEZ4MFpXeGxiV1Z1ZEN4Y2JseDBYSFJjZEZ4MGRHUnpPaUJiWENKWFlYSnVhVzVuWENJc0lGd2laR0YwWVMxdGRXeDBhWEJzWlNCM2FYUm9iM1YwSUdFZ2NISnZjR1Z5ZEhrZ1lYUjBjbWxpZFhSbFhDSmRYRzVjZEZ4MFhIUjlLVnh1WEhSY2RIMHBYRzVjYmx4MFhIUjBhR2x6TG5CeWIzQmhaMkYwWlNodlltb2dQVDRnZTF4dVhIUmNkRngwZG1GeUlIWmhiSFZsSUQwZ1h5NXdjbWx1ZEZaaGJIVmxLRzlpYWlrN1hHNWNibHgwWEhSY2RIUm9hWE11WkdWaWRXZFNiM2NvZTF4dVhIUmNkRngwWEhSbGJHVnRaVzUwT2lCdlltb3VaV3hsYldWdWRDeGNibHgwWEhSY2RGeDBkR1J6T2lCYlhDSlFjbTl3WlhKMGVWd2lMQ0J2WW1vdWNISnZjR1Z5ZEhrc0lHOWlhaTUyWVd4MVpWMWNibHgwWEhSY2RIMHBPMXh1WEc1Y2RGeDBYSFJwWmlBb1h5NXlaWE5sY25abFpGZHZjbVJ6TG1sdVpHVjRUMllvYjJKcUxuQnliM0JsY25SNUtTQStJQzB4S1NCN1hHNWNkRngwWEhSY2RIUm9hWE11WkdWaWRXZFNiM2NvZTF4dVhIUmNkRngwWEhSY2RHVnNaVzFsYm5RNklHOWlhaTVsYkdWdFpXNTBMRnh1WEhSY2RGeDBYSFJjZEhSa2N6b2dXMXdpVjJGeWJtbHVaMXdpTENCZ1dXOTFJR05oYnVLQW1YUWdkWE5sSUZ3aUpIdHZZbW91Y0hKdmNHVnlkSGw5WENJZ1lYTWdZU0J3Y205d1pYSjBlU0J1WVcxbExDQnBkT0tBbVhNZ1lTQnlaWE5sY25abFpDQjNiM0prTG1CZFhHNWNkRngwWEhSY2RIMHBPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBaV3h6WlNCcFppQW9MMTVjWEdSOFcxeGNWeVJkTHk1MFpYTjBLRzlpYWk1d2NtOXdaWEowZVNrcElIdGNibHgwWEhSY2RGeDBkR2hwY3k1a1pXSjFaMUp2ZHloN1hHNWNkRngwWEhSY2RGeDBaV3hsYldWdWREb2diMkpxTG1Wc1pXMWxiblFzWEc1Y2RGeDBYSFJjZEZ4MGRHUnpPaUJiWENKWFlYSnVhVzVuWENJc0lIdGNibHgwWEhSY2RGeDBYSFJjZEhSbGVIUkRiMjUwWlc1ME9pQmdXVzkxSUdOaGJ1S0FtWFFnZFhObElGd2lKSHR2WW1vdWNISnZjR1Z5ZEhsOVhDSWdZWE1nWVNCd2NtOXdaWEowZVNCdVlXMWxMbUFzWEc1Y2RGeDBYSFJjZEZ4MFhIUjBhWFJzWlRvZ1hDSlFjbTl3WlhKMGVTQnVZVzFsY3lCallXNGdiMjVzZVNCamIyNTBZV2x1SUd4bGRIUmxjbk1zSUc1MWJXSmxjbk1nWVc1a0lIVnVaR1Z5YzJOdmNtVnpJR0Z1WkNCallXNXViM1FnYzNSaGNuUWdkMmwwYUNCaElHNTFiV0psY2k1Y0lseHVYSFJjZEZ4MFhIUmNkSDFkWEc1Y2RGeDBYSFJjZEgwcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcE8xeHVYRzVjZEZ4MGRHaHBjeTV6WTI5d1pTNWxiR1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSjNlWE5wWlRwa1lYUmhZMmhoYm1kbFhDSXNJR1YyZENBOVBpQjdYRzVjZEZ4MFhIUWtKQ2hjSW5SeUxtUmxZblZuTFhCeWIzQmxjblI1WENJc0lIUm9hWE11WkdWaWRXY3BMbVp2Y2tWaFkyZ29kSElnUFQ0Z2UxeHVYSFJjZEZ4MFhIUjJZWElnY0hKdmNHVnlkSGtnUFNCMGNpNWpaV3hzYzFzeFhTNTBaWGgwUTI5dWRHVnVkRHRjYmx4MFhIUmNkRngwZG1GeUlIWmhiSFZsSUQwZ1h5NXdjbWx1ZEZaaGJIVmxLSFJvYVhNdWNISnZjR1Z5ZEdsbGMxdHdjbTl3WlhKMGVWMHBPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDaDBjaTVqWld4c2Mxc3lYU2tnZTF4dVhIUmNkRngwWEhSY2RIWmhjaUIwWkNBOUlIUnlMbU5sYkd4eld6SmRPMXh1WEhSY2RGeDBYSFJjZEhSa0xuUmxlSFJEYjI1MFpXNTBJRDBnZEdRdWRHbDBiR1VnUFNCMllXeDFaVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlNrN1hHNWNkRngwZlNrN1hHNWNkSDFjYm4wcE8xeHVYRzVYZVhOcFpTNW9iMjlyY3k1aFpHUW9YQ0psZUhCeVpYTnphVzl1ZEdWNGRDMTFjR1JoZEdVdFltVm1iM0psWlhaaGJGd2lMQ0JtZFc1amRHbHZiaWhsYm5ZcElIdGNibHgwYVdZZ0tIUm9hWE11WkdWaWRXY3BJSHRjYmx4MFhIUmxibll1ZEdRZ1BTQmxibll1Wlhod2NpNWtaV0oxWnp0Y2JseHVYSFJjZEdsbUlDaGxibll1ZEdRcElIdGNibHgwWEhSY2RHVnVkaTUwWkM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0Z3aVpYSnliM0pjSWlrN1hHNWNkRngwZlZ4dVhIUjlYRzU5S1R0Y2JseHVWM2x6YVdVdWFHOXZhM011WVdSa0tGd2laWGh3Y21WemMybHZiblJsZUhRdGRYQmtZWFJsTFdGbWRHVnlaWFpoYkZ3aUxDQm1kVzVqZEdsdmJpaGxibllwSUh0Y2JseDBhV1lnS0dWdWRpNTBaQ0FtSmlBaFpXNTJMblJrTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3loY0ltVnljbTl5WENJcEtTQjdYRzVjZEZ4MGRtRnlJSFpoYkhWbElEMGdYeTV3Y21sdWRGWmhiSFZsS0dWdWRpNTJZV3gxWlNrN1hHNWNkRngwWlc1MkxuUmtMblJsZUhSRGIyNTBaVzUwSUQwZ1pXNTJMblJrTG5ScGRHeGxJRDBnZG1Gc2RXVTdYRzVjZEgxY2JuMHBPMXh1WEc1OUtTaENiR2x6Y3l3Z1FteHBjM011SkNrN1hHNGlMQ0lvWm5WdVkzUnBiMjRvSkNrZ2UxeHVYRzVwWmlBb0lYTmxiR1l1VjNsemFXVXBJSHRjYmx4MGNtVjBkWEp1TzF4dWZWeHVYRzUyWVhJZ1pISnZjR0p2ZUZWU1RDQTlJRndpTHk5alpHNXFjeTVqYkc5MVpHWnNZWEpsTG1OdmJTOWhhbUY0TDJ4cFluTXZaSEp2Y0dKdmVDNXFjeTh3TGpFd0xqSXZaSEp2Y0dKdmVDNXRhVzR1YW5OY0lqdGNibHh1VjNsemFXVXVVM1J2Y21GblpTNUNZV05yWlc1a0xtRmtaQ2hjSWtSeWIzQmliM2hjSWl3Z0pDNURiR0Z6Y3loN0lHVjRkR1Z1WkhNNklGZDVjMmxsTGxOMGIzSmhaMlV1UW1GamEyVnVaQ3hjYmx4MFkyOXVjM1J5ZFdOMGIzSTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkQzh2SUZSeVlXNXpabTl5YlNCMGFHVWdaSEp2Y0dKdmVDQnphR0Z5WldRZ1ZWSk1JR2x1ZEc4Z2MyOXRaWFJvYVc1bklISmhkeUJoYm1RZ1EwOVNVeTFsYm1GaWJHVmtYRzVjZEZ4MGFXWWdLSFJvYVhNdWRYSnNMbkJ5YjNSdlkyOXNJQ0U5SUZ3aVpISnZjR0p2ZURwY0lpa2dlMXh1WEhSY2RGeDBkR2hwY3k1MWNtd3VhRzl6ZEc1aGJXVWdQU0JjSW1Sc0xtUnliM0JpYjNoMWMyVnlZMjl1ZEdWdWRDNWpiMjFjSWp0Y2JseDBYSFJjZEhSb2FYTXVkWEpzTG5ObFlYSmphQ0E5SUhSb2FYTXVkWEpzTG5ObFlYSmphQzV5WlhCc1lXTmxLQzljWEdKa2JEMHdmRjRrTHl3Z1hDSnlZWGM5TVZ3aUtUdGNibHgwWEhSY2RIUm9hWE11Y0dWeWJXbHpjMmx2Ym5NdWIyNG9YQ0p5WldGa1hDSXBPeUF2THlCVVQwUlBJR05vWldOcklHbG1JR1pwYkdVZ1lXTjBkV0ZzYkhrZ2FYTWdjSFZpYkdsamJIa2djbVZoWkdGaWJHVmNibHgwWEhSOVhHNWNibHgwWEhSMGFHbHpMbkJsY20xcGMzTnBiMjV6TG05dUtGd2liRzluYVc1Y0lpazdYRzVjYmx4MFhIUjBhR2x6TG5KbFlXUjVJRDBnSkM1cGJtTnNkV1JsS0hObGJHWXVSSEp2Y0dKdmVDd2daSEp2Y0dKdmVGVlNUQ2t1ZEdobGJpZ29LQ2tnUFQ0Z2UxeHVYSFJjZEZ4MGRtRnlJSEpsWm1WeWNtVnlJRDBnYm1WM0lGVlNUQ2hrYjJOMWJXVnVkQzV5WldabGNuSmxjaXdnYkc5allYUnBiMjRwTzF4dVhHNWNkRngwWEhScFppQW9jbVZtWlhKeVpYSXVhRzl6ZEc1aGJXVWdQVDA5SUZ3aWQzZDNMbVJ5YjNCaWIzZ3VZMjl0WENJZ0ppWWdiRzlqWVhScGIyNHVhR0Z6YUM1cGJtUmxlRTltS0Z3aUkyRmpZMlZ6YzE5MGIydGxiajFjSWlrZ1BUMDlJREFwSUh0Y2JseDBYSFJjZEZ4MEx5OGdWMlhpZ0pseVpTQnBiaUJoYmlCUFFYVjBhQ0J5WlhOd2IyNXpaU0J3YjNCMWNDd2daRzhnZDJoaGRDQjViM1VnYm1WbFpDQjBhR1Z1SUdOc2IzTmxJSFJvYVhOY2JseDBYSFJjZEZ4MFJISnZjR0p2ZUM1QmRYUm9SSEpwZG1WeUxsQnZjSFZ3TG05aGRYUm9VbVZqWldsMlpYSW9LVHRjYmx4MFhIUmNkRngwSkM1bWFYSmxLSGRwYm1SdmR5d2dYQ0pzYjJGa1hDSXBPeUF2THlCb1lXTnJJR0psWTJGMWMyVWdaSEp2Y0dKdmVDNXFjeUJrYVdSdUozUWdabTl5WlhObFpTQjFjMlVnWTJGelpYTWdiR2xyWlNCdmRYSnpJRG92WEc1Y2RGeDBYSFJjZEdOc2IzTmxLQ2s3WEc1Y2RGeDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwTHk4Z1NXNTBaWEp1WVd3Z1ptbHNaVzVoYldVZ0tIUnZJR0psSUhWelpXUWdabTl5SUhOaGRtbHVaeWxjYmx4MFhIUmNkSFJvYVhNdVptbHNaVzVoYldVZ1BTQW9kR2hwY3k1emRHOXlZV2RsTG5CaGNtRnRLRndpY0dGMGFGd2lLU0I4ZkNCY0lsd2lLU0FySUNodVpYY2dWVkpNS0hSb2FYTXVkWEpzS1NrdWNHRjBhRzVoYldVdWJXRjBZMmdvTDF0ZUwxMHFKQzhwV3pCZE8xeHVYRzVjZEZ4MFhIUjBhR2x6TG10bGVTQTlJSFJvYVhNdWMzUnZjbUZuWlM1d1lYSmhiU2hjSW10bGVWd2lLU0I4ZkNCY0ltWnNaVFpuYzJNMk1YYzFkamM1YWx3aU8xeHVYRzVjZEZ4MFhIUjBhR2x6TG1Oc2FXVnVkQ0E5SUc1bGR5QkVjbTl3WW05NExrTnNhV1Z1ZENoN0lHdGxlVG9nZEdocGN5NXJaWGtnZlNrN1hHNWNkRngwZlNrcExuUm9aVzRvS0NrZ1BUNGdlMXh1WEhSY2RGeDBkR2hwY3k1c2IyZHBiaWgwY25WbEtUdGNibHgwWEhSOUtUdGNibHgwZlN4Y2JseHVYSFF2S2lwY2JseDBJQ29nVTJGMlpYTWdZU0JtYVd4bElIUnZJSFJvWlNCaVlXTnJaVzVrTGx4dVhIUWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdabWxzWlNBdElFRnVJRzlpYW1WamRDQjNhWFJvSUc1aGJXVWdKaUJrWVhSaElHdGxlWE5jYmx4MElDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdRU0J3Y205dGFYTmxJSFJvWVhRZ2NtVnpiMngyWlhNZ2QyaGxiaUIwYUdVZ1ptbHNaU0JwY3lCellYWmxaQzVjYmx4MElDb3ZYRzVjZEhCMWREb2dablZ1WTNScGIyNG9abWxzWlNrZ2UxeHVYSFJjZEdacGJHVXVaR0YwWVNBOUlGZDVjMmxsTG5SdlNsTlBUaWhtYVd4bExtUmhkR0VwTzF4dVhHNWNkRngwY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNibHgwWEhSY2RIUm9hWE11WTJ4cFpXNTBMbmR5YVhSbFJtbHNaU2htYVd4bExtNWhiV1VzSUdacGJHVXVaR0YwWVN3Z1puVnVZM1JwYjI0b1pYSnliM0lzSUhOMFlYUXBJSHRjYmx4MFhIUmNkRngwYVdZZ0tHVnljbTl5S1NCN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdUlISmxhbVZqZENoRmNuSnZjaWhsY25KdmNpa3BPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MFkyOXVjMjlzWlM1c2IyY29YQ0pHYVd4bElITmhkbVZrSUdGeklISmxkbWx6YVc5dUlGd2lJQ3NnYzNSaGRDNTJaWEp6YVc5dVZHRm5LVHRjYmx4MFhIUmNkRngwY21WemIyeDJaU2h6ZEdGMEtUdGNibHgwWEhSY2RIMHBPMXh1WEhSY2RIMHBPMXh1WEhSOUxGeHVYRzVjZEd4dloybHVPaUJtZFc1amRHbHZiaWh3WVhOemFYWmxLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11Y21WaFpIa3VkR2hsYmlnb0tTQTlQaUI3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1amJHbGxiblF1YVhOQmRYUm9aVzUwYVdOaGRHVmtLQ2svSUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwSURvZ2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhIUmNkRngwWEhSMGFHbHpMbU5zYVdWdWRDNWhkWFJvUkhKcGRtVnlLRzVsZHlCRWNtOXdZbTk0TGtGMWRHaEVjbWwyWlhJdVVHOXdkWEFvZTF4dVhIUmNkRngwWEhRZ0lDQWdjbVZqWldsMlpYSlZjbXc2SUc1bGR5QlZVa3dvYkc5allYUnBiMjRwSUNzZ1hDSmNJbHh1WEhSY2RGeDBYSFI5S1NrN1hHNWNibHgwWEhSY2RGeDBkR2hwY3k1amJHbGxiblF1WVhWMGFHVnVkR2xqWVhSbEtIdHBiblJsY21GamRHbDJaVG9nSVhCaGMzTnBkbVY5TENBb1pYSnliM0lzSUdOc2FXVnVkQ2tnUFQ0Z2UxeHVYRzVjZEZ4MFhIUmNkRngwYVdZZ0tHVnljbTl5S1NCN1hHNWNkRngwWEhSY2RGeDBYSFJ5WldwbFkzUW9SWEp5YjNJb1pYSnliM0lwS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWEhScFppQW9kR2hwY3k1amJHbGxiblF1YVhOQmRYUm9aVzUwYVdOaGRHVmtLQ2twSUh0Y2JseDBYSFJjZEZ4MFhIUmNkQzh2SUZSUFJFOGdZMmhsWTJzZ2FXWWdZMkZ1SUdGamRIVmhiR3g1SUdWa2FYUWdkR2hsSUdacGJHVmNibHgwWEhSY2RGeDBYSFJjZEhSb2FYTXVjR1Z5YldsemMybHZibk11YjI0b1cxd2liRzluYjNWMFhDSXNJRndpWldScGRGd2lYU2s3WEc1Y2JseDBYSFJjZEZ4MFhIUmNkSEpsYzI5c2RtVW9LVHRjYmx4MFhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBYSFIwYUdsekxuQmxjbTFwYzNOcGIyNXpMbTltWmloYlhDSnNiMmR2ZFhSY0lpd2dYQ0psWkdsMFhDSXNJRndpWVdSa1hDSXNJRndpWkdWc1pYUmxYQ0pkS1R0Y2JseHVYSFJjZEZ4MFhIUmNkRngwY21WcVpXTjBLQ2s3WEc1Y2RGeDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUjlLVHRjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDBwTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHVYSFJjZEZ4MEx5OGdUbTkwSUhKbGRIVnlibWx1WnlCaElIQnliMjFwYzJVZ2FHVnlaU3dnYzJsdVkyVWdjSEp2WTJWemMyVnpJR1JsY0dWdVpHbHVaeUJ2YmlCc2IyZHBiaUJrYjI0bmRDQnVaV1ZrSUhSdklIZGhhWFFnWm05eUlIUm9hWE5jYmx4MFhIUmNkSFJvYVhNdVkyeHBaVzUwTG1kbGRFRmpZMjkxYm5SSmJtWnZLQ2hsY25KdmNpd2dZV05qYjNWdWRFbHVabThwSUQwK0lIdGNibHgwWEhSY2RGeDBhV1lnS0NGbGNuSnZjaWtnZTF4dVhIUmNkRngwWEhSY2RIUm9hWE11ZDNsemFXVXVkM0poY0hCbGNpNWZMbVpwY21Vb1hDSjNlWE5wWlRwc2IyZHBibHdpTENBa0xtVjRkR1Z1WkNoN1ltRmphMlZ1WkRvZ2RHaHBjMzBzSUdGalkyOTFiblJKYm1adktTazdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDBwTG1OaGRHTm9LQ2dwSUQwK0lIdDlLVHRjYmx4MGZTeGNibHh1WEhSc2IyZHZkWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEhKbGRIVnliaUFoZEdocGN5NWpiR2xsYm5RdWFYTkJkWFJvWlc1MGFXTmhkR1ZrS0NrL0lGQnliMjFwYzJVdWNtVnpiMngyWlNncElEb2dibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVYSFJjZEZ4MGRHaHBjeTVqYkdsbGJuUXVjMmxuYms5MWRDaHVkV3hzTENBb0tTQTlQaUI3WEc1Y2RGeDBYSFJjZEhSb2FYTXVjR1Z5YldsemMybHZibk11YjJabUtGdGNJbVZrYVhSY0lpd2dYQ0poWkdSY0lpd2dYQ0prWld4bGRHVmNJbDBwTG05dUtGd2liRzluYVc1Y0lpazdYRzVjYmx4MFhIUmNkRngwZEdocGN5NTNlWE5wWlM1M2NtRndjR1Z5TGw4dVptbHlaU2hjSW5kNWMybGxPbXh2WjI5MWRGd2lMQ0I3WW1GamEyVnVaRG9nZEdocGMzMHBPMXh1WEhSY2RGeDBYSFJ5WlhOdmJIWmxLQ2s3WEc1Y2RGeDBYSFI5S1R0Y2JseDBYSFI5S1R0Y2JseHVYSFI5TEZ4dVhHNWNkSE4wWVhScFl6b2dlMXh1WEhSY2RIUmxjM1E2SUdaMWJtTjBhVzl1S0hWeWJDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlDOWtjbTl3WW05NExtTnZiUzh1ZEdWemRDaDFjbXd1YUc5emRDa2dmSHdnZFhKc0xuQnliM1J2WTI5c0lEMDlQU0JjSW1SeWIzQmliM2c2WENJN1hHNWNkRngwZlZ4dVhIUjlYRzU5S1N3Z2RISjFaU2s3WEc1Y2JuMHBLRUpzYVhOektUdGNiaUlzSWlobWRXNWpkR2x2Ymlna0tTQjdYRzVjYm1sbUlDZ2hjMlZzWmk1WGVYTnBaU2tnZTF4dVhIUnlaWFIxY200N1hHNTlYRzVjYm5aaGNpQmZPMXh1WEc1WGVYTnBaUzVUZEc5eVlXZGxMa0poWTJ0bGJtUXVZV1JrS0Z3aVIybDBhSFZpWENJc0lGOGdQU0FrTGtOc1lYTnpLSHNnWlhoMFpXNWtjem9nVjNsemFXVXVVM1J2Y21GblpTNUNZV05yWlc1a0xGeHVYSFJqYjI1emRISjFZM1J2Y2pvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MGRHaHBjeTV3WlhKdGFYTnphVzl1Y3k1dmJpaGNJbXh2WjJsdVhDSXBPMXh1WEc1Y2RGeDBkR2hwY3k1clpYa2dQU0IwYUdsekxuTjBiM0poWjJVdWNHRnlZVzBvWENKclpYbGNJaWtnZkh3Z1hDSTNaVEE0WlRBeE5qQTBPREF3TUdKak5UazBaVndpTzF4dVhHNWNkRngwTHk4Z1JYaDBjbUZqZENCcGJtWnZJR1p2Y2lCMWMyVnlibUZ0WlN3Z2NtVndieXdnWW5KaGJtTm9MQ0JtYVd4bGJtRnRaU3dnWm1sc1pYQmhkR2dnWm5KdmJTQlZVa3hjYmx4MFhIUWtMbVY0ZEdWdVpDaDBhR2x6TENCZkxuQmhjbk5sVlZKTUtIUm9hWE11ZFhKc0tTazdYRzVjZEZ4MGRHaHBjeTV5WlhCdklEMGdkR2hwY3k1eVpYQnZJSHg4SUZ3aWQzbHphV1V0WkdGMFlWd2lPMXh1WEhSY2RIUm9hWE11WW5KaGJtTm9JRDBnZEdocGN5NWljbUZ1WTJnZ2ZId2dYQ0p0WVhOMFpYSmNJanRjYmx4MFhIUjBhR2x6TG5CaGRHZ2dQU0IwYUdsekxuQmhkR2dnZkh3Z1lDUjdkR2hwY3k1M2VYTnBaUzVwWkgwdWFuTnZibUE3WEc1Y2RGeDBkR2hwY3k1bWFXeGxibUZ0WlNBOUlIUm9hWE11Wm1sc1pXNWhiV1VnZkh3Z2RHaHBjeTV3WVhSb0xtMWhkR05vS0M5YlhpOWRLaVF2S1Zzd1hUdGNibHh1WEhSY2RDOHZJRlJ5WVc1elptOXliU0IwYUdVZ1IybDBhSFZpSUZWU1RDQnBiblJ2SUhOdmJXVjBhR2x1WnlCeVlYY2dZVzVrSUVOUFVsTXRaVzVoWW14bFpGeHVYSFJjZEhSb2FYTXVkWEpzSUQwZ2JtVjNJRlZTVENoZ2FIUjBjSE02THk5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0THlSN2RHaHBjeTUxYzJWeWJtRnRaWDB2Skh0MGFHbHpMbkpsY0c5OUx5UjdkR2hwY3k1aWNtRnVZMmg5THlSN2RHaHBjeTV3WVhSb2ZUOTBjejBrZTBSaGRHVXVibTkzS0NsOVlDazdYRzVjZEZ4MGRHaHBjeTV3WlhKdGFYTnphVzl1Y3k1dmJpaGNJbkpsWVdSY0lpazdJQzh2SUZSUFJFOGdZMmhsWTJzZ2FXWWdabWxzWlNCaFkzUjFZV3hzZVNCcGN5QndkV0pzYVdOc2VTQnlaV0ZrWVdKc1pWeHVYRzVjZEZ4MGRHaHBjeTVzYjJkcGJpaDBjblZsS1R0Y2JseDBmU3hjYmx4dVhIUm5aWFFnWVhWMGFHVnVkR2xqWVhSbFpDQW9LU0I3WEc1Y2RGeDBjbVYwZFhKdUlDRWhkR2hwY3k1aFkyTmxjM05VYjJ0bGJqdGNibHgwZlN4Y2JseHVYSFJ5WlhFNklHWjFibU4wYVc5dUtHTmhiR3dzSUdSaGRHRXNJRzFsZEdodlpDQTlJRndpUjBWVVhDSXNJRzhnUFNCN2JXVjBhRzlrT2lCdFpYUm9iMlI5S1NCN1hHNWNkRngwYVdZZ0tHUmhkR0VwSUh0Y2JseDBYSFJjZEc4dVpHRjBZU0E5SUNCS1UwOU9Mbk4wY21sdVoybG1lU2hrWVhSaEtUdGNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnSkM1bVpYUmphQ2hjSW1oMGRIQnpPaTh2WVhCcExtZHBkR2gxWWk1amIyMHZYQ0lnS3lCallXeHNMQ0FrTG1WNGRHVnVaQ2h2TENCN1hHNWNkRngwWEhSeVpYTndiMjV6WlZSNWNHVTZJRndpYW5OdmJsd2lMRnh1WEhSY2RGeDBhR1ZoWkdWeWN6b2dlMXh1WEhSY2RGeDBYSFJjSWtGMWRHaHZjbWw2WVhScGIyNWNJam9nWUhSdmEyVnVJQ1I3ZEdocGN5NWhZMk5sYzNOVWIydGxibjFnWEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU2twWEc1Y2RGeDBMbU5oZEdOb0tHVnljaUE5UGlCN1hHNWNkRngwWEhScFppQW9aWEp5SUNZbUlHVnljaTU0YUhJcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0dWeWNpNTRhSElwTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwWld4elpTQjdYRzVjZEZ4MFhIUmNkR052Ym5OdmJHVXVaWEp5YjNJb1pYSnlLVHRjYmx4MFhIUmNkRngwWTI5dWMyOXNaUzVzYjJjb1pYSnlMbk4wWVdOcktUdGNibHgwWEhSY2RIMWNibHgwWEhSOUtWeHVYSFJjZEM1MGFHVnVLSGhvY2lBOVBpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2VHaHlMbkpsYzNCdmJuTmxLU2s3WEc1Y2RIMHNYRzVjYmx4MFoyVjBPaUJYZVhOcFpTNVRkRzl5WVdkbExrSmhZMnRsYm1RdVVtVnRiM1JsTG5CeWIzUnZkSGx3WlM1blpYUXNYRzVjYmx4MEx5b3FYRzVjZENBcUlGTmhkbVZ6SUdFZ1ptbHNaU0IwYnlCMGFHVWdZbUZqYTJWdVpDNWNibHgwSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdacGJHVWdMU0JCYmlCdlltcGxZM1FnZDJsMGFDQnVZVzFsSUNZZ1pHRjBZU0JyWlhselhHNWNkQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUVFZ2NISnZiV2x6WlNCMGFHRjBJSEpsYzI5c2RtVnpJSGRvWlc0Z2RHaGxJR1pwYkdVZ2FYTWdjMkYyWldRdVhHNWNkQ0FxTDF4dVhIUndkWFE2SUdaMWJtTjBhVzl1S0dacGJHVXBJSHRjYmx4MFhIUm1hV3hsTG1SaGRHRWdQU0JYZVhOcFpTNTBiMHBUVDA0b1ptbHNaUzVrWVhSaEtUdGNibHgwWEhSbWFXeGxMbkJoZEdnZ1BTQm1hV3hsTG5CaGRHZ2dmSHdnWENKY0lqdGNibHh1WEhSY2RIWmhjaUJtYVd4bFEyRnNiQ0E5SUdCeVpYQnZjeThrZTNSb2FYTXVkWE5sY201aGJXVjlMeVI3ZEdocGN5NXlaWEJ2ZlM5amIyNTBaVzUwY3k4a2UyWnBiR1V1Y0dGMGFIMWdPMXh1WEc1Y2RGeDBjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNoMGFHbHpMbkpsY0c5SmJtWnZJSHg4SUhSb2FYTXVjbVZ4S0Z3aWRYTmxjaTl5WlhCdmMxd2lMQ0I3WEc1Y2RGeDBYSFJ1WVcxbE9pQjBhR2x6TG5KbGNHOWNibHgwWEhSOUxDQmNJbEJQVTFSY0lpa3BYRzVjZEZ4MExuUm9aVzRvY21Wd2IwbHVabThnUFQ0Z2UxeHVYSFJjZEZ4MGRHaHBjeTV5WlhCdlNXNW1ieUE5SUhKbGNHOUpibVp2TzF4dVhHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN5NXlaWEVvWm1sc1pVTmhiR3dzSUh0Y2JseDBYSFJjZEZ4MGNtVm1PaUIwYUdsekxtSnlZVzVqYUZ4dVhIUmNkRngwZlNrN1hHNWNkRngwZlNsY2JseDBYSFF1ZEdobGJpaG1hV3hsU1c1bWJ5QTlQaUI3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1eVpYRW9abWxzWlVOaGJHd3NJSHRjYmx4MFhIUmNkRngwYldWemMyRm5aVG9nWUZWd1pHRjBaV1FnSkh0bWFXeGxMbTVoYldVZ2ZId2dYQ0ptYVd4bFhDSjlZQ3hjYmx4MFhIUmNkRngwWTI5dWRHVnVkRG9nWW5SdllTaG1hV3hsTG1SaGRHRXBMRnh1WEhSY2RGeDBYSFJpY21GdVkyZzZJSFJvYVhNdVluSmhibU5vTEZ4dVhIUmNkRngwWEhSemFHRTZJR1pwYkdWSmJtWnZMbk5vWVZ4dVhIUmNkRngwZlN3Z1hDSlFWVlJjSWlrN1hHNWNkRngwZlN3Z2VHaHlJRDArSUh0Y2JseDBYSFJjZEdsbUlDaDRhSEl1YzNSaGRIVnpJRDA5SURRd05Da2dlMXh1WEhSY2RGeDBYSFF2THlCR2FXeGxJR1J2WlhNZ2JtOTBJR1Y0YVhOMExDQmpjbVZoZEdVZ2FYUmNibHgwWEhSY2RGeDBjbVYwZFhKdUlIUm9hWE11Y21WeEtHWnBiR1ZEWVd4c0xDQjdYRzVjZEZ4MFhIUmNkRngwYldWemMyRm5aVG9nWENKRGNtVmhkR1ZrSUdacGJHVmNJaXhjYmx4MFhIUmNkRngwWEhSamIyNTBaVzUwT2lCaWRHOWhLR1pwYkdVdVpHRjBZU2tzWEc1Y2RGeDBYSFJjZEZ4MFluSmhibU5vT2lCMGFHbHpMbUp5WVc1amFGeHVYSFJjZEZ4MFhIUjlMQ0JjSWxCVlZGd2lLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlLUzUwYUdWdUtHUmhkR0VnUFQ0Z2UxeHVYSFJjZEZ4MFkyOXVjMjlzWlM1c2IyY29YQ0p6ZFdOalpYTnpYQ0lwTzF4dVhIUmNkSDBwTzF4dVhIUjlMRnh1WEc1Y2RHeHZaMmx1T2lCbWRXNWpkR2x2Ymlod1lYTnphWFpsS1NCN1hHNWNkRngwY21WMGRYSnVJSFJvYVhNdWNtVmhaSGt1ZEdobGJpZ29LU0E5UGlCN1hHNWNkRngwWEhScFppQW9kR2hwY3k1aGRYUm9aVzUwYVdOaGRHVmtLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJQ2h1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzVjZEZ4MFhIUmNkR2xtSUNod1lYTnphWFpsS1NCN1hHNWNkRngwWEhSY2RGeDBkR2hwY3k1aFkyTmxjM05VYjJ0bGJpQTlJR3h2WTJGc1UzUnZjbUZuWlZ0Y0luZDVjMmxsT21kcGRHaDFZblJ2YTJWdVhDSmRPMXh1WEc1Y2RGeDBYSFJjZEZ4MGFXWWdLSFJvYVhNdVlXTmpaWE56Vkc5clpXNHBJSHRjYmx4MFhIUmNkRngwWEhSY2RISmxjMjlzZG1Vb2RHaHBjeTVoWTJObGMzTlViMnRsYmlrN1hHNWNkRngwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBYSFJjZEM4dklGTm9iM2NnZDJsdVpHOTNYRzVjZEZ4MFhIUmNkRngwZEdocGN5NWhkWFJvVUc5d2RYQWdQU0J2Y0dWdUtHQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZiRzluYVc0dmIyRjFkR2d2WVhWMGFHOXlhWHBsUDJOc2FXVnVkRjlwWkQwa2UzUm9hWE11YTJWNWZTWnpZMjl3WlQxeVpYQnZMR2RwYzNRbWMzUmhkR1U5Skh0c2IyTmhkR2x2Ymk1b2NtVm1mV0FzWEc1Y2RGeDBYSFJjZEZ4MFhIUmNJbkJ2Y0hWd1hDSXNJRndpZDJsa2RHZzlPVEF3TEdobGFXZG9kRDAxTURCY0lpazdYRzVjYmx4MFhIUmNkRngwWEhSaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWJXVnpjMkZuWlZ3aUxDQmxkblFnUFQ0Z2UxeHVYSFJjZEZ4MFhIUmNkRngwYVdZZ0tHVjJkQzV6YjNWeVkyVWdQVDA5SUhSb2FYTXVZWFYwYUZCdmNIVndLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSFJvYVhNdVlXTmpaWE56Vkc5clpXNGdQU0JzYjJOaGJGTjBiM0poWjJWYlhDSjNlWE5wWlRwbmFYUm9kV0owYjJ0bGJsd2lYU0E5SUdWMmRDNWtZWFJoTzF4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEdsbUlDZ2hkR2hwY3k1aFkyTmxjM05VYjJ0bGJpa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkSEpsYW1WamRDaEZjbkp2Y2loY0lrRjFkR2hsYm5ScFkyRjBhVzl1SUdWeWNtOXlYQ0lwS1R0Y2JseDBYSFJjZEZ4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RGeDBYSFJjZEhKbGMyOXNkbVVvZEdocGN5NWhZMk5sYzNOVWIydGxiaWs3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwZlNrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMHBLVnh1WEhSY2RGeDBMblJvWlc0b0tDa2dQVDRnZEdocGN5NW5aWFJWYzJWeUtDa3BYRzVjZEZ4MFhIUXVkR2hsYmloMUlEMCtJSHRjYmx4MFhIUmNkRngwZEdocGN5NXdaWEp0YVhOemFXOXVjeTV2YmloY0lteHZaMjkxZEZ3aUtUdGNibHh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdkR2hwY3k1eVpYRW9ZSEpsY0c5ekx5UjdkR2hwY3k1MWMyVnlibUZ0WlgwdkpIdDBhR2x6TG5KbGNHOTlZQ2s3WEc1Y2RGeDBYSFI5S1Z4dVhIUmNkRngwTG5Sb1pXNG9jbVZ3YjBsdVptOGdQVDRnZTF4dVhIUmNkRngwWEhSMGFHbHpMbkpsY0c5SmJtWnZJRDBnY21Wd2IwbHVabTg3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLSEpsY0c5SmJtWnZMbkJsY20xcGMzTnBiMjV6TG5CMWMyZ3BJSHRjYmx4MFhIUmNkRngwWEhSMGFHbHpMbkJsY20xcGMzTnBiMjV6TG05dUtGd2laV1JwZEZ3aUtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmU2xjYmx4MFhIUmNkQzVqWVhSamFDaDRhSElnUFQ0Z2UxeHVYSFJjZEZ4MFhIUnBaaUFvZUdoeUxuTjBZWFIxY3lBOVBTQTBNRFFwSUh0Y2JseDBYSFJjZEZ4MFhIUXZMeUJTWlhCdklHUnZaWE1nYm05MElHVjRhWE4wSUhOdklIZGxJR05oYmlkMElHTm9aV05ySUhCbGNtMXBjM05wYjI1elhHNWNkRngwWEhSY2RGeDBMeThnU25WemRDQmphR1ZqYXlCcFppQmhkWFJvWlc1MGFXTmhkR1ZrSUhWelpYSWdhWE1nZEdobElITmhiV1VnWVhNZ2IzVnlJRlZTVENCMWMyVnlibUZ0WlZ4dVhIUmNkRngwWEhSY2RHbG1JQ2gwYUdsekxuVnpaWEl1Ykc5bmFXNGdQVDBnZEdocGN5NTFjMlZ5Ym1GdFpTa2dlMXh1WEhSY2RGeDBYSFJjZEZ4MGRHaHBjeTV3WlhKdGFYTnphVzl1Y3k1dmJpaGNJbVZrYVhSY0lpazdYRzVjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOUtUdGNibHgwWEhSOUtUdGNibHgwZlN4Y2JseHVYSFJzYjJkdmRYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkR2xtSUNoMGFHbHpMbUYxZEdobGJuUnBZMkYwWldRcElIdGNibHgwWEhSY2RHeHZZMkZzVTNSdmNtRm5aUzV5WlcxdmRtVkpkR1Z0S0Z3aWQzbHphV1U2WjJsMGFIVmlkRzlyWlc1Y0lpazdYRzVjZEZ4MFhIUmtaV3hsZEdVZ2RHaHBjeTVoWTJObGMzTlViMnRsYmp0Y2JseHVYSFJjZEZ4MGRHaHBjeTV3WlhKdGFYTnphVzl1Y3k1dlptWW9XMXdpWldScGRGd2lMQ0JjSW1Ga1pGd2lMQ0JjSW1SbGJHVjBaVndpWFNrdWIyNG9YQ0pzYjJkcGJsd2lLVHRjYmx4dVhIUmNkRngwZEdocGN5NTNlWE5wWlM1M2NtRndjR1Z5TGw4dVptbHlaU2hjSW5kNWMybGxPbXh2WjI5MWRGd2lMQ0I3WW1GamEyVnVaRG9nZEdocGMzMHBPMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvS1R0Y2JseDBmU3hjYmx4dVhIUm5aWFJWYzJWeU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUnlaWFIxY200Z2RHaHBjeTV5WlhFb1hDSjFjMlZ5WENJcExuUm9aVzRvWVdOamIzVnVkRWx1Wm04Z1BUNGdlMXh1WEhSY2RGeDBkR2hwY3k1MWMyVnlJRDBnWVdOamIzVnVkRWx1Wm04N1hHNWNibHgwWEhSY2RIWmhjaUJ1WVcxbElEMGdZV05qYjNWdWRFbHVabTh1Ym1GdFpTQjhmQ0JoWTJOdmRXNTBTVzVtYnk1c2IyZHBianRjYmx4MFhIUmNkSFJvYVhNdWQzbHphV1V1ZDNKaGNIQmxjaTVmTG1acGNtVW9YQ0ozZVhOcFpUcHNiMmRwYmx3aUxDQjdYRzVjZEZ4MFhIUmNkR0poWTJ0bGJtUTZJSFJvYVhNc1hHNWNkRngwWEhSY2RHNWhiV1U2SUdBOFlTQm9jbVZtUFZ3aWFIUjBjSE02THk5bmFYUm9kV0l1WTI5dEx5UjdZV05qYjNWdWRFbHVabTh1Ykc5bmFXNTlYQ0lnZEdGeVoyVjBQVndpWDJKc1lXNXJYQ0krWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRHhwYldjZ1kyeGhjM005WENKaGRtRjBZWEpjSWlCemNtTTlYQ0lrZTJGalkyOTFiblJKYm1adkxtRjJZWFJoY2w5MWNteDlYQ0lnTHo0Z0pIdHVZVzFsZlZ4dVhIUmNkRngwWEhSY2RGeDBQQzloUG1CY2JseDBYSFJjZEgwcE8xeHVYSFJjZEgwcE8xeHVYSFI5TEZ4dVhHNWNkSE4wWVhScFl6b2dlMXh1WEhSY2RIUmxjM1E2SUdaMWJtTjBhVzl1S0hWeWJDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlDOWNYR0puYVhSb2RXSXVLR052Ylh4cGJ5bDhjbUYzTG1kcGRHaDFZblZ6WlhKamIyNTBaVzUwTG1OdmJTOHVkR1Z6ZENoMWNtd3BPMXh1WEhSY2RIMHNYRzVjYmx4MFhIUXZLaXBjYmx4MFhIUWdLaUJRWVhKelpTQkhhWFJvZFdJZ1ZWSk1jeXdnY21WMGRYSnVJSFZ6WlhKdVlXMWxMQ0J5WlhCdkxDQmljbUZ1WTJnc0lIQmhkR2hjYmx4MFhIUWdLaTljYmx4MFhIUndZWEp6WlZWU1REb2dablZ1WTNScGIyNG9kWEpzS1NCN1hHNWNkRngwWEhSMllYSWdjbVYwSUQwZ2UzMDdYRzVjYmx4MFhIUmNkSFZ5YkNBOUlHNWxkeUJWVWt3b2RYSnNMQ0JzYjJOaGRHbHZiaWs3WEc1Y2JseDBYSFJjZEhaaGNpQndZWFJvSUQwZ2RYSnNMbkJoZEdodVlXMWxMbk5zYVdObEtERXBMbk53YkdsMEtGd2lMMXdpS1R0Y2JseHVYSFJjZEZ4MGFXWWdLQzluYVhSb2RXSXVhVzhrTHk1MFpYTjBLSFZ5YkM1b2IzTjBLU2tnZTF4dVhIUmNkRngwWEhSeVpYUXVkWE5sY201aGJXVWdQU0IxY213dWFHOXpkQzV0WVhSamFDZ3ZLRnRjWEhjdFhTc3BYRnd1WjJsMGFIVmlYRnd1YVc4a0x5bGJNVjA3WEc1Y2RGeDBYSFJjZEhKbGRDNWljbUZ1WTJnZ1BTQmNJbWRvTFhCaFoyVnpYQ0k3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFJsYkhObElIdGNibHgwWEhSY2RGeDBjbVYwTG5WelpYSnVZVzFsSUQwZ2NHRjBhQzV6YUdsbWRDZ3BPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJ5WlhRdWNtVndieUE5SUhCaGRHZ3VjMmhwWm5Rb0tUdGNibHh1WEhSY2RGeDBhV1lnS0M5eVlYY3VaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0SkM4dWRHVnpkQ2gxY213dWFHOXpkQ2twSUh0Y2JseDBYSFJjZEZ4MGNtVjBMbUp5WVc1amFDQTlJSEJoZEdndWMyaHBablFvS1R0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdWc2MyVWdhV1lnS0M5bmFYUm9kV0l1WTI5dEpDOHVkR1Z6ZENoMWNtd3VhRzl6ZENrZ0ppWWdjR0YwYUZzd1hTQTlQU0JjSW1Kc2IySmNJaWtnZTF4dVhIUmNkRngwWEhSd1lYUm9Mbk5vYVdaMEtDazdYRzVjZEZ4MFhIUmNkSEpsZEM1aWNtRnVZMmdnUFNCd1lYUm9Mbk5vYVdaMEtDazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEM1bWFXeGxibUZ0WlNBOUlIQmhkR2hiY0dGMGFDNXNaVzVuZEdnZ0xTQXhYVHRjYmx4dVhIUmNkRngwY21WMExuQmhkR2dnUFNCd1lYUm9MbXB2YVc0b1hDSXZYQ0lwTzF4dVhHNWNkRngwWEhSeVpYUjFjbTRnY21WME8xeHVYSFJjZEgxY2JseDBmVnh1ZlNrc0lIUnlkV1VwTzF4dVhHNTlLU2hDYkdsemN5azdYRzRpWFN3aWMyOTFjbU5sVW05dmRDSTZJaTl6YjNWeVkyVXZJbjA9XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
