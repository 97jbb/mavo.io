{
	"page": [
		{
			"id": "migration",
			"title": "Data Migration",
			"summary": "Often you want to change your Mavo HTML after youâ€™ve saved data.\nMavo will try its best to associate your old data with your new app, but it may sometimes need a helping hand.",
			"section": [
				{
					"id": "single-property-collection",
					"title": "Single property â†” Collection",
					"content": "When converting a single property to/from a collection (i.e. adding or removing `mv-multiple`), you donâ€™t need to do anything, Mavo automatically handles it.\n\nIf you are **removing** `mv-multiple` and your data contains multiple items, Mavo will only display the first item. However, the rest will be retained, in case you change your mind later.\n\t"
				},
				{
					"id": "adding-or-removing-properties",
					"title": "Adding or removing properties",
					"content": "Adding and removing properties from your HTML also works automatically. In the case of removing a property from your HTML, its saved data will be retained, in case you change your mind in the future. Therefore, if you decide to re-add it later, its data will still be there."
				},
				{
					"id": "mv-alias",
					"title": "Renaming properties: The mv-alias attribute",
					"content": "When you rename properties, your old data is still stored under the previous property name and Mavo has no way of associating the two, since it cannot \"see\" the previous version of your HTML, only the current one. You could help it rename the property by using `mv-alias=\"oldPropertyName\"`. Then, to migrate your data, load your app, save, and then you can remove the `mv-alias` attribute from your HTML."
				}
			]
		},
		{
			"id": "plugins",
			"title": "Writing Plugins",
			"summary": "If you know JavaScript, you can make [plugins](http://plugins.mavo.io) that extend Mavoâ€™s functionality and change how it works.",
			"section": [
				{
					"id": "overview",
					"title": "Overview",
					"content": "Mavo was designed for extensibility from the beginning. There are both high level extensibility points for things that are most commonly extended (such as adding a new backend, or registering a new element type), but there are also _hooks_ in strategic places, as low-level extensibility points that allow you to **add your own code to Mavoâ€™s internals**."
				},
				{
					"id": "declaring-a-plugin",
					"title": "Declaring a plugin",
					"content": "You need to call `Mavo.Plugins.register(PLUGIN_ID)`, where _PLUGIN_ID_ is an alphanumeric unique name for your plugin (e.g. `\"clear\"` or `\"locale-el\"`). People will be using this id in the `mv-plugins` attribute, so pick a good one!\n\nName your file `mavo-PLUGIN_ID.js` so that `mv-plugins` knows where to find it.\n\nThis is the minium required, but `Mavo.Plugins.register()` also provides other conveniences which you can read about in the [API Documentation](/docs/api/#Mavo.Plugins).\n\nOnce your plugin is ready, donâ€™t forget to add it to the [Plugin Directory](https://plugins.mavo.io) and help others too!"
				},
				{
					"id": "high-level-extension-points",
					"title": "High-level extension points",
					"content": "If your plugin is about one of the following things, you donâ€™t need to become fully accustomed with Mavoâ€™s internals, you just call the corresponding method and/or create the required class.\n\n*   [Adding a new type of storage backend](/docs/storage/#creating-your-own-storage-backend)\n*   [Adding a new data format](/docs/formats/#creating-your-own-formats)\n*   **Adding a new element type:** `Mavo.Elements.register()`, details coming soon\n*   **Adding a new toolbar button:** Add a new property on `Mavo.UI.Bar.controls`, details coming soon\n*   **Adding a new MavoScript function:** Add a new function on `Mavo.Functions`"
				},
				{
					"id": "hooks",
					"title": "Hooks",
					"content": "Hooks are used as ways to execute custom code during various points of Mavo's execution. The name of the hook gives a summary of where the hook will be executed and usually follows the scheme `\"CLASS_NAME-METHOD_NAME-LOCATION\"`.\n\nSome examples:\n\n| Hook name | Executes | Definition |\n| --- | --- | --- |\n| `init-start` | At the start of the `Mavo` constructor, after a few properties have been initialized. | [mavo.js](https://github.com/mavoweb/mavo/blob/master/src/mavo.js#L58) |\n| `node-init-start` | At the start of the `Mavo.Node` constructor, after a few properties have been initialized. | [node.js](https://github.com/mavoweb/mavo/blob/master/src/node.js#L45) |\n| `group-init-start` | At the start of the `Mavo.Group` constructor, after its parent constructor (`Mavo.Node`) has been called. | [group.js](https://github.com/mavoweb/mavo/blob/master/src/group.js#L11) |\n| `node-getdata-end` | Called right before `getData()` returns its value, to give plugins a chance to intercept and manipulate it. Note that a hook can be called multiple times in different places. | [collection.js](https://github.com/mavoweb/mavo/blob/master/src/collection.js#L80) [group.js](https://github.com/mavoweb/mavo/blob/master/src/group.js#L125) [primitive.js](https://github.com/mavoweb/mavo/blob/master/src/primitive.js#L236) |\n\nNote: Links to the source code might not link to the exact hook definition as the code changes. Look a few lines above or below, it should be close.\n\n## Adding code to a hook\n\nYou can add a hook by calling `Mavo.hooks.add(\"hook-name\", callback)`. If you have multiple hooks, you can also pass an object, like so:\n\n```\n\n\t\t\tMavo.hooks.add({\n\t\t\t\t\"hook1-name\": function(env) {\n\t\t\t\t\t// hook 1 callback\n\t\t\t\t},\n\t\t\t\t\"hook2-name\": function(env) {\n\t\t\t\t\t// hook 2 callback\n\t\t\t\t}\n\t\t\t});\n\n```\n\nYou could also add code to hooks as one of the options in `Mavo.Plugins.register()`:\n\n```\n\n\t\t\tMavo.plugins.register(\"myplugin\", {\n\t\t\t\thooks: {\n\t\t\t\t\t\"hook1-name\": function(env) {\n\t\t\t\t\t\t// hook 1 callback\n\t\t\t\t\t},\n\t\t\t\t\t\"hook2-name\": function(env) {\n\t\t\t\t\t\t// hook 2 callback\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n```\n\nThe `env` object differs depending on the hook. For hooks run in instance methods of classes, `env` is an object that contains references to all important local variables so you can modify them in your plugin. If there are none, it just refers to the current instance. The context of the function (the `this` variable) is the current instance. This means that you could use a custom build of Mavo to experiment, then copy over your code to hooks without having to make changes to it.\n\n## Available hooks\n\nMavo calls `Mavo.hooks.run(\"hook-name\", data)` to run the code added at a hook. Therefore, you can [search Mavoâ€™s code for `Mavo.hooks.run(`](https://github.com/mavoweb/mavo/search?utf8=%E2%9C%93&q=Mavo.hooks.run%28&type=) and you will find all available hooks as well as where in the code they are executed.\n\nYou never need to run `Mavo.hooks.run()` yourself, unless you want to create hooks for your own plugin, i.e. allow other people to create plugins of your plugin (\"metaplugins\"? \"pluginception\"? ðŸ˜œ). In that case please prefix the hook names with your plugin id, to prevent collisions with other plugins.\n\n## Limitations\n\nHooks cannot change the return value of a function, unless the calling code has enabled that via a property on `env`. For example, in the `node-getdata-end` hook described above, all you need to do to change the return value is modify `env.data`.\n\nIn the future this may become possible, so avoid returning non-undefined values from your callbacks to make sure your plugin doesnâ€™t break when this is enabled.\n\n## Need a hook that doesnâ€™t exist yet?\n\n[Let us know](https://github.com/mavoweb/mavo/issues/new) and chances are weâ€™ll add it pretty soon. Make sure to describe what youâ€™re trying to do!"
				}
			],
			"defaultLanguage": "javascript"
		},
		{
			"id": "formats",
			"title": "Storage Formats",
			"summary": "By default, Mavo saves and reads data in JSON. While you donâ€™t need to understand JSON to use Mavo, you may need to use a different file format at some point.  This is exactly what `mv-format` is for.",
			"section": [
				{
					"id": "basic-usage",
					"title": "Basic usage",
					"content": "You can select a file format in one of two ways:\n\n1.  _Explicitly_, by using the `mv-format` attribute on your Mavo root. Its value is a keyword, depending on the format, e.g. `text`, `markdown`, `csv` etc.\n2.  _Implicitly_, depending on the extension of your file in `mv-storage`. E.g. if you use a URL to a CSV file, Mavo will automatically use the CSV format.\n\nOften, you need to specify a different format for the `mv-storage`, `mv-source`, and `mv-init` attributes. You can do this by using the `mv-storage-format`, `mv-source-format`, and `mv-init-format` attributes respectively.",
					"advanced": false
				},
				{
					"id": "available-formats",
					"title": "Available formats",
					"content": "Mavo comes with some formats out of the box, but you can add more via [Plugins](https://plugins.mavo.io/?tag=Format). Read the documenation of the format youâ€™re using carefully, because formats may come with restrictions about the structure of your properties. These restrictions are only about which properties will be used for displaying and saving data. If you have more properties in your Mavo, they will just be ignored. For example, you can have additional properties that are read-only or contain expressions.\n\n# CSV\n\nUses the popular [PapaParse](http://papaparse.com/) library for reading and writing CSV, fetched dynamically via [cdnjs](https://cdnjs.com/).\n\n| | |\n|------|------|\n| Keyword | `csv` |\n| File extensions | *.csv, *.tsv |\n| Restrictions | Only one collection. Property names inside collection must correspond to headers in CSV file. |\n\n# Text\n\n| | |\n|------|------|\n| Keyword | `text` |\n| File extensions | *.txt |\n| Restrictions | Only one property. |",
					"advanced": false
				},
				{
					"id": "creating-your-own-formats",
					"title": "Creating your own formats",
					"content": "To create your own formats, all you need is to create a class that extends from `Mavo.Formats.Base`. For information on how the `$.Class()` class helper works, look in [Blissâ€™ documentation](http://blissfuljs.com/docs.html#fn-Class).\n\n```\n\n\t\tMavo.Formats.MyFormat = $.Class({\n\t\t\t// Mandatory. You may instead extend another format, e.g. Mavo.Formats.Text\n\t\t\textends: Mavo.Formats.Base,\n\n\t\t\t// Initialization code (optional)\n\t\t\tconstructor: function(backend) {\n\t\t\t\t// ...\n\t\t\t},\n\n\t\t\tstatic: {\n\t\t\t\t// File extensions\n\t\t\t\textensions: [\".foo\", \".bar\"],\n\n\t\t\t\t// Any dependencies (optional)\n\t\t\t\tdependencies: [{\n\t\t\t\t\ttest: () => \"CoolLibrary\" in window, // is the library already loaded?\n\t\t\t\t\turl: \"URL/to/library\" // URL to fetch if the library is not loaded\n\t\t\t\t}],\n\n\t\t\t\t// must specify this if youâ€™re using dependencies\n\t\t\t\tready: Mavo.Formats.Base.ready,\n\n\t\t\t\t// Mandatory: Convert a string to an object for rendering\n\t\t\t\t// serialized: The string, as it was read from the remote file\n\t\t\t\t// me: Instance of Mavo.MyFormat, optional\n\t\t\t\tparse: function (serialized, me) {\n\t\t\t\t\t// ...\n\t\t\t\t},\n\n\t\t\t\t// Mandatory: Convert an object to a string for saving\n\t\t\t\t// data: The object\n\t\t\t\t// me: Instance of Mavo.MyFormat, optional\n\t\t\t\tstringify: function (data, me) {\n\t\t\t\t\t// ...\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n```\n\nYou can see examples of format declarations in [src/formats.js](https://github.com/mavoweb/mavo/blob/master/src/formats.js)\n\nIf your format may be useful to other people, please consider adding it to the [Plugin directory](https://plugins.mavo.io)!",
					"advanced": true
				}
			],
			"language": "markup"
		}
	]
}