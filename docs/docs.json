{
	"page": [
		{
			"id": "migration",
			"title": "Data Migration",
			"summary": "Often you want to change your Mavo HTML after youâ€™ve saved data.\nMavo will try its best to associate your old data with your new app, but it may sometimes need a helping hand.",
			"section": [
				{
					"id": "single-property-collection",
					"title": "Single property â†” Collection",
					"content": "When converting a single property to/from a collection (i.e. adding or removing `mv-multiple`), you donâ€™t need to do anything, Mavo automatically handles it.\n\nIf you are **removing** `mv-multiple` and your data contains multiple items, Mavo will only display the first item. However, the rest will be retained, in case you change your mind later.\n\t"
				},
				{
					"id": "adding-or-removing-properties",
					"title": "Adding or removing properties",
					"content": "Adding and removing properties from your HTML also works automatically. In the case of removing a property from your HTML, its saved data will be retained, in case you change your mind in the future. Therefore, if you decide to re-add it later, its data will still be there."
				},
				{
					"id": "mv-alias",
					"title": "Renaming properties: The mv-alias attribute",
					"content": "When you rename properties, your old data is still stored under the previous property name and Mavo has no way of associating the two, since it cannot \"see\" the previous version of your HTML, only the current one. You could help it rename the property by using `mv-alias=\"oldPropertyName\"`. Then, to migrate your data, load your app, save, and then you can remove the `mv-alias` attribute from your HTML."
				}
			]
		},
		{
			"id": "plugins",
			"title": "Writing Plugins",
			"summary": "If you know JavaScript, you can make [plugins](http://plugins.mavo.io) that extend Mavoâ€™s functionality and change how it works.",
			"section": [
				{
					"id": "overview",
					"title": "Overview",
					"content": "Mavo was designed for extensibility from the beginning. There are both high level extensibility points for things that are most commonly extended (such as adding a new backend, or registering a new element type), but there are also _hooks_ in strategic places, as low-level extensibility points that allow you to **add your own code to Mavoâ€™s internals**."
				},
				{
					"id": "declaring-a-plugin",
					"title": "Declaring a plugin",
					"content": "You need to call `Mavo.Plugins.register(PLUGIN_ID)`, where _PLUGIN_ID_ is an alphanumeric unique name for your plugin (e.g. `\"clear\"` or `\"locale-el\"`). People will be using this id in the `mv-plugins` attribute, so pick a good one!\n\nName your file `mavo-PLUGIN_ID.js` so that `mv-plugins` knows where to find it.\n\nThis is the minium required, but `Mavo.Plugins.register()` also provides other conveniences which you can read about in the [API Documentation](/docs/api/#Mavo.Plugins).\n\nOnce your plugin is ready, donâ€™t forget to add it to the [Plugin Directory](https://plugins.mavo.io) and help others too!"
				},
				{
					"id": "high-level-extension-points",
					"title": "High-level extension points",
					"content": "If your plugin is about one of the following things, you donâ€™t need to become fully accustomed with Mavoâ€™s internals, you just call the corresponding method and/or create the required class.\n\n*   [Adding a new type of storage backend](/docs/storage/#creating-your-own-storage-backend)\n*   [Adding a new data format](/docs/formats/#creating-your-own-formats)\n*   **Adding a new element type:** `Mavo.Elements.register()`, details coming soon\n*   **Adding a new toolbar button:** Add a new property on `Mavo.UI.Bar.controls`, details coming soon\n*   **Adding a new MavoScript function:** Add a new function on `Mavo.Functions`"
				},
				{
					"id": "hooks",
					"title": "Hooks",
					"content": "Hooks are used as ways to execute custom code during various points of Mavo's execution. The name of the hook gives a summary of where the hook will be executed and usually follows the scheme `\"CLASS_NAME-METHOD_NAME-LOCATION\"`.\n\nSome examples:\n\n| Hook name | Executes | Definition |\n| --- | --- | --- |\n| `init-start` | At the start of the `Mavo` constructor, after a few properties have been initialized. | [mavo.js](https://github.com/mavoweb/mavo/blob/master/src/mavo.js#L58) |\n| `node-init-start` | At the start of the `Mavo.Node` constructor, after a few properties have been initialized. | [node.js](https://github.com/mavoweb/mavo/blob/master/src/node.js#L45) |\n| `group-init-start` | At the start of the `Mavo.Group` constructor, after its parent constructor (`Mavo.Node`) has been called. | [group.js](https://github.com/mavoweb/mavo/blob/master/src/group.js#L11) |\n| `node-getdata-end` | Called right before `getData()` returns its value, to give plugins a chance to intercept and manipulate it. Note that a hook can be called multiple times in different places. | [collection.js](https://github.com/mavoweb/mavo/blob/master/src/collection.js#L80) [group.js](https://github.com/mavoweb/mavo/blob/master/src/group.js#L125) [primitive.js](https://github.com/mavoweb/mavo/blob/master/src/primitive.js#L236) |\n\nNote: Links to the source code might not link to the exact hook definition as the code changes. Look a few lines above or below, it should be close.\n\n## Adding code to a hook\n\nYou can add a hook by calling `Mavo.hooks.add(\"hook-name\", callback)`. If you have multiple hooks, you can also pass an object, like so:\n\n```\n\n\t\t\tMavo.hooks.add({\n\t\t\t\t\"hook1-name\": function(env) {\n\t\t\t\t\t// hook 1 callback\n\t\t\t\t},\n\t\t\t\t\"hook2-name\": function(env) {\n\t\t\t\t\t// hook 2 callback\n\t\t\t\t}\n\t\t\t});\n\n```\n\nYou could also add code to hooks as one of the options in `Mavo.Plugins.register()`:\n\n```\n\n\t\t\tMavo.plugins.register(\"myplugin\", {\n\t\t\t\thooks: {\n\t\t\t\t\t\"hook1-name\": function(env) {\n\t\t\t\t\t\t// hook 1 callback\n\t\t\t\t\t},\n\t\t\t\t\t\"hook2-name\": function(env) {\n\t\t\t\t\t\t// hook 2 callback\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n```\n\nThe `env` object differs depending on the hook. For hooks run in instance methods of classes, `env` is an object that contains references to all important local variables so you can modify them in your plugin. If there are none, it just refers to the current instance. The context of the function (the `this` variable) is the current instance. This means that you could use a custom build of Mavo to experiment, then copy over your code to hooks without having to make changes to it.\n\n## Available hooks\n\nMavo calls `Mavo.hooks.run(\"hook-name\", data)` to run the code added at a hook. Therefore, you can [search Mavoâ€™s code for `Mavo.hooks.run(`](https://github.com/mavoweb/mavo/search?utf8=%E2%9C%93&q=Mavo.hooks.run%28&type=) and you will find all available hooks as well as where in the code they are executed.\n\nYou never need to run `Mavo.hooks.run()` yourself, unless you want to create hooks for your own plugin, i.e. allow other people to create plugins of your plugin (\"metaplugins\"? \"pluginception\"? ðŸ˜œ). In that case please prefix the hook names with your plugin id, to prevent collisions with other plugins.\n\n## Limitations\n\nHooks cannot change the return value of a function, unless the calling code has enabled that via a property on `env`. For example, in the `node-getdata-end` hook described above, all you need to do to change the return value is modify `env.data`.\n\nIn the future this may become possible, so avoid returning non-undefined values from your callbacks to make sure your plugin doesnâ€™t break when this is enabled.\n\n## Need a hook that doesnâ€™t exist yet?\n\n[Let us know](https://github.com/mavoweb/mavo/issues/new) and chances are weâ€™ll add it pretty soon. Make sure to describe what youâ€™re trying to do!"
				}
			],
			"defaultLanguage": "javascript"
		},
		{
			"id": "formats",
			"title": "Storage Formats",
			"summary": "By default, Mavo saves and reads data in JSON. While you donâ€™t need to understand JSON to use Mavo, you may need to use a different file format at some point.  This is exactly what `mv-format` is for.",
			"section": [
				{
					"id": "basic-usage",
					"title": "Basic usage",
					"content": "You can select a file format in one of two ways:\n\n1.  _Explicitly_, by using the `mv-format` attribute on your Mavo root. Its value is a keyword, depending on the format, e.g. `text`, `markdown`, `csv` etc.\n2.  _Implicitly_, depending on the extension of your file in `mv-storage`. E.g. if you use a URL to a CSV file, Mavo will automatically use the CSV format.\n\nOften, you need to specify a different format for the `mv-storage`, `mv-source`, and `mv-init` attributes. You can do this by using the `mv-storage-format`, `mv-source-format`, and `mv-init-format` attributes respectively.",
					"advanced": false
				},
				{
					"id": "available-formats",
					"title": "Available formats",
					"content": "Mavo comes with some formats out of the box, but you can add more via [Plugins](https://plugins.mavo.io/?tag=Format). Read the documenation of the format youâ€™re using carefully, because formats may come with restrictions about the structure of your properties. These restrictions are only about which properties will be used for displaying and saving data. If you have more properties in your Mavo, they will just be ignored. For example, you can have additional properties that are read-only or contain expressions.\n\n# CSV\n\nUses the popular [PapaParse](http://papaparse.com/) library for reading and writing CSV, fetched dynamically via [cdnjs](https://cdnjs.com/).\n\n| | |\n|------|------|\n| Keyword | `csv` |\n| File extensions | *.csv, *.tsv |\n| Restrictions | Only one collection. Property names inside collection must correspond to headers in CSV file. |\n\n# Text\n\n| | |\n|------|------|\n| Keyword | `text` |\n| File extensions | *.txt |\n| Restrictions | Only one property. |",
					"advanced": false
				},
				{
					"id": "creating-your-own-formats",
					"title": "Creating your own formats",
					"content": "To create your own formats, all you need is to create a class that extends from `Mavo.Formats.Base`. For information on how the `$.Class()` class helper works, look in [Blissâ€™ documentation](http://blissfuljs.com/docs.html#fn-Class).\n\n```\n\n\t\tMavo.Formats.MyFormat = $.Class({\n\t\t\t// Mandatory. You may instead extend another format, e.g. Mavo.Formats.Text\n\t\t\textends: Mavo.Formats.Base,\n\n\t\t\t// Initialization code (optional)\n\t\t\tconstructor: function(backend) {\n\t\t\t\t// ...\n\t\t\t},\n\n\t\t\tstatic: {\n\t\t\t\t// File extensions\n\t\t\t\textensions: [\".foo\", \".bar\"],\n\n\t\t\t\t// Any dependencies (optional)\n\t\t\t\tdependencies: [{\n\t\t\t\t\ttest: () => \"CoolLibrary\" in window, // is the library already loaded?\n\t\t\t\t\turl: \"URL/to/library\" // URL to fetch if the library is not loaded\n\t\t\t\t}],\n\n\t\t\t\t// must specify this if youâ€™re using dependencies\n\t\t\t\tready: Mavo.Formats.Base.ready,\n\n\t\t\t\t// Mandatory: Convert a string to an object for rendering\n\t\t\t\t// serialized: The string, as it was read from the remote file\n\t\t\t\t// me: Instance of Mavo.MyFormat, optional\n\t\t\t\tparse: function (serialized, me) {\n\t\t\t\t\t// ...\n\t\t\t\t},\n\n\t\t\t\t// Mandatory: Convert an object to a string for saving\n\t\t\t\t// data: The object\n\t\t\t\t// me: Instance of Mavo.MyFormat, optional\n\t\t\t\tstringify: function (data, me) {\n\t\t\t\t\t// ...\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n```\n\nYou can see examples of format declarations in [src/formats.js](https://github.com/mavoweb/mavo/blob/master/src/formats.js)\n\nIf your format may be useful to other people, please consider adding it to the [Plugin directory](https://plugins.mavo.io)!",
					"advanced": true
				}
			],
			"language": "markup"
		},
		{
			"id": "ui",
			"title": "UI Customization",
			"summary": "Almost all of the UI generated by Mavo is customizable. Find out how in this section.",
			"section": [
				{
					"id": "styling-with-css",
					"advanced": false,
					"title": "Styling with CSS",
					"content": "The easiest way to customize the UI is via CSS. You can find many style hooks in the [index](/docs).\n\nSome examples for common cases follow:\n\n# Style differently in edit mode\n\nGive an element with `property=\"foo\"` a yellow background when it is in edit mode:\n\n```css\n\n\t\t[property=\"foo\"][mv-mode=\"edit\"] {\n\t\t\tbackground: yellow;\n\t\t}\n\n```\n\n# Show something only to logged in users\n\n`mv-permissions` is an attribute set by Mavo on the Mavo root containing a space-separated list of available permissions. When a Mavo allows login but the current user is not logged in, `mv-permissions` will include the value `login`. You can use this in your CSS to style things differently based on whether the current user is logged in.\n\nFor example, let's say you have an `auth` class and you want to only show anything with that class to authenticated users. You can do this with this CSS:\n\n```css\n\n\t\t[mv-permissions~=\"login\"] .auth {\n\t\t\tdisplay: none;\n\t\t}\n\n```\n\nNote the [`~=` in the attribute selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors) above. This allows you to match for one value in a space-separated list, instead of the entire attribute.\n\nFor convenience, there are also `mv-logged-in` and `mv-logged-out` classes that you can use on your HTML to show things only to logged in or logged out users respectively."
				},
				{
					"id": "bar",
					"advanced": false,
					"title": "Mavo toolbar",
					"content": "The Mavo toolbar is the dark toolbar that you get by default on every Mavo app, with controls like Edit, Save, Clear etc. By default it is added inside the Mavo root, at the beginning.\n\n# The mv-bar attribute: Remove buttons, enable optional buttons, change order, hide the toolbar\n\nThe `mv-bar` attribute controls which buttons are going to appear, if any. Itâ€™s typically specified on the Mavo root. Buttons are represented by their ids. You can find the ids of the built-in buttons below, but keep in mind that [Plugins](https://plugins.mavo.io) may add more:\n\n| id | Default? | Button |\n| --- | --- | --- |\n| status | âœ“ | Displays currently logged in info for backends that support login |\n| edit | âœ“ | Edit button |\n| save | âœ“ | Save button |\n| import | | Upload a JSON file and override current data. |\n| export | | Download current data as a JSON file. |\n| login | âœ“ | Login button |\n| logout | âœ“ | Logout button |\n\nJust including a series of ids in the `mv-bar` attribute **restricts the toolbar to these buttons, in that order**.\n\n##### Example\n\n```html\n<div mv-app mv-storage=\"local\" mv-bar=\"import export edit save\">\n\t<div property=\"name\">Lea</div>\n</div>\n```\n\nHowever, often we only want to **add or remove a few buttons to the default set**. With the syntax above, we would need to remember all default ids and their default order in order to specify the buttons we want. This is why `mv-bar` also supports a **relative** syntax: by starting the value with `with` all values are interpreted as relative to the default set of buttons. You can then remove buttons by using a `no-` prefix and add buttons by just specifying their ids.\n\nNote that the edit button is still there, even though we didn't have to explicitly specify it.\n\n##### Example\n\n```html\n<div mv-app mv-storage=\"local\" mv-bar=\"with import export no-save\"> \n\t<div property=\"name\">Lea</div>\n</div>\n```\n\nNote: The `with` keyword can be omitted if thereâ€™s at least one `no-*`.\n\nTip: Want to **hide the Mavo bar from logged out users**? Use `mv-bar=\"no-login\"`. You can still log in without a Mavo toolbar, by adding `?login` to the page URL. Note that browsers often block popups more aggressively when they are not triggered by a click so you may need to manually approve the authentication popup when using this.\n\n# Hide the toolbar completely\n\nUse `mv-bar=\"none\"`. You can then use classes like `mv-status`, `mv-edit`, `mv-save`, `mv-clear`, `mv-login`, `mv-logout` etc on your own buttons to provide the corresponding functionality. However, note that if you choose to go this route, **these buttons will be always shown**, regardless of whether the user has permission for the corresponding action. You can use an `mv-permissions` attribute selector to fix this.\n\n# Change its placement and/or use your own HTML element for it\n\nJust use `class=\"mv-bar mv-ui\"` on your desired element.\n\n##### Example\n\n```html\n<div mv-app mv-storage=\"local\">\n\t<div class=\"mv-bar mv-ui\" style=\"background: blue\">\n\t\tYOLO\n\t</div>\n\t<div property=\"name\">Lea</div>\n</div>\n```\n\n# Remove default styling\n\nFollow the process above for using a custom toolbar element, and omit the `mv-ui` class:\n\n##### Example\n\n```html\n<div mv-app mv-storage=\"local\"> \n\t<div class=\"mv-bar\">YOLO</div> \n\t<div property=\"name\">Lea</div> \n</div>\n```\n\nThis is useful when you want a completely different styling and would rather start from a blank state. You can see a real example of custom toolbar styling on the [SVG Paths](/demos/svgpath) demo.\n\n# Custom button elements\n\nFollow the process above for using a custom toolbar element, and include your custom button inside it with the appropriate `mv-BUTTON_ID` class. For example, to have a Save button with the text \"Store\" instead of \"Save\", you could do:\n\n##### Example\n\n```html\n<div mv-app mv-storage=\"local\">\n\t<div class=\"mv-bar mv-ui\">\n\t\t<button class=\"mv-save\">Store</button>\n\t</div>\n\t<div property=\"name\">Lea</div>\n</div>\n```"
				},
				{
					"id": "item-controls",
					"advanced": false,
					"title": "Item controls",
					"content": "These are the buttons that Mavo adds to each collection item for deleting it, moving it, or adding items before/after it. By default they are added as the last child of the collection item.\n\nTo change the placement of their container and/or use your own HTML element for it, just use `class=\"mv-item-bar mv-ui\"` on your desired element. Note that if you have nested collections, this will be associated with the collection that is the closest ancestor of the element.\n\nSimilarly to the Mavo toolbar, if you donâ€™t want any of the default styling associated with these controls just omit the `mv-ui` class."
				},
				{
					"id": "add-new-item-button",
					"advanced": false,
					"title": "Add new item button",
					"content": "For every collection, a button to add new items is generated and placed before the collection if it has `mv-order=\"desc\"` or after it otherwise. The default label of the button is of the form \"Add [name]\", where _[name]_ is the name of your collection.\n\nOften you may want a custom label or a custom placement for this button. You can do this by using a class of `mv-add-PROPERTY_NAME` on your desired element, where _PROPERTY_NAME_ is the name of the collection you wish to associate it with. Alternatively, if the association is obvious, you can just use a class of `mv-add` instead.\n\nBoth of these classes are also present on the generated buttons and you can use them for styling."
				},
				{
					"id": "localization",
					"advanced": false,
					"title": "Customizing Text & Localization",
					"content": "Your app needs to be in a different language? No problem! You can customize every bit of displayed text, whether that is to change the text displayed to your liking or to localize it to a different language.\n\n# Localization\n\nFirst check the [available locale plugins](https://plugins.mavo.io/?tag=Locale) in case your language is available. If not, you would have to write one yourself, using the methods outlined below.\n\n# Customizing text via HTML\n\nYou can use a `<datalist>` element to define your own phrases or localize text. The syntax is:\n\n```html\n<datalist class=\"mv-phrases\" lang=\"en\"> \n\t<option value=\"id\">Phrase text</option>\n\t...\n</datalist>\n```\n\nPlease note that the `lang` attribute is mandatory, even if youâ€™re only overriding a few English phrases. Please note that `lang` is not a Mavo attribute, itâ€™s an HTML attribute and its values are described in any HTML documentation.\n\nWarning: Please try to avoid locales with hyphens unless you absolutely need to. E.g. it's better to define a general French (`lang=\"fr\"`) locale and another Canadian French (QuÃ©bÃ©cois) locale (`lang=\"fr-ca\"`) with only the phrases that are different. The reason is that any French dialect can fall back to general French, but not to a specific dialect of French, which means that even if you have defined a locale for `fr-ca`, apps with `lang=\"fr\"` will be displayed in English.\n\nWarning: Please note that this datalist element is **static**, i.e. changes to its contents via scripts or expressions will not be picked up.\n\nFor a list of ids and phrases that you can copy as a starting point, use [src/locale.en.js](https://github.com/mavoweb/mavo/blob/master/src/locale.en.js), however note that plugins can also define their own phrases.\n\n# Advanced: Customizing text via JavaScript\n\nYou can write your own localization plugin, by using `Mavo.Locale.register(languageCode, phrases)`. For an example, you can look at the [Greek localization plugin](https://plugins.mavo.io/locale-el/mavo-locale-el.js).\n\nIf you go that route, please consider adding your plugin to the [Plugins directory](https://plugins.mavo.io) so that others can benefit too! Donâ€™t worry if it's not perfect, others can improve it via pull requests!"
				}
			]
		},
		{
			"id": "primer",
			"title": "Primer",
			"language": "markup",
			"section": [
				{
					"id": "using-mavo",
					"advanced": false,
					"title": "Using Mavo",
					"content": "In order to use Mavo, you first need to [download or link to its JS and CSS files](/get) and include them in your page. If you have never done this before, you could put both in the `<head>` section, like this:\n\n```html\n<head>\n\t...\n\t<link rel=\"stylesheet\" href=\"https://get.mavo.io/mavo.css\"/>\n\t<script src=\"https://get.mavo.io/mavo.js\">&lt;/script>\n\t...\n</head>\n```"
				},
				{
					"id": "mv-app",
					"advanced": false,
					"title": "Defining a mavo app: The mv-app attribute",
					"content": "You enable Mavo functionality on an HTML structure with the `mv-app` attribute. Its value is a name for your app, which is used by Mavo in various places. The name must be unique to the page, just like an id. The element with that attribute is called the **Mavo root**.\n\n##### Example\n\n```html\n<div mv-app=\"mavoTest\">\n\tMy first Mavo app!\n</div>\n```\n\nNote that `mv-app` doesnâ€™t really do much by itself. You can see how you can use Mavo attributes to do more useful things in the next sections.\n\nThe `mv-app` attribute can be used with or without a value. If the element already has an id, you don't need to repeat it in the `mv-app` attribute:\n\n```html\n<div mv-app id=\"mavoTest\">\n\tMy first Mavo app!\n</div>\n```\n\nIf you use `mv-app` without a value and there is no `id` or `name` attribute on the Mavo root, a name such as mavo1, mavo2 etc will be automatically generated. Since the generated name depends on the order of Mavo apps in the page, this means that if you rearrange them, the app names will change, which is flimsy and could lead to data loss. Therefore, it is **strongly recommended** that you name your Mavo apps."
				},
				{
					"id": "mv-storage",
					"advanced": false,
					"title": "Storage: The mv-storage attribute",
					"content": "The `mv-storage` attribute tells Mavo where to store any data. Its value is a valid URL or a keyword, like `local`.\n\n```html\n<div mv-app=\"storageTest\" mv-storage=\"local\">\n\tMy first Mavo app!\n</div>\n```\n\nWhat will be stored? Elements with a `property` attribute! We will learn about these in the next section.\n\n<p class=\"learn-more\">[Storage](/docs/storage)"
				},
				{
					"id": "the-property-attribute",
					"advanced": false,
					"title": "The property attribute",
					"content": "The `property` attribute tells Mavo **which elements are saved**. Its value should describe the element, similarly to a `id` or `class` attribute.\n\n##### Example\n\n```html\n<div mv-app=\"commentform\" mv-storage=\"local\" mv-autosave=\"0\">\n\t<label>\n\t\tEmail:\n\t\t<input type=\"email\" property=\"email\" value=\"foo@example.com\" />\n\t</label>\n\t<label>\n\t\tMessage:\n\t\t<textarea property=\"message\">\n\t\t\tEdit the form and notice how the values persist after you refresh!\n\t\t</textarea>\n\t</label>\n</div>\n```\n\nIf the `property` attribute is used on elements that are not form elements, they are made editable, and Mavo generates (customizable) controls for switching between edit and read mode:\n\n##### Example\n\n```html\n<div mv-app=\"nameDemo\" mv-storage=\"local\">\n\tName:\n\t<span property=\"firstName\">Lea</span>\n\t<span property=\"last_name\">Verou</span>\n</div>\n```\n\n<p class=\"learn-more\">[Properties](/docs/properties)"
				},
				{
					"id": "mv-multiple",
					"advanced": false,
					"title": "Collections: The mv-multiple attribute",
					"content": "Letâ€™s assume we have a list of hobbies that we want to make editable. We _could_ add `property` attributes to every item:\n\n##### Example\n\n```html\nHobbies:\n<ul>\n\t<li property=\"hobby\">Eating</li>\n\t<li property=\"hobby\">Sleeping</li>\n\t<li property=\"hobby\">Purring</li>\n</ul>\n```\n\nThis works, but we cannot add new hobbies or delete existing ones. To do that, we need the `mv-multiple` attribute, which tells mavo that **this element can be multiplied**:\n\n##### Example: Simple collection\n\n```html\nHobbies:\n<ul>\n\t<li property=\"hobby\" mv-multiple>Eating</li>\n</ul>\n```\n\nNote: The `mv-multiple` attribute goes on **the element that will be multiplied, NOT the container of the collection**!\n\n* * *\n\nWe can use `property` and `mv-multiple` to create lists of more complex structures with multiple properties.\n\n##### Example: Complex collection\n\n```html\n<article property=\"pet\" mv-multiple>\n\t<h1 property=\"name\">Adam Catlace</h1>\n\tBorn on\n\t<time property=\"birthday\" datetime=\"2014-06-01\">1 Jun 2014</time>\n</article>\n```\n\nNote that in the example above, the `property` attribute on `<article>` does not actually make the entire `<article>` element editable, but instead acts as a **grouping element**. This will always happen when you use the `property` attribute on elements that contain other properties inside them. **Groups** have many interesting characteristics when combined with expressions, which we will see next.\n\n<p class=\"learn-more\">[Collections](/docs/collections)"
				}
			]
		}
	]
}