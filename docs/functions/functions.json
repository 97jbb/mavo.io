{
	"function": [
		{
			"name": "+",
			"category": "math",
			"role": "operator",
			"description": "Addition",
			"argument": [
				{
					"optional": false
				}
			],
			"id": "+",
			"unary": false
		},
		{
			"id": "-",
			"name": "-",
			"category": "math",
			"role": "operator",
			"description": "Subtraction",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": "*",
			"name": "*",
			"category": "math",
			"role": "operator",
			"description": "Multiplication",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": "/",
			"name": "/",
			"category": "math",
			"role": "operator",
			"description": "Division",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": "<",
			"name": "<",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is smaller than b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": ">",
			"name": ">",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is greater than b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": "<=",
			"name": "<=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is smaller than or equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": ">=",
			"name": ">=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is greater than or equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": "=",
			"name": "=",
			"category": "logical",
			"role": "operator",
			"description": "Check if a is equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": "!=",
			"name": "!=",
			"category": "logical",
			"role": "operator",
			"description": "Check that a is *not* equal to b",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"id": "!",
			"name": "!",
			"category": "logical",
			"role": "operator",
			"description": "Check if a does not have a value",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": true
		},
		{
			"name": "and",
			"id": "and",
			"category": "logical",
			"role": "operator",
			"argument": [
				{
					"optional": false
				}
			],
			"description": "Check that both a and b have a value",
			"unary": false
		},
		{
			"name": "or",
			"id": "or",
			"category": "logical",
			"role": "operator",
			"description": "Check that at least a or b have a value",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"name": "where",
			"id": "where",
			"category": "lists",
			"role": "operator",
			"description": "Filter a based on b. Both a and b should be lists.",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"name": "&",
			"id": "&",
			"category": "text",
			"role": "operator",
			"description": "Join two pieces of text, e.g. 'cat' & 's' becomes 'cats'",
			"argument": [
				{
					"optional": false
				}
			],
			"unary": false
		},
		{
			"name": "list",
			"id": "list",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Creates a list of values, just like the kind of thing you get when you use collection properties (or properties inside them).",
			"argument": [
				{
					"name": "value1",
					"optional": false,
					"description": "First value"
				},
				{
					"name": "value2",
					"optional": true,
					"description": "Second value"
				},
				{
					"name": "...",
					"optional": false,
					"description": "You can provide as many as you want"
				}
			],
			"returnType": "List",
			"returnDescription": "A list with all values you provided."
		},
		{
			"name": "group",
			"id": "group",
			"unary": false,
			"category": "other",
			"role": "function",
			"description": "Creates data that mimics the kind of data produced by a group. ",
			"argument": [
				{
					"name": "key1: value1",
					"optional": false,
					"type": "Key:value pair or group data",
					"description": "First key-value pair or other group data."
				},
				{
					"name": "key2: value2",
					"optional": true,
					"type": "Key:value pair or group data",
					"description": "Second key-value pair or other group data."
				},
				{
					"name": "...",
					"optional": false,
					"description": "You can provide as many as you want"
				}
			],
			"returnType": "Group data"
		},
		{
			"name": "average",
			"id": "average",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the average of all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers to average"
				}
			],
			"returnType": "Number",
			"returnDescription": "The average"
		},
		{
			"name": "sum",
			"id": "sum",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Sum all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers to sum"
				}
			],
			"returnType": "Number",
			"returnDescription": "The sum"
		},
		{
			"name": "min",
			"id": "min",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Calculate the minimum of all numbers in the list.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List of numbers",
					"description": "The numbers you are trying to find the min of."
				}
			],
			"returnType": "Number",
			"returnDescription": "The minimum number"
		},
		{
			"name": "count",
			"category": "lists",
			"role": "function",
			"description": "Count how many items in a list actually have a value. Ignores 0, false, \"\", empty.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list of values to count."
				}
			],
			"returnType": "Number",
			"returnDescription": "The count",
			"id": "count",
			"unary": false
		},
		{
			"name": "first",
			"id": "first",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Get the first item(s) in a list of values.",
			"argument": [
				{
					"name": "n",
					"optional": true,
					"type": "Number",
					"description": "How many items to return? Defaults to 1."
				},
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to return items from."
				}
			],
			"returnDescription": "If n is not provided or is 1, the first item. Otherwise, a list of the first n items."
		},
		{
			"name": "last",
			"id": "last",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Get the last item(s) in a list of values.",
			"argument": [
				{
					"name": "n",
					"optional": true,
					"type": "Number",
					"description": "How many items to return? Defaults to 1."
				},
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to return items from."
				}
			],
			"returnDescription": "If n is not provided or is 1, the last item. Otherwise, a list of the first n items."
		},
		{
			"name": "shuffle",
			"id": "shuffle",
			"unary": false,
			"category": "lists",
			"role": "function",
			"description": "Shuffle the list, i.e. randomize the order of items.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The list to shuffle."
				}
			],
			"returnDescription": "A new, shuffled version of the list provided."
		},
		{
			"name": "join",
			"id": "join",
			"unary": false,
			"category": "text",
			"role": "function",
			"description": "Combine multiple values into one text value, optionally separated by a different text value.",
			"argument": [
				{
					"name": "list",
					"optional": false,
					"type": "List",
					"description": "The pieces you want to join"
				},
				{
					"name": "glue",
					"optional": true,
					"type": "Text",
					"description": "What to put between the joined pieces of text. Defaults to nothing, i.e. the pieces are just concatenated. Provide `', '` to get a comma-separated list."
				}
			],
			"returnType": "Text"
		},
		{
			"name": "random",
			"id": "random",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Generate a random number.",
			"argument": [
				{
					"name": "min",
					"optional": true,
					"type": "Number",
					"description": "Minimum allowed number. Defaults to 0."
				},
				{
					"name": "max",
					"optional": true,
					"type": "Number",
					"description": "Maximum allowed number. Defaults to 100."
				},
				{
					"name": "step",
					"optional": true,
					"type": "Number",
					"description": "Step, i.e. allowed increment. Defaults to 1, which returns integers."
				}
			],
			"returnType": "Number",
			"returnDescription": "The random number."
		},
		{
			"name": "year",
			"id": "year",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get the year of a date/time as a 4 digit number.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose year we want to get."
				}
			],
			"returnType": "Number"
		},
		{
			"name": "month",
			"id": "month",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get the month of a date/time as a number from 1 to 12. You can add `.name` to the returned value to get the month name (e.g. \"February\"). You can also use `.shortname` to get a shorter name, like \"Feb\". Both of these are dependent on the document language.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose month we want to get."
				}
			],
			"returnType": "Number"
		},
		{
			"name": "weekday",
			"id": "weekday",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get the weekday of a date/time as a number from 1 to 7. You can add `.name` to the returned value to get the weekday name (e.g. \"Monday\"), dependent on the document language.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose weekday we want to get."
				}
			],
			"returnType": "Number"
		},
		{
			"name": "day",
			"id": "day",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get the weekday of a date/time as a number from 1 to 31.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose day we want to get."
				}
			],
			"returnType": "Number"
		},
		{
			"name": "hour",
			"id": "hour",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get the hour of a date/time as a number from 0 to 23.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Datetime",
					"description": "The date/time whose hour we want to get."
				}
			],
			"returnType": "Number"
		},
		{
			"name": "minute",
			"id": "minute",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get the minute of a date/time as a number from 0 to 59.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose minute we want to get."
				}
			],
			"returnType": "Number"
		},
		{
			"name": "second",
			"id": "second",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get the seconds of a date/time as a number from 0 to 59.",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time whose seconds we want to get."
				}
			]
		},
		{
			"name": "date",
			"id": "date",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get a date (without time) in ISO format (e.g. 1986-13-06).",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time that we want to format"
				}
			],
			"returnType": "Text"
		},
		{
			"name": "time",
			"id": "time",
			"unary": false,
			"category": "math",
			"role": "function",
			"description": "Get a the time part of a date/time (without date information) in ISO format (e.g. 13:00).",
			"argument": [
				{
					"name": "date",
					"optional": false,
					"type": "Date/Time",
					"description": "The date/time that we want to format"
				}
			],
			"returnType": "Text"
		},
		{
			"name": "seconds",
			"id": "seconds",
			"unary": false,
			"category": "math",
			"role": "function",
			"argument": [
				{
					"optional": false
				}
			]
		},
		{
			"name": "minutes",
			"id": "minutes",
			"unary": false,
			"category": "math",
			"role": "function",
			"argument": [
				{
					"optional": false
				}
			]
		},
		{
			"name": "hours",
			"id": "hours",
			"unary": false,
			"category": "math",
			"role": "function",
			"argument": [
				{
					"optional": false
				}
			]
		},
		{
			"name": "days",
			"id": "days",
			"unary": false,
			"category": "math",
			"role": "function",
			"argument": [
				{
					"optional": false
				}
			]
		},
		{
			"name": "weeks",
			"id": "weeks",
			"unary": false,
			"category": "math",
			"role": "function",
			"argument": [
				{
					"optional": false
				}
			]
		},
		{
			"name": "months",
			"id": "months",
			"unary": false,
			"category": "math",
			"role": "function",
			"argument": [
				{
					"optional": false
				}
			]
		},
		{
			"name": "$now",
			"category": "datetime",
			"role": "variable",
			"description": "Current date and time as number of milliseconds since January 1st, 1970. Note that using `$now` in expressions makes them update automatically as `$now` changes. Mostly useful in conjunction with [date and time functions](?category=datetime) or the `mod` operator.",
			"argument": [
				{
					"optional": false
				}
			],
			"demo": "# Example: $now\n\nColor clock that circles all hues every minute.\n\n```html\n<div mv-app=colorClock  style=\"background: hsl([hue], 100%, 80%)\">\n\t<span property=\"hue\">[$now * 6 / 1000 mod 360]</span>\n\t<time>[time($now)]</time>\n</div>\n<style>\nbody {\n\tfont: bold 100% Helvetica Neue, sans-serif;\n\tmargin: 0;\n}\n\ndiv { \n\tdisplay: flex;\n\tflex-flow: column;\n\theight: 100vh;\n\tpadding: 1em;\n\tbox-sizing: border-box;\n}\n\ntime {\n\tfont-size: 500%;\n\tflex: 1;\n}\n\nspan {\n\topacity: .5;\n}\n</style>\n```",
			"id": "$now",
			"unary": false
		}
	]
}